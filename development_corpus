package net . <unk> . <unk> . db ;
import java . util . HashSet ;
import java . util . Set ;
import java . util . Vector ;
import javax . swing . JComboBox ;
import javax . swing . event . TableModelEvent ;
import javax . swing . event . TableModelListener ;
import javax . swing . table . TableModel ;
import net . <unk> . <unk> . <unk> . <unk> ;
public class Results extends Vector < Result > implements TableModel
{
private static final long serialVersionUID = <num> ;
private Vector < String > columnNames ;
private Table details ;
public Results ( Vector < String > columnNames )
{
this . columnNames = columnNames ;
}
public void <unk> ( Table details )
{
this . details = details ;
}
@Override
public int getRowCount ( )
{
return size ( ) + ( details . <unk> ( " ) ? <num> : <num> ) ;
}
@Override
public int getColumnCount ( )
{
return columnNames . size ( )  <num> ;
}
@Override
public String getColumnName ( int columnIndex )
{
String str = columnNames . get ( columnIndex + <num> ) . replace ( " , " ) ;
if ( str . length ( ) == <num> )
return str . toUpperCase ( ) ;
return str . substring ( <num> , <num> ) . toUpperCase ( ) + str . substring ( <num> ) ;
}
@Override
public Class < ? > getColumnClass ( int columnIndex )
{
try
{
if ( columnNames . get ( columnIndex + <num> ) . endsWith ( " ) )
return JComboBox . class ;
if ( details == Table . <unk> && ( columnNames . get ( columnIndex + <num> ) . equalsIgnoreCase ( " ) || columnNames . get ( columnIndex + <num> ) . equalsIgnoreCase ( " ) ) )
return Boolean . class ;
return getValueAt ( <num> , columnIndex ) . getClass ( ) ;
}
catch ( Exception e )
{
return String . class ;
}
}
@Override
public boolean isCellEditable ( int rowIndex , int columnIndex )
{
if ( ! details . <unk> ( " ) )
return false ;
return details . <unk> ( rowIndex < size ( ) ? get ( rowIndex ) : null , getColumnName ( columnIndex ) . toLowerCase ( ) ) ;
}
@Override
public Object getValueAt ( int rowIndex , int columnIndex )
{
try
{
Object o = get ( rowIndex ) . get ( String . valueOf ( columnIndex + <num> ) ) ;
if ( details == Table . <unk> && ( columnNames . get ( columnIndex + <num> ) . equalsIgnoreCase ( " ) || columnNames . get ( columnIndex + <num> ) . equalsIgnoreCase ( " ) ) )
return <num> == ( ( Integer ) o ) ;
return o ;
}
catch ( Exception e )
{
return null ;
}
}
@Override
public void setValueAt ( Object aValue , int rowIndex , int columnIndex )
{
if ( details == null )
throw new IllegalStateException ( " ) ;
if ( aValue instanceof <unk> )
aValue = ( ( <unk> ) aValue ) . getID ( ) ;
else if ( aValue instanceof Boolean )
aValue = ( Boolean ) aValue == Boolean . TRUE ? <num> : <num> ;
Result result = rowIndex < size ( ) ? get ( rowIndex ) : null ;
if ( result == null || result . get ( " ) == null )
{
if ( result == null )
{
result = new Result ( ) ;
add ( result ) ;
}
result . put ( String . valueOf ( columnIndex + <num> ) , aValue ) ;
result . put ( columnNames . get ( columnIndex + <num> ) , aValue ) ;
try
{
for ( int i = <num> ; i < columnNames . size ( ) ; ++ i )
{
String columnName = columnNames . get ( i ) ;
if ( result . get ( columnName ) == null )
if ( details == Table . <unk> && ( columnNames . get ( i ) . equalsIgnoreCase ( " ) || columnNames . get ( i ) . equalsIgnoreCase ( " ) ) )
{
result . put ( columnName , <num> ) ;
result . put ( String . valueOf ( i ) , <num> ) ;
}
else if ( ! details . <unk> ( columnName ) )
throw new Exception ( columnName + " ) ;
}
set ( rowIndex , details . insert ( columnNames , result ) ) ;
}
catch ( RuntimeException e )
{
e . printStackTrace ( ) ;
}
catch ( Exception e )
{
}
for ( TableModelListener l : listener )
{
l . tableChanged ( new TableModelEvent ( this , rowIndex ) ) ;
}
}
else
{
if ( details . update ( result , columnNames . get ( columnIndex + <num> ) , aValue ) )
{
result . put ( String . valueOf ( columnIndex + <num> ) , aValue ) ;
result . put ( columnNames . get ( columnIndex + <num> ) , aValue ) ;
for ( TableModelListener l : listener )
{
l . tableChanged ( new TableModelEvent ( this , rowIndex ) ) ;
}
}
else
throw new RuntimeException ( " + details . toString ( ) . toLowerCase ( ) ) ;
}
}
private Set < TableModelListener > listener = new HashSet < TableModelListener > ( ) ;
@Override
public void addTableModelListener ( TableModelListener l )
{
listener . add ( l ) ;
}
@Override
public void <unk> ( TableModelListener l )
{
listener . remove ( l ) ;
}
public void removeRow ( int row )
{
Result result = row < size ( ) ? get ( row ) : null ;
if ( result != null )
{
if ( ! details . remove ( result ) )
throw new RuntimeException ( " ) ;
}
remove ( row ) ;
for ( TableModelListener l : listener )
l . tableChanged ( new TableModelEvent ( this , row , row , TableModelEvent . ALL_COLUMNS , TableModelEvent . DELETE ) ) ;
}
public Results <unk> ( String columnName )
{
return details . <unk> ( columnName ) ;
}
}
package net . <unk> . <unk> . db ;
import java . sql . PreparedStatement ;
import java . sql . ResultSet ;
import java . sql . ResultSetMetaData ;
import java . sql . SQLException ;
import java . util . Vector ;
import static net . <unk> . <unk> . <unk> . G . db ;
public class <unk>
{
private PreparedStatement statement ;
public <unk> ( PreparedStatement statement )
{
this . statement = statement ;
}
public boolean <unk> ( Object . . . objects )
{
try
{
for ( int i = <num> ; i < objects . length ; i ++ ) {
statement . setObject ( i + <num> , objects [ i ] ) ;
}
statement . executeUpdate ( ) ;
return true ;
}
catch ( SQLException e )
{
e . printStackTrace ( ) ;
return false ;
}
}
public Results <unk> ( Object . . . objects )
{
ResultSet resultSet = null ;
try
{
for ( int i = <num> ; i < objects . length ; i ++ ) {
statement . setObject ( i + <num> , objects [ i ] ) ;
}
resultSet = statement . executeQuery ( ) ;
ResultSetMetaData metadata = resultSet . getMetaData ( ) ;
Vector < String > columnNames = new Vector < String > ( ) ;
columnNames . add ( " ) ;
for ( int i = <num> ; i <= metadata . getColumnCount ( ) ; ++ i ) {
columnNames . add ( metadata . getColumnName ( i ) ) ;
}
Results results = new Results ( columnNames ) ;
while ( resultSet . next ( ) )
{
Result result = new Result ( ) ;
for ( int i = <num> ; i <= metadata . getColumnCount ( ) ; ++ i ) {
result . put ( String . valueOf ( i ) , resultSet . getObject ( i ) ) ;
result . put ( metadata . getColumnName ( i ) , resultSet . getObject ( i ) ) ;
}
results . add ( result ) ;
}
return results ;
}
catch ( SQLException e )
{
e . printStackTrace ( ) ;
return null ;
}
finally
{
if ( resultSet != null )
{
try
{
resultSet . close ( ) ;
}
catch ( SQLException e )
{
}
}
}
}
public Result <unk> ( Object . . . objects )
{
Results results = <unk> ( objects ) ;
if ( results . size ( ) > <num> )
return results . get ( <num> ) ;
return null ;
}
public Integer executeInsert ( Object . . . objects )
{
try
{
for ( int i = <num> ; i < objects . length ; i ++ ) {
statement . setObject ( i + <num> , objects [ i ] ) ;
}
statement . executeUpdate ( ) ;
ResultSet resultSet = statement . getGeneratedKeys ( ) ;
resultSet . next ( ) ;
return resultSet . getInt ( <num> ) ;
}
catch ( SQLException e )
{
return null ;
}
}
public void close ( )
{
try
{
statement . close ( ) ;
db . <unk> ( this ) ;
}
catch ( SQLException e )
{
}
}
}
package net . <unk> . <unk> . db ;
import static net . <unk> . <unk> . <unk> . G . db ;
import java . util . Vector ;
public class <unk> extends <unk>
{
@Override
public <unk> <unk> ( String where , Object . . . objects )
{
if ( where != null )
throw new RuntimeException ( " + where ) ;
return db . prepare ( " ) ;
}
@Override
public <unk> <unk> ( String columnName )
{
return db . prepare ( " ) ;
}
@Override
public boolean <unk> ( String columnName )
{
return false ;
}
@Override
public Result insert ( Vector < String > columnNames , Result result )
{
String name = result . getString ( " ) ;
if ( <unk> ( name ) )
throw new RuntimeException ( " ) ;
String password = result . getString ( " ) ;
if ( <unk> ( password ) )
throw new RuntimeException ( " ) ;
int <unk> = result . getInt ( " ) ;
String <unk> = null ;
<unk> p = <unk> ( " ) ;
for ( Result r : p . <unk> ( ) )
{
if ( r . getInt ( " ) == <unk> )
{
<unk> = r . getString ( " ) ;
break ;
}
}
p . close ( ) ;
if ( <unk> == null )
throw new RuntimeException ( " + <unk> ) ;
p = db . prepare ( " + name + " + password + " + name + " + name + " ) ;
boolean success = db . transaction ( p ) ;
p . close ( ) ;
if ( ! success )
throw new RuntimeException ( " ) ;
<unk> ( name , <unk> , false ) ;
if ( <unk> . equals ( " ) )
{
<unk> ( name , " , true ) ;
}
p = db . prepare ( " ) ;
Result r = p . <unk> ( name ) ;
p . close ( ) ;
return r ;
}
private void <unk> ( String username , String <unk> , boolean server )
{
<unk> p ;
if ( server )
p = db . prepare ( " + username + " + <unk> + " ) ;
else
p = db . prepare ( " + <unk> + " + username + " ) ;
db . transaction ( p ) ;
p . close ( ) ;
}
private void <unk> ( String username , String <unk> , boolean server )
{
<unk> p ;
if ( server )
p = db . prepare ( " + username + " + <unk> + " ) ;
else
p = db . prepare ( " + <unk> + " + username + " ) ;
db . transaction ( p ) ;
p . close ( ) ;
}
private boolean <unk> ( String str )
{
char [ ] chars = str . toLowerCase ( ) . toCharArray ( ) ;
for ( int i = <num> ; i < chars . length ; ++ i )
if ( chars [ i ] < a' || chars [ i ] > z' )
if ( chars [ i ] < <num>  || chars [ i ] > <num>  )
return true ;
return false ;
}
@Override
public boolean update ( Result result , String column , Object value )
{
String name = result . getString ( " ) ;
if ( " . equals ( column ) )
{
<unk> p = <unk> ( " ) ;
for ( Result r : p . <unk> ( ) )
{
Integer id = r . getInt ( " ) ;
String <unk> = r . getString ( " ) ;
if ( id . equals ( value ) )
<unk> ( name , <unk> , false ) ;
else
<unk> ( name , <unk> , false ) ;
if ( <unk> . equals ( " ) )
{
if ( id . equals ( value ) )
<unk> ( name , " , true ) ;
else
<unk> ( name , " , true ) ;
}
}
p . close ( ) ;
return true ;
}
else if ( " . equals ( column ) )
{
if ( <unk> ( ( String ) value ) )
throw new RuntimeException ( " ) ;
String x = " + name + " + ( String ) value + " ;
System . out . println ( x ) ;
<unk> p = db . prepare ( x ) ;
boolean success = p . <unk> ( ) ;
p . close ( ) ;
return success ;
}
throw new RuntimeException ( " + column ) ;
}
@Override
public boolean remove ( Result result )
{
String name = result . getString ( " ) ;
if ( name . equalsIgnoreCase ( " ) )
return false ;
<unk> p = db . prepare ( " + name + " + name + " ) ;
boolean success = db . transaction ( p ) ;
p . close ( ) ;
return success ;
}
@Override
public boolean <unk> ( Result result , String columnName )
{
if ( result != null )
{
if ( result . getString ( " ) . equalsIgnoreCase ( " ) )
return false ;
if ( " . equalsIgnoreCase ( columnName ) && result . getInt ( " ) != null )
return false ;
}
return true ;
}
@Override
public boolean <unk> ( String what )
{
<unk> prepared = db . prepare ( " ) ;
Result result = prepared . <unk> ( ) ;
prepared . close ( ) ;
return result . getInt ( " ) > <num> ;
}
}
package net . <unk> . <unk> . db ;
import java . io . File ;
import java . sql . Connection ;
import java . sql . DriverManager ;
import java . sql . SQLException ;
import java . sql . Statement ;
import java . util . Arrays ;
import java . util . HashMap ;
import java . lang . reflect . Field ;
import net . <unk> . <unk> . <unk> . Config ;
public class Database
{
private HashMap < <unk> , String > <unk> = new HashMap < <unk> , String > ( ) ;
private Connection con = null ;
public void <unk> ( String server , String username , String password ) throws InstantiationException , IllegalAccessException , ClassNotFoundException , SQLException
{
if ( username == null || username . length ( ) == <num> || password == null || password . length ( ) == <num> )
throw new SQLException ( " ) ;
<unk> ( server , username , password ) ;
}
public void <unk> ( String server ) throws InstantiationException , IllegalAccessException , ClassNotFoundException , SQLException
{
<unk> ( server , null , null ) ;
}
private void <unk> ( String server , String username , String password ) throws InstantiationException , IllegalAccessException , ClassNotFoundException , SQLException
{
try
{
if ( con != null )
con . close ( ) ;
}
catch ( SQLException e )
{
e . printStackTrace ( ) ;
}
Class . forName ( " ) . newInstance ( ) ;
<unk> ( ) ;
String <unk> = " + server + " + Config . getDatabaseName ( ) ;
con = DriverManager . getConnection ( <unk> , username , password ) ;
}
private void <unk> ( )
{
String <unk> = null ;
try
{
System . loadLibrary ( " ) ;
<unk> = new File ( " , " ) . getAbsolutePath ( ) ;
}
catch ( UnsatisfiedLinkError e )
{
System . loadLibrary ( " ) ;
<unk> = new File ( " , " ) . getAbsolutePath ( ) ;
}
try
{
Field <unk> = ClassLoader . class . getDeclaredField ( " ) ;
<unk> . setAccessible ( true ) ;
final String [ ] paths = ( String [ ] ) <unk> . get ( null ) ;
for ( String path : paths ) {
if ( path . equals ( <unk> ) ) {
return ;
}
}
final String [ ] newPaths = Arrays . copyOf ( paths , paths . length + <num> ) ;
newPaths [ newPaths . length  <num> ] = <unk> ;
<unk> . set ( null , newPaths ) ;
}
catch ( NoSuchFieldException e )
{
}
catch ( SecurityException e )
{
}
catch ( IllegalArgumentException e )
{
}
catch ( IllegalAccessException e )
{
}
}
public void disconnect ( )
{
if ( con != null )
try
{
if ( <unk> . size ( ) > <num> )
{
System . out . println ( " + <unk> . size ( ) + " ) ;
for ( String statement : <unk> . values ( ) )
System . out . println ( " + statement ) ;
}
con . close ( ) ;
}
catch ( SQLException e )
{
e . printStackTrace ( ) ;
}
}
public <unk> prepare ( String sql )
{
try
{
<unk> p = new <unk> ( con . prepareStatement ( sql , sql . startsWith ( " ) ? Statement . RETURN_GENERATED_KEYS : Statement . <unk> ) ) ;
<unk> . put ( p , sql ) ;
return p ;
}
catch ( SQLException e )
{
e . printStackTrace ( ) ;
return null ;
}
}
public boolean transaction ( <unk> prepared )
{
boolean autoCommit = true ;
try
{
autoCommit = con . getAutoCommit ( ) ;
}
catch ( SQLException e )
{
e . printStackTrace ( ) ;
return false ;
}
try
{
con . setAutoCommit ( false ) ;
boolean retVal = prepared . <unk> ( ) ;
con . commit ( ) ;
con . setAutoCommit ( autoCommit ) ;
return retVal ;
}
catch ( SQLException e )
{
e . printStackTrace ( ) ;
try
{
con . rollback ( ) ;
}
catch ( SQLException e2 )
{
e2 . printStackTrace ( ) ;
}
return false ;
}
finally
{
try
{
con . setAutoCommit ( autoCommit ) ;
}
catch ( SQLException e )
{
e . printStackTrace ( ) ;
}
}
}
void <unk> ( <unk> p )
{
<unk> . remove ( p ) ;
}
}
package net . <unk> . <unk> . db ;
import static net . <unk> . <unk> . <unk> . G . db ;
import java . util . Vector ;
public class <unk> extends <unk>
{
private int <unk> ;
@Override
public <unk> <unk> ( String where , Object . . . objects )
{
if ( where == null )
throw new RuntimeException ( " ) ;
<unk> = ( int ) objects [ <num> ] ;
return db . prepare ( " + getTableName ( ) + " + where ) ;
}
@Override
public <unk> <unk> ( String columnName )
{
if ( " . equals ( columnName ) )
{
return db . prepare ( " ) ;
}
else if ( " . equals ( columnName ) )
{
return db . prepare ( " ) ;
}
throw new RuntimeException ( " + columnName ) ;
}
@Override
public boolean <unk> ( Result result , String columnName )
{
return " . equalsIgnoreCase ( columnName ) ;
}
@Override
public boolean <unk> ( String columnName )
{
return ! " . equalsIgnoreCase ( columnName ) ;
}
@Override
public Result insert ( Vector < String > columnNames , Result result )
{
<unk> p = db . prepare ( " + getTableName ( ) + " ) ;
boolean success = p . <unk> ( result . getInt ( " ) , <unk> ) ;
p . close ( ) ;
if ( success )
{
result . put ( " , <unk> ) ;
return result ;
}
return null ;
}
@Override
public boolean update ( Result result , String column , Object value )
{
<unk> p = db . prepare ( " + getTableName ( ) + " + column + " ) ;
boolean success = p . <unk> ( value , result . getInt ( " ) , result . getInt ( " ) ) ;
p . close ( ) ;
return success ;
}
@Override
public boolean remove ( Result result )
{
Integer auto = result . getInt ( " ) , best = result . getInt ( " ) ;
if ( auto == null || best == null )
return false ;
<unk> p = db . prepare ( " + getTableName ( ) + " ) ;
boolean success = p . <unk> ( auto , best ) ;
p . close ( ) ;
return success ;
}
@Override
public boolean <unk> ( String what )
{
<unk> prepared = db . prepare ( " ) ;
Result result = prepared . <unk> ( getTableName ( ) , what ) ;
prepared . close ( ) ;
return result . getInt ( " ) > <num> ;
}
}
package net . <unk> . <unk> . <unk> ;
import java . awt . Component ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import java . awt . print . <unk> ;
import java . util . HashMap ;
import javax . swing . <unk> ;
import javax . swing . DefaultListSelectionModel ;
import javax . swing . JComboBox ;
import javax . swing . JPanel ;
import javax . swing . JScrollPane ;
import javax . swing . JTable ;
import javax . swing . event . ListSelectionEvent ;
import javax . swing . event . ListSelectionListener ;
import javax . swing . table . DefaultTableCellRenderer ;
import javax . swing . table . <unk> ;
import javax . swing . table . <unk> ;
import net . <unk> . <unk> . db . Result ;
import net . <unk> . <unk> . db . Results ;
import net . <unk> . <unk> . db . Table ;
import net . miginfocom . swing . MigLayout ;
import javax . swing . JButton ;
import static net . <unk> . <unk> . <unk> . G . main ;
public class <unk> extends JPanel
{
private static final long serialVersionUID = <num> ;
private JTable table ;
public <unk> ( Table details ) {
this ( details , details . <unk> ( ) ) ;
}
public <unk> ( Table details , Results model )
{
setLayout ( new MigLayout ( " , " , " ) ) ;
JScrollPane scrollPane = new JScrollPane ( ) ;
add ( scrollPane , " ) ;
table = new <unk> ( model ) ;
table . <unk> ( JTable . <unk> ) ;
scrollPane . setViewportView ( table ) ;
if ( details . <unk> ( " ) )
{
final JButton <unk> = new JButton ( " ) ;
<unk> . addActionListener ( new ActionListener ( )
{
@Override
public void actionPerformed ( ActionEvent e )
{
int [ ] rows = table . <unk> ( ) ;
Results results = ( Results ) table . getModel ( ) ;
for ( int i = rows . length  <num> ; i >= <num> ;  i )
{
int row = rows [ i ] ;
results . removeRow ( row ) ;
}
table . setModel ( results ) ;
}
} ) ;
add ( <unk> , " ) ;
<unk> . setEnabled ( false ) ;
table . getSelectionModel ( ) . addListSelectionListener ( new ListSelectionListener ( )
{
@Override
public void valueChanged ( ListSelectionEvent e )
{
<unk> . setEnabled ( ! ( ( DefaultListSelectionModel ) e . getSource ( ) ) . isSelectionEmpty ( ) ) ;
}
} ) ;
}
JButton <unk> = new JButton ( " ) ;
<unk> . addActionListener ( new ActionListener ( )
{
@Override
public void actionPerformed ( ActionEvent e )
{
try {
table . print ( ) ;
} catch ( <unk> e1 ) {
}
}
} ) ;
add ( <unk> , " ) ;
if ( details == Table . <unk> )
{
final JButton <unk> = new JButton ( " ) ;
<unk> . addActionListener ( new ActionListener ( )
{
@Override
public void actionPerformed ( ActionEvent e )
{
int row = table . getSelectedRow ( ) ;
if ( row >= <num> )
{
Result result = ( ( Results ) table . getModel ( ) ) . get ( row ) ;
main . <unk> ( new <unk> ( Table . <unk> , Table . <unk> . <unk> ( " , result . getInt ( " ) ) ) ) ;
}
}
} ) ;
add ( <unk> , " ) ;
<unk> . setEnabled ( false ) ;
table . getSelectionModel ( ) . addListSelectionListener ( new ListSelectionListener ( )
{
@Override
public void valueChanged ( ListSelectionEvent e )
{
DefaultListSelectionModel source = ( DefaultListSelectionModel ) e . getSource ( ) ;
<unk> . setEnabled ( ! source . isSelectionEmpty ( ) && source . <unk> ( ) == source . <unk> ( ) ) ;
}
} ) ;
}
if ( details == Table . <unk> )
{
final JButton <unk> = new JButton ( " ) ;
<unk> . addActionListener ( new ActionListener ( )
{
@Override
public void actionPerformed ( ActionEvent e )
{
int row = table . getSelectedRow ( ) ;
if ( row >= <num> )
{
Result result = ( ( Results ) table . getModel ( ) ) . get ( row ) ;
main . <unk> ( new <unk> ( Table . <unk> , Table . <unk> . <unk> ( " , result . getInt ( " ) ) ) ) ;
}
}
} ) ;
add ( <unk> , " ) ;
<unk> . setEnabled ( false ) ;
table . getSelectionModel ( ) . addListSelectionListener ( new ListSelectionListener ( )
{
@Override
public void valueChanged ( ListSelectionEvent e )
{
DefaultListSelectionModel source = ( DefaultListSelectionModel ) e . getSource ( ) ;
<unk> . setEnabled ( ! source . isSelectionEmpty ( ) && source . <unk> ( ) == source . <unk> ( ) ) ;
}
} ) ;
}
}
private class <unk> extends JTable {
private static final long serialVersionUID = <num> ;
private HashMap < String , <unk> > renderers = new HashMap < String , <unk> > ( ) ;
public <unk> ( Results model )
{
super ( model ) ;
for ( final String [ ] data : new String [ ] [ ] {
new String [ ] { " , " , " } ,
new String [ ] { " , " } ,
new String [ ] { " , " }
} )
{
<unk> renderer = new <unk> ( )
{
@Override
public Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int row , int column )
{
DefaultTableCellRenderer . <unk> component = ( DefaultTableCellRenderer . <unk> ) <unk> ( String . class ) . getTableCellRendererComponent ( table , value , isSelected , hasFocus , row , column ) ;
String text = component . getText ( ) ;
if ( text != null && text . length ( ) > <num> )
component . setText ( String . format ( data [ <num> ] , text ) ) ;
return component ;
}
} ;
for ( int i = <num> ; i < data . length ; ++ i )
{
renderers . put ( data [ i ] , renderer ) ;
}
}
for ( int columnIndex = <num> ; columnIndex < model . getColumnCount ( ) ; ++ columnIndex )
{
if ( model . getColumnClass ( columnIndex ) == JComboBox . class )
{
JComboBox < <unk> > box = new JComboBox < <unk> > ( ) ;
final HashMap < String , String > values = new HashMap < > ( ) ;
for ( Result result : ( ( Results ) model ) . <unk> ( model . getColumnName ( columnIndex ) ) )
{
values . put ( result . getInt ( " ) . toString ( ) , result . getString ( " ) ) ;
box . addItem ( new <unk> ( result . getInt ( " ) , result . getString ( " ) ) ) ;
}
getColumnModel ( ) . getColumn ( columnIndex ) . <unk> ( new <unk> ( box ) ) ;
renderers . put ( model . getColumnName ( columnIndex ) . toLowerCase ( ) , new <unk> ( )
{
@Override
public Component getTableCellRendererComponent ( JTable table , Object value , boolean isSelected , boolean hasFocus , int row , int column )
{
DefaultTableCellRenderer . <unk> component = ( DefaultTableCellRenderer . <unk> ) <unk> ( String . class ) . getTableCellRendererComponent ( table , value , isSelected , hasFocus , row , column ) ;
component . setText ( values . get ( component . getText ( ) ) ) ;
return component ;
}
} ) ;
}
}
}
@Override
public <unk> <unk> ( int row , int column ) {
<unk> renderer = renderers . get ( getModel ( ) . getColumnName ( column ) . toLowerCase ( ) ) ;
if ( renderer != null )
return renderer ;
return super . <unk> ( row , column ) ;
}
@Override
public <unk> <unk> ( int row , int column ) {
<unk> editor = super . <unk> ( row , column ) ;
if ( editor instanceof <unk> )
{
Component component = ( ( <unk> ) editor ) . getComponent ( ) ;
if ( component instanceof JComboBox < ? > )
{
JComboBox < ? > comboBox = ( JComboBox < ? > ) component ;
Integer value = ( Integer ) getModel ( ) . getValueAt ( row , column ) ;
if ( value == null )
return editor ;
for ( int i = <num> ; i < comboBox . getItemCount ( ) ; ++ i )
{
int itemID = ( ( <unk> ) comboBox . getItemAt ( i ) ) . getID ( ) ;
if ( value == itemID )
{
comboBox . setSelectedIndex ( i ) ;
break ;
}
}
}
}
return editor ;
}
}
}
package net . <unk> . <unk> . db ;
import static net . <unk> . <unk> . <unk> . G . db ;
import java . util . ArrayList ;
import java . util . Vector ;
import net . <unk> . <unk> . <unk> . Config ;
public class <unk> extends <unk>
{
@Override
public <unk> <unk> ( String where , Object . . . objects )
{
return db . prepare ( " + getTableName ( ) + ( where != null ? ( " + where ) : " ) + " ) ;
}
@Override
public <unk> <unk> ( String columnName )
{
return db . prepare ( " + columnName ) ;
}
@Override
public boolean <unk> ( String columnName )
{
<unk> <unk> = db . prepare ( " ) ;
boolean allowed = <unk> . <unk> ( Config . getDatabaseName ( ) , getTableName ( ) , columnName ) . getInt ( " ) == <num> ;
<unk> . close ( ) ;
return allowed ;
}
@Override
public Result insert ( Vector < String > columnNames , Result result )
{
ArrayList < Object > params = new ArrayList < > ( ) ;
String fields = " ;
String <unk> = " ;
for ( int i = <num> ; i < columnNames . size ( ) ; ++ i )
{
String columnName = columnNames . get ( i ) ;
if ( result . get ( columnName ) != null )
{
fields += " + columnName ;
<unk> += " ;
params . add ( result . get ( columnName ) ) ;
}
}
<unk> insert = db . prepare ( " + getTableName ( ) + " + fields . substring ( <num> ) + " + <unk> . substring ( <num> ) + " ) ;
Integer id = insert . executeInsert ( params . toArray ( ) ) ;
insert . close ( ) ;
if ( id != null )
{
<unk> p = db . prepare ( " + getTableName ( ) + " ) ;
Result r = p . <unk> ( id ) ;
p . close ( ) ;
return r ;
}
return null ;
}
@Override
public boolean update ( Result result , String column , Object value )
{
<unk> update = db . prepare ( " + getTableName ( ) + " + column + " ) ;
boolean success = update . <unk> ( value , result . getInt ( " ) ) ;
update . close ( ) ;
return success ;
}
@Override
public boolean remove ( Result result )
{
<unk> p = db . prepare ( " + getTableName ( ) + " ) ;
boolean success = p . <unk> ( result . getInt ( " ) ) ;
p . close ( ) ;
return success ;
}
@Override
public boolean <unk> ( Result result , String columnName )
{
return true ;
}
@Override
public boolean <unk> ( String what )
{
<unk> prepared = db . prepare ( " ) ;
Result result = prepared . <unk> ( getTableName ( ) , what ) ;
prepared . close ( ) ;
return result . getInt ( " ) > <num> ;
}
}
package net . <unk> . <unk> . <unk> ;
import javax . swing . JButton ;
import javax . swing . JPanel ;
import net . <unk> . <unk> . db . Table ;
import net . miginfocom . swing . MigLayout ;
import java . awt . event . ActionListener ;
import java . awt . event . ActionEvent ;
import static net . <unk> . <unk> . <unk> . G . main ;
public class Dashboard extends JPanel
{
private static final long serialVersionUID =  <num> ;
public Dashboard ( ) {
setLayout ( new MigLayout ( " , " , " ) ) ;
createButton ( " , Table . AUTO , <num> , <num> ) ;
createButton ( " , Table . <unk> , <num> , <num> ) ;
createButton ( " , Table . <unk> , <num> , <num> ) ;
createButton ( " , Table . <unk> , <num> , <num> ) ;
createButton ( " , Table . <unk> , <num> , <num> ) ;
createButton ( " , Table . <unk> , <num> , <num> ) ;
createButton ( " , Table . <unk> , <num> , <num> ) ;
}
private void createButton ( String label , final Table table , int x , int y )
{
if ( table . <unk> ( " ) )
{
JButton button = new JButton ( label ) ;
button . addActionListener ( new ActionListener ( ) {
public void actionPerformed ( ActionEvent e ) {
main . <unk> ( new <unk> ( table ) ) ;
}
} ) ;
add ( button , " + x + " + y + " ) ;
}
}
}
package net . <unk> . <unk> . <unk> ;
public class <unk>
{
private int id ;
private String value ;
public <unk> ( int id , String value )
{
this . id = id ;
this . value = value ;
}
public int getID ( )
{
return id ;
}
@Override
public String toString ( )
{
return value ;
}
}
package net . <unk> . <unk> . db ;
import java . util . HashMap ;
public class Result extends HashMap < String , Object >
{
private static final long serialVersionUID = <num> ;
public Integer getInt ( String field )
{
return ( Integer ) get ( field ) ;
}
public String getString ( String field )
{
return ( String ) get ( field ) ;
}
public Long getLong ( String field )
{
return ( Long ) get ( field ) ;
}
}
package net . <unk> . <unk> . db ;
import java . util . Vector ;
public enum Table
{
AUTO ( new <unk> ( ) ) ,
<unk> ( new <unk> ( ) ) ,
<unk> ( new <unk> ( ) ) ,
<unk> ( new <unk> ( ) ) ,
<unk> ( new <unk> ( ) ) ,
<unk> ( new <unk> ( ) ) ,
<unk> ( new <unk> ( ) ) ,
<unk> ( new <unk> ( ) ) ;
private <unk> handler ;
private Table ( <unk> handler )
{
this . handler = handler ;
this . handler . setTable ( this ) ;
}
public Results <unk> ( )
{
return <unk> ( null ) ;
}
public Results <unk> ( String where , Object . . . objects )
{
<unk> p = handler . <unk> ( where , objects ) ;
Results results = p . <unk> ( objects ) ;
p . close ( ) ;
results . <unk> ( this ) ;
return results ;
}
public Results <unk> ( String columnName )
{
<unk> p = handler . <unk> ( columnName . toLowerCase ( ) ) ;
Results results = p . <unk> ( ) ;
p . close ( ) ;
return results ;
}
public boolean <unk> ( String columnName )
{
if ( " . equalsIgnoreCase ( columnName ) )
return true ;
return handler . <unk> ( columnName ) ;
}
public Result insert ( Vector < String > columnNames , Result result )
{
return handler . insert ( columnNames , result ) ;
}
public boolean update ( Result result , String column , Object value )
{
return handler . update ( result , column , value ) ;
}
public boolean remove ( Result result )
{
return handler . remove ( result ) ;
}
public boolean <unk> ( Result result , String columnName )
{
if ( ! handler . <unk> ( result , columnName ) )
return false ;
return ! columnName . equalsIgnoreCase ( " ) ;
}
public boolean <unk> ( String what )
{
return handler . <unk> ( what ) ;
}
}
package net . <unk> . <unk> ;
import java . io . File ;
import java . io . FileFilter ;
import java . io . FileInputStream ;
import java . io . IOException ;
import java . nio . MappedByteBuffer ;
import java . nio . channels . FileChannel ;
import java . nio . charset . Charset ;
import java . util . Arrays ;
import java . util . HashSet ;
import java . util . Set ;
import net . <unk> . <unk> . <unk> . Config ;
import net . <unk> . <unk> . db . <unk> ;
import net . <unk> . <unk> . db . Result ;
import static net . <unk> . <unk> . <unk> . G . db ;
public class <unk>
{
public static void main ( String args [ ] )
{
String server = args . length >= <num> ? args [ <num> ] : Config . getServer ( ) ;
try {
if ( args . length >= <num> )
db . <unk> ( server , args [ <num> ] , args [ <num> ] ) ;
else
db . <unk> ( server ) ;
<unk> ( ) ;
<unk> ( <unk> ( ) , <unk> ( ) ) ;
db . disconnect ( ) ;
} catch ( Exception e ) {
System . out . println ( e . getClass ( ) . getName ( ) + " + e . getMessage ( ) ) ;
}
}
private static void <unk> ( )
{
<unk> table = db . prepare ( " ) ;
table . <unk> ( ) ;
table . close ( ) ;
}
private static Set < Long > <unk> ( )
{
Set < Long > <unk> = new HashSet < Long > ( ) ;
<unk> <unk> = db . prepare ( " ) ;
for ( Result result : <unk> . <unk> ( ) )
{
<unk> . add ( result . getLong ( " ) ) ;
}
<unk> . close ( ) ;
return <unk> ;
}
private static File [ ] <unk> ( )
{
File [ ] files = new File ( " ) . listFiles ( new FileFilter ( )
{
@Override
public boolean accept ( File pathname )
{
try
{
return pathname . getName ( ) . length ( ) > <num> && Long . valueOf ( pathname . getName ( ) . substring ( <num> , <num> ) ) > <num> ;
}
catch ( NumberFormatException e )
{
return false ;
}
}
} ) ;
Arrays . sort ( files ) ;
return files ;
}
private static void <unk> ( File [ ] <unk> , Set < Long > <unk> )
{
System . out . println ( " + ( <unk> . length  <unk> . size ( ) ) + " ) ;
<unk> <unk> = db . prepare ( " ) ;
for ( File file : <unk> )
{
Long <unk> = Long . valueOf ( file . getName ( ) . substring ( <num> , <num> ) ) ;
if ( ! <unk> . contains ( <unk> ) )
{
System . out . println ( " + file . getName ( ) + " ) ;
<unk> prepared = null ;
try
{
prepared = db . prepare ( readFile ( file ) ) ;
if ( db . transaction ( prepared ) )
{
<unk> . <unk> ( <unk> ) ;
System . out . println ( " ) ;
}
else
{
System . out . println ( " ) ;
return ;
}
}
catch ( IOException e )
{
System . out . println ( " ) ;
e . printStackTrace ( ) ;
return ;
}
finally
{
if ( prepared != null )
prepared . close ( ) ;
}
}
}
<unk> . close ( ) ;
}
private static String readFile ( File file ) throws IOException
{
FileInputStream stream = new FileInputStream ( file ) ;
try
{
FileChannel fc = stream . getChannel ( ) ;
MappedByteBuffer bb = fc . map ( FileChannel . MapMode . READ_ONLY , <num> , fc . size ( ) ) ;
return Charset . defaultCharset ( ) . decode ( bb ) . toString ( ) ;
}
finally
{
stream . close ( ) ;
}
}
}
package net . <unk> . <unk> . db ;
import java . util . Vector ;
public abstract class <unk>
{
private Table table ;
final void setTable ( Table table )
{
this . table = table ;
}
final String getTableName ( )
{
return table . toString ( ) . toLowerCase ( ) ;
}
public abstract <unk> <unk> ( String where , Object . . . objects ) ;
public abstract <unk> <unk> ( String columnName ) ;
public abstract boolean <unk> ( Result result , String columnName ) ;
public abstract boolean <unk> ( String columnName ) ;
public abstract Result insert ( Vector < String > columnNames , Result result ) ;
public abstract boolean update ( Result result , String column , Object value ) ;
abstract boolean remove ( Result result ) ;
abstract public boolean <unk> ( String what ) ;
}
package net . <unk> . <unk> . <unk> ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import javax . swing . JButton ;
import javax . swing . JLabel ;
import javax . swing . JPanel ;
import javax . swing . JPasswordField ;
import javax . swing . JTextField ;
import net . <unk> . <unk> . db . <unk> ;
import net . miginfocom . swing . MigLayout ;
import static net . <unk> . <unk> . <unk> . G . db ;
import static net . <unk> . <unk> . <unk> . G . main ;
public class Login extends JPanel
{
private static final long serialVersionUID = <num> ;
public Login ( )
{
setLayout ( new MigLayout ( " , " , " ) ) ;
JLabel <unk> = new JLabel ( " ) ;
add ( <unk> , " ) ;
if ( Config . <unk> ( ) . contains ( " ) )
{
try
{
db . <unk> ( Config . getServer ( ) ) ;
<unk> ( ) ;
return ;
}
catch ( Exception e )
{
<unk> . setText ( " + e . getMessage ( ) ) ;
}
}
if ( Config . <unk> ( ) . contains ( " ) )
{
<unk> ( <unk> ) ;
}
else
{
String oldText = <unk> . getText ( ) ;
if ( oldText . length ( ) > <num> )
oldText += " ;
<unk> . setText ( " + oldText + " ) ;
}
}
private void <unk> ( final JLabel <unk> )
{
JLabel <unk> = new JLabel ( " ) ;
add ( <unk> , " ) ;
JLabel lblUsername = new JLabel ( " ) ;
add ( lblUsername , " ) ;
final JTextField <unk> = new JTextField ( ) ;
add ( <unk> , " ) ;
<unk> . setColumns ( <num> ) ;
JLabel <unk> = new JLabel ( " ) ;
add ( <unk> , " ) ;
final JPasswordField <unk> = new JPasswordField ( ) ;
add ( <unk> , " ) ;
JButton btnLogin = new JButton ( " ) ;
btnLogin . addActionListener ( new ActionListener ( )
{
@Override
public void actionPerformed ( ActionEvent e )
{
try {
db . <unk> ( Config . getServer ( ) , <unk> . getText ( ) , new String ( <unk> . getPassword ( ) ) ) ;
<unk> ( ) ;
} catch ( Exception ex ) {
<unk> . setText ( ex . getMessage ( ) ) ;
}
}
} ) ;
add ( btnLogin , " ) ;
JButton btnCancel = new JButton ( " ) ;
btnCancel . addActionListener ( new ActionListener ( )
{
@Override
public void actionPerformed ( ActionEvent e )
{
close ( ) ;
}
} ) ;
add ( btnCancel , " ) ;
}
protected void <unk> ( )
{
<unk> p = db . prepare ( " ) ;
String username = p . <unk> ( ) . getString ( " ) ;
main . <unk> ( username ) ;
p . close ( ) ;
new Thread ( )
{
public void run ( )
{
Dashboard dashboard = new Dashboard ( ) ;
while ( ! ( main . <unk> ( ) == Login . this ) )
{
try
{
Thread . sleep ( <num> ) ;
}
catch ( InterruptedException e )
{
}
}
main . <unk> ( dashboard ) ;
}
} . start ( ) ;
}
protected void close ( )
{
main . getWindow ( ) . dispose ( ) ;
}
}
package net . <unk> . <unk> . <unk> ;
import java . awt . Color ;
import java . io . File ;
import java . io . IOException ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . Iterator ;
import java . util . List ;
import javax . xml . namespace . NamespaceContext ;
import javax . xml . parsers . DocumentBuilderFactory ;
import javax . xml . parsers . ParserConfigurationException ;
import javax . xml . xpath . XPath ;
import javax . xml . xpath . XPathConstants ;
import javax . xml . xpath . XPathExpressionException ;
import javax . xml . xpath . XPathFactory ;
import org . w3c . dom . Document ;
import org . w3c . dom . NodeList ;
import org . xml . sax . SAXException ;
public final class Config
{
private static HashMap < String , Object > configuration = new HashMap < String , Object > ( ) ;
private static String [ ] <unk> = { " , " , " } ;
private static String [ ] <unk> = { " , " } ;
private static String [ ] <unk> = { " } ;
private static String getString ( String key )
{
return ( String ) configuration . get ( key ) ;
}
private static Color getColor ( String key )
{
return ( Color ) configuration . get ( key ) ;
}
public static String getAppName ( )
{
return getString ( " ) ;
}
public static String getServer ( )
{
return getString ( " ) ;
}
public static String getDatabaseName ( )
{
return getString ( " ) ;
}
@SuppressWarnings("unchecked")
public static List < String > <unk> ( )
{
return ( List < String > ) configuration . get ( " ) ;
}
public static Color <unk> ( )
{
return getColor ( " ) ;
}
public static Color getBackgroundColor ( )
{
return getColor ( " ) ;
}
static
{
try
{
DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ;
factory . setNamespaceAware ( true ) ;
Document doc = factory . newDocumentBuilder ( ) . parse ( new File ( " ) ) ;
XPath xpath = XPathFactory . newInstance ( ) . newXPath ( ) ;
xpath . setNamespaceContext ( new NamespaceContext ( )
{
@SuppressWarnings("rawtypes")
@Override
public Iterator getPrefixes ( String namespaceURI )
{
return null ;
}
@Override
public String getPrefix ( String namespaceURI )
{
return null ;
}
@Override
public String getNamespaceURI ( String prefix )
{
return prefix + " ;
}
} ) ;
for ( String key : <unk> )
configuration . put ( key , xpath . evaluate ( " + key , doc ) ) ;
for ( String key : <unk> )
{
int red = Integer . valueOf ( xpath . evaluate ( " + key + " , doc ) ) ;
int green = Integer . valueOf ( xpath . evaluate ( " + key + " , doc ) ) ;
int blue = Integer . valueOf ( xpath . evaluate ( " + key + " , doc ) ) ;
configuration . put ( key , new Color ( red , green , blue ) ) ;
}
for ( String key : <unk> )
{
List < String > list = new ArrayList < String > ( ) ;
NodeList nodes = ( NodeList ) xpath . evaluate ( " + key + " , doc , XPathConstants . NODESET ) ;
for ( int i = <num> ; i < nodes . getLength ( ) ; ++ i )
list . add ( nodes . item ( i ) . getTextContent ( ) ) ;
configuration . put ( key , list ) ;
}
}
catch ( SAXException | IOException | ParserConfigurationException | XPathExpressionException e )
{
throw new RuntimeException ( e ) ;
}
}
}
package net . <unk> . <unk> . <unk> ;
import java . awt . Dimension ;
import java . awt . EventQueue ;
import javax . swing . JFrame ;
import javax . swing . JPanel ;
import javax . swing . UIManager ;
import java . awt . Color ;
import net . miginfocom . swing . MigLayout ;
import javax . swing . JLabel ;
import java . awt . Font ;
import java . awt . event . MouseEvent ;
import java . awt . event . MouseListener ;
import java . awt . event . WindowEvent ;
import java . awt . event . WindowListener ;
import java . util . Stack ;
import static net . <unk> . <unk> . <unk> . G . db ;
import static net . <unk> . <unk> . <unk> . G . main ;
public class Main
{
private JFrame frame ;
private Stack < JPanel > content = new Stack < JPanel > ( ) ;
private JLabel <unk> ;
private JLabel <unk> ;
public static void main ( String [ ] args )
{
<unk> ( ) ;
EventQueue . invokeLater ( new Runnable ( )
{
public void run ( )
{
try
{
main = new Main ( ) ;
main . <unk> ( new Login ( ) ) ;
main . frame . setVisible ( true ) ;
}
catch ( Exception e )
{
e . printStackTrace ( ) ;
}
}
} ) ;
}
private static void <unk> ( )
{
try
{
UIManager . setLookAndFeel ( UIManager . getSystemLookAndFeelClassName ( ) ) ;
}
catch ( Exception e )
{
}
}
public Main ( )
{
initialize ( ) ;
}
private void initialize ( )
{
frame = new JFrame ( ) ;
frame . setTitle ( Config . getAppName ( ) ) ;
frame . getContentPane ( ) . setBackground ( Config . <unk> ( ) ) ;
frame . setBounds ( <num> , <num> , <num> , <num> ) ;
frame . setMinimumSize ( new Dimension ( <num> , <num> ) ) ;
frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
frame . getContentPane ( ) . setLayout ( new MigLayout ( " , " , " ) ) ;
JPanel header = new JPanel ( ) ;
header . setBackground ( Color . WHITE ) ;
frame . getContentPane ( ) . add ( header , " ) ;
header . setLayout ( new MigLayout ( " , " , " ) ) ;
<unk> = new JLabel ( " ) ;
<unk> . setForeground ( Config . <unk> ( ) ) ;
<unk> . setVisible ( false ) ;
<unk> . addMouseListener ( new MouseListener ( )
{
@Override
public void mouseReleased ( MouseEvent e )
{
}
@Override
public void mousePressed ( MouseEvent e )
{
}
@Override
public void mouseExited ( MouseEvent e )
{
}
@Override
public void mouseEntered ( MouseEvent e )
{
}
@Override
public void mouseClicked ( MouseEvent e )
{
if ( e . getButton ( ) == MouseEvent . BUTTON1 )
<unk> ( ) ;
}
} ) ;
header . add ( <unk> , " ) ;
<unk> = new JLabel ( " ) ;
<unk> . setForeground ( Config . <unk> ( ) ) ;
<unk> ( null ) ;
header . add ( <unk> , " ) ;
JLabel <unk> = new JLabel ( Config . getAppName ( ) ) ;
<unk> . setForeground ( Config . <unk> ( ) ) ;
<unk> . setFont ( new Font ( <unk> . getFont ( ) . getFontName ( ) , <unk> . getFont ( ) . getStyle ( ) , <num> ) ) ;
header . add ( <unk> , " ) ;
frame . addWindowListener ( new WindowListener ( )
{
@Override
public void windowOpened ( WindowEvent e )
{
}
@Override
public void windowIconified ( WindowEvent e )
{
}
@Override
public void windowDeiconified ( WindowEvent e )
{
}
@Override
public void windowDeactivated ( WindowEvent e )
{
}
@Override
public void windowClosing ( WindowEvent e )
{
if ( db != null )
{
db . disconnect ( ) ;
db = null ;
}
}
@Override
public void windowClosed ( WindowEvent e )
{
}
@Override
public void windowActivated ( WindowEvent e )
{
}
} ) ;
}
public JFrame getWindow ( )
{
return frame ;
}
public JPanel <unk> ( )
{
return content . get ( <num> ) ;
}
public void <unk> ( JPanel newContent )
{
if ( content . size ( ) > <num> )
{
frame . getContentPane ( ) . remove ( content . lastElement ( ) ) ;
content . clear ( ) ;
}
<unk> ( newContent ) ;
}
public void <unk> ( JPanel newContent )
{
if ( content . size ( ) > <num> )
frame . getContentPane ( ) . remove ( content . lastElement ( ) ) ;
content . push ( newContent ) ;
newContent . setBackground ( Config . getBackgroundColor ( ) ) ;
<unk> ( ) ;
}
private void <unk> ( )
{
frame . getContentPane ( ) . add ( content . lastElement ( ) , " ) ;
frame . validate ( ) ;
<unk> . setVisible ( content . size ( ) > <num> ) ;
}
public void <unk> ( )
{
if ( content . size ( ) > <num> )
{
frame . getContentPane ( ) . remove ( content . pop ( ) ) ;
while ( content . size ( ) > <num> )
content . pop ( ) ;
<unk> ( ) ;
}
}
public void <unk> ( )
{
if ( content . size ( ) > <num> )
{
content . lastElement ( ) . setVisible ( false ) ;
frame . getContentPane ( ) . remove ( content . pop ( ) ) ;
<unk> ( ) ;
}
}
public void <unk> ( String username )
{
<unk> . setText ( username == null ? " : ( " + username + " ) ) ;
}
}
package net . <unk> . <unk> . <unk> ;
import net . <unk> . <unk> . db . Database ;
public class G
{
public static Main main = null ;
public static Database db = new Database ( ) ;
private G ( )
{
}
}
package com . <unk> . util . http ;
import java . io . UnsupportedEncodingException ;
import java . util . Hashtable ;
import java . util . Vector ;
import net . rim . device . api . io . http . <unk> ;
public class HttpResponse {
public static final String <unk> = " ;
protected int <unk> ;
protected byte [ ] <unk> ;
protected int <unk> ;
protected Hashtable <unk> ;
public int getResponseCode ( ) {
return <unk> ;
}
public byte [ ] <unk> ( ) {
return <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public String <unk> ( String encoding ) throws UnsupportedEncodingException {
return new String ( <unk> , <num> , <unk> , encoding ) ;
}
public String <unk> ( ) throws UnsupportedEncodingException {
String encoding = <unk> ;
if ( <unk> . containsKey ( <unk> . <unk> ) ) {
String contentType = <unk> ( <unk> . <unk> ) ;
int index = contentType . indexOf ( " ) ;
if ( index !=  <num> ) {
encoding = contentType . substring ( index + <num> ) ;
}
}
return <unk> ( encoding ) ;
}
public boolean containsHeader ( String header ) {
return <unk> . contains ( header ) ;
}
public String <unk> ( String header ) {
String value = null ;
if ( <unk> . containsKey ( header ) ) {
Object val = <unk> . get ( header ) ;
if ( val instanceof Vector )
value = ( String ) ( ( Vector ) val ) . elementAt ( <num> ) ;
else if ( val instanceof String )
value = ( String ) val ;
else
value = val . toString ( ) ;
}
return value ;
}
}
package com . <unk> . util . http ;
import java . io . IOException ;
import java . io . OutputStream ;
import java . util . Vector ;
import javax . microedition . io . Connector ;
import javax . microedition . io . <unk> ;
import net . rim . device . api . <unk> . <unk> ;
import net . rim . device . api . <unk> . ServiceRecord ;
import net . rim . device . api . system . <unk> ;
import net . rim . device . api . system . <unk> ;
import net . rim . device . api . system . <unk> ;
import net . rim . device . api . io . transport . <unk> ;
import net . rim . device . api . io . transport . <unk> ;
public class ConnectionFactory {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <unk> | <unk> | <unk> | <unk> | <unk> | <unk> ;
public static final int <unk> = <unk> | <unk> | <unk> | <unk> ;
public static final int <unk> = <unk> | <unk> | <unk> ;
public static final int <unk> [ ] = { <unk> , <unk> , <unk> , <unk> , <unk> , <unk> } ;
private static final int <unk> = <unk> . length ;
private static ServiceRecord <unk> [ ] ;
private static boolean <unk> = false ;
private <unk> con = null ;
private OutputStream os = null ;
private int <unk> [ ] ;
private int <unk> =  <num> ;
private static int [ ] <unk> = { <unk> . <unk> , <unk> . <unk> , <unk> . <unk> , <unk> . <unk> , <unk> . <unk> , <unk> . <unk> } ;
private net . rim . device . api . io . transport . ConnectionFactory <unk> = new net . rim . device . api . io . transport . ConnectionFactory ( ) ;
public ConnectionFactory ( ) {
this ( <num> ) ;
}
public ConnectionFactory ( int <unk> ) {
this ( <unk> ( <unk> ) ) ;
}
public ConnectionFactory ( int <unk> [ ] ) {
if ( ! <unk> ) {
<unk> ( false ) ;
}
<unk> = <unk> ;
<unk> . <unk> ( <unk> ) ;
}
public <unk> getConnection ( String pURL ) {
int curIndex = <num> ;
<unk> con = null ;
while ( ( con = <unk> ( pURL , curIndex ) ) == null ) {
try {
curIndex = <unk> ( curIndex ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
break ;
} finally {
}
}
if ( con != null ) {
<unk> ( <unk> [ curIndex ] ) ;
}
if ( con == null ) {
<unk> desc = <unk> . getConnection ( pURL ) ;
con = ( <unk> ) desc . getConnection ( ) ;
}
return con ;
}
private int <unk> ( int curIndex ) throws IOException {
if ( ( curIndex >= <num> ) && ( curIndex < <unk> . length  <num> ) ) {
return curIndex + <num> ;
} else {
throw new IOException ( " ) ;
}
}
private <unk> <unk> ( String pURL , int <unk> ) {
<unk> con = null ;
OutputStream os = null ;
switch ( <unk> [ <unk> ] ) {
case <unk> :
try {
con = <unk> ( pURL , false ) ;
} catch ( IOException e ) {
} finally {
}
break ;
case <unk> :
try {
con = <unk> ( pURL ) ;
} catch ( IOException e ) {
} finally {
}
break ;
case <unk> :
try {
con = <unk> ( pURL ) ;
} catch ( IOException e ) {
} finally {
}
break ;
case <unk> :
try {
con = <unk> ( pURL ) ;
} catch ( IOException e ) {
} finally {
}
break ;
case <unk> :
try {
con = <unk> ( pURL ) ;
} catch ( IOException e ) {
} finally {
}
break ;
case <unk> :
try {
con = <unk> ( pURL ) ;
} catch ( IOException e ) {
} finally {
}
break ;
}
return con ;
}
public static void <unk> ( ) {
<unk> ( true ) ;
}
public int <unk> ( ) {
return <unk> ;
}
public String <unk> ( ) {
return <unk> ( <unk> ( ) ) ;
}
private void <unk> ( int <unk> ) {
<unk> = <unk> ;
}
private <unk> <unk> ( String pURL , boolean <unk> ) throws IOException {
if ( <unk> . <unk> ( ) ) {
if ( <unk> ) {
return getConnection ( pURL , " , null ) ;
} else {
return getConnection ( pURL , " , null ) ;
}
}
return null ;
}
private <unk> <unk> ( String pURL ) throws IOException {
if ( <unk> . <unk> ( <num> ) ) {
return getConnection ( pURL , " , null ) ;
}
return null ;
}
private <unk> <unk> ( String pURL ) throws IOException {
if ( <unk> . <unk> ( <num> ) ) {
return getConnection ( pURL , " , null ) ;
}
return null ;
}
private <unk> <unk> ( String pURL ) throws IOException {
if ( <unk> . <unk> ( ) == <unk> . <unk> ) {
return getConnection ( pURL , " , null ) ;
}
return null ;
}
private <unk> <unk> ( String pURL ) throws IOException {
if ( <unk> . <unk> ( <num> ) && ( <unk> != null ) && ( <unk> . length != <num> ) ) {
return getConnection ( pURL , " , <unk> [ <num> ] . getUid ( ) ) ;
}
return null ;
}
private <unk> <unk> ( String pURL ) throws IOException {
if ( <unk> . <unk> ( <num> ) ) {
return getConnection ( pURL , " , null ) ;
}
return null ;
}
private <unk> getConnection ( String pURL , String <unk> , String <unk> ) throws IOException {
StringBuffer <unk> = new StringBuffer ( ) ;
<unk> . append ( pURL ) ;
if ( <unk> != null ) {
<unk> . append ( <unk> ) ;
}
if ( <unk> != null ) {
<unk> . append ( <unk> ) ;
}
return ( <unk> ) Connector . open ( <unk> . toString ( ) ) ;
}
private static synchronized void <unk> ( boolean reload ) {
if ( <unk> && ! reload ) {
return ;
}
<unk> sb = <unk> . <unk> ( ) ;
ServiceRecord [ ] records = sb . <unk> ( ) ;
Vector <unk> = new Vector ( ) ;
Vector <unk> = new Vector ( ) ;
Vector <unk> = new Vector ( ) ;
Vector <unk> = new Vector ( ) ;
if ( ! <unk> ) {
for ( int i = <num> ; i < records . length ; i ++ ) {
ServiceRecord <unk> = records [ i ] ;
String cid , uid ;
if ( <unk> . isValid ( ) && ! <unk> . isDisabled ( ) ) {
cid = <unk> . <unk> ( ) . toLowerCase ( ) ;
uid = <unk> . getUid ( ) . toLowerCase ( ) ;
if ( ( cid . indexOf ( " ) !=  <num> ) && ( uid . indexOf ( " ) !=  <num> ) && ( uid . indexOf ( " ) ==  <num> ) && ( uid . indexOf ( " ) ==  <num> ) ) {
<unk> . addElement ( <unk> ) ;
}
}
}
<unk> = new ServiceRecord [ <unk> . size ( ) ] ;
<unk> . copyInto ( <unk> ) ;
<unk> . removeAllElements ( ) ;
<unk> = null ;
<unk> = true ;
}
}
public static int [ ] <unk> ( int mask ) {
if ( mask == <num> ) {
mask = <unk> ;
}
int <unk> = <num> ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
if ( ( <unk> [ i ] & mask ) != <num> ) {
<unk> ++ ;
}
}
int <unk> [ ] = new int [ <unk> ] ;
int index = <num> ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
if ( ( <unk> [ i ] & mask ) != <num> ) {
<unk> [ index ++ ] = <unk> [ i ] ;
}
}
return <unk> ;
}
private static String <unk> ( int transport ) {
String <unk> ;
switch ( transport ) {
case <unk> :
<unk> = " ;
break ;
case <unk> :
<unk> = " ;
break ;
case <unk> :
<unk> = " ;
break ;
case <unk> :
<unk> = " ;
break ;
case <unk> :
<unk> = " ;
break ;
case <unk> :
<unk> = " ;
break ;
default :
<unk> = " ;
break ;
}
return <unk> ;
}
}
package com . <unk> . util . http ;
import java . io . IOException ;
import java . io . OutputStream ;
import java . util . Enumeration ;
import java . util . Hashtable ;
import javax . microedition . io . file . <unk> ;
import net . rim . <unk> . api . browser . <unk> ;
import net . rim . device . api . io . http . HttpHeaders ;
import net . rim . device . api . io . http . <unk> ;
public class HttpRequest {
protected HttpHeaders <unk> ;
protected String _url ;
protected String _method ;
protected String _contentType ;
protected Object <unk> ;
protected Object <unk> ;
public static HttpRequest head ( String url ) {
return head ( url , null , null ) ;
}
public static HttpRequest head ( String url , Hashtable args , HttpHeaders headers ) {
HttpRequest request = new HttpRequest ( ) ;
request . _url = url ;
request . _method = <unk> . <unk> ;
request . <unk> = args ;
request . <unk> = headers ;
return request ;
}
public static HttpRequest get ( String url , Hashtable args , HttpHeaders headers , <unk> file ) {
HttpRequest r = get ( url , args , headers ) ;
r . <unk> = file ;
return r ;
}
public static HttpRequest get ( String url , <unk> file ) {
return get ( url , null , null , file ) ;
}
public static HttpRequest get ( String url , Hashtable args , HttpHeaders headers , OutputStream out ) {
HttpRequest r = get ( url , args , headers ) ;
r . <unk> = out ;
return r ;
}
public static HttpRequest get ( String url , OutputStream out ) {
return get ( url , null , null , out ) ;
}
public static HttpRequest get ( String url , Hashtable args , HttpHeaders headers ) {
HttpRequest request = new HttpRequest ( ) ;
request . _url = url ;
request . _method = <unk> . <unk> ;
request . <unk> = args ;
request . <unk> = headers ;
return request ;
}
public static HttpRequest get ( String url , Hashtable args ) {
return get ( url , args , null ) ;
}
public static HttpRequest get ( String url ) {
return get ( url , null , null ) ;
}
public String getUrl ( ) {
return _url ;
}
public String getMethod ( ) {
return _method ;
}
public static HttpRequest post ( String url , Hashtable args , HttpHeaders headers ) {
HttpRequest request = new HttpRequest ( ) ;
request . _url = url ;
request . _method = <unk> . <unk> ;
if ( args != null )
request . <unk> = <unk> ( args ) ;
request . <unk> = headers ;
request . _contentType = " ;
return request ;
}
public static HttpRequest post ( String url , byte [ ] postData , HttpHeaders headers ) {
HttpRequest request = new HttpRequest ( ) ;
request . _url = url ;
request . _method = <unk> . <unk> ;
request . <unk> = postData ;
request . <unk> = headers ;
return request ;
}
public static HttpRequest post ( String url , Hashtable args ) {
return post ( url , args , null ) ;
}
public String <unk> ( ) {
if ( <unk> . <unk> . equals ( _method ) || <unk> . <unk> . equals ( _method ) ) {
if ( <unk> != null && <unk> instanceof Hashtable ) {
StringBuffer buf = new StringBuffer ( _url ) ;
Hashtable args = ( Hashtable ) <unk> ;
int i = <num> ;
for ( Enumeration keys = args . keys ( ) ; keys . hasMoreElements ( ) ; ) {
if ( i == <num> )
buf . append ( ?' ) ;
else
buf . append ( &' ) ;
String key = ( String ) keys . nextElement ( ) ;
String val = ( String ) args . get ( key ) ;
buf . append ( HttpClient . <unk> ( key ) ) ;
buf . append ( =' ) ;
buf . append ( HttpClient . <unk> ( val ) ) ;
i ++ ;
}
return buf . toString ( ) ;
}
}
return _url ;
}
protected void <unk> ( OutputStream out ) throws IOException {
if ( <unk> != null ) {
if ( <unk> instanceof byte [ ] ) {
out . write ( ( byte [ ] ) <unk> ) ;
}
else if ( <unk> instanceof Hashtable ) {
Hashtable ht = ( Hashtable ) <unk> ;
<unk> encoder = new <unk> ( " , false ) ;
for ( Enumeration keys = ht . keys ( ) ; keys . hasMoreElements ( ) ; ) {
String key = ( String ) keys . nextElement ( ) ;
String value = ( String ) ht . get ( key ) ;
encoder . append ( key , value ) ;
}
out . write ( encoder . getBytes ( ) ) ;
}
}
}
protected String getContentType ( ) {
String type = null ;
if ( <unk> != null ) {
type = _contentType ;
}
return type ;
}
protected long getContentLength ( ) {
long size =  <num> ;
if ( <unk> != null ) {
if ( <unk> instanceof byte [ ] ) {
size = ( ( byte [ ] ) <unk> ) . length ;
}
}
return size ;
}
private static byte [ ] <unk> ( Hashtable params ) {
<unk> encoder = new <unk> ( " , false ) ;
for ( Enumeration keys = params . keys ( ) ; keys . hasMoreElements ( ) ; ) {
String key = ( String ) keys . nextElement ( ) ;
String value = ( String ) params . get ( key ) ;
encoder . append ( key , value ) ;
}
return encoder . getBytes ( ) ;
}
}
package com . <unk> . util . http ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . InputStreamReader ;
import java . io . OutputStream ;
import java . util . Hashtable ;
import java . util . Vector ;
import javax . microedition . io . Connection ;
import javax . microedition . io . <unk> ;
import javax . microedition . io . SocketConnection ;
import javax . microedition . io . file . <unk> ;
import net . rim . device . api . io . <unk> ;
import net . rim . device . api . io . http . <unk> ;
import net . rim . device . api . io . <unk> ;
import net . rim . device . api . io . URI ;
public class HttpClient {
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
protected com . <unk> . util . http . ConnectionFactory <unk> ;
protected String <unk> ;
protected int <unk> = <unk> ;
protected <unk> <unk> ;
public HttpClient ( ) {
this ( new com . <unk> . util . http . ConnectionFactory ( ) ) ;
}
public HttpClient ( com . <unk> . util . http . ConnectionFactory factory ) {
<unk> = factory ;
<unk> = System . getProperty ( " ) ;
}
public HttpResponse execute ( HttpRequest request ) throws IOException {
return <unk> ( request . <unk> ( ) , <num> , request ) ;
}
public void setProxy ( <unk> proxy ) {
<unk> = proxy ;
}
protected HttpResponse <unk> ( String url , int <unk> , HttpRequest request ) throws IOException , IllegalArgumentException , <unk> {
if ( <unk> !=  <num> && <unk> >= <unk> ) {
throw new IOException ( " ) ;
}
HttpResponse response = null ;
InputStream in = null ;
<unk> <unk> = null ;
OutputStream out = null ;
URI uri = URI . create ( url ) ;
String proxyUrl = " + <unk> . _host + " + <unk> . _port ;
try {
Connection conn = <unk> . getConnection ( proxyUrl ) ;
if ( conn == null )
throw new IOException ( " ) ;
SocketConnection <unk> = ( SocketConnection ) conn ;
StringBuffer buf = new StringBuffer ( ) ;
buf . append ( request . _method ) ;
buf . append (  ' ) ;
buf . append ( url ) ;
buf . append ( " ) ;
buf . append ( " ) ;
buf . append ( " ) ;
buf . append ( uri . getHost ( ) ) ;
buf . append ( " ) ;
buf . append ( " ) ;
out = <unk> . openOutputStream ( ) ;
out . write ( buf . toString ( ) . getBytes ( ) ) ;
out . close ( ) ;
out = null ;
in = <unk> . openInputStream ( ) ;
InputStreamReader reader = new InputStreamReader ( in ) ;
response = new HttpResponse ( ) ;
response . <unk> = new Hashtable ( ) ;
buf . setLength ( <num> ) ;
int ch = reader . read ( ) ;
while ( ch !=  <num> ) {
buf . append ( ( char ) ch ) ;
ch = reader . read ( ) ;
if ( ch == \r' ) {
ch = reader . read ( ) ;
if ( ch == \n' ) {
<unk> ( buf . toString ( ) , response . <unk> ) ;
buf . setLength ( <num> ) ;
ch = reader . read ( ) ;
if ( ch == \r' ) {
ch = reader . read ( ) ;
if ( ch == \n' ) {
break ;
}
}
}
else {
buf . append ( \r' ) ;
buf . append ( ( char ) ch ) ;
}
}
}
}
finally {
if ( <unk> != null )
<unk> . close ( ) ;
}
return response ;
}
protected HttpResponse <unk> ( String url , int <unk> , HttpRequest request ) throws IOException {
if ( <unk> !=  <num> && <unk> >= <unk> ) {
throw new IOException ( " ) ;
}
HttpResponse response = null ;
InputStream in = null ;
OutputStream out = null ;
<unk> <unk> = null ;
OutputStream stream = null ;
try {
Connection conn = <unk> . getConnection ( url ) ;
if ( conn == null )
throw new IOException ( " ) ;
<unk> = ( <unk> ) conn ;
<unk> . setRequestMethod ( request . getMethod ( ) ) ;
if ( request . <unk> != null ) {
int size = request . <unk> . size ( ) ;
for ( int i = <num> ; i < size ; i ++ ) {
String key = request . <unk> . <unk> ( i ) ;
String value = request . <unk> . getPropertyValue ( i ) ;
<unk> . setRequestProperty ( key , value ) ;
}
if ( <unk> != null && request . <unk> . getPropertyValue ( <unk> . <unk> ) == null )
<unk> . setRequestProperty ( <unk> . <unk> , <unk> ) ;
}
if ( request . _method . equals ( " ) || request . _method . equals ( " ) ) {
if ( request . <unk> . <unk> ( <unk> . <unk> ) == null ) {
String contentType = request . getContentType ( ) ;
if ( contentType != null )
<unk> . setRequestProperty ( <unk> . <unk> , contentType ) ;
}
if ( request . <unk> . <unk> ( <unk> . <unk> ) == null ) {
long length = request . getContentLength ( ) ;
if ( length !=  <num> )
<unk> . setRequestProperty ( <unk> . <unk> , String . valueOf ( length ) ) ;
}
out = <unk> . openOutputStream ( ) ;
request . <unk> ( out ) ;
out . close ( ) ;
out = null ;
}
int responseCode = <unk> . getResponseCode ( ) ;
switch ( responseCode ) {
case <unk> . HTTP_OK :
try {
in = <unk> . openInputStream ( ) ;
long contentLength = <unk> . getLength ( ) ;
stream = <unk> ( request , contentLength ) ;
<unk> ( in , stream ) ;
response = new HttpResponse ( ) ;
response . <unk> = responseCode ;
response . <unk> = new Hashtable ( ) ;
String key = " , value = null ;
for ( int index = <num> ; key != null ; index ++ ) {
key = <unk> . getHeaderFieldKey ( index ) ;
if ( key != null ) {
value = <unk> . getHeaderField ( index ) ;
if ( response . <unk> . contains ( key ) ) {
Object obj = response . <unk> . get ( key ) ;
if ( obj instanceof Vector ) {
( ( Vector ) obj ) . addElement ( value ) ;
}
else {
Vector v = new Vector ( ) ;
v . addElement ( obj ) ;
v . addElement ( value ) ;
response . <unk> . put ( key , v ) ;
}
}
else {
response . <unk> . put ( key , value ) ;
}
}
}
}
finally {
if ( stream != null )
<unk> ( request , response , stream ) ;
if ( in != null )
in . close ( ) ;
}
break ;
case <unk> . <unk> :
case <unk> . HTTP_MOVED_TEMP :
case <unk> . HTTP_MOVED_PERM :
String location = <unk> . getHeaderField ( <unk> . <unk> ) ;
response = <unk> ( location , <unk> + <num> , request ) ;
}
}
finally {
if ( out != null )
out . close ( ) ;
if ( in != null )
in . close ( ) ;
if ( <unk> != null )
<unk> . close ( ) ;
}
return response ;
}
protected OutputStream <unk> ( HttpRequest request , long contentLength ) throws IOException {
if ( request . <unk> == null ) {
<unk> <unk> = null ;
if ( contentLength !=  <num> ) {
<unk> = new <unk> ( ( int ) contentLength ) ;
}
else {
<unk> = new <unk> ( ) ;
}
return <unk> ;
}
else if ( request . <unk> instanceof <unk> ) {
return ( ( <unk> ) request . <unk> ) . openOutputStream ( ) ;
}
else if ( request . <unk> instanceof OutputStream ) {
return ( OutputStream ) request . <unk> ;
}
return null ;
}
protected void <unk> ( HttpRequest request , HttpResponse response , OutputStream stream ) {
try {
if ( stream instanceof <unk> ) {
response . <unk> = ( ( <unk> ) stream ) . getByteArray ( ) ;
response . <unk> = ( ( <unk> ) stream ) . size ( ) ;
}
stream . close ( ) ;
} catch ( IOException e ) {
}
}
public static String <unk> ( String s )
{
if ( s != null ) {
StringBuffer tmp = new StringBuffer ( ) ;
int i = <num> ;
try {
while ( true ) {
int b = ( int ) s . charAt ( i ++ ) ;
if ( ( b >= <num> && b <= <num> ) || ( b >= <num> && b <= <num> ) || ( b >= <num> && b <= <num> ) ) {
tmp . append ( ( char ) b ) ;
}
else {
tmp . append ( " ) ;
if ( b <= <num> ) tmp . append ( " ) ;
tmp . append ( Integer . toHexString ( b ) ) ;
}
}
}
catch ( Exception e ) { }
return tmp . toString ( ) ;
}
return null ;
}
private void <unk> ( String line , Hashtable headers ) {
}
private static void <unk> ( InputStream in , OutputStream out ) throws IOException {
byte [ ] buffer = new byte [ <unk> ] ;
<unk> ( in , out , buffer ) ;
}
private static void <unk> ( InputStream in , OutputStream out , byte [ ] buffer ) throws IOException {
int length = in . read ( buffer ) ;
while ( length !=  <num> ) {
out . write ( buffer , <num> , length ) ;
length = in . read ( buffer ) ;
}
}
}
package com . <unk> . util . http ;
public class <unk> {
protected String _host ;
protected int _port ;
protected String <unk> ;
protected String _password ;
public <unk> ( String host , int port , String username , String password ) {
_host = host ;
_port = port ;
<unk> = username ;
_password = password ;
}
}
package uk . co . <unk> . common . hibernate ;
import org . hibernate . dialect . <unk> ;
import java . sql . Types ;
public class <unk> extends <unk> {
public <unk> ( ) {
super ( ) ;
<unk> ( Types . BIT , " ) ;
}
}
package uk . co . <unk> . common . persistence ;
import org . hibernate . <unk> ;
import org . springframework . <unk> . <unk> . <unk> ;
public class <unk> {
protected <unk> <unk> ;
public void <unk> ( <unk> <unk> ) {
this . <unk> = new <unk> ( <unk> ) ;
}
public void <unk> ( <unk> <unk> ) {
this . <unk> = <unk> ;
}
protected void <unk> ( String [ ] tables , String whereClause ) {
for ( String table : tables ) {
<unk> . deleteAll (
<unk> . find (
" + table + " + whereClause
)
) ;
}
}
}
package uk . co . <unk> . common ;
import javax . servlet . ServletContext ;
import org . springframework . context . ApplicationContext ;
import org . springframework . web . context . support . <unk> ;
import com . vaadin . Application ;
import com . vaadin . terminal . gwt . server . <unk> ;
public class <unk> extends Application {
private static final long serialVersionUID = <num> ;
private ApplicationContext <unk> ( ) {
ServletContext <unk> = ( ( <unk> ) this
. getContext ( ) ) . <unk> ( ) . getServletContext ( ) ;
return ( ApplicationContext ) <unk>
. <unk> ( <unk> ) ;
}
private ApplicationContext context ;
<unk> <unk> ;
String theme = null ;
@Override
public void init ( ) {
context = <unk> ( ) ;
<unk> = ( <unk> ) context . getBean ( " ) ;
setTheme ( <unk> . getTheme ( ) ) ;
}
}
package uk . co . <unk> . common ;
public class <unk> {
String theme ;
public String getTheme ( ) {
return theme ;
}
public void setTheme ( String theme ) {
this . theme = theme ;
}
}
package uk . co . <unk> . common . persistence ;
public class <unk> {
}
package uk . co . <unk> . common . persistence ;
public class <unk> extends <unk> {
}
package net . <unk> . <unk> ;
public class <unk> extends javax . swing . JDialog {
public <unk> ( java . awt . Frame parent , boolean modal ) {
super ( parent , modal ) ;
initComponents ( ) ;
}
@SuppressWarnings("unchecked")
private void initComponents ( ) {
<unk> = new javax . swing . JTextField ( ) ;
jLabel3 = new javax . swing . JLabel ( ) ;
jLabel4 = new javax . swing . JLabel ( ) ;
<unk> = new javax . swing . JTextField ( ) ;
jLabel5 = new javax . swing . JLabel ( ) ;
<unk> = new javax . swing . JSpinner ( ) ;
jPanel1 = new javax . swing . JPanel ( ) ;
jLabel6 = new javax . swing . JLabel ( ) ;
jLabel2 = new javax . swing . JLabel ( ) ;
jLabel1 = new javax . swing . JLabel ( ) ;
<unk> = new javax . swing . JSpinner ( ) ;
<unk> = new javax . swing . JSpinner ( ) ;
<unk> = new javax . swing . JSpinner ( ) ;
<unk> = new javax . swing . JCheckBox ( ) ;
jButton1 = new javax . swing . JButton ( ) ;
jButton2 = new javax . swing . JButton ( ) ;
setDefaultCloseOperation ( javax . swing . WindowConstants . DISPOSE_ON_CLOSE ) ;
jLabel3 . setText ( " ) ;
jLabel4 . setText ( " ) ;
jLabel5 . setText ( " ) ;
jPanel1 . setBorder ( javax . swing . BorderFactory . createTitledBorder ( " ) ) ;
jLabel6 . setText ( " ) ;
jLabel2 . setText ( " ) ;
jLabel1 . setText ( " ) ;
javax . swing . GroupLayout jPanel1Layout = new javax . swing . GroupLayout ( jPanel1 ) ;
jPanel1 . setLayout ( jPanel1Layout ) ;
jPanel1Layout . setHorizontalGroup (
jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addGroup ( jPanel1Layout . createSequentialGroup ( )
. addContainerGap ( )
. addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING )
. addGroup ( javax . swing . GroupLayout . Alignment . LEADING , jPanel1Layout . createSequentialGroup ( )
. addComponent ( jLabel1 )
. addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED )
. addComponent ( <unk> , javax . swing . GroupLayout . PREFERRED_SIZE , <num> , javax . swing . GroupLayout . PREFERRED_SIZE ) )
. addGroup ( javax . swing . GroupLayout . Alignment . LEADING , jPanel1Layout . createSequentialGroup ( )
. addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addComponent ( jLabel2 )
. addComponent ( jLabel6 ) )
. addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED )
. addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addComponent ( <unk> , javax . swing . GroupLayout . DEFAULT_SIZE , <num> , Short . MAX_VALUE )
. addComponent ( <unk> , javax . swing . GroupLayout . DEFAULT_SIZE , <num> , Short . MAX_VALUE ) ) ) )
. addContainerGap ( ) )
) ;
jPanel1Layout . setVerticalGroup (
jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addGroup ( jPanel1Layout . createSequentialGroup ( )
. addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE )
. addComponent ( jLabel1 )
. addComponent ( <unk> , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) )
. addGap ( <num> , <num> , <num> )
. addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE )
. addComponent ( jLabel2 )
. addComponent ( <unk> , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) )
. addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . UNRELATED )
. addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE )
. addComponent ( jLabel6 )
. addComponent ( <unk> , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) )
. addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE ) )
) ;
<unk> . setText ( " ) ;
jButton1 . setText ( " ) ;
jButton2 . setText ( " ) ;
javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ;
getContentPane ( ) . setLayout ( layout ) ;
layout . setHorizontalGroup (
layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addGroup ( layout . createSequentialGroup ( )
. addContainerGap ( )
. addComponent ( jPanel1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE )
. addGap ( <num> , <num> , <num> )
. addComponent ( jLabel4 )
. addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED )
. addComponent ( <unk> , javax . swing . GroupLayout . PREFERRED_SIZE , <num> , javax . swing . GroupLayout . PREFERRED_SIZE )
. addGap ( <num> , <num> , <num> ) )
. addGroup ( layout . createSequentialGroup ( )
. addGap ( <num> , <num> , <num> )
. addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addComponent ( jLabel5 )
. addComponent ( jLabel3 ) )
. addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED )
. addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addGroup ( layout . createSequentialGroup ( )
. addComponent ( <unk> , javax . swing . GroupLayout . PREFERRED_SIZE , <num> , javax . swing . GroupLayout . PREFERRED_SIZE )
. addGap ( <num> , <num> , <num> )
. addComponent ( <unk> ) )
. addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING )
. addGroup ( layout . createSequentialGroup ( )
. addComponent ( jButton1 )
. addGap ( <num> , <num> , <num> )
. addComponent ( jButton2 ) )
. addComponent ( <unk> , javax . swing . GroupLayout . PREFERRED_SIZE , <num> , javax . swing . GroupLayout . PREFERRED_SIZE ) ) )
. addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE ) )
) ;
layout . setVerticalGroup (
layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addGroup ( layout . createSequentialGroup ( )
. addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addGroup ( layout . createSequentialGroup ( )
. addContainerGap ( )
. addComponent ( jPanel1 , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) )
. addGroup ( layout . createSequentialGroup ( )
. addGap ( <num> , <num> , <num> )
. addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE )
. addComponent ( jLabel4 )
. addComponent ( <unk> , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) ) ) )
. addGap ( <num> , <num> , <num> )
. addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE )
. addComponent ( jLabel3 )
. addComponent ( <unk> , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE ) )
. addGap ( <num> , <num> , <num> )
. addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE )
. addComponent ( jLabel5 )
. addComponent ( <unk> , javax . swing . GroupLayout . PREFERRED_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . PREFERRED_SIZE )
. addComponent ( <unk> ) )
. addGap ( <num> , <num> , <num> )
. addGroup ( layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE )
. addComponent ( jButton1 )
. addComponent ( jButton2 ) )
. addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE ) )
) ;
pack ( ) ;
}
private javax . swing . JButton jButton1 ;
private javax . swing . JButton jButton2 ;
private javax . swing . JCheckBox <unk> ;
private javax . swing . JLabel jLabel1 ;
private javax . swing . JLabel jLabel2 ;
private javax . swing . JLabel jLabel3 ;
private javax . swing . JLabel jLabel4 ;
private javax . swing . JLabel jLabel5 ;
private javax . swing . JLabel jLabel6 ;
private javax . swing . JPanel jPanel1 ;
private javax . swing . JSpinner <unk> ;
private javax . swing . JSpinner <unk> ;
private javax . swing . JSpinner <unk> ;
private javax . swing . JSpinner <unk> ;
private javax . swing . JTextField <unk> ;
private javax . swing . JTextField <unk> ;
}
package net . <unk> . <unk> ;
import java . io . IOException ;
import java . util . ArrayList ;
import java . util . Iterator ;
import javax . servlet . * ;
import javax . servlet . http . * ;
public class <unk> extends HttpServlet {
public void service ( HttpServletRequest req , HttpServletResponse res )
throws ServletException , IOException {
ServletOutputStream <unk> = res . getOutputStream ( ) ;
res . setContentType ( " ) ;
String <unk> = req . getParameter ( " ) ;
ArrayList < String > <unk> = new ArrayList < String > ( ) ;
if ( ( <unk> == null ) || ( <unk> . trim ( ) . length ( ) == <num> ) ) {
Iterator < String > it = <unk> . <unk> . keySet ( ) . iterator ( ) ;
while ( it . hasNext ( ) ) {
String name = it . next ( ) ;
<unk> . add ( name ) ;
}
} else {
<unk> . add ( <unk> ) ;
}
int fontSize = <num> ;
try {
fontSize = Integer . parseInt ( req . getParameter ( " ) ) ;
} catch ( NumberFormatException ex ) {
fontSize = <num> ;
}
if ( fontSize == <num> ) {
fontSize = <num> ;
}
String style = " + fontSize + " ;
<unk> . println ( " ) ;
<unk> . println ( " ) ;
<unk> . println ( " ) ;
<unk> . println ( " ) ;
<unk> . println ( " ) ;
<unk> . println ( " ) ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ ) {
String name = <unk> . get ( i ) ;
<unk> . <unk> estado = <unk> . <unk> . get ( name ) ;
if ( estado . visible == true ) {
<unk> . println ( " + name + " + style + " ) ;
<unk> . println ( " + estado . <unk> ( ) + " ) ;
<unk> . println ( " + estado . description + " ) ;
<unk> . println ( " ) ;
}
}
<unk> . println ( " ) ;
<unk> . println ( " ) ;
<unk> . println ( " ) ;
}
}
package net . <unk> . <unk> ;
import java . awt . Dimension ;
import java . awt . GridLayout ;
import java . awt . Rectangle ;
import java . awt . event . KeyEvent ;
import java . io . FileInputStream ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . util . Properties ;
import javax . swing . JOptionPane ;
public class Main extends javax . swing . JFrame {
int <unk> ;
public Main ( ) {
initComponents ( ) ;
<unk> . start ( ) ;
<unk> . start ( ) ;
this . setExtendedState ( this . getExtendedState ( ) | this . MAXIMIZED_BOTH ) ;
<unk> . setSelected ( <unk> . <unk> ( ) ) ;
<unk> . <unk> ( ) ;
<unk> ( ) ;
}
private void <unk> ( ) {
<unk> = <num> ;
Properties props = new Properties ( ) ;
try {
props . load ( new FileInputStream ( " ) ) ;
if ( props . getProperty ( " ) != null ) {
<unk> = Integer . parseInt ( props . getProperty ( " ) ) ;
}
} catch ( IOException ex ) {
return ;
}
<unk> ( <unk> ) ;
}
private void <unk> ( ) {
Properties props = new Properties ( ) ;
try {
props . load ( new FileInputStream ( " ) ) ;
} catch ( IOException ex ) {
return ;
}
props . setProperty ( " , String . valueOf ( <unk> ) ) ;
try {
props . store ( new FileOutputStream ( " ) , " ) ;
} catch ( IOException ex ) {
return ;
}
}
private int <unk> ( ) {
return <unk> ;
}
private void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
switch ( <unk> ) {
case <num> :
<unk> . setVisible ( true ) ;
<unk> . setVisible ( false ) ;
this . getContentPane ( ) . remove ( <unk> ) ;
( ( GridLayout ) this . getContentPane ( ) . getLayout ( ) ) . setColumns ( <num> ) ;
( ( GridLayout ) this . getContentPane ( ) . getLayout ( ) ) . setRows ( <num> ) ;
validate ( ) ;
<unk> . setSelected ( false ) ;
break ;
case <num> :
<unk> . setVisible ( true ) ;
<unk> . setVisible ( true ) ;
this . getContentPane ( ) . add ( <unk> ) ;
( ( GridLayout ) this . getContentPane ( ) . getLayout ( ) ) . setRows ( <num> ) ;
( ( GridLayout ) this . getContentPane ( ) . getLayout ( ) ) . setColumns ( <num> ) ;
validate ( ) ;
<unk> . setSelected ( true ) ;
break ;
default :
throw new RuntimeException ( " + <unk> ) ;
}
}
@SuppressWarnings("unchecked")
private void initComponents ( ) {
<unk> = new net . <unk> . <unk> . <unk> ( ) ;
<unk> = new net . <unk> . <unk> . <unk> ( ) ;
<unk> = new javax . swing . JMenuBar ( ) ;
<unk> = new javax . swing . JMenu ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
<unk> = new javax . swing . <unk> ( ) ;
<unk> = new javax . swing . <unk> ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
<unk> = new javax . swing . <unk> ( ) ;
<unk> = new javax . swing . <unk> ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
<unk> = new javax . swing . JMenu ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
jMenu1 = new javax . swing . JMenu ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
<unk> = new javax . swing . JMenuItem ( ) ;
setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ;
setTitle ( " ) ;
addWindowListener ( new java . awt . event . WindowAdapter ( ) {
public void windowClosing ( java . awt . event . WindowEvent evt ) {
<unk> ( evt ) ;
}
public void windowOpened ( java . awt . event . WindowEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
addKeyListener ( new java . awt . event . KeyAdapter ( ) {
public void keyReleased ( java . awt . event . KeyEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
getContentPane ( ) . setLayout ( new java . awt . GridLayout ( <num> , <num> ) ) ;
<unk> . setMinValue ( <num> ) ;
<unk> . setName ( " ) ;
<unk> . addMouseListener ( new java . awt . event . MouseAdapter ( ) {
public void mouseClicked ( java . awt . event . MouseEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
getContentPane ( ) . add ( <unk> ) ;
<unk> . setMinValue ( <num> ) ;
<unk> . setName ( " ) ;
<unk> . addMouseListener ( new java . awt . event . MouseAdapter ( ) {
public void mouseClicked ( java . awt . event . MouseEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
getContentPane ( ) . add ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> . setSelected ( true ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . setSelected ( true ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
jMenu1 . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
jMenu1 . add ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
jMenu1 . add ( <unk> ) ;
<unk> . setText ( " ) ;
jMenu1 . add ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
jMenu1 . add ( <unk> ) ;
<unk> . add ( jMenu1 ) ;
setJMenuBar ( <unk> ) ;
pack ( ) ;
}
private void <unk> ( java . awt . event . KeyEvent evt ) {
int keyCode = evt . getKeyCode ( ) ;
if ( keyCode == KeyEvent . VK_SPACE ) {
<unk> . inc ( ) ;
} else if ( keyCode == KeyEvent . VK_BACK_SPACE ) {
<unk> . dec ( ) ;
} else if ( keyCode == KeyEvent . <unk> ) {
if ( <unk> ( ) > <num> ) {
<unk> . inc ( ) ;
}
} else if ( keyCode == KeyEvent . <unk> ) {
if ( <unk> ( ) > <num> ) {
<unk> . dec ( ) ;
}
}
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
<unk> . reset ( ) ;
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
String response = ( String ) JOptionPane . showInputDialog ( null , " , " , JOptionPane . QUESTION_MESSAGE , null , null , <unk> . getCurrentValue ( ) + " ) ;
try {
<unk> . <unk> ( Integer . parseInt ( response ) ) ;
} catch ( Exception ex ) {
}
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
String response = ( String ) JOptionPane . showInputDialog ( this , " , " , JOptionPane . QUESTION_MESSAGE , null , null , <unk> . getFontSize ( ) + " ) ;
try {
int fontSize = Integer . parseInt ( response ) ;
<unk> . setFontSize ( fontSize ) ;
<unk> . setFontSize ( fontSize ) ;
} catch ( Exception ex ) {
}
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
<unk> . <unk> ( ! <unk> . <unk> ( ) ) ;
<unk> . <unk> ( <unk> . <unk> ( ) ) ;
<unk> . setSelected ( <unk> . <unk> ( ) ) ;
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
String response = ( String ) JOptionPane . showInputDialog ( this , " , " , JOptionPane . QUESTION_MESSAGE , null , null , <unk> . getMaxValue ( ) ) ;
try {
int <unk> = Integer . parseInt ( response ) ;
<unk> . setMaxValue ( <unk> ) ;
} catch ( Exception ex ) {
}
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
<unk> . save ( ) ;
<unk> . save ( ) ;
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
<unk> . load ( ) ;
<unk> . load ( ) ;
<unk> . setSelected ( <unk> . <unk> ( ) ) ;
}
private void <unk> ( java . awt . event . MouseEvent evt ) {
<unk> . inc ( ) ;
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
System . exit ( <num> ) ;
}
private void <unk> ( java . awt . event . WindowEvent evt ) {
<unk> . <unk> ( ) ;
<unk> . save ( ) ;
<unk> . save ( ) ;
<unk> ( ) ;
}
private void <unk> ( java . awt . event . WindowEvent evt ) {
<unk> . load ( ) ;
<unk> . load ( ) ;
<unk> . setSelected ( <unk> . <unk> ( ) ) ;
}
private void <unk> ( java . awt . event . MouseEvent evt ) {
if ( <unk> ( ) > <num> ) {
<unk> . inc ( ) ;
}
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
if ( <unk> . isSelected ( ) == false ) {
<unk> ( <num> ) ;
} else {
<unk> ( <num> ) ;
}
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
String response = ( String ) JOptionPane . showInputDialog ( this , " , " , JOptionPane . QUESTION_MESSAGE , null , null , <unk> . getMaxValue ( ) ) ;
try {
int <unk> = Integer . parseInt ( response ) ;
<unk> . setMaxValue ( <unk> ) ;
} catch ( Exception ex ) {
}
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
String response = ( String ) JOptionPane . showInputDialog ( null , " , " , JOptionPane . QUESTION_MESSAGE , null , null , <unk> . getCurrentValue ( ) + " ) ;
try {
<unk> . <unk> ( Integer . parseInt ( response ) ) ;
} catch ( Exception ex ) {
}
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
<unk> . reset ( ) ;
<unk> . reset ( ) ;
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
String response = ( String ) JOptionPane . showInputDialog ( this , " , " , JOptionPane . QUESTION_MESSAGE , null , null , <unk> . getDescription ( ) ) ;
<unk> . setDescription ( response ) ;
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
String response = ( String ) JOptionPane . showInputDialog ( null , " , " , JOptionPane . QUESTION_MESSAGE , null , null , <unk> . getDescription ( ) + " ) ;
<unk> . setDescription ( response ) ;
}
public static void main ( String args [ ] ) {
java . awt . EventQueue . invokeLater ( new Runnable ( ) {
public void run ( ) {
new Main ( ) . setVisible ( true ) ;
}
} ) ;
}
private javax . swing . <unk> <unk> ;
private javax . swing . <unk> <unk> ;
private javax . swing . JMenu jMenu1 ;
private javax . swing . JMenu <unk> ;
private javax . swing . JMenuBar <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenuItem <unk> ;
private javax . swing . JMenu <unk> ;
private javax . swing . <unk> <unk> ;
private javax . swing . <unk> <unk> ;
private net . <unk> . <unk> . <unk> <unk> ;
private net . <unk> . <unk> . <unk> <unk> ;
}
package net . <unk> . <unk> ;
import java . io . BufferedInputStream ;
import java . io . FileInputStream ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . util . HashMap ;
import java . util . LinkedHashMap ;
import java . util . Map ;
import java . util . Properties ;
import java . util . logging . Level ;
import java . util . logging . Logger ;
import javax . sound . sampled . AudioInputStream ;
import javax . sound . sampled . AudioSystem ;
import javax . sound . sampled . Clip ;
import org . mortbay . jetty . * ;
import org . mortbay . jetty . servlet . Context ;
import org . mortbay . jetty . servlet . ServletHolder ;
public class <unk> extends javax . swing . JPanel {
public static Map < String , <unk> > <unk> = new LinkedHashMap < String , <unk> > ( ) ;
private static Server server ;
<unk> estado ;
static void <unk> ( ) {
try {
int port ;
Properties props = new Properties ( ) ;
try {
props . load ( new FileInputStream ( " ) ) ;
if ( props . getProperty ( " ) != null ) {
port = Integer . parseInt ( props . getProperty ( " ) ) ;
} else {
port = <num> ;
}
} catch ( IOException ex ) {
port = <num> ;
}
server = new Server ( port ) ;
Context root = new Context ( server , " , Context . SESSIONS ) ;
root . addServlet ( new ServletHolder ( new <unk> ( ) ) , " ) ;
server . start ( ) ;
} catch ( Exception ex ) {
throw new RuntimeException ( ex ) ;
}
}
static void <unk> ( ) {
try {
server . stop ( ) ;
} catch ( Exception ex ) {
throw new RuntimeException ( ex ) ;
}
}
public <unk> ( ) {
initComponents ( ) ;
estado = new <unk> ( ) ;
}
public void start ( ) {
<unk> . put ( this . getName ( ) , estado ) ;
<unk> ( estado . minValue ) ;
estado . visible = isVisible ( ) ;
}
@SuppressWarnings("unchecked")
private void initComponents ( ) {
jPanel1 = new javax . swing . JPanel ( ) ;
<unk> = new javax . swing . JLabel ( ) ;
<unk> = new javax . swing . JLabel ( ) ;
jPanel1 . setBorder ( javax . swing . BorderFactory . <unk> ( javax . swing . border . BevelBorder . RAISED ) ) ;
<unk> . setHorizontalAlignment ( javax . swing . SwingConstants . CENTER ) ;
<unk> . setText ( " ) ;
<unk> . setFont ( new java . awt . Font ( " , <num> , <num> ) ) ;
<unk> . setHorizontalAlignment ( javax . swing . SwingConstants . CENTER ) ;
<unk> . setText ( " ) ;
javax . swing . GroupLayout jPanel1Layout = new javax . swing . GroupLayout ( jPanel1 ) ;
jPanel1 . setLayout ( jPanel1Layout ) ;
jPanel1Layout . setHorizontalGroup (
jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , jPanel1Layout . createSequentialGroup ( )
. addContainerGap ( )
. addGroup ( jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . TRAILING )
. addComponent ( <unk> , javax . swing . GroupLayout . Alignment . LEADING , javax . swing . GroupLayout . DEFAULT_SIZE , <num> , Short . MAX_VALUE )
. addComponent ( <unk> , javax . swing . GroupLayout . Alignment . LEADING , javax . swing . GroupLayout . DEFAULT_SIZE , <num> , Short . MAX_VALUE ) )
. addContainerGap ( ) )
) ;
jPanel1Layout . setVerticalGroup (
jPanel1Layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addGroup ( javax . swing . GroupLayout . Alignment . TRAILING , jPanel1Layout . createSequentialGroup ( )
. addComponent ( <unk> , javax . swing . GroupLayout . DEFAULT_SIZE , <num> , Short . MAX_VALUE )
. addPreferredGap ( javax . swing . LayoutStyle . ComponentPlacement . RELATED )
. addComponent ( <unk> , javax . swing . GroupLayout . PREFERRED_SIZE , <num> , javax . swing . GroupLayout . PREFERRED_SIZE )
. addContainerGap ( ) )
) ;
javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( this ) ;
this . setLayout ( layout ) ;
layout . setHorizontalGroup (
layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addGroup ( layout . createSequentialGroup ( )
. addContainerGap ( )
. addComponent ( jPanel1 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE )
. addContainerGap ( ) )
) ;
layout . setVerticalGroup (
layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addGroup ( layout . createSequentialGroup ( )
. addContainerGap ( )
. addComponent ( jPanel1 , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE )
. addContainerGap ( ) )
) ;
}
private javax . swing . JLabel <unk> ;
private javax . swing . JLabel <unk> ;
private javax . swing . JPanel jPanel1 ;
public int getCurrentValue ( ) {
return estado . currentValue ;
}
public void <unk> ( int currentValue ) {
int old = getCurrentValue ( ) ;
if ( currentValue > estado . maxValue ) {
estado . currentValue = estado . maxValue ;
} else if ( currentValue < estado . minValue ) {
estado . currentValue = estado . minValue ;
} else {
estado . currentValue = currentValue ;
}
if ( currentValue != old ) {
beep ( ) ;
refresh ( ) ;
}
}
public int getMaxValue ( ) {
return estado . maxValue ;
}
public void setMaxValue ( int maxValue ) {
estado . maxValue = maxValue ;
if ( getCurrentValue ( ) > maxValue ) {
<unk> ( maxValue ) ;
}
refresh ( ) ;
}
public int getFontSize ( ) {
return <unk> . getFont ( ) . getSize ( ) ;
}
public void setFontSize ( int fontSize ) {
<unk> . setFont ( <unk> . getFont ( ) . deriveFont ( new Float ( fontSize ) ) ) ;
<unk> . setFont ( <unk> . getFont ( ) . deriveFont ( new Float ( fontSize / <num> ) ) ) ;
}
public void reset ( ) {
<unk> ( estado . minValue ) ;
}
public void inc ( ) {
int <unk> ;
<unk> = getCurrentValue ( ) + <num> ;
if ( <unk> > estado . maxValue ) {
<unk> = <num> ;
}
<unk> ( <unk> ) ;
}
public void dec ( ) {
int <unk> ;
<unk> = getCurrentValue ( )  <num> ;
if ( <unk> < estado . minValue ) {
<unk> = estado . maxValue ;
}
<unk> ( <unk> ) ;
}
private void refresh ( ) {
<unk> . setText ( estado . <unk> ( ) ) ;
}
private void beep ( ) {
if ( estado . beep == true ) {
playSound ( " ) ;
}
}
public synchronized void playSound ( final String fileName ) {
new Thread ( new Runnable ( ) {
public void run ( ) {
try {
Clip clip = AudioSystem . <unk> ( ) ;
AudioInputStream inputStream = AudioSystem . getAudioInputStream ( new BufferedInputStream ( this . getClass ( ) . getResourceAsStream ( fileName ) ) ) ;
clip . open ( inputStream ) ;
clip . start ( ) ;
} catch ( Exception e ) {
System . err . println ( e . getMessage ( ) ) ;
}
}
} ) . start ( ) ;
}
public int getMinValue ( ) {
return estado . minValue ;
}
public void setMinValue ( int minValue ) {
estado . minValue = minValue ;
}
public boolean <unk> ( ) {
return estado . beep ;
}
public void <unk> ( boolean beep ) {
estado . beep = beep ;
}
public void save ( ) {
String <unk> = " + this . getName ( ) + " ;
Properties props = new Properties ( ) ;
try {
props . load ( new FileInputStream ( " ) ) ;
} catch ( IOException ex ) {
return ;
}
props . setProperty ( <unk> + " , String . valueOf ( getCurrentValue ( ) ) ) ;
props . setProperty ( <unk> + " , String . valueOf ( getMaxValue ( ) ) ) ;
props . setProperty ( <unk> + " , String . valueOf ( getMinValue ( ) ) ) ;
props . setProperty ( <unk> + " , String . valueOf ( <unk> ( ) ) ) ;
props . setProperty ( <unk> + " , String . valueOf ( getFontSize ( ) ) ) ;
props . setProperty ( <unk> + " , getDescription ( ) ) ;
try {
props . store ( new FileOutputStream ( " ) , " ) ;
} catch ( IOException ex ) {
return ;
}
}
public void load ( ) {
String <unk> = " + this . getName ( ) + " ;
Properties props = new Properties ( ) ;
try {
props . load ( new FileInputStream ( " ) ) ;
} catch ( IOException ex ) {
return ;
}
if ( props . getProperty ( <unk> + " ) != null ) {
estado . maxValue = Integer . parseInt ( props . getProperty ( <unk> + " ) ) ;
}
if ( props . getProperty ( <unk> + " ) != null ) {
<unk> ( Integer . parseInt ( props . getProperty ( <unk> + " ) ) ) ;
}
if ( props . getProperty ( <unk> + " ) != null ) {
estado . minValue = Integer . parseInt ( props . getProperty ( <unk> + " ) ) ;
}
if ( props . getProperty ( <unk> + " ) != null ) {
estado . beep = Boolean . parseBoolean ( props . getProperty ( <unk> + " ) ) ;
}
if ( props . getProperty ( <unk> + " ) != null ) {
setFontSize ( Integer . parseInt ( props . getProperty ( <unk> + " ) ) ) ;
}
if ( props . getProperty ( <unk> + " ) != null ) {
setDescription ( props . getProperty ( <unk> + " ) ) ;
}
refresh ( ) ;
}
public String getDescription ( ) {
return estado . description ;
}
public void setDescription ( String description ) {
estado . description = description ;
<unk> . setText ( description ) ;
}
@Override
public boolean isVisible ( ) {
return super . isVisible ( ) ;
}
@Override
public void setVisible ( boolean visible ) {
super . setVisible ( visible ) ;
estado . visible = visible ;
}
class <unk> {
public int currentValue = <num> ;
public int maxValue = <num> ;
public int minValue = <num> ;
public boolean beep = true ;
public String description = " ;
public boolean visible = true ;
public String <unk> ( ) {
StringBuffer <unk> = new StringBuffer ( currentValue + " ) ;
int len = String . valueOf ( estado . maxValue ) . length ( ) ;
while ( <unk> . length ( ) < len ) {
<unk> . insert ( <num> , " ) ;
}
return <unk> . toString ( ) ;
}
}
}
package com . example . android . location ;
import java . io . IOException ;
import java . util . List ;
import java . util . Locale ;
import android . annotation . SuppressLint ;
import android . app . AlertDialog ;
import android . app . Dialog ;
import android . content . Context ;
import android . content . DialogInterface ;
import android . content . Intent ;
import android . location . Address ;
import android . location . Geocoder ;
import android . location . Location ;
import android . location . LocationListener ;
import android . location . LocationManager ;
import android . os . AsyncTask ;
import android . os . Build ;
import android . os . Bundle ;
import android . os . Handler ;
import android . os . Message ;
import android . provider . Settings ;
import android . support . v4 . app . DialogFragment ;
import android . support . v4 . app . FragmentActivity ;
import android . view . View ;
import android . widget . Button ;
import android . widget . TextView ;
import android . widget . Toast ;
public class LocationActivity extends FragmentActivity {
private TextView <unk> ;
private TextView <unk> ;
private TextView <unk> ;
private Button <unk> ;
private Button <unk> ;
private LocationManager mLocationManager ;
private Handler mHandler ;
private boolean <unk> ;
private boolean <unk> ;
private boolean <unk> ;
private static final String <unk> = " ;
private static final String <unk> = " ;
private static final int UPDATE_ADDRESS = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> * <num> * <num> ;
@SuppressLint("NewApi")
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
if ( savedInstanceState != null ) {
<unk> = savedInstanceState . getBoolean ( <unk> ) ;
<unk> = savedInstanceState . getBoolean ( <unk> ) ;
} else {
<unk> = false ;
<unk> = false ;
}
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . address ) ;
<unk> = ( TextView ) findViewById ( R . id . accuracy ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> = Build . VERSION . SDK_INT >= Build . VERSION_CODES . GINGERBREAD
&& Geocoder . isPresent ( ) ;
mHandler = new Handler ( ) {
public void handleMessage ( Message msg ) {
switch ( msg . what ) {
case UPDATE_ADDRESS :
<unk> . setText ( ( String ) msg . obj ) ;
break ;
case <unk> :
<unk> . setText ( ( String ) msg . obj ) ;
break ;
case <unk> :
<unk> . setText ( ( String ) msg . obj ) ;
break ;
}
}
} ;
mLocationManager = ( LocationManager ) getSystemService ( Context . LOCATION_SERVICE ) ;
}
protected void onSaveInstanceState ( Bundle outState ) {
super . onSaveInstanceState ( outState ) ;
outState . putBoolean ( <unk> , <unk> ) ;
outState . putBoolean ( <unk> , <unk> ) ;
}
protected void onResume ( ) {
super . onResume ( ) ;
setup ( ) ;
}
protected void onStart ( ) {
super . onStart ( ) ;
LocationManager locationManager = ( LocationManager ) getSystemService ( Context . LOCATION_SERVICE ) ;
final boolean <unk> = locationManager
. isProviderEnabled ( LocationManager . GPS_PROVIDER ) ;
if ( ! <unk> ) {
new <unk> ( ) . show ( getSupportFragmentManager ( ) ,
" ) ;
}
}
private void <unk> ( ) {
Intent settingsIntent = new Intent (
Settings . <unk> ) ;
startActivity ( settingsIntent ) ;
}
protected void onStop ( ) {
super . onStop ( ) ;
mLocationManager . removeUpdates ( listener ) ;
}
private void setup ( ) {
Location gpsLocation = null ;
Location <unk> = null ;
mLocationManager . removeUpdates ( listener ) ;
<unk> . setText ( R . string . unknown ) ;
<unk> . setText ( R . string . unknown ) ;
<unk> . setText ( R . string . unknown ) ;
if ( <unk> ) {
<unk> . setBackgroundResource ( R . drawable . <unk> ) ;
<unk>
. setBackgroundResource ( R . drawable . <unk> ) ;
gpsLocation = <unk> (
LocationManager . GPS_PROVIDER , R . string . <unk> ) ;
if ( gpsLocation != null )
<unk> ( gpsLocation ) ;
} else if ( <unk> ) {
<unk>
. setBackgroundResource ( R . drawable . <unk> ) ;
<unk> . setBackgroundResource ( R . drawable . <unk> ) ;
gpsLocation = <unk> (
LocationManager . GPS_PROVIDER , R . string . <unk> ) ;
<unk> = <unk> (
LocationManager . NETWORK_PROVIDER ,
R . string . <unk> ) ;
if ( gpsLocation != null && <unk> != null ) {
<unk> ( <unk> ( gpsLocation , <unk> ) ) ;
} else if ( gpsLocation != null ) {
<unk> ( gpsLocation ) ;
} else if ( <unk> != null ) {
<unk> ( <unk> ) ;
}
}
}
private Location <unk> ( final String provider ,
final int <unk> ) {
Location location = null ;
if ( mLocationManager . isProviderEnabled ( provider ) ) {
mLocationManager . requestLocationUpdates ( provider , <unk> ,
<unk> , listener ) ;
location = mLocationManager . getLastKnownLocation ( provider ) ;
} else {
Toast . makeText ( this , <unk> , Toast . LENGTH_LONG ) . show ( ) ;
}
return location ;
}
public void <unk> ( View v ) {
<unk> = true ;
<unk> = false ;
setup ( ) ;
}
public void <unk> ( View v ) {
<unk> = false ;
<unk> = true ;
setup ( ) ;
}
private void <unk> ( Location location ) {
( new <unk> ( this ) ) . execute ( new Location [ ] { location } ) ;
}
private void <unk> ( Location location ) {
Message . obtain ( mHandler , <unk> ,
location . getLatitude ( ) + " + location . getLongitude ( ) )
. sendToTarget ( ) ;
Float <unk> = new Float ( location . getAccuracy ( ) ) ;
Message . obtain ( mHandler , <unk> ,
<unk> . toString ( ) + " ) . sendToTarget ( ) ;
if ( <unk> )
<unk> ( location ) ;
}
private final LocationListener listener = new LocationListener ( ) {
public void onLocationChanged ( Location location ) {
<unk> ( location ) ;
}
public void onProviderDisabled ( String provider ) {
}
public void onProviderEnabled ( String provider ) {
}
public void onStatusChanged ( String provider , int status , Bundle extras ) {
}
} ;
protected Location <unk> ( Location newLocation ,
Location <unk> ) {
if ( <unk> == null ) {
return newLocation ;
}
long <unk> = newLocation . getTime ( )  <unk> . getTime ( ) ;
boolean <unk> = <unk> > <unk> ;
boolean <unk> = <unk> <  <unk> ;
boolean <unk> = <unk> > <num> ;
if ( <unk> ) {
return newLocation ;
} else if ( <unk> ) {
return <unk> ;
}
int <unk> = ( int ) ( newLocation . getAccuracy ( )  <unk>
. getAccuracy ( ) ) ;
boolean <unk> = <unk> > <num> ;
boolean <unk> = <unk> < <num> ;
boolean <unk> = <unk> > <num> ;
boolean <unk> = <unk> ( newLocation . getProvider ( ) ,
<unk> . getProvider ( ) ) ;
if ( <unk> ) {
return newLocation ;
} else if ( <unk> && ! <unk> ) {
return newLocation ;
} else if ( <unk> && ! <unk>
&& <unk> ) {
return newLocation ;
}
return <unk> ;
}
private boolean <unk> ( String <unk> , String <unk> ) {
if ( <unk> == null ) {
return <unk> == null ;
}
return <unk> . equals ( <unk> ) ;
}
private class <unk> extends AsyncTask < Location , Void , Void > {
Context mContext ;
public <unk> ( Context context ) {
super ( ) ;
mContext = context ;
}
protected Void doInBackground ( Location . . . params ) {
Geocoder <unk> = new Geocoder ( mContext , Locale . getDefault ( ) ) ;
Location loc = params [ <num> ] ;
List < Address > addresses = null ;
try {
addresses = <unk> . getFromLocation ( loc . getLatitude ( ) ,
loc . getLongitude ( ) , <num> ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
Message . obtain ( mHandler , UPDATE_ADDRESS , e . toString ( ) )
. sendToTarget ( ) ;
}
if ( addresses != null && addresses . size ( ) > <num> ) {
Address address = addresses . get ( <num> ) ;
String <unk> = String . format (
" ,
address . getMaxAddressLineIndex ( ) > <num> ? address
. getAddressLine ( <num> ) : " , address . getLocality ( ) ,
address . <unk> ( ) ) ;
Message . obtain ( mHandler , UPDATE_ADDRESS , <unk> )
. sendToTarget ( ) ;
}
return null ;
}
}
private class <unk> extends DialogFragment {
public Dialog onCreateDialog ( Bundle savedInstanceState ) {
return new AlertDialog . Builder ( getActivity ( ) )
. setTitle ( R . string . <unk> )
. setMessage ( R . string . <unk> )
. setPositiveButton ( R . string . <unk> ,
new DialogInterface . OnClickListener ( ) {
public void onClick ( DialogInterface dialog ,
int which ) {
<unk> ( ) ;
}
} ) . create ( ) ;
}
}
}
package org . <unk> . <unk> ;
import org . xml . sax . Attributes ;
import org . xml . sax . SAXException ;
import org . xml . sax . helpers . DefaultHandler ;
import android . util . Log ;
public class <unk> extends DefaultHandler {
int count ;
int iterator =  <num> ;
private boolean <unk> = false ;
private boolean <unk> = false ;
private int [ ] <unk> ;
private boolean <unk> = false ;
private String [ ] <unk> ;
private boolean <unk> = false ;
private String [ ] desc ;
@Override
public void startDocument ( ) throws SAXException {
}
@Override
public void endDocument ( ) throws SAXException {
for ( int i = <num> ; i < count ; i ++ ) {
Log . w ( " , " + <unk> [ i ] ) ;
Log . w ( " , " + <unk> [ i ] ) ;
Log . w ( " , " + desc [ i ] ) ;
}
}
@Override
public void startElement ( String namespaceURI , String localName , String qName , Attributes atts ) throws SAXException {
Log . w ( " , " ) ;
if ( localName . equals ( " ) ) {
<unk> = true ;
count = Integer . parseInt ( atts . getValue ( " ) ) ;
<unk> = new int [ count ] ;
<unk> = new String [ count ] ;
desc = new String [ count ] ;
Log . i ( " , " + count ) ;
} else if ( localName . equals ( " ) ) {
iterator ++ ;
<unk> = true ;
<unk> [ iterator ] = Integer . parseInt ( atts . getValue ( " ) ) ;
Log . w ( " , " + <unk> [ iterator ] ) ;
} else if ( localName . equals ( " ) ) {
<unk> = true ;
} else if ( localName . equals ( " ) ) {
<unk> = true ;
}
}
@Override
public void endElement ( String namespaceURI , String localName , String qName ) throws SAXException {
if ( localName . equals ( " ) ) {
<unk> = false ;
} else if ( localName . equals ( " ) ) {
<unk> = false ;
} else if ( localName . equals ( " ) ) {
<unk> = false ;
}
}
@Override
public void characters ( char ch [ ] , int start , int length ) {
if ( <unk> ) <unk> [ iterator ] = new String ( ch , start , length ) ;
if ( <unk> ) desc [ iterator ] = new String ( ch , start , length ) ;
}
}
package org . <unk> . <unk> ;
public final class R {
public static final class attr {
}
public static final class drawable {
public static final int ic_launcher = <num> ;
}
public static final class id {
public static final int <unk> = <num> ;
public static final int listView1 = <num> ;
public static final int nodeID = <num> ;
public static final int <unk> = <num> ;
}
public static final class layout {
public static final int main = <num> ;
public static final int <unk> = <num> ;
}
public static final class string {
public static final int alarms = <num> ;
public static final int app_name = <num> ;
public static final int hello = <num> ;
public static final int nodes = <num> ;
public static final int <unk> = <num> ;
}
}
package org . <unk> . <unk> ;
import android . app . Activity ;
import android . content . Intent ;
import android . os . Bundle ;
import android . util . Log ;
import android . view . View ;
import android . widget . Button ;
public class <unk> extends Activity {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
setTitle ( " ) ;
Log . w ( " , " ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
Button <unk> = ( Button ) findViewById ( R . id . nodeID ) ;
<unk> . setOnClickListener ( new Button . OnClickListener ( ) {
public void onClick ( View v ) {
Intent myIntent = new Intent ( v . getContext ( ) , <unk> . class ) ;
startActivity ( myIntent ) ;
}
} ) ;
}
package org . <unk> . <unk> ;
import java . io . IOException ;
import java . io . StringReader ;
import javax . xml . parsers . ParserConfigurationException ;
import javax . xml . parsers . SAXParser ;
import javax . xml . parsers . SAXParserFactory ;
import android . app . Activity ;
import android . os . Bundle ;
import android . util . Log ;
import android . view . View ;
import android . widget . Button ;
import android . widget . EditText ;
import org . apache . http . client . ClientProtocolException ;
import org . apache . http . client . HttpClient ;
import org . apache . http . client . ResponseHandler ;
import org . apache . http . impl . client . BasicResponseHandler ;
import org . apache . http . client . methods . HttpGet ;
import org . apache . http . impl . client . DefaultHttpClient ;
import org . xml . sax . InputSource ;
import org . xml . sax . SAXException ;
import org . xml . sax . XMLReader ;
public class <unk> extends Activity {
String URL = " ;
String result = " ;
String username = " ;
String password = " ;
final String tag = " ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
try {
callWebService ( ) ;
} catch ( ParserConfigurationException e ) {
e . printStackTrace ( ) ;
} catch ( SAXException e ) {
e . printStackTrace ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
}
public void callWebService ( ) throws ParserConfigurationException , SAXException , IOException {
HttpClient httpclient = new DefaultHttpClient ( ) ;
HttpGet request = new HttpGet ( URL ) ;
ResponseHandler < String > handler = new BasicResponseHandler ( ) ;
try {
result = httpclient . execute ( request , handler ) ;
} catch ( ClientProtocolException e ) {
e . printStackTrace ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
httpclient . getConnectionManager ( ) . shutdown ( ) ;
Log . i ( tag , result ) ;
SAXParserFactory spf = SAXParserFactory . newInstance ( ) ;
SAXParser sp = spf . newSAXParser ( ) ;
XMLReader xr = sp . getXMLReader ( ) ;
<unk> parser = new <unk> ( ) ;
xr . setContentHandler ( parser ) ;
InputSource inputSource = new InputSource ( ) ;
inputSource . setEncoding ( " ) ;
inputSource . setCharacterStream ( new StringReader ( result ) ) ;
xr . parse ( inputSource ) ;
}
package org . <unk> . <unk> ;
import java . io . ByteArrayInputStream ;
import java . io . StringReader ;
import java . net . URL ;
import javax . xml . parsers . SAXParser ;
import javax . xml . parsers . SAXParserFactory ;
import org . apache . http . client . HttpClient ;
import org . apache . http . client . ResponseHandler ;
import org . apache . http . client . methods . HttpGet ;
import org . apache . http . client . methods . HttpPost ;
import org . apache . http . impl . client . BasicResponseHandler ;
import org . apache . http . impl . client . DefaultHttpClient ;
import org . xml . sax . InputSource ;
import org . xml . sax . XMLReader ;
import android . app . Activity ;
import android . os . Bundle ;
import android . util . Log ;
public class <unk> extends Activity {
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
Log . w ( " , " ) ;
try {
DefaultHttpClient hc = new DefaultHttpClient ( ) ;
ResponseHandler < String > res = new BasicResponseHandler ( ) ;
String queryString = " ;
HttpPost postMethod = new HttpPost ( queryString ) ;
String response = hc . execute ( postMethod , res ) ;
SAXParserFactory spf = SAXParserFactory . newInstance ( ) ;
SAXParser sp = spf . newSAXParser ( ) ;
XMLReader xr = sp . getXMLReader ( ) ;
<unk> parser = new <unk> ( ) ;
xr . setContentHandler ( parser ) ;
InputSource inputSource = new InputSource ( ) ;
inputSource . setEncoding ( " ) ;
inputSource . setCharacterStream ( new StringReader ( response ) ) ;
xr . parse ( inputSource ) ;
Log . d ( " , " ) ;
setTitle ( " ) ;
} catch ( Exception e ) {
Log . e ( " , " , e ) ;
}
}
}
package org . <unk> . <unk> ;
public final class BuildConfig {
public final static boolean DEBUG = true ;
package de . <unk> . <unk> . <unk> . agent . <unk> ;
import java . sql . Connection ;
import java . sql . DriverManager ;
import java . sql . PreparedStatement ;
import java . sql . ResultSet ;
import java . sql . SQLException ;
import java . sql . Statement ;
import java . util . List ;
import de . <unk> . <unk> . <unk> . agent . <unk> . samples . * ;
import com . <unk> . <unk> . api . services . * ;
import com . <unk> . <unk> . api . services . <unk> . <unk> ;
public class <unk> implements
com . <unk> . <unk> . api . agent . Agent , <unk> ,
<unk> {
public static final String <unk> = " ;
private final <unk> . Logger mLogger ;
private final <unk> <unk> ;
private final <unk> <unk> ;
private final <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
public <unk> ( <unk> <unk> )
throws <unk> . <unk> {
this ( <unk> , new <unk> (
<unk> ) ) ;
}
<unk> ( <unk> <unk> ,
<unk> <unk> )
throws <unk> . <unk> {
<unk> <unk> = <unk> . getService ( <unk> . class ) ;
mLogger = <unk> . getLogger ( <unk> . class ) ;
<unk> = <unk> ;
<unk> = <unk>
. getService ( <unk> . class ) ;
<unk> . <unk> ( this ) ;
<unk> = new <unk> ( this ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new <unk> (
<unk> . getService ( <unk> . class ) ) ;
<unk> = <unk> . getService ( <unk> . class ) . <unk> ( ) ;
<unk> = <unk> . getService ( <unk> . class ) ;
<unk> = <unk> . getService ( <unk> . class ) ;
mLogger . log ( " , " , " ) ;
}
@Override
public void destroy ( ) {
<unk> . <unk> ( this ) ;
<unk> . <unk> ( <unk> ) ;
}
@Override
public void <unk> ( ) {
mLogger . debug ( " ) ;
}
@Override
public void <unk> ( ) {
mLogger . debug ( " ) ;
}
public void <unk> ( ) {
mLogger . debug ( " ) ;
}
@Override
public void <unk> ( long <unk> ) {
mLogger . debug ( " ) ;
mLogger . debug ( " + <unk> ) ;
Connection connect = null ;
try {
Class . forName ( " ) ;
connect = DriverManager . getConnection ( "
+ <unk> . <unk> ( ) + "
+ <unk> . <unk> ( ) + " + "
+ <unk> . getUserName ( ) + "
+ <unk> . getPassword ( ) ) ;
mLogger . debug ( " ) ;
Statement statement = connect . createStatement ( ) ;
PreparedStatement preparedStatement = connect
. prepareStatement ( " +
" +
" +
" +
" +
" +
" ) ;
preparedStatement . setInt ( <num> , <unk> . <unk> ( ) ) ;
preparedStatement . setInt ( <num> , <unk> . <unk> ( ) ) ;
ResultSet resultSet = preparedStatement . executeQuery ( ) ;
mLogger . debug ( " + resultSet . toString ( ) ) ;
<unk> model = new <unk> ( <unk> ) ;
<unk> collection = new <unk> ( <unk> . <unk> ( ) , model ) ;
model . <unk> ( ) . add ( collection ) ;
<unk> <unk> = new <unk> ( collection ) ;
collection . <unk> ( <unk> ) ;
List < <unk> > sessions = <unk> . <unk> ( ) ;
resultSet . <unk> ( ) ;
int i = <num> ;
while ( resultSet . next ( ) ) {
System . out . println ( i + " + resultSet . getString ( <num> )
+ " + resultSet . getString ( <num> ) ) ;
i ++ ;
<unk> entry = new <unk> ( resultSet . getString ( <num> ) ) ;
entry . <unk> ( resultSet . getLong ( <num> ) ) ;
entry . <unk> ( resultSet . getLong ( <num> ) ) ;
entry . <unk> ( resultSet . getLong ( <num> ) ) ;
entry . <unk> ( resultSet . getLong ( <num> ) ) ;
sessions . add ( entry ) ;
}
collection . submit ( <unk> , <unk> , <unk> , <unk> . <unk> ( ) . getTimeInMillis ( ) ) ;
connect . close ( ) ;
} catch ( ClassNotFoundException e ) {
mLogger . <unk> ( " , e ) ;
} catch ( SQLException e ) {
mLogger . <unk> ( " , e ) ;
} catch ( <unk> e ) {
mLogger . <unk> ( " , e ) ;
} finally {
if ( connect != null )
try {
connect . close ( ) ;
} catch ( SQLException e ) {
}
}
}
package de . <unk> . <unk> . <unk> . agent . <unk> ;
import java . sql . Connection ;
import java . sql . DriverManager ;
import java . sql . ResultSet ;
import java . sql . SQLException ;
import java . sql . Statement ;
public class <unk> {
public static void main ( String [ ] args ) {
Connection connect = null ;
try {
Class . forName ( " ) ;
connect = DriverManager
. getConnection ( "
+ " ) ;
System . out . println ( " + connect . toString ( ) ) ;
Statement statement = connect . createStatement ( ) ;
ResultSet resultSet = statement
. executeQuery ( " +
" +
" +
" +
" +
" +
" ) ;
System . out . println ( " + resultSet . toString ( ) ) ;
resultSet . <unk> ( ) ;
int i = <num> ;
while ( resultSet . next ( ) ) {
System . out . println ( i + " + resultSet . getString ( <num> ) + " + resultSet . getString ( <num> ) ) ;
i ++ ;
}
connect . close ( ) ;
} catch ( ClassNotFoundException e ) {
e . printStackTrace ( ) ;
} catch ( SQLException e ) {
e . printStackTrace ( ) ;
} finally {
if ( connect != null )
try {
connect . close ( ) ;
} catch ( SQLException e ) {
}
}
}
}
package de . <unk> . <unk> . <unk> . agent . <unk> ;
import com . <unk> . <unk> . api . services . <unk> ;
import com . <unk> . <unk> . tools . <unk> . <unk> ;
import org . junit . After ;
import org . junit . Before ;
import org . junit . Test ;
public class <unk> {
private <unk> <unk> ;
private <unk> <unk> ;
@Before
public void <unk> ( ) throws <unk> . <unk> {
<unk> <unk> = new <unk> ( ) ;
<unk> = new <unk> ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> ) ;
}
@After
public void <unk> ( ) {
<unk> = null ;
if ( <unk> != null ) {
<unk> . cleanup ( ) ;
}
}
@Test
public void <unk> ( ) throws Exception {
<unk> . <unk> ( ) ;
}
@Test
public void <unk> ( ) throws Exception {
<unk> . <unk> ( ) ;
}
private static final class <unk> implements <unk> {
private final <unk> <unk> ;
private <unk> ( <unk> factory ) {
<unk> = factory ;
}
private void cleanup ( ) {
}
}
package de . <unk> . <unk> . <unk> . agent . <unk> ;
import com . <unk> . <unk> . api . services . <unk> ;
public class <unk> implements <unk> {
private final <unk> <unk> ;
public <unk> ( <unk> factory ) {
<unk> = factory ;
}
package de . <unk> . <unk> . <unk> . agent . <unk> ;
import java . io . File ;
import java . io . OutputStream ;
import java . io . PrintStream ;
import java . util . Collections ;
import java . util . List ;
import com . <unk> . <unk> . api . services . <unk> ;
public class <unk> implements <unk> {
private final <unk> <unk> ;
public <unk> ( <unk> agent ) {
<unk> = agent ;
}
public boolean <unk> ( ) {
return true ;
}
public boolean <unk> ( ) {
return false ;
}
public String <unk> ( ) {
return " + File . separator + " ;
}
public String <unk> ( ) {
return " ;
}
public boolean enabled ( ) {
if ( <unk> == null ) {
return false ;
}
return true ;
}
public void <unk> ( OutputStream output ) throws Exception {
PrintStream out = new PrintStream ( output ) ;
out . println ( " ) ;
}
@Override
public List < File > <unk> ( ) throws Exception {
return Collections . emptyList ( ) ;
}
package de . <unk> . <unk> . <unk> . agent . <unk> ;
public interface <unk> {
package vtk ;
import java . io . File ;
public enum vtkNativeLibrary {
COMMON ( " ) ,
FILTERING ( " ) ,
GEOVIS ( " ) ,
GRAPHICS ( " ) ,
HYBRID ( " ) ,
IMAGING ( " ) ,
INFOVIS ( " ) ,
IO ( " ) ,
RENDERING ( " ) ,
VIEWS ( " ) ,
VOLUME_RENDERING ( " ) ,
WIDGETS ( " ) ,
CHARTS ( " ) ;
public static boolean LoadAllNativeLibraries ( ) {
boolean isEveryThingLoaded = true ;
for ( vtkNativeLibrary lib : values ( ) ) {
try {
lib . LoadLibrary ( ) ;
} catch ( UnsatisfiedLinkError e ) {
isEveryThingLoaded = false ;
}
}
return isEveryThingLoaded ;
}
public static void LoadNativeLibraries ( vtkNativeLibrary . . . nativeLibraries ) {
for ( vtkNativeLibrary lib : nativeLibraries ) {
lib . LoadLibrary ( ) ;
}
}
public static void DisableOutputWindow ( File logFile ) {
if ( logFile == null ) {
logFile = new File ( " ) ;
}
vtkFileOutputWindow outputError = new vtkFileOutputWindow ( ) ;
outputError . SetFileName ( logFile . getAbsolutePath ( ) ) ;
outputError . SetInstance ( outputError ) ;
}
private vtkNativeLibrary ( String nativeLibraryName ) {
this . nativeLibraryName = nativeLibraryName ;
this . loaded = false ;
}
public void LoadLibrary ( ) throws UnsatisfiedLinkError {
if ( ! loaded ) {
if ( System . getProperty ( " ) != null ) {
File dir = new File ( System . getProperty ( " ) ) ;
patchJavaLibraryPath ( dir . getAbsolutePath ( ) ) ;
File libPath = new File ( dir , System . mapLibraryName ( nativeLibraryName ) ) ;
if ( libPath . exists ( ) ) {
try {
Runtime . getRuntime ( ) . load ( libPath . getAbsolutePath ( ) ) ;
loaded = true ;
return ;
} catch ( UnsatisfiedLinkError e ) {
}
}
}
System . loadLibrary ( nativeLibraryName ) ;
}
loaded = true ;
}
public boolean IsLoaded ( ) {
return loaded ;
}
public String GetLibraryName ( ) {
return nativeLibraryName ;
}
private static void patchJavaLibraryPath ( String vtkLibDir ) {
if ( vtkLibDir != null ) {
String path_separator = System . getProperty ( " ) ;
String s = System . getProperty ( " ) ;
if ( ! s . contains ( vtkLibDir ) ) {
s = s + path_separator + vtkLibDir ;
System . setProperty ( " , s ) ;
}
}
}
private String nativeLibraryName ;
private boolean loaded ;
}
package vtk ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import java . awt . event . ComponentAdapter ;
import java . awt . event . ComponentEvent ;
import java . awt . event . InputEvent ;
import java . awt . event . KeyEvent ;
import java . awt . event . KeyListener ;
import java . awt . event . MouseEvent ;
import java . awt . event . MouseListener ;
import java . awt . event . MouseMotionListener ;
import javax . swing . Timer ;
public class vtkCanvas extends vtkPanel implements MouseListener , MouseMotionListener , KeyListener {
private static final long serialVersionUID = <num> ;
protected vtkGenericRenderWindowInteractor iren = new vtkGenericRenderWindowInteractor ( ) ;
protected Timer timer = new Timer ( <num> , new DelayAction ( ) ) ;
protected int ctrlPressed = <num> ;
protected int shiftPressed = <num> ;
protected vtkPlaneWidget pw = new vtkPlaneWidget ( ) ;
protected vtkBoxWidget bw = new vtkBoxWidget ( ) ;
static {
vtkNativeLibrary . HYBRID . LoadLibrary ( ) ;
vtkNativeLibrary . WIDGETS . LoadLibrary ( ) ;
}
public void Delete ( ) {
iren = null ;
pw = null ;
bw = null ;
super . Delete ( ) ;
}
public vtkCanvas ( ) {
super ( ) ;
Initialize ( ) ;
}
public vtkCanvas ( vtkRenderWindow renwin ) {
super ( renwin ) ;
Initialize ( ) ;
}
protected void Initialize ( ) {
iren . SetRenderWindow ( rw ) ;
iren . TimerEventResetsTimerOff ( ) ;
iren . AddObserver ( " , this , " ) ;
iren . AddObserver ( " , this , " ) ;
iren . SetSize ( <num> , <num> ) ;
iren . ConfigureEvent ( ) ;
pw . AddObserver ( " , this , " ) ;
bw . AddObserver ( " , this , " ) ;
pw . SetKeyPressActivationValue ( l' ) ;
bw . SetKeyPressActivationValue ( b' ) ;
pw . SetInteractor ( iren ) ;
bw . SetInteractor ( iren ) ;
addComponentListener ( new ComponentAdapter ( ) {
public void componentResized ( ComponentEvent event ) {
int width = getWidth ( ) ;
int height = getHeight ( ) ;
setSize ( width , height ) ;
}
} ) ;
ren . SetBackground ( <num> , <num> , <num> ) ;
vtkInteractorStyleTrackballCamera style = new vtkInteractorStyleTrackballCamera ( ) ;
iren . SetInteractorStyle ( style ) ;
}
public void StartTimer ( ) {
if ( timer . isRunning ( ) )
timer . stop ( ) ;
timer . setRepeats ( true ) ;
timer . start ( ) ;
}
public void DestroyTimer ( ) {
if ( timer . isRunning ( ) )
timer . stop ( ) ;
}
@Deprecated
public vtkGenericRenderWindowInteractor getIren ( ) {
return this . iren ;
}
public vtkGenericRenderWindowInteractor getRenderWindowInteractor ( ) {
return this . iren ;
}
public void setInteractorStyle ( vtkInteractorStyle style ) {
iren . SetInteractorStyle ( style ) ;
}
public void addToPlaneWidget ( vtkProp3D prop ) {
pw . SetProp3D ( prop ) ;
pw . PlaceWidget ( ) ;
}
public void addToBoxWidget ( vtkProp3D prop ) {
bw . SetProp3D ( prop ) ;
bw . PlaceWidget ( ) ;
}
public void BeginPlaneInteraction ( ) {
System . out . println ( " ) ;
}
public void BeginBoxInteraction ( ) {
System . out . println ( " ) ;
}
public void setSize ( int x , int y ) {
super . setSize ( x , y ) ;
if ( windowset == <num> ) {
Lock ( ) ;
rw . SetSize ( x , y ) ;
iren . SetSize ( x , y ) ;
iren . ConfigureEvent ( ) ;
UnLock ( ) ;
}
}
public void mouseClicked ( MouseEvent e ) {
}
public void mousePressed ( MouseEvent e ) {
if ( ren . VisibleActorCount ( ) == <num> )
return ;
Lock ( ) ;
rw . SetDesiredUpdateRate ( <num> ) ;
lastX = e . getX ( ) ;
lastY = e . getY ( ) ;
ctrlPressed = ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) == InputEvent . CTRL_MASK ? <num> : <num> ;
shiftPressed = ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) == InputEvent . SHIFT_MASK ? <num> : <num> ;
iren . SetEventInformationFlipY ( e . getX ( ) , e . getY ( ) , ctrlPressed , shiftPressed , <num>  , <num> , " ) ;
if ( ( e . getModifiers ( ) & InputEvent . BUTTON1_MASK ) == InputEvent . BUTTON1_MASK ) {
iren . LeftButtonPressEvent ( ) ;
} else if ( ( e . getModifiers ( ) & InputEvent . BUTTON2_MASK ) == InputEvent . BUTTON2_MASK ) {
iren . MiddleButtonPressEvent ( ) ;
} else if ( ( e . getModifiers ( ) & InputEvent . BUTTON3_MASK ) == InputEvent . BUTTON3_MASK ) {
iren . RightButtonPressEvent ( ) ;
}
UnLock ( ) ;
}
public void mouseReleased ( MouseEvent e ) {
rw . SetDesiredUpdateRate ( <num> ) ;
ctrlPressed = ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) == InputEvent . CTRL_MASK ? <num> : <num> ;
shiftPressed = ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) == InputEvent . SHIFT_MASK ? <num> : <num> ;
iren . SetEventInformationFlipY ( e . getX ( ) , e . getY ( ) , ctrlPressed , shiftPressed , <num>  , <num> , " ) ;
if ( ( e . getModifiers ( ) & InputEvent . BUTTON1_MASK ) == InputEvent . BUTTON1_MASK ) {
Lock ( ) ;
iren . LeftButtonReleaseEvent ( ) ;
UnLock ( ) ;
}
if ( ( e . getModifiers ( ) & InputEvent . BUTTON2_MASK ) == InputEvent . BUTTON2_MASK ) {
Lock ( ) ;
iren . MiddleButtonReleaseEvent ( ) ;
UnLock ( ) ;
}
if ( ( e . getModifiers ( ) & InputEvent . BUTTON3_MASK ) == InputEvent . BUTTON3_MASK ) {
Lock ( ) ;
iren . RightButtonReleaseEvent ( ) ;
UnLock ( ) ;
}
}
public void mouseEntered ( MouseEvent e ) {
this . requestFocus ( ) ;
iren . SetEventInformationFlipY ( e . getX ( ) , e . getY ( ) , <num> , <num> , <num>  , <num> , " ) ;
iren . EnterEvent ( ) ;
}
public void mouseExited ( MouseEvent e ) {
iren . SetEventInformationFlipY ( e . getX ( ) , e . getY ( ) , <num> , <num> , <num>  , <num> , " ) ;
iren . LeaveEvent ( ) ;
}
public void mouseMoved ( MouseEvent e ) {
lastX = e . getX ( ) ;
lastY = e . getY ( ) ;
ctrlPressed = ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) == InputEvent . CTRL_MASK ? <num> : <num> ;
shiftPressed = ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) == InputEvent . SHIFT_MASK ? <num> : <num> ;
iren . SetEventInformationFlipY ( e . getX ( ) , e . getY ( ) , ctrlPressed , shiftPressed , <num>  , <num> , " ) ;
Lock ( ) ;
iren . MouseMoveEvent ( ) ;
UnLock ( ) ;
}
public void mouseDragged ( MouseEvent e ) {
if ( ren . VisibleActorCount ( ) == <num> )
return ;
ctrlPressed = ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) == InputEvent . CTRL_MASK ? <num> : <num> ;
shiftPressed = ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) == InputEvent . SHIFT_MASK ? <num> : <num> ;
iren . SetEventInformationFlipY ( e . getX ( ) , e . getY ( ) , ctrlPressed , shiftPressed , <num>  , <num> , " ) ;
Lock ( ) ;
iren . MouseMoveEvent ( ) ;
UnLock ( ) ;
UpdateLight ( ) ;
}
public void keyTyped ( KeyEvent e ) {
}
public void keyPressed ( KeyEvent e ) {
if ( ren . VisibleActorCount ( ) == <num> )
return ;
char keyChar = e . getKeyChar ( ) ;
ctrlPressed = ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) == InputEvent . CTRL_MASK ? <num> : <num> ;
shiftPressed = ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) == InputEvent . SHIFT_MASK ? <num> : <num> ;
iren . SetEventInformationFlipY ( lastX , lastY , ctrlPressed , shiftPressed , keyChar , <num> , String . valueOf ( keyChar ) ) ;
Lock ( ) ;
iren . KeyPressEvent ( ) ;
iren . CharEvent ( ) ;
UnLock ( ) ;
}
public void keyReleased ( KeyEvent e ) {
}
private class DelayAction implements ActionListener {
public void actionPerformed ( ActionEvent evt ) {
Lock ( ) ;
iren . TimerEvent ( ) ;
UpdateLight ( ) ;
UnLock ( ) ;
}
}
}
package vtk ;
import java . util . HashMap ;
import java . util . Map . Entry ;
import java . util . concurrent . atomic . AtomicInteger ;
public class vtkReferenceInformation {
private int numberOfObjectsToFree ;
private int numberOfObjectsStillReferenced ;
private HashMap < String , AtomicInteger > classesKept ;
private HashMap < String , AtomicInteger > classesRemoved ;
private boolean keepTrackOfClassNames ;
public vtkReferenceInformation ( int nbToFree , int nbToKeep , int totalSize ) {
this . numberOfObjectsToFree = nbToFree ;
this . numberOfObjectsStillReferenced = nbToKeep ;
this . keepTrackOfClassNames = false ;
}
public vtkReferenceInformation ( boolean keepTrackOfClassNames ) {
this . numberOfObjectsToFree = <num> ;
this . numberOfObjectsStillReferenced = <num> ;
this . keepTrackOfClassNames = keepTrackOfClassNames ;
}
public int getTotalNumberOfObjects ( ) {
return numberOfObjectsStillReferenced + numberOfObjectsToFree ;
}
public int getNumberOfObjectsToFree ( ) {
return numberOfObjectsToFree ;
}
public int getTotalNumberOfObjectsStillReferenced ( ) {
return numberOfObjectsStillReferenced ;
}
public void setNumberOfObjectsStillReferenced ( int numberOfObjectsStillReferenced ) {
this . numberOfObjectsStillReferenced = numberOfObjectsStillReferenced ;
}
public void setNumberOfObjectsToFree ( int numberOfObjectsToFree ) {
this . numberOfObjectsToFree = numberOfObjectsToFree ;
}
public void addFreeObject ( String className ) {
this . numberOfObjectsToFree ++ ;
if ( keepTrackOfClassNames ) {
if ( classesRemoved == null && className != null ) {
classesRemoved = new HashMap < String , AtomicInteger > ( ) ;
}
AtomicInteger counter = classesRemoved . get ( className ) ;
if ( counter == null ) {
classesRemoved . put ( className , new AtomicInteger ( <num> ) ) ;
} else {
counter . incrementAndGet ( ) ;
}
}
}
public void addKeptObject ( String className ) {
this . numberOfObjectsStillReferenced ++ ;
if ( keepTrackOfClassNames && className != null ) {
if ( classesKept == null ) {
classesKept = new HashMap < String , AtomicInteger > ( ) ;
}
AtomicInteger counter = classesKept . get ( className ) ;
if ( counter == null ) {
classesKept . put ( className , new AtomicInteger ( <num> ) ) ;
} else {
counter . incrementAndGet ( ) ;
}
}
}
public String listKeptReferenceToString ( ) {
if ( classesKept == null ) {
return " ;
}
final StringBuilder builder = new StringBuilder ( <num> ) ;
builder . append ( " ) ;
for ( Entry < String , AtomicInteger > entry : classesKept . entrySet ( ) ) {
builder . append ( " ) . append ( entry . getKey ( ) ) . append ( " ) . append ( entry . getValue ( ) . toString ( ) ) . append ( " ) ;
}
return builder . toString ( ) ;
}
public String listRemovedReferenceToString ( ) {
if ( classesRemoved == null ) {
return " ;
}
final StringBuilder builder = new StringBuilder ( <num> ) ;
builder . append ( " ) ;
for ( Entry < String , AtomicInteger > entry : classesRemoved . entrySet ( ) ) {
builder . append ( " ) . append ( entry . getKey ( ) ) . append ( " ) . append ( entry . getValue ( ) . toString ( ) ) . append ( " ) ;
}
return builder . toString ( ) ;
}
public String toString ( ) {
final StringBuilder builder = new StringBuilder ( <num> ) ;
builder . append ( " ) ;
builder . append ( this . numberOfObjectsToFree ) ;
builder . append ( " ) ;
builder . append ( this . numberOfObjectsStillReferenced ) ;
builder . append ( " ) ;
builder . append ( this . getTotalNumberOfObjects ( ) ) ;
builder . append ( " ) ;
return builder . toString ( ) ;
}
}
package vtk ;
public interface vtkJavaMemoryManager {
vtkObjectBase getJavaObject ( Long vtkId ) ;
void registerJavaObject ( Long id , vtkObjectBase obj ) ;
void unRegisterJavaObject ( Long id ) ;
vtkReferenceInformation gc ( boolean debug ) ;
vtkJavaGarbageCollector getAutoGarbageCollector ( ) ;
int deleteAll ( ) ;
int getSize ( ) ;
vtkReferenceInformation getLastReferenceInformation ( ) ;
}
package vtk . test ;
import vtk . vtkActor ;
import vtk . vtkArrowSource ;
import vtk . vtkJavaTesting ;
import vtk . vtkObject ;
import vtk . vtkPolyDataMapper ;
public class JavaGCAndDelete {
public static void main ( final String [ ] args ) {
vtkJavaTesting . Initialize ( args ) ;
long timeout = System . currentTimeMillis ( ) + <num> ;
int i = <num> ;
int k = <num> ;
while ( System . currentTimeMillis ( ) < timeout ) {
final vtkArrowSource arrowSource = new vtkArrowSource ( ) ;
final vtkPolyDataMapper mapper = new vtkPolyDataMapper ( ) ;
mapper . SetInput ( arrowSource . GetOutput ( ) ) ;
final vtkActor actor = new vtkActor ( ) ;
actor . SetMapper ( mapper ) ;
arrowSource . GetOutput ( ) . Delete ( ) ;
arrowSource . Delete ( ) ;
mapper . Delete ( ) ;
actor . Delete ( ) ;
++ i ;
if ( i >= <num> ) {
++ k ;
System . out . println ( vtkObject . JAVA_OBJECT_MANAGER . gc ( true ) . listKeptReferenceToString ( ) ) ;
System . out . println ( k * <num> ) ;
i = <num> ;
}
}
vtkJavaTesting . Exit ( vtkJavaTesting . PASSED ) ;
}
}
import java . lang . Thread ;
import vtk . * ;
public class Cone3 {
static {
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
}
public static void main ( String [ ] args ) throws Exception {
vtkConeSource cone = new vtkConeSource ( ) ;
cone . SetHeight ( <num> ) ;
cone . SetRadius ( <num> ) ;
cone . SetResolution ( <num> ) ;
vtkPolyDataMapper coneMapper = new vtkPolyDataMapper ( ) ;
coneMapper . SetInputConnection ( cone . GetOutputPort ( ) ) ;
vtkActor coneActor = new vtkActor ( ) ;
coneActor . SetMapper ( coneMapper ) ;
vtkRenderer ren1 = new vtkRenderer ( ) ;
ren1 . AddActor ( coneActor ) ;
ren1 . SetBackground ( <num> , <num> , <num> ) ;
ren1 . SetViewport ( <num> , <num> , <num> , <num> ) ;
vtkRenderer ren2 = new vtkRenderer ( ) ;
ren2 . AddActor ( coneActor ) ;
ren2 . SetBackground ( <num> , <num> , <num> ) ;
ren2 . SetViewport ( <num> , <num> , <num> , <num> ) ;
vtkRenderWindow renWin = new vtkRenderWindow ( ) ;
renWin . AddRenderer ( ren1 ) ;
renWin . AddRenderer ( ren2 ) ;
renWin . SetSize ( <num> , <num> ) ;
ren1 . ResetCamera ( ) ;
ren1 . GetActiveCamera ( ) . Azimuth ( <num> ) ;
int i ;
for ( i = <num> ; i < <num> ; ++ i )
{
Thread . sleep ( <num> ) ;
renWin . Render ( ) ;
ren1 . GetActiveCamera ( ) . Azimuth ( <num> ) ;
ren2 . GetActiveCamera ( ) . Azimuth ( <num> ) ;
}
}
}
package vtk . sample ;
import java . awt . BorderLayout ;
import java . awt . Dimension ;
import java . awt . Toolkit ;
import java . awt . event . ActionEvent ;
import java . awt . event . WindowAdapter ;
import java . awt . event . WindowEvent ;
import java . awt . event . WindowListener ;
import javax . swing . AbstractAction ;
import javax . swing . JDesktopPane ;
import javax . swing . JFrame ;
import javax . swing . JInternalFrame ;
import javax . swing . JMenu ;
import javax . swing . JMenuBar ;
import javax . swing . JPopupMenu ;
import javax . swing . JSplitPane ;
import javax . swing . JTabbedPane ;
import javax . swing . SwingUtilities ;
import vtk . vtkNativeLibrary ;
public class InternalFrames extends JFrame {
private static final long serialVersionUID = <num> ;
private Desktop theDesktop ;
private Dimension screenSize ;
static {
if ( ! vtkNativeLibrary . LoadAllNativeLibraries ( ) ) {
for ( vtkNativeLibrary lib : vtkNativeLibrary . values ( ) ) {
if ( ! lib . IsLoaded ( ) ) {
System . out . println ( lib . GetLibraryName ( ) + " ) ;
}
}
}
vtkNativeLibrary . DisableOutputWindow ( null ) ;
}
public InternalFrames ( ) {
super ( " ) ;
screenSize = Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) ;
this . setSize ( <num> , <num> ) ;
WindowListener l = new WindowAdapter ( ) {
public void windowClosing ( WindowEvent e ) {
System . exit ( <num> ) ;
}
} ;
this . addWindowListener ( l ) ;
this . getContentPane ( ) . add ( new SplitFrame ( ) ) ;
new MenuMgr ( ) ;
this . setVisible ( true ) ;
}
public void addMenuBar ( JMenuBar m ) {
setJMenuBar ( m ) ;
}
private class SplitFrame extends JSplitPane {
private static final long serialVersionUID = <num> ;
public SplitFrame ( ) {
super ( JSplitPane . VERTICAL_SPLIT ) ;
this . setDividerLocation ( screenSize . height / <num> ) ;
setContinuousLayout ( true ) ;
setOneTouchExpandable ( true ) ;
add ( theDesktop = new Desktop ( ) ) ;
add ( new Tabbed ( ) ) ;
}
}
private class Desktop extends JDesktopPane {
private static final long serialVersionUID = <num> ;
public Desktop ( ) {
super ( ) ;
this . setPreferredSize ( screenSize ) ;
this . setDragMode ( JDesktopPane . OUTLINE_DRAG_MODE ) ;
this . add ( new VTKFrame ( <num> , <num> ) ) ;
this . add ( new VTKFrame ( <num> , <num> ) ) ;
}
}
private class Tabbed extends JTabbedPane {
private static final long serialVersionUID = <num> ;
public Tabbed ( ) {
this . addTab ( " , new VTKCanvas ( ) ) ;
this . addTab ( " , new VTKCanvas ( ) ) ;
setMinimumSize ( new Dimension ( <num> , <num> ) ) ;
this . setSelectedIndex ( <num> ) ;
}
}
private class VTKFrame extends JInternalFrame {
private static final long serialVersionUID = <num> ;
public VTKFrame ( int x , int y ) {
super ( " , true , true , true , true ) ;
Dimension mySize = new Dimension ( ) ;
mySize . height = <num> ;
mySize . width = <num> ;
this . setSize ( mySize ) ;
this . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ;
this . setLocation ( x , y ) ;
this . getContentPane ( ) . add ( new VTKCanvas ( ) , BorderLayout . CENTER ) ;
this . pack ( ) ;
this . setVisible ( true ) ;
}
}
private class MenuMgr extends JMenuBar {
private static final long serialVersionUID = <num> ;
private JMenu menu ;
public MenuMgr ( ) {
super ( ) ;
JPopupMenu . setDefaultLightWeightPopupEnabled ( false ) ;
menu = new JMenu ( " ) ;
menu . add ( new CreateWindowAction ( " ) ) ;
menu . add ( new KillAction ( " ) ) ;
add ( menu ) ;
addMenuBar ( this ) ;
}
}
private class CreateWindowAction extends AbstractAction {
private static final long serialVersionUID = <num> ;
private int layer = <num> ;
public CreateWindowAction ( String label ) {
super ( label ) ;
}
public void actionPerformed ( ActionEvent ev ) {
theDesktop . add ( new VTKFrame ( <num> , <num> ) , new Integer ( layer ) ) ;
}
}
private class KillAction extends AbstractAction {
private static final long serialVersionUID = <num> ;
public KillAction ( String label ) {
super ( label ) ;
}
public void actionPerformed ( ActionEvent ev ) {
System . exit ( <num> ) ;
}
}
public static void main ( String [ ] args ) {
SwingUtilities . invokeLater ( new Runnable ( ) {
public void run ( ) {
new InternalFrames ( ) ;
}
} ) ;
}
}
package vtk . test ;
import vtk . vtkDoubleArray ;
import vtk . vtkJavaTesting ;
import vtk . vtkObject ;
import vtk . vtkQuadric ;
import vtk . vtkSampleFunction ;
public class JavaDelete {
public static void main ( String [ ] args ) {
try {
vtkJavaTesting . Initialize ( args , true ) ;
long timeout = System . currentTimeMillis ( ) + <num> ;
while ( System . currentTimeMillis ( ) < timeout ) {
vtkDoubleArray arr = new vtkDoubleArray ( ) ;
arr . Delete ( ) ;
vtkQuadric quadric = new vtkQuadric ( ) ;
vtkSampleFunction sample = new vtkSampleFunction ( ) ;
sample . SetSampleDimensions ( <num> , <num> , <num> ) ;
sample . SetImplicitFunction ( quadric ) ;
sample . GetImplicitFunction ( ) ;
sample . Delete ( ) ;
quadric . Delete ( ) ;
if ( vtkObject . JAVA_OBJECT_MANAGER . getSize ( ) > <num> ) {
System . out . println ( vtkObject . JAVA_OBJECT_MANAGER . gc ( true ) . listKeptReferenceToString ( ) ) ;
throw new RuntimeException ( " ) ;
}
}
vtkJavaTesting . Exit ( vtkJavaTesting . PASSED ) ;
} catch ( Throwable e ) {
e . printStackTrace ( ) ;
vtkJavaTesting . Exit ( vtkJavaTesting . FAILED ) ;
}
}
}
package vtk ;
import java . util . concurrent . Executors ;
import java . util . concurrent . ScheduledExecutorService ;
import java . util . concurrent . TimeUnit ;
import vtk . vtkObject ;
import vtk . vtkRenderWindow ;
import vtk . vtkSettings ;
import vtk . vtkTesting ;
public class vtkJavaTesting {
public static final int FAILED = <num> ;
public static final int PASSED = <num> ;
public static final int NOT_RUN = <num> ;
public static final int DO_INTERACTOR = <num> ;
private static int LoadLib ( String lib , boolean verbose ) {
try {
if ( verbose ) {
System . out . println ( " + lib ) ;
}
Runtime . getRuntime ( ) . load ( lib ) ;
} catch ( UnsatisfiedLinkError e ) {
if ( verbose ) {
System . out . println ( " + lib ) ;
}
return <num> ;
}
if ( verbose ) {
System . out . println ( " + lib ) ;
}
return <num> ;
}
private static void LoadLibrary ( String path , String library , boolean verbose ) {
String lname = System . mapLibraryName ( library ) ;
String sep = System . getProperty ( " ) ;
String libname = path + sep + lname ;
String releaselibname = path + sep + " + sep + lname ;
String debuglibname = path + sep + " + sep + lname ;
if ( vtkJavaTesting . LoadLib ( library , verbose ) != 1
&& vtkJavaTesting . LoadLib ( libname , verbose ) != 1
&& vtkJavaTesting . LoadLib ( releaselibname , verbose ) != 1
&& vtkJavaTesting . LoadLib ( debuglibname , verbose ) != <num> ) {
System . out . println ( " ) ;
}
}
public static void Initialize ( String [ ] args ) {
vtkJavaTesting . Initialize ( args , false ) ;
}
public static void Initialize ( String [ ] args , boolean verbose ) {
String lpath = vtkSettings . GetVTKLibraryDir ( ) ;
if ( lpath != null ) {
String path_separator = System . getProperty ( " ) ;
String s = System . getProperty ( " ) ;
s = s + path_separator + lpath ;
System . setProperty ( " , s ) ;
}
String [ ] kits = vtkSettings . GetKits ( ) ;
int cc ;
for ( cc = <num> ; cc < kits . length ; cc ++ ) {
vtkJavaTesting . LoadLibrary ( lpath , " + kits [ cc ] + " , verbose ) ;
}
vtkJavaTesting . Tester = new vtk . vtkTesting ( ) ;
for ( cc = <num> ; cc < args . length ; cc ++ ) {
vtkJavaTesting . Tester . AddArgument ( args [ cc ] ) ;
}
}
public static boolean IsInteractive ( ) {
if ( vtkJavaTesting . Tester . IsInteractiveModeSpecified ( ) == <num> ) {
return false ;
}
return true ;
}
public static void Exit ( int retVal ) {
vtkJavaTesting . Tester = null ;
System . gc ( ) ;
vtkObject . JAVA_OBJECT_MANAGER . gc ( true ) ;
if ( retVal == vtkJavaTesting . FAILED || retVal == vtkJavaTesting . NOT_RUN ) {
System . out . println ( " ) ;
System . exit ( <num> ) ;
}
System . out . println ( " ) ;
System . exit ( <num> ) ;
}
public static int RegressionTest ( vtkRenderWindow renWin , int threshold ) {
vtkJavaTesting . Tester . SetRenderWindow ( renWin ) ;
if ( vtkJavaTesting . Tester . RegressionTest ( threshold ) == vtkJavaTesting . PASSED ) {
return vtkJavaTesting . PASSED ;
}
System . out . println ( " + vtkJavaTesting . Tester . GetImageDifference ( ) ) ;
return vtkJavaTesting . FAILED ;
}
public static void StartTimeoutExit ( long time , TimeUnit unit ) {
ScheduledExecutorService killerThread = Executors . newSingleThreadScheduledExecutor ( ) ;
Runnable killer = new Runnable ( ) {
public void run ( ) {
System . exit ( <num> ) ;
}
} ;
killerThread . schedule ( killer , time , unit ) ;
}
public static vtkJavaGarbageCollector StartGCInEDT ( long time , TimeUnit unit ) {
vtkJavaGarbageCollector gc = vtkObject . JAVA_OBJECT_MANAGER . getAutoGarbageCollector ( ) ;
gc . SetScheduleTime ( time , unit ) ;
gc . SetAutoGarbageCollection ( true ) ;
return gc ;
}
private static vtkTesting Tester = null ;
}
package vtk ;
import java . lang . ref . WeakReference ;
import java . lang . reflect . Constructor ;
import java . util . HashMap ;
import java . util . TreeSet ;
import java . util . concurrent . locks . ReentrantLock ;
public class vtkJavaMemoryManagerImpl implements vtkJavaMemoryManager {
private vtkJavaGarbageCollector garbageCollector ;
private ReentrantLock lock ;
private vtkReferenceInformation lastGcResult ;
private HashMap < Long , WeakReference < vtkObjectBase >> objectMap ;
private HashMap < Long , String > objectMapClassName ;
public vtkJavaMemoryManagerImpl ( ) {
this . lock = new ReentrantLock ( ) ;
this . objectMap = new HashMap < Long , WeakReference < vtkObjectBase >> ( ) ;
this . objectMapClassName = new HashMap < Long , String > ( ) ;
this . garbageCollector = new vtkJavaGarbageCollector ( ) ;
}
public vtkObjectBase getJavaObject ( Long vtkId ) {
if ( vtkId == null || vtkId . longValue ( ) == <num> ) {
throw new RuntimeException ( " ) ;
}
WeakReference < vtkObjectBase > value = objectMap . get ( vtkId ) ;
vtkObjectBase resultObject = ( value == null ) ? null : value . get ( ) ;
if ( value == null || resultObject == null ) {
try {
this . lock . lock ( ) ;
value = objectMap . get ( vtkId ) ;
resultObject = ( value == null ) ? null : value . get ( ) ;
if ( resultObject != null ) {
return resultObject ;
}
if ( value != null && resultObject == null ) {
this . unRegisterJavaObject ( vtkId ) ;
}
if ( resultObject == null ) {
try {
String className = vtkObjectBase . VTKGetClassNameFromReference ( vtkId . longValue ( ) ) ;
Class c = Class . forName ( " + className ) ;
Constructor cons = c . getConstructor ( new Class [ ] { long . class } ) ;
resultObject = ( vtkObjectBase ) cons . newInstance ( new Object [ ] { vtkId } ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
} finally {
this . lock . unlock ( ) ;
}
}
return resultObject ;
}
public void registerJavaObject ( Long id , vtkObjectBase obj ) {
try {
this . lock . lock ( ) ;
this . objectMap . put ( id , new WeakReference < vtkObjectBase > ( obj ) ) ;
this . objectMapClassName . put ( id , obj . GetClassName ( ) ) ;
} finally {
this . lock . unlock ( ) ;
}
}
public void unRegisterJavaObject ( Long id ) {
try {
this . lock . lock ( ) ;
this . objectMapClassName . remove ( id ) ;
WeakReference < vtkObjectBase > value = this . objectMap . remove ( id ) ;
if ( value != null ) {
vtkObjectBase . VTKDeleteReference ( id . longValue ( ) ) ;
} else {
throw new RuntimeException ( " ) ;
}
} finally {
this . lock . unlock ( ) ;
}
}
public vtkReferenceInformation gc ( boolean debug ) {
System . gc ( ) ;
try {
this . lock . lock ( ) ;
final vtkReferenceInformation infos = new vtkReferenceInformation ( debug ) ;
for ( Long id : new TreeSet < Long > ( this . objectMap . keySet ( ) ) ) {
vtkObjectBase obj = this . objectMap . get ( id ) . get ( ) ;
if ( obj == null ) {
infos . addFreeObject ( this . objectMapClassName . get ( id ) ) ;
this . unRegisterJavaObject ( id ) ;
} else {
infos . addKeptObject ( this . objectMapClassName . get ( id ) ) ;
}
}
this . lastGcResult = infos ;
return infos ;
} finally {
this . lock . unlock ( ) ;
}
}
public vtkJavaGarbageCollector getAutoGarbageCollector ( ) {
return this . garbageCollector ;
}
public int deleteAll ( ) {
int size = this . objectMap . size ( ) ;
try {
this . lock . lock ( ) ;
for ( Long id : new TreeSet < Long > ( this . objectMap . keySet ( ) ) ) {
this . unRegisterJavaObject ( id ) ;
}
} finally {
this . lock . unlock ( ) ;
}
return size ;
}
public int getSize ( ) {
return objectMap . size ( ) ;
}
public vtkReferenceInformation getLastReferenceInformation ( ) {
return this . lastGcResult ;
}
}
package vtk ;
public enum CellType {
VERTEX ( <num> , <num> ) ,
POLY_VERTEX ( <num> ,  <num> ) ,
LINE ( <num> , <num> ) ,
POLY_LINE ( <num> ,  <num> ) ,
TRIANGLE ( <num> , <num> ) ,
TRIANGLE_STRIP ( <num> ,  <num> ) ,
POLYGON ( <num> ,  <num> ) ,
PIXEL ( <num> , <num> ) ,
QUAD ( <num> , <num> ) ,
TETRA ( <num> , <num> ) ,
VOXEL ( <num> , <num> ) ,
HEXAHEDRON ( <num> , <num> ) ,
WEDGE ( <num> , <num> ) ,
PYRAMID ( <num> , <num> ) ,
PENTAGONAL_PRISM ( <num> , <num> ) ,
HEXAGONAL_PRISM ( <num> , <num> ) ,
QUADRATRIC_EDGE ( <num> , <num> ) ,
QUADRATRIC_TRIANGLE ( <num> , <num> ) ,
QUADRATRIC_QUAD ( <num> , <num> ) ,
QUADRATRIC_TETRA ( <num> , <num> ) ,
QUADRATRIC_HEXAHEDRON ( <num> , <num> ) ,
QUADRATRIC_WEDGE ( <num> , <num> ) ,
QUADRATRIC_PYRAMID ( <num> , <num> ) ;
private CellType ( int id , int nbPoints ) {
this . id = id ;
this . nbPoints = nbPoints ;
}
public int GetId ( ) {
return id ;
}
public int GetNumberOfPoints ( ) {
return nbPoints ;
}
public boolean IsDynamicNumberOfPoints ( ) {
return nbPoints ==  <num> ;
}
public static CellType GetCellType ( int vtkCellId ) {
if ( MAPPING == null ) {
int max = <num> ;
for ( CellType cellType : values ( ) ) {
max = Math . max ( max , cellType . GetId ( ) ) ;
}
MAPPING = new CellType [ max + <num> ] ;
for ( CellType cellType : values ( ) ) {
MAPPING [ cellType . GetId ( ) ] = cellType ;
}
}
return MAPPING [ vtkCellId ] ;
}
private int id ;
private int nbPoints ;
private static CellType [ ] MAPPING ;
}
package vtk . sample ;
import java . awt . BorderLayout ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import java . lang . reflect . InvocationTargetException ;
import java . util . concurrent . Callable ;
import java . util . concurrent . CompletionService ;
import java . util . concurrent . ExecutionException ;
import java . util . concurrent . ExecutorCompletionService ;
import java . util . concurrent . Executors ;
import java . util . concurrent . TimeUnit ;
import javax . swing . Box ;
import javax . swing . BoxLayout ;
import javax . swing . JCheckBox ;
import javax . swing . JFrame ;
import javax . swing . JLabel ;
import javax . swing . JPanel ;
import javax . swing . SwingUtilities ;
import javax . swing . Timer ;
import vtk . vtkActor ;
import vtk . vtkDataSetMapper ;
import vtk . vtkNativeLibrary ;
import vtk . vtkObject ;
import vtk . vtkPanel ;
import vtk . vtkReferenceInformation ;
import vtk . vtkRenderer ;
import vtk . vtkShrinkFilter ;
import vtk . vtkSphereSource ;
public class Demo extends JPanel {
private static final long serialVersionUID = <num> ;
private vtkPanel panel3d ;
private JCheckBox runGC ;
private JCheckBox debugMode ;
private JLabel gcStatus ;
private int NUMBER_OF_PIPLINE_TO_BUILD = <num> ;
private int nbSeconds ;
private final CompletionService < vtkActor > exec ;
static {
if ( ! vtkNativeLibrary . LoadAllNativeLibraries ( ) ) {
for ( vtkNativeLibrary lib : vtkNativeLibrary . values ( ) ) {
if ( ! lib . IsLoaded ( ) ) {
System . out . println ( lib . GetLibraryName ( ) + " ) ;
}
}
}
vtkNativeLibrary . DisableOutputWindow ( null ) ;
}
public static class AddActorRunnable implements Runnable {
private vtkActor actorToAdd ;
private vtkRenderer renderer ;
private vtkPanel panel ;
void setRenderer ( vtkPanel panel ) {
this . renderer = panel . GetRenderer ( ) ;
this . panel = panel ;
}
void setActor ( vtkActor a ) {
this . actorToAdd = a ;
}
public void run ( ) {
this . renderer . AddActor ( this . actorToAdd ) ;
this . panel . Render ( ) ;
}
}
public static class PipelineBuilder implements Callable < vtkActor > {
private vtkActor actor ;
private vtkDataSetMapper mapper ;
private vtkShrinkFilter shrink ;
private vtkSphereSource sphere ;
public vtkActor call ( ) throws Exception {
actor = new vtkActor ( ) ;
mapper = new vtkDataSetMapper ( ) ;
shrink = new vtkShrinkFilter ( ) ;
sphere = new vtkSphereSource ( ) ;
sphere . SetPhiResolution ( <num> ) ;
sphere . SetThetaResolution ( <num> ) ;
double [ ] center = new double [ <num> ] ;
sphere . SetCenter ( GetRandomCenter ( center ) ) ;
actor . GetProperty ( ) . SetColor ( Math . random ( ) , Math . random ( ) , Math . random ( ) ) ;
actor . SetMapper ( mapper ) ;
mapper . SetInputConnection ( shrink . GetOutputPort ( ) ) ;
shrink . SetInputConnection ( sphere . GetOutputPort ( ) ) ;
mapper . Update ( ) ;
Thread . sleep ( ( long ) ( Math . random ( ) * <num> ) ) ;
return actor ;
}
public double [ ] GetRandomCenter ( double [ ] center ) {
for ( int i = <num> ; i < <num> ; i ++ ) {
center [ i ] = Math . random ( ) * <num> ;
}
return center ;
}
}
public Demo ( ) {
super ( new BorderLayout ( ) ) ;
panel3d = new vtkPanel ( ) ;
gcStatus = new JLabel ( " ) ;
runGC = new JCheckBox ( " , false ) ;
debugMode = new JCheckBox ( " , false ) ;
exec = new ExecutorCompletionService < vtkActor > ( Executors . newFixedThreadPool ( Runtime . getRuntime ( ) . availableProcessors ( ) ) ) ;
JPanel statusBar = new JPanel ( ) ;
statusBar . setLayout ( new BoxLayout ( statusBar , BoxLayout . X_AXIS ) ) ;
statusBar . add ( runGC ) ;
statusBar . add ( debugMode ) ;
statusBar . add ( Box . createHorizontalGlue ( ) ) ;
statusBar . add ( gcStatus ) ;
add ( panel3d , BorderLayout . CENTER ) ;
add ( statusBar , BorderLayout . SOUTH ) ;
this . setupWorkers ( ) ;
this . nbSeconds = <num> ;
new Timer ( <num> , new ActionListener ( ) {
public void actionPerformed ( ActionEvent e ) {
if ( nbSeconds ++ < <num> ) {
panel3d . resetCamera ( ) ;
}
vtkRenderer renderer = panel3d . GetRenderer ( ) ;
if ( renderer . GetNumberOfPropsRendered ( ) > <num> ) {
renderer . RemoveActor ( renderer . GetActors ( ) . GetLastProp ( ) ) ;
}
if ( runGC . isSelected ( ) ) {
vtkReferenceInformation info = vtkObject . JAVA_OBJECT_MANAGER . gc ( debugMode . isSelected ( ) ) ;
if ( debugMode . isSelected ( ) ) {
System . out . println ( info . listKeptReferenceToString ( ) ) ;
System . out . println ( info . listRemovedReferenceToString ( ) ) ;
}
gcStatus . setText ( info . toString ( ) ) ;
} else {
gcStatus . setText ( " ) ;
}
panel3d . Render ( ) ;
}
} ) . start ( ) ;
}
private void setupGC ( ) {
vtkObject . JAVA_OBJECT_MANAGER . getAutoGarbageCollector ( ) . SetScheduleTime ( <num> , TimeUnit . SECONDS ) ;
runGC . addActionListener ( new ActionListener ( ) {
public void actionPerformed ( ActionEvent arg0 ) {
vtkObject . JAVA_OBJECT_MANAGER . getAutoGarbageCollector ( ) . SetAutoGarbageCollection ( runGC . isSelected ( ) ) ;
}
} ) ;
debugMode . addActionListener ( new ActionListener ( ) {
public void actionPerformed ( ActionEvent arg0 ) {
vtkObject . JAVA_OBJECT_MANAGER . getAutoGarbageCollector ( ) . SetDebug ( debugMode . isSelected ( ) ) ;
}
} ) ;
}
private void setupWorkers ( ) {
final AddActorRunnable adderRunnable = new AddActorRunnable ( ) ;
adderRunnable . setRenderer ( panel3d ) ;
new Thread ( ) {
public void run ( ) {
for ( int i = <num> ; i < NUMBER_OF_PIPLINE_TO_BUILD ; i ++ ) {
try {
adderRunnable . setActor ( exec . take ( ) . get ( ) ) ;
SwingUtilities . invokeAndWait ( adderRunnable ) ;
panel3d . repaint ( ) ;
} catch ( InterruptedException e ) {
return ;
} catch ( ExecutionException e ) {
e . printStackTrace ( ) ;
} catch ( InvocationTargetException e ) {
e . printStackTrace ( ) ;
}
}
} ;
} . start ( ) ;
}
public void startWorking ( ) {
for ( int i = <num> ; i < NUMBER_OF_PIPLINE_TO_BUILD ; i ++ ) {
exec . submit ( new PipelineBuilder ( ) ) ;
}
}
public static void main ( String [ ] args ) throws InterruptedException , InvocationTargetException {
SwingUtilities . invokeLater ( new Runnable ( ) {
public void run ( ) {
Demo app = new Demo ( ) ;
JFrame f = new JFrame ( " ) ;
f . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ;
f . getContentPane ( ) . add ( app , BorderLayout . CENTER ) ;
f . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
f . setSize ( <num> , <num> ) ;
f . setVisible ( true ) ;
f . validate ( ) ;
app . startWorking ( ) ;
}
} ) ;
}
}
package vtk ;
import java . awt . Canvas ;
import java . awt . Graphics ;
import java . awt . event . InputEvent ;
import java . awt . event . KeyEvent ;
import java . awt . event . KeyListener ;
import java . awt . event . MouseEvent ;
import java . awt . event . MouseListener ;
import java . awt . event . MouseMotionListener ;
import javax . swing . SwingUtilities ;
public class vtkPanel extends Canvas implements MouseListener , MouseMotionListener , KeyListener {
private static final long serialVersionUID = <num> ;
protected vtkRenderWindow rw = new vtkRenderWindow ( ) ;
protected vtkRenderer ren = new vtkRenderer ( ) ;
protected vtkCamera cam = null ;
protected vtkLight lgt = new vtkLight ( ) ;
protected int lastX ;
protected int lastY ;
protected int windowset = <num> ;
protected int lightingset = <num> ;
protected int LightFollowCamera = <num> ;
protected int InteractionMode = <num> ;
protected boolean rendering = false ;
static {
vtkNativeLibrary . COMMON . LoadLibrary ( ) ;
vtkNativeLibrary . FILTERING . LoadLibrary ( ) ;
vtkNativeLibrary . IO . LoadLibrary ( ) ;
vtkNativeLibrary . IMAGING . LoadLibrary ( ) ;
vtkNativeLibrary . GRAPHICS . LoadLibrary ( ) ;
vtkNativeLibrary . RENDERING . LoadLibrary ( ) ;
try {
vtkNativeLibrary . HYBRID . LoadLibrary ( ) ;
} catch ( UnsatisfiedLinkError e ) {
System . out . println ( " ) ;
}
try {
vtkNativeLibrary . VOLUME_RENDERING . LoadLibrary ( ) ;
} catch ( Throwable e ) {
System . out . println ( " ) ;
}
}
public void lock ( ) {
Lock ( ) ;
}
public void unlock ( ) {
UnLock ( ) ;
}
public void Delete ( ) {
if ( rendering ) {
return ;
}
rendering = true ;
if ( this . getParent ( ) != null ) {
this . getParent ( ) . remove ( this ) ;
}
ren = null ;
cam = null ;
lgt = null ;
if ( ! rw . GetClassName ( ) . equals ( " ) ) {
rw = null ;
} else {
System . out . println ( " ) ;
}
}
protected native int RenderCreate ( vtkRenderWindow id0 ) ;
protected native int Lock ( ) ;
protected native int UnLock ( ) ;
public vtkPanel ( ) {
rw . AddRenderer ( ren ) ;
addMouseListener ( this ) ;
addMouseMotionListener ( this ) ;
addKeyListener ( this ) ;
super . setSize ( <num> , <num> ) ;
rw . SetSize ( <num> , <num> ) ;
}
public vtkPanel ( vtkRenderWindow renwin ) {
rw = renwin ;
rw . AddRenderer ( ren ) ;
addMouseListener ( this ) ;
addMouseMotionListener ( this ) ;
addKeyListener ( this ) ;
super . setSize ( <num> , <num> ) ;
rw . SetSize ( <num> , <num> ) ;
}
public void Report ( ) {
Runnable updateAComponent = new Runnable ( ) {
public void run ( ) {
Lock ( ) ;
System . out . println ( " + ( rw . IsDirect ( ) == <num> ) ) ;
System . out . println ( " + ( rw . SupportsOpenGL ( ) == <num> ) ) ;
System . out . println ( " + rw . ReportCapabilities ( ) ) ;
UnLock ( ) ;
}
} ;
SwingUtilities . invokeLater ( updateAComponent ) ;
}
public vtkRenderer GetRenderer ( ) {
return ren ;
}
public vtkRenderWindow GetRenderWindow ( ) {
return rw ;
}
public void setSize ( int x , int y ) {
super . setSize ( x , y ) ;
if ( windowset == <num> ) {
Lock ( ) ;
rw . SetSize ( x , y ) ;
UnLock ( ) ;
}
}
public void addNotify ( ) {
super . addNotify ( ) ;
windowset = <num> ;
rw . SetForceMakeCurrent ( ) ;
rendering = false ;
}
public void removeNotify ( ) {
rendering = true ;
super . removeNotify ( ) ;
}
public synchronized void Render ( ) {
if ( ! rendering ) {
rendering = true ;
if ( ren . VisibleActorCount ( ) == <num> ) {
rendering = false ;
return ;
}
if ( rw != null ) {
if ( windowset == <num> ) {
cam = ren . GetActiveCamera ( ) ;
if ( lightingset == <num> ) {
ren . AddLight ( lgt ) ;
lgt . SetPosition ( cam . GetPosition ( ) ) ;
lgt . SetFocalPoint ( cam . GetFocalPoint ( ) ) ;
lightingset = <num> ;
}
RenderCreate ( rw ) ;
Lock ( ) ;
rw . SetSize ( getWidth ( ) , getHeight ( ) ) ;
UnLock ( ) ;
windowset = <num> ;
this . setSize ( getWidth ( ) , getHeight ( ) ) ;
}
Lock ( ) ;
rw . Render ( ) ;
UnLock ( ) ;
rendering = false ;
}
}
}
public boolean isWindowSet ( ) {
return ( this . windowset == <num> ) ;
}
public void paint ( Graphics g ) {
this . Render ( ) ;
}
public void update ( Graphics g ) {
paint ( g ) ;
}
public void LightFollowCameraOn ( ) {
this . LightFollowCamera = <num> ;
}
public void LightFollowCameraOff ( ) {
this . LightFollowCamera = <num> ;
}
public void InteractionModeRotate ( ) {
this . InteractionMode = <num> ;
}
public void InteractionModeTranslate ( ) {
this . InteractionMode = <num> ;
}
public void InteractionModeZoom ( ) {
this . InteractionMode = <num> ;
}
public void UpdateLight ( ) {
lgt . SetPosition ( cam . GetPosition ( ) ) ;
lgt . SetFocalPoint ( cam . GetFocalPoint ( ) ) ;
}
public void resetCameraClippingRange ( ) {
Lock ( ) ;
ren . ResetCameraClippingRange ( ) ;
UnLock ( ) ;
}
public void resetCamera ( ) {
Lock ( ) ;
ren . ResetCamera ( ) ;
UnLock ( ) ;
}
public void mouseClicked ( MouseEvent e ) {
}
public void mousePressed ( MouseEvent e ) {
if ( ren . VisibleActorCount ( ) == <num> )
return ;
rw . SetDesiredUpdateRate ( <num> ) ;
lastX = e . getX ( ) ;
lastY = e . getY ( ) ;
if ( ( e . getModifiers ( ) == InputEvent . BUTTON2_MASK ) || ( e . getModifiers ( ) == ( InputEvent . BUTTON1_MASK | InputEvent . SHIFT_MASK ) ) ) {
InteractionModeTranslate ( ) ;
} else if ( e . getModifiers ( ) == InputEvent . BUTTON3_MASK ) {
InteractionModeZoom ( ) ;
} else {
InteractionModeRotate ( ) ;
}
}
public void mouseReleased ( MouseEvent e ) {
rw . SetDesiredUpdateRate ( <num> ) ;
}
public void mouseEntered ( MouseEvent e ) {
this . requestFocus ( ) ;
}
public void mouseExited ( MouseEvent e ) {
}
public void mouseMoved ( MouseEvent e ) {
lastX = e . getX ( ) ;
lastY = e . getY ( ) ;
}
public void mouseDragged ( MouseEvent e ) {
if ( ren . VisibleActorCount ( ) == <num> )
return ;
int x = e . getX ( ) ;
int y = e . getY ( ) ;
if ( this . InteractionMode == <num> ) {
cam . Azimuth ( lastX  x ) ;
cam . Elevation ( y  lastY ) ;
cam . OrthogonalizeViewUp ( ) ;
resetCameraClippingRange ( ) ;
if ( this . LightFollowCamera == <num> ) {
lgt . SetPosition ( cam . GetPosition ( ) ) ;
lgt . SetFocalPoint ( cam . GetFocalPoint ( ) ) ;
}
}
if ( this . InteractionMode == <num> ) {
double FPoint [ ] ;
double PPoint [ ] ;
double APoint [ ] = new double [ <num> ] ;
double RPoint [ ] ;
double focalDepth ;
FPoint = cam . GetFocalPoint ( ) ;
PPoint = cam . GetPosition ( ) ;
ren . SetWorldPoint ( FPoint [ <num> ] , FPoint [ <num> ] , FPoint [ <num> ] , <num> ) ;
ren . WorldToDisplay ( ) ;
focalDepth = ren . GetDisplayPoint ( ) [ <num> ] ;
APoint [ <num> ] = rw . GetSize ( ) [ <num> ] / <num> + ( x  lastX ) ;
APoint [ <num> ] = rw . GetSize ( ) [ <num> ] / <num>  ( y  lastY ) ;
APoint [ <num> ] = focalDepth ;
ren . SetDisplayPoint ( APoint ) ;
ren . DisplayToWorld ( ) ;
RPoint = ren . GetWorldPoint ( ) ;
if ( RPoint [ <num> ] != <num> ) {
RPoint [ <num> ] = RPoint [ <num> ] / RPoint [ <num> ] ;
RPoint [ <num> ] = RPoint [ <num> ] / RPoint [ <num> ] ;
RPoint [ <num> ] = RPoint [ <num> ] / RPoint [ <num> ] ;
}
cam . SetFocalPoint ( ( FPoint [ <num> ]  RPoint [ <num> ] ) / <num> + FPoint [ <num> ] , ( FPoint [ <num> ]  RPoint [ <num> ] ) / <num> + FPoint [ <num> ] , ( FPoint [ <num> ]  RPoint [ <num> ] ) / <num> + FPoint [ <num> ] ) ;
cam . SetPosition ( ( FPoint [ <num> ]  RPoint [ <num> ] ) / <num> + PPoint [ <num> ] , ( FPoint [ <num> ]  RPoint [ <num> ] ) / <num> + PPoint [ <num> ] , ( FPoint [ <num> ]  RPoint [ <num> ] ) / <num> + PPoint [ <num> ] ) ;
resetCameraClippingRange ( ) ;
}
if ( this . InteractionMode == <num> ) {
double zoomFactor ;
zoomFactor = Math . pow ( <num> , ( y  lastY ) ) ;
if ( cam . GetParallelProjection ( ) == <num> ) {
cam . SetParallelScale ( cam . GetParallelScale ( ) / zoomFactor ) ;
} else {
cam . Dolly ( zoomFactor ) ;
resetCameraClippingRange ( ) ;
}
}
lastX = x ;
lastY = y ;
this . Render ( ) ;
}
public void keyTyped ( KeyEvent e ) {
}
public void keyPressed ( KeyEvent e ) {
if ( ren . VisibleActorCount ( ) == <num> )
return ;
char keyChar = e . getKeyChar ( ) ;
if ( r' == keyChar ) {
resetCamera ( ) ;
this . Render ( ) ;
}
if ( u' == keyChar ) {
pickActor ( lastX , lastY ) ;
}
if ( w' == keyChar ) {
vtkActorCollection ac ;
vtkActor anActor ;
int i ;
ac = ren . GetActors ( ) ;
ac . InitTraversal ( ) ;
for ( i = <num> ; i < ac . GetNumberOfItems ( ) ; i ++ ) {
anActor = ac . GetNextActor ( ) ;
anActor . GetProperty ( ) . SetRepresentationToWireframe ( ) ;
}
this . Render ( ) ;
}
if ( s' == keyChar ) {
vtkActorCollection ac ;
vtkActor anActor ;
int i ;
ac = ren . GetActors ( ) ;
ac . InitTraversal ( ) ;
for ( i = <num> ; i < ac . GetNumberOfItems ( ) ; i ++ ) {
anActor = ac . GetNextActor ( ) ;
anActor . GetProperty ( ) . SetRepresentationToSurface ( ) ;
}
this . Render ( ) ;
}
}
public void HardCopy ( String filename , int mag ) {
Lock ( ) ;
vtkWindowToImageFilter w2if = new vtkWindowToImageFilter ( ) ;
w2if . SetInput ( rw ) ;
w2if . SetMagnification ( mag ) ;
w2if . Update ( ) ;
vtkTIFFWriter writer = new vtkTIFFWriter ( ) ;
writer . SetInput ( w2if . GetOutput ( ) ) ;
writer . SetFileName ( filename ) ;
writer . Write ( ) ;
UnLock ( ) ;
}
public void pickActor ( int x , int y ) {
vtkPropPicker picker = new vtkPropPicker ( ) ;
Lock ( ) ;
picker . PickProp ( x , rw . GetSize ( ) [ <num> ]  y , ren ) ;
UnLock ( ) ;
if ( picker . GetActor ( ) != null )
System . out . println ( picker . GetActor ( ) . GetClassName ( ) ) ;
}
public void keyReleased ( KeyEvent e ) {
}
}
package vtk . test ;
import java . lang . reflect . InvocationTargetException ;
import java . util . concurrent . TimeUnit ;
import vtk . vtkJavaGarbageCollector ;
import vtk . vtkJavaTesting ;
import vtk . vtkPoints ;
import vtk . vtkUnstructuredGrid ;
public class ConcurrencyGC {
public static void main ( String [ ] args ) throws InterruptedException , InvocationTargetException {
try {
vtkJavaTesting . Initialize ( args , true ) ;
Runnable workingJob = new Runnable ( ) {
public void run ( ) {
try {
vtkUnstructuredGrid grid = new vtkUnstructuredGrid ( ) ;
grid . SetPoints ( new vtkPoints ( ) ) ;
vtkPoints p ;
long timeout = System . currentTimeMillis ( ) + <num> ;
while ( System . currentTimeMillis ( ) < timeout ) {
p = grid . GetPoints ( ) ;
if ( p == null ) {
throw new RuntimeException ( " ) ;
}
if ( p . GetReferenceCount ( ) != <num> ) {
throw new RuntimeException ( " + p . GetReferenceCount ( ) ) ;
}
}
} catch ( Throwable e ) {
e . printStackTrace ( ) ;
vtkJavaTesting . Exit ( vtkJavaTesting . FAILED ) ;
}
}
} ;
Thread worker1 = new Thread ( workingJob ) ;
Thread worker2 = new Thread ( workingJob ) ;
worker1 . start ( ) ;
worker2 . start ( ) ;
vtkJavaGarbageCollector gc = vtkJavaTesting . StartGCInEDT ( <num> , TimeUnit . MILLISECONDS ) ;
new Thread ( gc . GetDeleteRunnable ( ) ) . start ( ) ;
worker1 . join ( ) ;
worker2 . join ( ) ;
gc . Stop ( ) ;
vtkJavaTesting . Exit ( vtkJavaTesting . PASSED ) ;
} catch ( Throwable e ) {
e . printStackTrace ( ) ;
vtkJavaTesting . Exit ( vtkJavaTesting . FAILED ) ;
}
}
}
import vtk . * ;
public class Cone {
static {
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
}
public static void main ( String [ ] args ) {
vtkConeSource cone = new vtkConeSource ( ) ;
cone . SetHeight ( <num> ) ;
cone . SetRadius ( <num> ) ;
cone . SetResolution ( <num> ) ;
vtkPolyDataMapper coneMapper = new vtkPolyDataMapper ( ) ;
coneMapper . SetInputConnection ( cone . GetOutputPort ( ) ) ;
vtkActor coneActor = new vtkActor ( ) ;
coneActor . SetMapper ( coneMapper ) ;
vtkRenderer ren1 = new vtkRenderer ( ) ;
ren1 . AddActor ( coneActor ) ;
ren1 . SetBackground ( <num> , <num> , <num> ) ;
vtkRenderWindow renWin = new vtkRenderWindow ( ) ;
renWin . AddRenderer ( ren1 ) ;
renWin . SetSize ( <num> , <num> ) ;
int i ;
for ( i = <num> ; i < <num> ; ++ i )
{
renWin . Render ( ) ;
ren1 . GetActiveCamera ( ) . Azimuth ( <num> ) ;
}
}
}
import java . awt . BorderLayout ;
import java . awt . GridLayout ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import java . awt . event . KeyEvent ;
import java . awt . event . WindowAdapter ;
import java . awt . event . WindowEvent ;
import java . beans . PropertyChangeListener ;
import java . io . File ;
import java . util . Random ;
import javax . swing . JButton ;
import javax . swing . JFileChooser ;
import javax . swing . JFrame ;
import javax . swing . JMenu ;
import javax . swing . JMenuBar ;
import javax . swing . JMenuItem ;
import javax . swing . JPanel ;
import javax . swing . JPopupMenu ;
import javax . swing . JToolBar ;
import javax . swing . KeyStroke ;
import javax . swing . filechooser . FileNameExtensionFilter ;
import vtk . * ;
public class Focus extends JFrame {
private vtkRenderWindowPanel mainPanel = new vtkRenderWindowPanel ( ) ;
private vtkRenderWindowPanel focusPanel = new vtkRenderWindowPanel ( ) ;
private vtkRenderedGraphRepresentation mainRep = new vtkRenderedGraphRepresentation ( ) ;
private vtkRenderedGraphRepresentation focusRep = new vtkRenderedGraphRepresentation ( ) ;
private vtkDelimitedTextReader reader = new vtkDelimitedTextReader ( ) ;
private vtkTableToGraph tableToGraph = new vtkTableToGraph ( ) ;
private vtkBoostBreadthFirstSearch mainBFS = new vtkBoostBreadthFirstSearch ( ) ;
private vtkBoostBreadthFirstSearch bfs = new vtkBoostBreadthFirstSearch ( ) ;
private vtkExtractSelectedGraph extract = new vtkExtractSelectedGraph ( ) ;
private vtkGraphLayout layout = new vtkGraphLayout ( ) ;
private vtkGraphLayoutView mainView = new vtkGraphLayoutView ( ) ;
private vtkGraphLayoutView focusView = new vtkGraphLayoutView ( ) ;
private vtkAnnotationLink link = new vtkAnnotationLink ( ) ;
private vtkDoubleArray thresh = new vtkDoubleArray ( ) ;
public Focus ( ) {
ViewChangedObserver obs = new ViewChangedObserver ( ) ;
this . link . AddObserver ( " , obs , " ) ;
this . reader . SetFileName ( " ) ;
this . tableToGraph . SetInputConnection ( this . reader . GetOutputPort ( ) ) ;
this . tableToGraph . AddLinkEdge ( " , " ) ;
vtkSimple2DLayoutStrategy strategy = new vtkSimple2DLayoutStrategy ( ) ;
this . layout . SetLayoutStrategy ( strategy ) ;
this . layout . SetInputConnection ( this . tableToGraph . GetOutputPort ( ) ) ;
this . mainBFS . SetInputConnection ( this . layout . GetOutputPort ( ) ) ;
this . bfs . SetInputConnection ( this . mainBFS . GetOutputPort ( ) ) ;
this . extract . SetInputConnection ( <num> , this . bfs . GetOutputPort ( ) ) ;
vtkSelection select = new vtkSelection ( ) ;
vtkSelectionNode node = new vtkSelectionNode ( ) ;
node . SetContentType ( <num> ) ;
node . SetFieldType ( <num> ) ;
this . thresh . SetName ( " ) ;
this . thresh . InsertNextValue ( <num> ) ;
this . thresh . InsertNextValue ( <num> ) ;
node . SetSelectionList ( this . thresh ) ;
select . AddNode ( node ) ;
this . extract . SetInput ( <num> , select ) ;
this . mainRep . SetInputConnection ( this . bfs . GetOutputPort ( ) ) ;
this . focusRep . SetInputConnection ( this . extract . GetOutputPort ( ) ) ;
this . mainView . AddRepresentation ( this . mainRep ) ;
this . mainView . SetVertexLabelArrayName ( " ) ;
this . mainView . VertexLabelVisibilityOn ( ) ;
this . mainView . SetLayoutStrategyToPassThrough ( ) ;
this . mainView . SetVertexColorArrayName ( " ) ;
this . mainView . ColorVerticesOn ( ) ;
this . focusView . AddRepresentation ( this . focusRep ) ;
this . focusView . SetVertexLabelArrayName ( " ) ;
this . focusView . VertexLabelVisibilityOn ( ) ;
this . focusView . SetVertexColorArrayName ( " ) ;
this . focusView . ColorVerticesOn ( ) ;
vtkViewTheme t = new vtkViewTheme ( ) ;
vtkViewTheme theme = t . CreateMellowTheme ( ) ;
theme . SetPointHueRange ( <num> , <num> ) ;
theme . SetPointSaturationRange ( <num> , <num> ) ;
theme . SetPointValueRange ( <num> , <num> ) ;
this . mainView . ApplyViewTheme ( theme ) ;
this . focusView . ApplyViewTheme ( theme ) ;
this . mainPanel = new vtkRenderWindowPanel ( this . mainView . GetRenderWindow ( ) ) ;
this . focusPanel = new vtkRenderWindowPanel ( this . focusView . GetRenderWindow ( ) ) ;
this . mainRep . SetSelectionType ( <num> ) ;
this . focusRep . SetSelectionType ( <num> ) ;
this . mainPanel . setSize ( <num> , <num> ) ;
this . focusPanel . setSize ( <num> , <num> ) ;
this . mainRep . SetAnnotationLink ( this . link ) ;
this . focusRep . SetAnnotationLink ( this . link ) ;
GridLayout layout = new GridLayout ( <num> , <num> ) ;
layout . setHgap ( <num> ) ;
layout . setVgap ( <num> ) ;
JPanel panel = new JPanel ( ) ;
panel . setLayout ( layout ) ;
panel . add ( mainPanel ) ;
panel . add ( focusPanel ) ;
JMenuBar menuBar ;
JMenu menu ;
JMenuItem menuItem ;
menuBar = new JMenuBar ( ) ;
menu = new JMenu ( " ) ;
menu . setMnemonic ( KeyEvent . VK_F ) ;
menuBar . add ( menu ) ;
menuItem = new JMenuItem ( " , KeyEvent . VK_X ) ;
menuItem . setAccelerator ( KeyStroke . getKeyStroke ( KeyEvent . VK_O ,
ActionEvent . CTRL_MASK ) ) ;
menuItem . addActionListener ( new ActionListener ( ) {
public void actionPerformed ( ActionEvent e ) {
final JFileChooser fc = new JFileChooser ( ) ;
int returnVal = fc . showOpenDialog ( null ) ;
if ( returnVal == JFileChooser . APPROVE_OPTION ) {
File f = fc . getSelectedFile ( ) ;
reader . SetFileName ( f . getAbsolutePath ( ) ) ;
ViewChangedObserver obs = new ViewChangedObserver ( ) ;
obs . SelectionChanged ( ) ;
}
} } ) ;
menu . add ( menuItem ) ;
JToolBar toolbar = new JToolBar ( ) ;
JButton increase = new JButton ( " ) ;
increase . addActionListener ( new ActionListener ( ) {
public void actionPerformed ( ActionEvent e ) {
thresh . SetValue ( <num> , thresh . GetValue ( <num> ) + <num> ) ;
extract . Modified ( ) ;
update ( ) ;
} } ) ;
toolbar . add ( increase ) ;
JButton decrease = new JButton ( " ) ;
decrease . addActionListener ( new ActionListener ( ) {
public void actionPerformed ( ActionEvent e ) {
if ( thresh . GetValue ( <num> ) > <num> ) {
thresh . SetValue ( <num> , thresh . GetValue ( <num> )  <num> ) ;
extract . Modified ( ) ;
update ( ) ;
}
} } ) ;
toolbar . add ( decrease ) ;
this . setJMenuBar ( menuBar ) ;
this . add ( toolbar , BorderLayout . NORTH ) ;
this . add ( panel ) ;
}
void update ( ) {
this . mainPanel . Render ( ) ;
this . focusPanel . Render ( ) ;
this . mainView . ResetCamera ( ) ;
this . focusView . ResetCamera ( ) ;
this . mainView . Render ( ) ;
this . focusView . Render ( ) ;
}
private class ViewChangedObserver {
void SelectionChanged ( ) {
vtkSelection currentSel = link . GetCurrentSelection ( ) ;
vtkConvertSelection convert = new vtkConvertSelection ( ) ;
vtkSelection indexSel =
convert . ToIndexSelection ( currentSel , tableToGraph . GetOutput ( ) ) ;
if ( currentSel . GetNumberOfNodes ( ) > <num> ) {
vtkIdTypeArray ids = ( vtkIdTypeArray ) indexSel . GetNode ( <num> ) .
GetSelectionList ( ) ;
if ( ids != null && ids . GetNumberOfTuples ( ) == <num> ) {
bfs . SetOriginVertex ( ids . GetValue ( <num> ) ) ;
bfs . Modified ( ) ;
focusPanel . Render ( ) ;
focusView . GetRenderer ( ) . ResetCamera ( ) ;
}
}
mainPanel . Render ( ) ;
focusPanel . Render ( ) ;
}
}
static {
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
}
public static void main ( String args [ ] ) {
JPopupMenu . setDefaultLightWeightPopupEnabled ( false ) ;
final Focus app = new Focus ( ) ;
javax . swing . SwingUtilities . invokeLater ( new Runnable ( ) {
public void run ( ) {
app . setTitle ( " ) ;
app . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
app . pack ( ) ;
app . setVisible ( true ) ;
app . addWindowListener ( new WindowAdapter ( ) {
public void windowClosing ( WindowEvent e ) {
vtkGlobalJavaHash . DeleteAll ( ) ;
}
} ) ;
app . update ( ) ;
} } ) ;
}
}
package vtk . test ;
import vtk . vtkActor ;
import vtk . vtkConeSource ;
import vtk . vtkImageData ;
import vtk . vtkImageDifference ;
import vtk . vtkJavaTesting ;
import vtk . vtkObject ;
import vtk . vtkPNGWriter ;
import vtk . vtkPolyDataMapper ;
import vtk . vtkRenderWindow ;
import vtk . vtkRenderWindowInteractor ;
import vtk . vtkRenderer ;
import vtk . vtkShortArray ;
import vtk . vtkUnsignedCharArray ;
import vtk . vtkUnsignedShortArray ;
import vtk . vtkWindowToImageFilter ;
public class Regression {
public static void main ( String [ ] args ) {
vtkJavaTesting . Initialize ( args , true ) ;
vtkShortArray array = new vtkShortArray ( ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
array . InsertNextTuple1 ( <num> ) ;
short [ ] carray = array . GetJavaArray ( ) ;
int cc ;
System . out . print ( " ) ;
for ( cc = <num> ; cc < carray . length ; cc ++ ) {
short i = carray [ cc ] ;
System . out . print ( i ) ;
}
System . out . println ( " ) ;
vtkUnsignedShortArray narray = new vtkUnsignedShortArray ( ) ;
narray . SetJavaArray ( carray ) ;
System . out . print ( " ) ;
for ( cc = <num> ; cc <= narray . GetMaxId ( ) ; cc ++ ) {
int i = narray . GetValue ( cc ) ;
System . out . print ( i ) ;
}
System . out . println ( " ) ;
vtkRenderWindow renWin = new vtkRenderWindow ( ) ;
vtkRenderer ren1 = new vtkRenderer ( ) ;
renWin . AddRenderer ( ren1 ) ;
vtkRenderWindowInteractor iren = new vtkRenderWindowInteractor ( ) ;
iren . SetRenderWindow ( renWin ) ;
vtkConeSource cone = new vtkConeSource ( ) ;
cone . SetResolution ( <num> ) ;
vtkPolyDataMapper coneMapper = new vtkPolyDataMapper ( ) ;
coneMapper . SetInput ( cone . GetOutput ( ) ) ;
vtkActor coneActor = new vtkActor ( ) ;
coneActor . SetMapper ( coneMapper ) ;
ren1 . AddActor ( coneActor ) ;
renWin . Render ( ) ;
vtkWindowToImageFilter w2i = new vtkWindowToImageFilter ( ) ;
w2i . SetInput ( renWin ) ;
w2i . Modified ( ) ;
renWin . Render ( ) ;
w2i . Update ( ) ;
vtkImageData image = w2i . GetOutput ( ) ;
vtkUnsignedCharArray da = ( vtkUnsignedCharArray ) image . GetPointData ( ) . GetScalars ( ) ;
byte [ ] barray = da . GetJavaArray ( ) ;
System . out . println ( " + barray . length ) ;
vtkUnsignedCharArray nda = new vtkUnsignedCharArray ( ) ;
nda . SetJavaArray ( barray ) ;
vtkImageData nimage = new vtkImageData ( ) ;
nimage . SetDimensions ( image . GetDimensions ( ) ) ;
nimage . SetSpacing ( image . GetSpacing ( ) ) ;
nimage . SetOrigin ( image . GetOrigin ( ) ) ;
nimage . SetScalarType ( image . GetScalarType ( ) ) ;
nimage . SetNumberOfScalarComponents ( image . GetNumberOfScalarComponents ( ) ) ;
nimage . AllocateScalars ( ) ;
vtkUnsignedCharArray nida = ( vtkUnsignedCharArray ) nimage . GetPointData ( ) . GetScalars ( ) ;
nida . SetJavaArray ( barray ) ;
int retVal0 = vtkJavaTesting . PASSED ;
for ( cc = <num> ; cc <= da . GetMaxId ( ) ; cc ++ ) {
int v1 = <num> , v2 = <num> , v3 = <num> ;
v1 = da . GetValue ( cc ) ;
if ( cc <= nda . GetMaxId ( ) ) {
v2 = nda . GetValue ( cc ) ;
} else {
System . out . println ( " + cc + " ) ;
retVal0 = vtkJavaTesting . FAILED ;
}
if ( cc <= nida . GetMaxId ( ) ) {
v3 = nida . GetValue ( cc ) ;
} else {
System . out . println ( " + cc + " ) ;
retVal0 = vtkJavaTesting . FAILED ;
}
if ( v1 != v2 || v1 != v3 ) {
System . out . println ( " + v1 + " + v2 + " + v3 ) ;
retVal0 = vtkJavaTesting . FAILED ;
}
}
vtkImageDifference imgDiff = new vtkImageDifference ( ) ;
imgDiff . SetInput ( nimage ) ;
imgDiff . SetImage ( image ) ;
imgDiff . Update ( ) ;
int retVal1 = vtkJavaTesting . PASSED ;
if ( imgDiff . GetThresholdedError ( ) != <num> ) {
System . out . println ( " + imgDiff . GetThresholdedError ( ) ) ;
vtkPNGWriter wr = new vtkPNGWriter ( ) ;
wr . SetInput ( image ) ;
wr . SetFileName ( " ) ;
wr . Write ( ) ;
wr . SetInput ( nimage ) ;
wr . SetFileName ( " ) ;
wr . Write ( ) ;
wr . SetInput ( imgDiff . GetOutput ( ) ) ;
wr . SetFileName ( " ) ;
wr . Write ( ) ;
retVal1 = vtkJavaTesting . FAILED ;
}
int retVal2 = vtkJavaTesting . PASSED ;
if ( vtkJavaTesting . IsInteractive ( ) ) {
iren . Start ( ) ;
} else {
retVal2 = vtkJavaTesting . RegressionTest ( renWin , <num> ) ;
}
vtkObject . JAVA_OBJECT_MANAGER . deleteAll ( ) ;
if ( retVal0 != vtkJavaTesting . PASSED ) {
vtkJavaTesting . Exit ( retVal0 ) ;
}
if ( retVal1 != vtkJavaTesting . PASSED ) {
vtkJavaTesting . Exit ( retVal1 ) ;
}
vtkJavaTesting . Exit ( retVal2 ) ;
}
}
import java . lang . Thread ;
import vtk . * ;
public class Cone4 {
static {
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
}
public static void main ( String [ ] args ) throws Exception {
vtkConeSource cone = new vtkConeSource ( ) ;
cone . SetHeight ( <num> ) ;
cone . SetRadius ( <num> ) ;
cone . SetResolution ( <num> ) ;
vtkPolyDataMapper coneMapper = new vtkPolyDataMapper ( ) ;
coneMapper . SetInputConnection ( cone . GetOutputPort ( ) ) ;
vtkActor coneActor = new vtkActor ( ) ;
coneActor . SetMapper ( coneMapper ) ;
coneActor . GetProperty ( ) . SetColor ( <num> , <num> , <num> ) ;
coneActor . GetProperty ( ) . SetDiffuse ( <num> ) ;
coneActor . GetProperty ( ) . SetSpecular ( <num> ) ;
coneActor . GetProperty ( ) . SetSpecularPower ( <num> ) ;
vtkProperty property = new vtkProperty ( ) ;
property . SetColor ( <num> , <num> , <num> ) ;
property . SetDiffuse ( <num> ) ;
property . SetSpecular ( <num> ) ;
property . SetSpecularPower ( <num> ) ;
vtkActor coneActor2 = new vtkActor ( ) ;
coneActor2 . SetMapper ( coneMapper ) ;
coneActor2 . GetProperty ( ) . SetColor ( <num> , <num> , <num> ) ;
coneActor2 . SetProperty ( property ) ;
coneActor2 . SetPosition ( <num> , <num> , <num> ) ;
vtkRenderer ren1 = new vtkRenderer ( ) ;
ren1 . AddActor ( coneActor ) ;
ren1 . AddActor ( coneActor2 ) ;
ren1 . SetBackground ( <num> , <num> , <num> ) ;
vtkRenderWindow renWin = new vtkRenderWindow ( ) ;
renWin . AddRenderer ( ren1 ) ;
renWin . SetSize ( <num> , <num> ) ;
ren1 . ResetCamera ( ) ;
ren1 . GetActiveCamera ( ) . Azimuth ( <num> ) ;
int i ;
for ( i = <num> ; i < <num> ; ++ i )
{
Thread . sleep ( <num> ) ;
renWin . Render ( ) ;
ren1 . GetActiveCamera ( ) . Azimuth ( <num> ) ;
}
}
}
package vtk ;
import java . util . concurrent . Executors ;
import java . util . concurrent . ScheduledExecutorService ;
import java . util . concurrent . TimeUnit ;
import javax . swing . SwingUtilities ;
public class vtkJavaGarbageCollector {
private ScheduledExecutorService executor ;
private Runnable deleteRunnable ;
private Runnable deferredEdtRunnable ;
private long periodTime ;
private TimeUnit timeUnit ;
private boolean autoCollectionRunning ;
private boolean debug ;
public vtkJavaGarbageCollector ( ) {
debug = false ;
periodTime = <num> ;
timeUnit = TimeUnit . SECONDS ;
autoCollectionRunning = false ;
executor = Executors . newSingleThreadScheduledExecutor ( ) ;
deleteRunnable = new Runnable ( ) {
public void run ( ) {
vtkReferenceInformation info = vtkObject . JAVA_OBJECT_MANAGER . gc ( debug ) ;
if ( debug ) {
System . out . println ( info ) ;
System . out . println ( info . listKeptReferenceToString ( ) ) ;
System . out . println ( info . listRemovedReferenceToString ( ) ) ;
}
}
} ;
deferredEdtRunnable = new Runnable ( ) {
public void run ( ) {
SwingUtilities . invokeLater ( deleteRunnable ) ;
}
} ;
}
public void SetScheduleTime ( long period , TimeUnit timeUnit ) {
this . periodTime = period ;
this . timeUnit = timeUnit ;
SetAutoGarbageCollection ( autoCollectionRunning ) ;
}
public void SetDebug ( boolean debug ) {
this . debug = debug ;
}
public void SetAutoGarbageCollection ( boolean doGarbageCollectionInEDT ) {
autoCollectionRunning = doGarbageCollectionInEDT ;
executor . shutdown ( ) ;
if ( doGarbageCollectionInEDT ) {
executor = Executors . newSingleThreadScheduledExecutor ( ) ;
executor . scheduleAtFixedRate ( deferredEdtRunnable , periodTime , periodTime , timeUnit ) ;
}
}
public void Start ( ) {
this . SetAutoGarbageCollection ( true ) ;
}
public void Stop ( ) {
this . SetAutoGarbageCollection ( false ) ;
}
public Runnable GetDeleteRunnable ( ) {
return deleteRunnable ;
}
}
package vtk . sample ;
import java . awt . BorderLayout ;
import java . awt . GridLayout ;
import javax . swing . JFrame ;
import javax . swing . JPanel ;
import vtk . AxesActor ;
import vtk . vtkActor ;
import vtk . vtkCanvas ;
import vtk . vtkConeSource ;
import vtk . vtkNativeLibrary ;
import vtk . vtkObject ;
import vtk . vtkPolyDataMapper ;
import vtk . vtkReferenceInformation ;
public class VTKCanvas extends JPanel {
private static final long serialVersionUID = <num> ;
static {
if ( ! vtkNativeLibrary . LoadAllNativeLibraries ( ) ) {
for ( vtkNativeLibrary lib : vtkNativeLibrary . values ( ) ) {
if ( ! lib . IsLoaded ( ) ) {
System . out . println ( lib . GetLibraryName ( ) + " ) ;
}
}
}
vtkNativeLibrary . DisableOutputWindow ( null ) ;
}
public VTKCanvas ( ) {
setLayout ( new BorderLayout ( ) ) ;
vtkCanvas renWin = new vtkCanvas ( ) ;
add ( renWin , BorderLayout . CENTER ) ;
vtkConeSource cone = new vtkConeSource ( ) ;
cone . SetResolution ( <num> ) ;
vtkPolyDataMapper coneMapper = new vtkPolyDataMapper ( ) ;
coneMapper . SetInput ( cone . GetOutput ( ) ) ;
vtkActor coneActor = new vtkActor ( ) ;
coneActor . SetMapper ( coneMapper ) ;
renWin . GetRenderer ( ) . AddActor ( coneActor ) ;
AxesActor aa = new AxesActor ( renWin . GetRenderer ( ) ) ;
renWin . GetRenderer ( ) . AddActor ( aa ) ;
}
public static void main ( String s [ ] ) {
VTKCanvas panel = new VTKCanvas ( ) ;
VTKCanvas panel2 = new VTKCanvas ( ) ;
JFrame frame = new JFrame ( " ) ;
frame . getContentPane ( ) . setLayout ( new GridLayout ( <num> , <num> ) ) ;
frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
frame . getContentPane ( ) . add ( panel ) ;
frame . getContentPane ( ) . add ( panel2 ) ;
frame . setSize ( <num> , <num> ) ;
frame . setLocationRelativeTo ( null ) ;
frame . setVisible ( true ) ;
vtkReferenceInformation infos = vtkObject . JAVA_OBJECT_MANAGER . gc ( true ) ;
System . out . println ( infos ) ;
System . out . println ( infos . listRemovedReferenceToString ( ) ) ;
System . out . println ( infos . listKeptReferenceToString ( ) ) ;
}
}
package vtk . test ;
import vtk . vtkIdTypeArray ;
import vtk . vtkJavaTesting ;
import vtk . vtkObject ;
import vtk . vtkObjectBase ;
import vtk . vtkReferenceInformation ;
import vtk . vtkSelection ;
import vtk . vtkSelectionNode ;
public class ManualGC {
private static vtkIdTypeArray createSelection ( ) {
vtkSelection sel = new vtkSelection ( ) ;
vtkSelectionNode node = new vtkSelectionNode ( ) ;
vtkIdTypeArray arr = new vtkIdTypeArray ( ) ;
node . SetSelectionList ( arr ) ;
sel . AddNode ( node ) ;
return arr ;
}
public static void main ( String [ ] args ) {
try {
vtkJavaTesting . Initialize ( args , true ) ;
int count = <num> ;
long timeout = System . currentTimeMillis ( ) + <num> ;
while ( System . currentTimeMillis ( ) < timeout ) {
vtkIdTypeArray arr = createSelection ( ) ;
for ( int i = <num> ; i < <num> ; ++ i ) {
arr . Register ( null ) ;
vtkObjectBase . VTKDeleteReference ( arr . GetVTKId ( ) ) ;
}
++ count ;
if ( count % <num> == <num> ) {
vtkReferenceInformation infos = vtkObject . JAVA_OBJECT_MANAGER . gc ( false ) ;
System . out . println ( infos . toString ( ) ) ;
}
}
vtkJavaTesting . Exit ( vtkJavaTesting . PASSED ) ;
} catch ( Throwable e ) {
e . printStackTrace ( ) ;
vtkJavaTesting . Exit ( vtkJavaTesting . FAILED ) ;
}
}
}
package vtk . sample ;
import java . awt . BorderLayout ;
import java . awt . GridLayout ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import java . awt . event . WindowAdapter ;
import java . awt . event . WindowEvent ;
import java . util . concurrent . TimeUnit ;
import javax . swing . JButton ;
import javax . swing . JComponent ;
import javax . swing . JFrame ;
import javax . swing . JPanel ;
import javax . swing . SwingUtilities ;
import vtk . vtkActor ;
import vtk . vtkConeSource ;
import vtk . vtkNativeLibrary ;
import vtk . vtkObject ;
import vtk . vtkPanel ;
import vtk . vtkPolyDataMapper ;
public class ReleaseVtkPanel {
static {
if ( ! vtkNativeLibrary . LoadAllNativeLibraries ( ) ) {
for ( vtkNativeLibrary lib : vtkNativeLibrary . values ( ) ) {
if ( ! lib . IsLoaded ( ) ) {
System . out . println ( lib . GetLibraryName ( ) + " ) ;
}
}
}
vtkNativeLibrary . DisableOutputWindow ( null ) ;
}
private static class VtkApplication extends JPanel {
private static final long serialVersionUID =  <num> ;
private vtkPanel panel3dA ;
private vtkPanel panel3dB ;
public VtkApplication ( ) {
super ( new GridLayout ( <num> , <num> ) ) ;
panel3dA = new vtkPanel ( ) ;
panel3dB = new vtkPanel ( ) ;
vtkConeSource cone = new vtkConeSource ( ) ;
vtkPolyDataMapper mapper = new vtkPolyDataMapper ( ) ;
vtkActor actor = new vtkActor ( ) ;
mapper . SetInputConnection ( cone . GetOutputPort ( ) ) ;
actor . SetMapper ( mapper ) ;
panel3dA . GetRenderer ( ) . AddActor ( actor ) ;
add ( panel3dA ) ;
panel3dB . GetRenderer ( ) . AddActor ( actor ) ;
add ( panel3dB ) ;
}
public void Delete ( ) {
panel3dA . Delete ( ) ;
panel3dB . Delete ( ) ;
}
}
public static void main ( String [ ] args ) {
SwingUtilities . invokeLater ( new Runnable ( ) {
public void run ( ) {
vtkObject . JAVA_OBJECT_MANAGER . getAutoGarbageCollector ( ) . SetScheduleTime ( <num> , TimeUnit . SECONDS ) ;
vtkObject . JAVA_OBJECT_MANAGER . getAutoGarbageCollector ( ) . SetDebug ( true ) ;
vtkObject . JAVA_OBJECT_MANAGER . getAutoGarbageCollector ( ) . Start ( ) ;
JButton startVTKApp = new JButton ( " ) ;
startVTKApp . addActionListener ( new ActionListener ( ) {
public void actionPerformed ( ActionEvent e ) {
final VtkApplication app = new VtkApplication ( ) ;
JFrame f = buildFrame ( " , app , <num> , <num> ) ;
f . addWindowListener ( new WindowAdapter ( ) {
public void windowClosing ( WindowEvent e ) {
app . Delete ( ) ;
}
} ) ;
f . setVisible ( true ) ;
}
} ) ;
JFrame mainFrame = buildFrame ( " , startVTKApp , <num> , <num> ) ;
mainFrame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
mainFrame . setVisible ( true ) ;
}
} ) ;
}
public static JFrame buildFrame ( String title , JComponent content , int width , int height ) {
JFrame f = new JFrame ( title ) ;
f . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ;
f . getContentPane ( ) . add ( content , BorderLayout . CENTER ) ;
f . setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ;
f . setSize ( width , height ) ;
f . setLocationRelativeTo ( null ) ;
return f ;
}
}
import vtk . * ;
public class Cone2 {
static {
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
}
public void myCallback ( )
{
System . out . println ( " ) ;
}
public static void main ( String [ ] args ) {
vtkConeSource cone = new vtkConeSource ( ) ;
cone . SetHeight ( <num> ) ;
cone . SetRadius ( <num> ) ;
cone . SetResolution ( <num> ) ;
vtkPolyDataMapper coneMapper = new vtkPolyDataMapper ( ) ;
coneMapper . SetInputConnection ( cone . GetOutputPort ( ) ) ;
vtkActor coneActor = new vtkActor ( ) ;
coneActor . SetMapper ( coneMapper ) ;
vtkRenderer ren1 = new vtkRenderer ( ) ;
ren1 . AddActor ( coneActor ) ;
ren1 . SetBackground ( <num> , <num> , <num> ) ;
Cone2 me = new Cone2 ( ) ;
ren1 . AddObserver ( " , me , " ) ;
vtkRenderWindow renWin = new vtkRenderWindow ( ) ;
renWin . AddRenderer ( ren1 ) ;
renWin . SetSize ( <num> , <num> ) ;
int i ;
for ( i = <num> ; i < <num> ; ++ i )
{
renWin . Render ( ) ;
ren1 . GetActiveCamera ( ) . Azimuth ( <num> ) ;
}
}
}
package vtk ;
public class AxesActor extends vtkAssembly {
private vtkRenderer ren ;
private double axisLength = <num> ;
private vtkTextActor xactor , yactor , zactor ;
public AxesActor ( vtkRenderer _ren ) {
super ( ) ;
ren = _ren ;
createAxes ( ) ;
}
public void createAxes ( ) {
vtkAxes axes = new vtkAxes ( ) ;
axes . SetOrigin ( <num> , <num> , <num> ) ;
axes . SetScaleFactor ( axisLength ) ;
xactor = new vtkTextActor ( ) ;
yactor = new vtkTextActor ( ) ;
zactor = new vtkTextActor ( ) ;
xactor . SetInput ( " ) ;
yactor . SetInput ( " ) ;
zactor . SetInput ( " ) ;
xactor . ScaledTextOn ( ) ;
yactor . ScaledTextOn ( ) ;
zactor . ScaledTextOn ( ) ;
xactor . GetPositionCoordinate ( ) . SetCoordinateSystemToWorld ( ) ;
yactor . GetPositionCoordinate ( ) . SetCoordinateSystemToWorld ( ) ;
zactor . GetPositionCoordinate ( ) . SetCoordinateSystemToWorld ( ) ;
xactor . GetPositionCoordinate ( ) . SetValue ( axisLength , <num> , <num> ) ;
yactor . GetPositionCoordinate ( ) . SetValue ( <num> , axisLength , <num> ) ;
zactor . GetPositionCoordinate ( ) . SetValue ( <num> , <num> , axisLength ) ;
xactor . GetTextProperty ( ) . SetColor ( <num> , <num> , <num> ) ;
xactor . GetTextProperty ( ) . ShadowOn ( ) ;
xactor . GetTextProperty ( ) . ItalicOn ( ) ;
xactor . GetTextProperty ( ) . BoldOff ( ) ;
yactor . GetTextProperty ( ) . SetColor ( <num> , <num> , <num> ) ;
yactor . GetTextProperty ( ) . ShadowOn ( ) ;
yactor . GetTextProperty ( ) . ItalicOn ( ) ;
yactor . GetTextProperty ( ) . BoldOff ( ) ;
zactor . GetTextProperty ( ) . SetColor ( <num> , <num> , <num> ) ;
zactor . GetTextProperty ( ) . ShadowOn ( ) ;
zactor . GetTextProperty ( ) . ItalicOn ( ) ;
zactor . GetTextProperty ( ) . BoldOff ( ) ;
xactor . SetMaximumLineHeight ( <num> ) ;
yactor . SetMaximumLineHeight ( <num> ) ;
zactor . SetMaximumLineHeight ( <num> ) ;
vtkTubeFilter tube = new vtkTubeFilter ( ) ;
tube . SetInput ( axes . GetOutput ( ) ) ;
tube . SetRadius ( <num> ) ;
tube . SetNumberOfSides ( <num> ) ;
vtkPolyDataMapper tubeMapper = new vtkPolyDataMapper ( ) ;
tubeMapper . SetInput ( tube . GetOutput ( ) ) ;
vtkActor tubeActor = new vtkActor ( ) ;
tubeActor . SetMapper ( tubeMapper ) ;
tubeActor . PickableOff ( ) ;
int coneRes = <num> ;
double coneScale = <num> ;
vtkConeSource xcone = new vtkConeSource ( ) ;
xcone . SetResolution ( coneRes ) ;
vtkPolyDataMapper xconeMapper = new vtkPolyDataMapper ( ) ;
xconeMapper . SetInput ( xcone . GetOutput ( ) ) ;
vtkActor xconeActor = new vtkActor ( ) ;
xconeActor . SetMapper ( xconeMapper ) ;
xconeActor . GetProperty ( ) . SetColor ( <num> , <num> , <num> ) ;
xconeActor . SetScale ( coneScale , coneScale , coneScale ) ;
xconeActor . SetPosition ( axisLength , <num> , <num> ) ;
vtkConeSource ycone = new vtkConeSource ( ) ;
ycone . SetResolution ( coneRes ) ;
vtkPolyDataMapper yconeMapper = new vtkPolyDataMapper ( ) ;
yconeMapper . SetInput ( ycone . GetOutput ( ) ) ;
vtkActor yconeActor = new vtkActor ( ) ;
yconeActor . SetMapper ( yconeMapper ) ;
yconeActor . GetProperty ( ) . SetColor ( <num> , <num> , <num> ) ;
yconeActor . RotateZ ( <num> ) ;
yconeActor . SetScale ( coneScale , coneScale , coneScale ) ;
yconeActor . SetPosition ( <num> , axisLength , <num> ) ;
vtkConeSource zcone = new vtkConeSource ( ) ;
zcone . SetResolution ( coneRes ) ;
vtkPolyDataMapper zconeMapper = new vtkPolyDataMapper ( ) ;
zconeMapper . SetInput ( zcone . GetOutput ( ) ) ;
vtkActor zconeActor = new vtkActor ( ) ;
zconeActor . SetMapper ( zconeMapper ) ;
zconeActor . GetProperty ( ) . SetColor ( <num> , <num> , <num> ) ;
zconeActor . RotateY (  <num> ) ;
zconeActor . SetScale ( coneScale , coneScale , coneScale ) ;
zconeActor . SetPosition ( <num> , <num> , axisLength ) ;
ren . AddActor2D ( xactor ) ;
ren . AddActor2D ( yactor ) ;
ren . AddActor2D ( zactor ) ;
this . AddPart ( tubeActor ) ;
this . AddPart ( xconeActor ) ;
this . AddPart ( yconeActor ) ;
this . AddPart ( zconeActor ) ;
ren . AddActor ( this ) ;
}
public void setAxesVisibility ( boolean ison ) {
this . SetVisibility ( ison ? <num> : <num> ) ;
xactor . SetVisibility ( ison ? <num> : <num> ) ;
yactor . SetVisibility ( ison ? <num> : <num> ) ;
zactor . SetVisibility ( ison ? <num> : <num> ) ;
}
}
package vtk ;
import java . awt . event . InputEvent ;
import java . awt . event . KeyEvent ;
import java . awt . event . MouseEvent ;
public class vtkRenderWindowPanel extends vtkCanvas {
private static final long serialVersionUID = <num> ;
public vtkRenderWindowPanel ( ) {
cam = new vtkCamera ( ) ;
lgt = new vtkLight ( ) ;
}
public vtkRenderWindowPanel ( vtkRenderWindow win ) {
super ( win ) ;
cam = new vtkCamera ( ) ;
lgt = new vtkLight ( ) ;
}
public synchronized void Render ( ) {
if ( ! rendering ) {
rendering = true ;
if ( rw != null ) {
if ( windowset == <num> ) {
RenderCreate ( rw ) ;
Lock ( ) ;
rw . SetSize ( getWidth ( ) , getHeight ( ) ) ;
UnLock ( ) ;
windowset = <num> ;
}
Lock ( ) ;
rw . Render ( ) ;
UnLock ( ) ;
}
rendering = false ;
}
}
public void mousePressed ( MouseEvent e ) {
Lock ( ) ;
rw . SetDesiredUpdateRate ( <num> ) ;
lastX = e . getX ( ) ;
lastY = e . getY ( ) ;
ctrlPressed = ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) == InputEvent . CTRL_MASK ? <num> : <num> ;
shiftPressed = ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) == InputEvent . SHIFT_MASK ? <num> : <num> ;
iren . SetEventInformationFlipY ( e . getX ( ) , e . getY ( ) , ctrlPressed , shiftPressed , <num>  , <num> , " ) ;
if ( ( e . getModifiers ( ) & InputEvent . BUTTON1_MASK ) == InputEvent . BUTTON1_MASK ) {
iren . LeftButtonPressEvent ( ) ;
}
else if ( ( e . getModifiers ( ) & InputEvent . BUTTON2_MASK ) == InputEvent . BUTTON2_MASK ) {
iren . MiddleButtonPressEvent ( ) ;
}
else if ( ( e . getModifiers ( ) & InputEvent . BUTTON3_MASK ) == InputEvent . BUTTON3_MASK ) {
iren . RightButtonPressEvent ( ) ;
}
UnLock ( ) ;
}
public void mouseDragged ( MouseEvent e ) {
ctrlPressed = ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) == InputEvent . CTRL_MASK ? <num> : <num> ;
shiftPressed = ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) == InputEvent . SHIFT_MASK ? <num> : <num> ;
iren . SetEventInformationFlipY ( e . getX ( ) , e . getY ( ) , ctrlPressed , shiftPressed , <num>  , <num> , " ) ;
Lock ( ) ;
iren . MouseMoveEvent ( ) ;
UnLock ( ) ;
}
public void keyPressed ( KeyEvent e ) {
char keyChar = e . getKeyChar ( ) ;
ctrlPressed = ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) == InputEvent . CTRL_MASK ? <num> : <num> ;
shiftPressed = ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) == InputEvent . SHIFT_MASK ? <num> : <num> ;
iren . SetEventInformationFlipY ( lastX , lastY , ctrlPressed , shiftPressed , keyChar , <num> , String . valueOf ( keyChar ) ) ;
Lock ( ) ;
iren . KeyPressEvent ( ) ;
iren . CharEvent ( ) ;
UnLock ( ) ;
}
}
package vtk . sample ;
import java . awt . BorderLayout ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import javax . swing . JButton ;
import javax . swing . JFrame ;
import javax . swing . JPanel ;
import javax . swing . SwingUtilities ;
import vtk . vtkActor ;
import vtk . vtkConeSource ;
import vtk . vtkNativeLibrary ;
import vtk . vtkPanel ;
import vtk . vtkPolyDataMapper ;
public class SimpleVTK extends JPanel implements ActionListener {
private static final long serialVersionUID = <num> ;
private vtkPanel renWin ;
private JButton exitButton ;
static {
if ( ! vtkNativeLibrary . LoadAllNativeLibraries ( ) ) {
for ( vtkNativeLibrary lib : vtkNativeLibrary . values ( ) ) {
if ( ! lib . IsLoaded ( ) ) {
System . out . println ( lib . GetLibraryName ( ) + " ) ;
}
}
}
vtkNativeLibrary . DisableOutputWindow ( null ) ;
}
public SimpleVTK ( ) {
super ( new BorderLayout ( ) ) ;
vtkConeSource cone = new vtkConeSource ( ) ;
cone . SetResolution ( <num> ) ;
vtkPolyDataMapper coneMapper = new vtkPolyDataMapper ( ) ;
coneMapper . SetInputConnection ( cone . GetOutputPort ( ) ) ;
vtkActor coneActor = new vtkActor ( ) ;
coneActor . SetMapper ( coneMapper ) ;
renWin = new vtkPanel ( ) ;
renWin . GetRenderer ( ) . AddActor ( coneActor ) ;
exitButton = new JButton ( " ) ;
exitButton . addActionListener ( this ) ;
add ( renWin , BorderLayout . CENTER ) ;
add ( exitButton , BorderLayout . SOUTH ) ;
}
public void actionPerformed ( ActionEvent e ) {
if ( e . getSource ( ) . equals ( exitButton ) ) {
System . exit ( <num> ) ;
}
}
public static void main ( String s [ ] ) {
SwingUtilities . invokeLater ( new Runnable ( ) {
public void run ( ) {
JFrame frame = new JFrame ( " ) ;
frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
frame . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ;
frame . getContentPane ( ) . add ( new SimpleVTK ( ) , BorderLayout . CENTER ) ;
frame . setSize ( <num> , <num> ) ;
frame . setLocationRelativeTo ( null ) ;
frame . setVisible ( true ) ;
}
} ) ;
}
}
import vtk . * ;
public class Cone5 {
static {
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
}
public static void main ( String [ ] args ) throws Exception {
vtkConeSource cone = new vtkConeSource ( ) ;
cone . SetHeight ( <num> ) ;
cone . SetRadius ( <num> ) ;
cone . SetResolution ( <num> ) ;
vtkPolyDataMapper coneMapper = new vtkPolyDataMapper ( ) ;
coneMapper . SetInputConnection ( cone . GetOutputPort ( ) ) ;
vtkActor coneActor = new vtkActor ( ) ;
coneActor . SetMapper ( coneMapper ) ;
vtkRenderer ren1 = new vtkRenderer ( ) ;
ren1 . AddActor ( coneActor ) ;
ren1 . SetBackground ( <num> , <num> , <num> ) ;
vtkRenderWindow renWin = new vtkRenderWindow ( ) ;
renWin . AddRenderer ( ren1 ) ;
renWin . SetSize ( <num> , <num> ) ;
ren1 . ResetCamera ( ) ;
ren1 . GetActiveCamera ( ) . Azimuth ( <num> ) ;
vtkRenderWindowInteractor iren = new vtkRenderWindowInteractor ( ) ;
iren . SetRenderWindow ( renWin ) ;
vtkInteractorStyleTrackballCamera style =
new vtkInteractorStyleTrackballCamera ( ) ;
iren . SetInteractorStyle ( style ) ;
iren . Initialize ( ) ;
iren . Start ( ) ;
}
}
package vtk . sample ;
import java . awt . BorderLayout ;
import java . io . File ;
import javax . swing . JFrame ;
import javax . swing . JPanel ;
import javax . swing . SwingUtilities ;
import vtk . vtkActor ;
import vtk . vtkCanvas ;
import vtk . vtkCellPicker ;
import vtk . vtkImageData ;
import vtk . vtkImagePlaneWidget ;
import vtk . vtkNativeLibrary ;
import vtk . vtkOutlineFilter ;
import vtk . vtkPolyDataMapper ;
import vtk . vtkVolume16Reader ;
public class ImagePlaneWidget extends vtkCanvas {
private static final long serialVersionUID = <num> ;
private int width = <num> ;
private int height = <num> ;
static {
if ( ! vtkNativeLibrary . LoadAllNativeLibraries ( ) ) {
for ( vtkNativeLibrary lib : vtkNativeLibrary . values ( ) ) {
if ( ! lib . IsLoaded ( ) ) {
System . out . println ( lib . GetLibraryName ( ) + " ) ;
}
}
}
vtkNativeLibrary . DisableOutputWindow ( null ) ;
}
public ImagePlaneWidget ( String path ) {
vtkVolume16Reader v16 = new vtkVolume16Reader ( ) ;
v16 . SetDataDimensions ( <num> , <num> ) ;
v16 . SetDataByteOrderToLittleEndian ( ) ;
v16 . SetFilePrefix ( path ) ;
v16 . SetImageRange ( <num> , <num> ) ;
v16 . SetDataSpacing ( <num> , <num> , <num> ) ;
v16 . Update ( ) ;
setImageData ( v16 . GetOutput ( ) ) ;
JPanel p = new JPanel ( ) ;
p . setLayout ( new BorderLayout ( ) ) ;
p . add ( this , BorderLayout . CENTER ) ;
JFrame frame = new JFrame ( " ) ;
frame . setBounds ( <num> , <num> , width , height ) ;
frame . getContentPane ( ) . add ( p , BorderLayout . CENTER ) ;
frame . setVisible ( true ) ;
frame . pack ( ) ;
frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
}
public void setImageData ( vtkImageData id ) {
vtkCellPicker picker = new vtkCellPicker ( ) ;
picker . SetTolerance ( <num> ) ;
vtkImagePlaneWidget planeWidgetX = new vtkImagePlaneWidget ( ) ;
planeWidgetX . DisplayTextOn ( ) ;
planeWidgetX . SetInput ( id ) ;
planeWidgetX . SetInteractor ( getRenderWindowInteractor ( ) ) ;
planeWidgetX . SetPlaneOrientationToXAxes ( ) ;
planeWidgetX . SetSliceIndex ( <num> ) ;
planeWidgetX . SetPicker ( picker ) ;
planeWidgetX . SetKeyPressActivationValue ( x' ) ;
planeWidgetX . GetPlaneProperty ( ) . SetColor ( <num> , <num> , <num> ) ;
planeWidgetX . On ( ) ;
vtkImagePlaneWidget planeWidgetY = new vtkImagePlaneWidget ( ) ;
planeWidgetY . DisplayTextOn ( ) ;
planeWidgetY . SetInput ( id ) ;
planeWidgetY . SetInteractor ( getRenderWindowInteractor ( ) ) ;
planeWidgetY . SetPlaneOrientationToYAxes ( ) ;
planeWidgetY . SetSliceIndex ( <num> ) ;
planeWidgetY . SetPicker ( picker ) ;
planeWidgetY . SetKeyPressActivationValue ( y' ) ;
planeWidgetY . GetPlaneProperty ( ) . SetColor ( <num> , <num> , <num> ) ;
planeWidgetY . SetLookupTable ( planeWidgetX . GetLookupTable ( ) ) ;
planeWidgetY . On ( ) ;
vtkImagePlaneWidget planeWidgetZ = new vtkImagePlaneWidget ( ) ;
planeWidgetZ . DisplayTextOn ( ) ;
planeWidgetZ . SetInput ( id ) ;
planeWidgetZ . TextureInterpolateOff ( ) ;
planeWidgetZ . SetInteractor ( getRenderWindowInteractor ( ) ) ;
planeWidgetZ . SetPlaneOrientationToZAxes ( ) ;
planeWidgetZ . SetSliceIndex ( <num> ) ;
planeWidgetZ . SetPicker ( picker ) ;
planeWidgetZ . SetKeyPressActivationValue ( z' ) ;
planeWidgetZ . GetPlaneProperty ( ) . SetColor ( <num> , <num> , <num> ) ;
planeWidgetZ . SetLookupTable ( planeWidgetX . GetLookupTable ( ) ) ;
planeWidgetZ . On ( ) ;
vtkOutlineFilter outline = new vtkOutlineFilter ( ) ;
outline . SetInput ( id ) ;
vtkPolyDataMapper outlineMapper = new vtkPolyDataMapper ( ) ;
outlineMapper . SetInput ( outline . GetOutput ( ) ) ;
vtkActor outlineActor = new vtkActor ( ) ;
outlineActor . SetMapper ( outlineMapper ) ;
GetRenderer ( ) . AddActor ( outlineActor ) ;
GetRenderer ( ) . GetCullers ( ) . RemoveAllItems ( ) ;
GetRenderer ( ) . SetBackground ( <num> , <num> , <num> ) ;
}
static public void printUsage ( String err ) {
if ( ! err . equals ( " ) ) {
System . err . println ( " + err ) ;
}
System . err . println ( " ) ;
System . err . println ( " ) ;
System . err . println ( " ) ;
System . exit (  <num> ) ;
}
public static void main ( String [ ] argv ) {
int argSize = argv . length ;
String pathToVTKData = " ;
int argCurrent = <num> ;
try {
while ( argSize > argCurrent ) {
if ( argv [ argCurrent ] . equals ( " ) ) {
++ argCurrent ;
pathToVTKData = argv [ argCurrent ] ;
++ argCurrent ;
} else {
ImagePlaneWidget . printUsage ( " ) ;
}
}
} catch ( Exception e ) {
ImagePlaneWidget . printUsage ( " ) ;
}
if ( pathToVTKData . equals ( " ) )
ImagePlaneWidget . printUsage ( " ) ;
final File f = new File ( pathToVTKData + " ) ;
if ( ! f . exists ( ) || ! f . canRead ( ) || ! f . isDirectory ( ) )
ImagePlaneWidget . printUsage ( f . getAbsolutePath ( ) + " ) ;
SwingUtilities . invokeLater ( new Runnable ( ) {
public void run ( ) {
new ImagePlaneWidget ( f . getAbsolutePath ( ) + " ) ;
}
} ) ;
}
}
import vtk . * ;
public class HelloWorld {
static {
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
}
public static void main ( String args [ ] ) {
vtkRandomGraphSource source = new vtkRandomGraphSource ( ) ;
vtkGraphLayoutView view = new vtkGraphLayoutView ( ) ;
view . AddRepresentationFromInputConnection ( source . GetOutputPort ( ) ) ;
view . ResetCamera ( ) ;
view . Render ( ) ;
view . GetInteractor ( ) . Start ( ) ;
}
}
import java . awt . GridLayout ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import java . awt . event . KeyEvent ;
import java . awt . event . WindowAdapter ;
import java . awt . event . WindowEvent ;
import java . beans . PropertyChangeListener ;
import java . io . File ;
import java . util . Random ;
import javax . swing . JFileChooser ;
import javax . swing . JFrame ;
import javax . swing . JMenu ;
import javax . swing . JMenuBar ;
import javax . swing . JMenuItem ;
import javax . swing . JPopupMenu ;
import javax . swing . KeyStroke ;
import javax . swing . filechooser . FileNameExtensionFilter ;
import vtk . * ;
public class TreeViews extends JFrame {
private vtkRenderWindowPanel panel1 ;
private vtkRenderWindowPanel panel2 ;
private vtkRenderWindowPanel panel3 ;
private vtkRenderWindowPanel panel4 ;
private vtkXMLTreeReader reader = new vtkXMLTreeReader ( ) ;
private vtkTreeLevelsFilter levels = new vtkTreeLevelsFilter ( ) ;
private vtkGraphLayoutView view1 ;
private vtkGraphLayoutView view2 ;
private vtkGraphLayoutView view3 ;
private vtkTreeMapView view4 ;
public TreeViews ( ) {
vtkStringArray nameArr = new vtkStringArray ( ) ;
nameArr . SetName ( " ) ;
vtkMutableDirectedGraph g = new vtkMutableDirectedGraph ( ) ;
g . AddVertex ( ) ;
nameArr . InsertNextValue ( " ) ;
Random r = new Random ( ) ;
for ( int i = <num> ; i < <num> ; ++ i ) {
g . AddChild ( r . nextInt ( i ) ) ;
nameArr . InsertNextValue ( " + i ) ;
}
g . GetVertexData ( ) . AddArray ( nameArr ) ;
vtkTree tree = new vtkTree ( ) ;
tree . ShallowCopy ( g ) ;
levels . SetInput ( tree ) ;
vtkAnnotationLink link = new vtkAnnotationLink ( ) ;
view1 = new vtkGraphLayoutView ( ) ;
vtkDataRepresentation rep1 = view1 . AddRepresentationFromInputConnection ( levels . GetOutputPort ( ) ) ;
panel1 = new vtkRenderWindowPanel ( view1 . GetRenderWindow ( ) ) ;
view1 . SetVertexLabelArrayName ( " ) ;
view1 . VertexLabelVisibilityOn ( ) ;
view1 . SetVertexColorArrayName ( " ) ;
view1 . ColorVerticesOn ( ) ;
view1 . ResetCamera ( ) ;
rep1 . SetAnnotationLink ( link ) ;
view2 = new vtkGraphLayoutView ( ) ;
vtkDataRepresentation rep2 = view2 . AddRepresentationFromInputConnection ( levels . GetOutputPort ( ) ) ;
panel2 = new vtkRenderWindowPanel ( view2 . GetRenderWindow ( ) ) ;
view2 . SetVertexLabelArrayName ( " ) ;
view2 . VertexLabelVisibilityOn ( ) ;
view2 . SetVertexColorArrayName ( " ) ;
view2 . ColorVerticesOn ( ) ;
view2 . ResetCamera ( ) ;
rep2 . SetAnnotationLink ( link ) ;
view3 = new vtkGraphLayoutView ( ) ;
vtkDataRepresentation rep3 = view3 . AddRepresentationFromInputConnection ( levels . GetOutputPort ( ) ) ;
panel3 = new vtkRenderWindowPanel ( view3 . GetRenderWindow ( ) ) ;
vtkTreeLayoutStrategy layout3 = new vtkTreeLayoutStrategy ( ) ;
layout3 . RadialOn ( ) ;
layout3 . SetAngle ( <num> ) ;
layout3 . SetLeafSpacing ( <num> ) ;
view3 . SetLayoutStrategy ( layout3 ) ;
view3 . SetVertexLabelArrayName ( " ) ;
view3 . VertexLabelVisibilityOn ( ) ;
view3 . SetVertexColorArrayName ( " ) ;
view3 . ColorVerticesOn ( ) ;
view3 . ResetCamera ( ) ;
rep3 . SetAnnotationLink ( link ) ;
view4 = new vtkTreeMapView ( ) ;
vtkDataRepresentation rep4 = view4 . AddRepresentationFromInputConnection ( levels . GetOutputPort ( ) ) ;
panel4 = new vtkRenderWindowPanel ( view4 . GetRenderWindow ( ) ) ;
rep4 . SetAnnotationLink ( link ) ;
view4 . ResetCamera ( ) ;
ViewChangedObserver obs = new ViewChangedObserver ( ) ;
link . AddObserver ( " , obs , " ) ;
GridLayout layout = new GridLayout ( <num> , <num> ) ;
layout . setHgap ( <num> ) ;
layout . setVgap ( <num> ) ;
this . setLayout ( layout ) ;
this . add ( panel1 ) ;
this . add ( panel2 ) ;
this . add ( panel3 ) ;
this . add ( panel4 ) ;
JMenuBar menuBar ;
JMenu menu ;
JMenuItem menuItem ;
menuBar = new JMenuBar ( ) ;
menu = new JMenu ( " ) ;
menu . setMnemonic ( KeyEvent . VK_F ) ;
menuBar . add ( menu ) ;
menuItem = new JMenuItem ( " , KeyEvent . VK_X ) ;
menuItem . setAccelerator ( KeyStroke . getKeyStroke ( KeyEvent . VK_O ,
ActionEvent . CTRL_MASK ) ) ;
menuItem . addActionListener ( new ActionListener ( ) {
public void actionPerformed ( ActionEvent e ) {
final JFileChooser fc = new JFileChooser ( ) ;
FileNameExtensionFilter filter = new FileNameExtensionFilter ( " , " ) ;
fc . setFileFilter ( filter ) ;
int returnVal = fc . showOpenDialog ( null ) ;
if ( returnVal == JFileChooser . APPROVE_OPTION ) {
File f = fc . getSelectedFile ( ) ;
reader . SetFileName ( f . getAbsolutePath ( ) ) ;
levels . SetInputConnection ( reader . GetOutputPort ( ) ) ;
ViewChangedObserver obs = new ViewChangedObserver ( ) ;
obs . SelectionChanged ( ) ;
}
} } ) ;
menu . add ( menuItem ) ;
this . setJMenuBar ( menuBar ) ;
}
private class ViewChangedObserver {
void SelectionChanged ( ) {
view1 . Update ( ) ;
view2 . Update ( ) ;
view3 . Update ( ) ;
view4 . Update ( ) ;
panel1 . Render ( ) ;
panel2 . Render ( ) ;
panel3 . Render ( ) ;
panel4 . Render ( ) ;
}
}
static {
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
System . loadLibrary ( " ) ;
}
public static void main ( String args [ ] ) {
JPopupMenu . setDefaultLightWeightPopupEnabled ( false ) ;
TreeViews app = new TreeViews ( ) ;
app . setTitle ( " ) ;
app . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
app . pack ( ) ;
app . setVisible ( true ) ;
app . addWindowListener ( new WindowAdapter ( ) {
public void windowClosing ( WindowEvent e ) {
vtkGlobalJavaHash . DeleteAll ( ) ;
}
} ) ;
}
}
package com . <unk> . assistant ;
import android . app . Activity ;
import android . os . Bundle ;
public class <unk> extends Activity {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
}
import java . io . * ;
public class <unk> {
public static void main ( String [ ] args ) {
int n1 , n2 ;
System . out . print ( " ) ;
n1 = <unk> . <unk> ( ) ;
System . out . print ( " ) ;
n2 = <unk> . <unk> ( ) ;
if ( n1 == n2 )
System . out . println ( " ) ;
else
System . out . println ( " ) ;
}
}
package <unk> . <unk> . <unk> . jsoup ;
import org . <unk> . di . core . Const ;
import org . <unk> . di . core . exception . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . core . xml . <unk> ;
import org . <unk> . di . i18n . <unk> ;
import org . w3c . dom . Node ;
public class <unk> implements Cloneable
{
private static Class < ? > <unk> = <unk> . class ;
public final static int <unk> = <num> ;
public final static int <unk> = <num> ;
public final static int <unk> = <num> ;
public final static int <unk> = <num> ;
public final static String <unk> [ ] = { " , " , " , " } ;
public final static String <unk> [ ] = {
<unk> . getString ( <unk> , " ) ,
<unk> . getString ( <unk> , " ) ,
<unk> . getString ( <unk> , " ) ,
<unk> . getString ( <unk> , " )
} ;
private String name ;
private String path ;
private int type ;
private int length ;
private String format ;
private int <unk> ;
private int precision ;
private String <unk> ;
private String <unk> ;
private String <unk> ;
private boolean repeat ;
public <unk> ( String fieldname )
{
this . name = fieldname ;
this . path = " ;
this . length =  <num> ;
this . type = <unk> . TYPE_STRING ;
this . format = " ;
this . <unk> = <unk> ;
this . <unk> = " ;
this . <unk> = " ;
this . <unk> = " ;
this . precision =  <num> ;
this . repeat = false ;
}
public <unk> ( )
{
this ( " ) ;
}
public String getXML ( )
{
StringBuffer retval = new StringBuffer ( <num> ) ;
retval . append ( " ) . append ( Const . CR ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , getName ( ) ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , getPath ( ) ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ( ) ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , getFormat ( ) ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ( ) ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ( ) ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ( ) ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , getLength ( ) ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , getPrecision ( ) ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ( ) ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ( ) ) ) ;
retval . append ( " ) . append ( Const . CR ) ;
return retval . toString ( ) ;
}
public <unk> ( Node <unk> ) throws <unk>
{
setName ( <unk> . getTagValue ( <unk> , " ) ) ;
setPath ( <unk> . getTagValue ( <unk> , " ) ) ;
setType ( <unk> . getType ( <unk> . getTagValue ( <unk> , " ) ) ) ;
setFormat ( <unk> . getTagValue ( <unk> , " ) ) ;
<unk> ( <unk> . getTagValue ( <unk> , " ) ) ;
<unk> ( <unk> . getTagValue ( <unk> , " ) ) ;
<unk> ( <unk> . getTagValue ( <unk> , " ) ) ;
setLength ( Const . toInt ( <unk> . getTagValue ( <unk> , " ) ,  <num> ) ) ;
setPrecision ( Const . toInt ( <unk> . getTagValue ( <unk> , " ) ,  <num> ) ) ;
<unk> ( <unk> ( <unk> . getTagValue ( <unk> , " ) ) ) ;
<unk> ( ! " . equalsIgnoreCase ( <unk> . getTagValue ( <unk> , " ) ) ) ;
}
public final static int <unk> ( String tt )
{
if ( tt == null ) return <num> ;
for ( int i = <num> ; i < <unk> . length ; i ++ )
{
if ( <unk> [ i ] . equalsIgnoreCase ( tt ) ) return i ;
}
return <num> ;
}
public final static int <unk> ( String tt )
{
if ( tt == null ) return <num> ;
for ( int i = <num> ; i < <unk> . length ; i ++ )
{
if ( <unk> [ i ] . equalsIgnoreCase ( tt ) ) return i ;
}
return <num> ;
}
public final static String <unk> ( int i )
{
if ( i < <num> || i >= <unk> . length ) return <unk> [ <num> ] ;
return <unk> [ i ] ;
}
public final static String <unk> ( int i )
{
if ( i < <num> || i >= <unk> . length ) return <unk> [ <num> ] ;
return <unk> [ i ] ;
}
public Object clone ( )
{
try
{
<unk> retval = ( <unk> ) super . clone ( ) ;
return retval ;
}
catch ( CloneNotSupportedException e )
{
return null ;
}
}
public int getLength ( )
{
return length ;
}
public void setLength ( int length )
{
this . length = length ;
}
public String getName ( )
{
return name ;
}
public String getPath ( )
{
return path ;
}
public void setPath ( String value )
{
this . path = value ;
}
public void setName ( String fieldname )
{
this . name = fieldname ;
}
public int getType ( )
{
return type ;
}
public String <unk> ( )
{
return <unk> . <unk> ( type ) ;
}
public void setType ( int type )
{
this . type = type ;
}
public String getFormat ( )
{
return format ;
}
public void setFormat ( String format )
{
this . format = format ;
}
public int <unk> ( )
{
return <unk> ;
}
public String <unk> ( )
{
return <unk> ( <unk> ) ;
}
public String <unk> ( )
{
return <unk> ( <unk> ) ;
}
public void <unk> ( int <unk> )
{
this . <unk> = <unk> ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public int getPrecision ( )
{
return precision ;
}
public void setPrecision ( int precision )
{
this . precision = precision ;
}
public boolean <unk> ( )
{
return repeat ;
}
public void <unk> ( boolean repeat )
{
this . repeat = repeat ;
}
public void <unk> ( )
{
repeat = ! repeat ;
}
package <unk> . <unk> . <unk> . jsoup ;
import java . util . ArrayList ;
import java . util . List ;
import java . util . Map ;
import org . apache . commons . <unk> . <unk> ;
import org . <unk> . di . core . <unk> ;
import org . <unk> . di . core . <unk> ;
import org . <unk> . di . core . Const ;
import org . <unk> . di . core . Counter ;
import org . <unk> . di . core . database . <unk> ;
import org . <unk> . di . core . exception . <unk> ;
import org . <unk> . di . core . exception . <unk> ;
import org . <unk> . di . core . exception . <unk> ;
import org . <unk> . di . core . <unk> . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . core . variables . <unk> ;
import org . <unk> . di . core . xml . <unk> ;
import org . <unk> . di . i18n . <unk> ;
import org . <unk> . di . repository . <unk> ;
import org . <unk> . di . repository . Repository ;
import org . <unk> . di . resource . <unk> ;
import org . <unk> . di . resource . <unk> ;
import org . <unk> . di . trans . <unk> ;
import org . <unk> . di . trans . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . w3c . dom . Node ;
public class <unk> extends <unk> implements <unk>
{
private static Class < ? > <unk> = <unk> . class ;
private static final String YES = " ;
public static final String [ ] <unk> = new String [ ] { <unk> . getString ( <unk> , " ) , <unk> . getString ( <unk> , " ) } ;
public static final String [ ] <unk> = new String [ ] { " , " } ;
private String fileName [ ] ;
private String <unk> [ ] ;
private String <unk> [ ] ;
private String <unk> [ ] ;
private boolean <unk> ;
private String <unk> ;
private boolean <unk> ;
private String <unk> ;
private long <unk> ;
private <unk> <unk> [ ] ;
private String <unk> ;
private boolean <unk> ;
private boolean <unk> ;
private boolean <unk> ;
private boolean <unk> ;
private String <unk> [ ] ;
private boolean <unk> ;
private boolean <unk> ;
private String <unk> ;
private String <unk> ;
private String <unk> ;
private String <unk> ;
private String <unk> ;
private String <unk> ;
private String <unk> ;
private String <unk> ;
public <unk> ( )
{
super ( ) ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String field )
{
<unk> = field ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String field )
{
this . <unk> = field ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String field )
{
<unk> = field ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String field )
{
<unk> = field ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String field )
{
<unk> = field ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String field )
{
<unk> = field ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String field )
{
<unk> = field ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String field )
{
<unk> = field ;
}
public boolean <unk> ( )
{
return <unk> ;
}
public boolean <unk> ( )
{
return <unk> ;
}
public void <unk> ( boolean <unk> )
{
this . <unk> = <unk> ;
}
public void <unk> ( boolean <unk> )
{
this . <unk> = <unk> ;
}
public <unk> [ ] <unk> ( )
{
return <unk> ;
}
public void <unk> ( <unk> [ ] <unk> )
{
this . <unk> = <unk> ;
}
public String [ ] <unk> ( )
{
return <unk> ;
}
public void <unk> ( String [ ] <unk> )
{
this . <unk> = <unk> ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String value )
{
this . <unk> = value ;
}
public boolean <unk> ( )
{
return <unk> ;
}
public void <unk> ( boolean <unk> )
{
this . <unk> = <unk> ;
}
public String [ ] <unk> ( )
{
return <unk> ;
}
public void <unk> ( String [ ] <unk> )
{
this . <unk> = <unk> ;
}
public String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( String [ ] <unk> ) {
for ( int i = <num> ; i < <unk> . length ; i ++ )
{
this . <unk> [ i ] = <unk> ( <unk> [ i ] ) ;
}
}
public void <unk> ( String [ ] <unk> ) {
for ( int i = <num> ; i < <unk> . length ; i ++ )
{
this . <unk> [ i ] = <unk> ( <unk> [ i ] ) ;
}
}
public String [ ] getFileName ( )
{
return fileName ;
}
public void setFileName ( String [ ] fileName )
{
this . fileName = fileName ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public boolean <unk> ( )
{
return <unk> ;
}
public void <unk> ( boolean <unk> )
{
this . <unk> = <unk> ;
}
public boolean <unk> ( )
{
return <unk> ;
}
public void <unk> ( boolean <unk> )
{
this . <unk> = <unk> ;
}
public long <unk> ( )
{
return <unk> ;
}
public void <unk> ( long <unk> )
{
this . <unk> = <unk> ;
}
public boolean <unk> ( )
{
return <unk> ;
}
public void <unk> ( boolean <unk> )
{
this . <unk> = <unk> ;
}
public boolean <unk> ( )
{
return <unk> ;
}
public void <unk> ( boolean <unk> )
{
this . <unk> = <unk> ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public boolean <unk> ( )
{
return <unk> ;
}
public void <unk> ( boolean <unk> )
{
this . <unk> = <unk> ;
}
public String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( Node <unk> , List < <unk> > databases , Map < String , Counter > <unk> )
throws <unk>
{
readData ( <unk> ) ;
}
public Object clone ( )
{
<unk> retval = ( <unk> ) super . clone ( ) ;
int <unk> = fileName . length ;
int <unk> = <unk> . length ;
retval . allocate ( <unk> , <unk> ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
retval . fileName [ i ] = fileName [ i ] ;
retval . <unk> [ i ] = <unk> [ i ] ;
retval . <unk> [ i ] = <unk> [ i ] ;
retval . <unk> [ i ] = <unk> [ i ] ;
retval . <unk> [ i ] = <unk> [ i ] ;
}
for ( int i = <num> ; i < <unk> ; i ++ )
{
if ( <unk> [ i ] != null )
{
retval . <unk> [ i ] = ( <unk> ) <unk> [ i ] . clone ( ) ;
}
}
return retval ;
}
public String getXML ( )
{
StringBuffer retval = new StringBuffer ( <num> ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " + <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " + <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( Const . CR ) ;
for ( int i = <num> ; i < fileName . length ; i ++ )
{
retval . append ( " ) . append ( <unk> . <unk> ( " , fileName [ i ] ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> [ i ] ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> [ i ] ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> [ i ] ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> [ i ] ) ) ;
}
retval . append ( " ) . append ( Const . CR ) ;
retval . append ( " ) . append ( Const . CR ) ;
for ( int i = <num> ; i < <unk> . length ; i ++ )
{
<unk> field = <unk> [ i ] ;
retval . append ( field . getXML ( ) ) ;
}
retval . append ( " ) . append ( Const . CR ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
retval . append ( " ) . append ( <unk> . <unk> ( " , <unk> ) ) ;
return retval . toString ( ) ;
}
public String <unk> ( String tt )
{
if ( Const . isEmpty ( tt ) ) return <unk> [ <num> ] ;
if ( tt . equalsIgnoreCase ( <unk> [ <num> ] ) )
return <unk> [ <num> ] ;
else
return <unk> [ <num> ] ;
}
public String <unk> ( String tt )
{
if ( tt == null ) return <unk> [ <num> ] ;
if ( tt . equals ( <unk> [ <num> ] ) )
return <unk> [ <num> ] ;
else
return <unk> [ <num> ] ;
}
private void readData ( Node <unk> ) throws <unk>
{
try
{
<unk> = " . equalsIgnoreCase ( <unk> . getTagValue ( <unk> , " ) ) ;
<unk> = <unk> . getTagValue ( <unk> , " ) ;
<unk> = " . equalsIgnoreCase ( <unk> . getTagValue ( <unk> , " ) ) ;
<unk> = " . equalsIgnoreCase ( <unk> . getTagValue ( <unk> , " ) ) ;
<unk> = " . equalsIgnoreCase ( <unk> . getTagValue ( <unk> , " ) ) ;
<unk> = " . equalsIgnoreCase ( <unk> . getTagValue ( <unk> , " ) ) ;
<unk> = " . equalsIgnoreCase ( <unk> . getTagValue ( <unk> , " ) ) ;
<unk> = <unk> . getTagValue ( <unk> , " ) ;
Node <unk> = <unk> . <unk> ( <unk> , " ) ;
Node fields = <unk> . <unk> ( <unk> , " ) ;
int <unk> = <unk> . <unk> ( <unk> , " ) ;
int <unk> = <unk> . <unk> ( fields , " ) ;
allocate ( <unk> , <unk> ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
Node <unk> = <unk> . <unk> ( <unk> , " , i ) ;
Node <unk> = <unk> . <unk> ( <unk> , " , i ) ;
Node <unk> = <unk> . <unk> ( <unk> , " , i ) ;
Node <unk> = <unk> . <unk> ( <unk> , " , i ) ;
Node <unk> = <unk> . <unk> ( <unk> , " , i ) ;
fileName [ i ] = <unk> . getNodeValue ( <unk> ) ;
<unk> [ i ] = <unk> . getNodeValue ( <unk> ) ;
<unk> [ i ] = <unk> . getNodeValue ( <unk> ) ;
<unk> [ i ] = <unk> . getNodeValue ( <unk> ) ;
<unk> [ i ] = <unk> . getNodeValue ( <unk> ) ;
}
for ( int i = <num> ; i < <unk> ; i ++ )
{
Node <unk> = <unk> . <unk> ( fields , " , i ) ;
<unk> field = new <unk> ( <unk> ) ;
<unk> [ i ] = field ;
}
<unk> = Const . <unk> ( <unk> . getTagValue ( <unk> , " ) , <num> ) ;
<unk> = " . equalsIgnoreCase ( <unk> . getTagValue ( <unk> , " ) ) ;
<unk> = " . equalsIgnoreCase ( <unk> . getTagValue ( <unk> , " ) ) ;
<unk> = <unk> . getTagValue ( <unk> , " ) ;
<unk> = <unk> . getTagValue ( <unk> , " ) ;
<unk> = <unk> . getTagValue ( <unk> , " ) ;
<unk> = <unk> . getTagValue ( <unk> , " ) ;
<unk> = <unk> . getTagValue ( <unk> , " ) ;
<unk> = <unk> . getTagValue ( <unk> , " ) ;
<unk> = <unk> . getTagValue ( <unk> , " ) ;
<unk> = <unk> . getTagValue ( <unk> , " ) ;
<unk> = <unk> . getTagValue ( <unk> , " ) ;
}
catch ( Exception e )
{
throw new <unk> ( <unk> . getString ( <unk> , " , e . toString ( ) ) ) ;
}
}
public void allocate ( int <unk> , int <unk> )
{
fileName = new String [ <unk> ] ;
<unk> = new String [ <unk> ] ;
<unk> = new String [ <unk> ] ;
<unk> = new String [ <unk> ] ;
<unk> = new String [ <unk> ] ;
<unk> = new <unk> [ <unk> ] ;
}
public void setDefault ( )
{
<unk> = null ;
<unk> = null ;
<unk> = null ;
<unk> = null ;
<unk> = null ;
<unk> = null ;
<unk> = null ;
<unk> = null ;
<unk> = false ;
<unk> = true ;
<unk> = false ;
<unk> = " ;
<unk> = false ;
<unk> = " ;
<unk> = false ;
<unk> = false ;
<unk> = false ;
int <unk> = <num> ;
int <unk> = <num> ;
allocate ( <unk> , <unk> ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
fileName [ i ] = " + ( i + <num> ) ;
<unk> [ i ] = " ;
<unk> [ i ] = " ;
<unk> [ i ] = <unk> [ <num> ] ;
<unk> [ i ] = <unk> [ <num> ] ;
}
for ( int i = <num> ; i < <unk> ; i ++ )
{
<unk> [ i ] = new <unk> ( " + ( i + <num> ) ) ;
}
<unk> = <num> ;
<unk> = false ;
<unk> = " ;
}
public void getFields ( <unk> r , String name , <unk> info [ ] , <unk> nextStep , <unk> space ) throws <unk>
{
int i ;
for ( i = <num> ; i < <unk> . length ; i ++ )
{
<unk> field = <unk> [ i ] ;
int type = field . getType ( ) ;
if ( type == <unk> . TYPE_NONE ) type = <unk> . TYPE_STRING ;
<unk> v = new <unk> ( space . <unk> ( field . getName ( ) ) , type ) ;
v . setLength ( field . getLength ( ) ) ;
v . setPrecision ( field . getPrecision ( ) ) ;
v . setOrigin ( name ) ;
v . <unk> ( field . getFormat ( ) ) ;
v . <unk> ( field . <unk> ( ) ) ;
v . <unk> ( field . <unk> ( ) ) ;
v . <unk> ( field . <unk> ( ) ) ;
r . <unk> ( v ) ;
}
if ( <unk> )
{
<unk> v = new <unk> ( space . <unk> ( <unk> ) , <unk> . TYPE_STRING ) ;
v . setLength ( <num> ) ;
v . setPrecision (  <num> ) ;
v . setOrigin ( name ) ;
r . <unk> ( v ) ;
}
if ( <unk> )
{
<unk> v = new <unk> ( space . <unk> ( <unk> ) , <unk> . <unk> ) ;
v . setLength ( <unk> . <unk> , <num> ) ;
v . setOrigin ( name ) ;
r . <unk> ( v ) ;
}
if ( <unk> ( ) != null && <unk> ( ) . length ( ) > <num> )
{
<unk> v = new <unk> ( space . <unk> ( <unk> ( ) ) , <unk> . TYPE_STRING ) ;
v . setLength ( <num> ,  <num> ) ;
v . setOrigin ( name ) ;
r . <unk> ( v ) ;
}
if ( <unk> ( ) != null && <unk> ( ) . length ( ) > <num> )
{
<unk> v = new <unk> ( space . <unk> ( <unk> ( ) ) , <unk> . TYPE_STRING ) ;
v . setLength ( <num> ,  <num> ) ;
v . setOrigin ( name ) ;
r . <unk> ( v ) ;
}
if ( <unk> ( ) != null && <unk> ( ) . length ( ) > <num> )
{
<unk> v = new <unk> ( space . <unk> ( <unk> ( ) ) , <unk> . TYPE_STRING ) ;
v . setLength ( <num> ,  <num> ) ;
v . setOrigin ( name ) ;
r . <unk> ( v ) ;
}
if ( <unk> ( ) != null && <unk> ( ) . length ( ) > <num> )
{
<unk> v = new <unk> ( space . <unk> ( <unk> ( ) ) , <unk> . <unk> ) ;
v . setOrigin ( name ) ;
v . setLength ( <num> ) ;
r . <unk> ( v ) ;
}
if ( <unk> ( ) != null && <unk> ( ) . length ( ) > <num> )
{
<unk> v = new <unk> ( space . <unk> ( <unk> ( ) ) , <unk> . TYPE_BOOLEAN ) ;
v . setOrigin ( name ) ;
r . <unk> ( v ) ;
}
if ( <unk> ( ) != null && <unk> ( ) . length ( ) > <num> )
{
<unk> v = new <unk> ( space . <unk> ( <unk> ( ) ) , <unk> . TYPE_DATE ) ;
v . setOrigin ( name ) ;
r . <unk> ( v ) ;
}
if ( <unk> ( ) != null && <unk> ( ) . length ( ) > <num> )
{
<unk> v = new <unk> ( space . <unk> ( <unk> ( ) ) , <unk> . TYPE_STRING ) ;
v . setLength ( <num> ,  <num> ) ;
v . setOrigin ( name ) ;
r . <unk> ( v ) ;
}
if ( <unk> ( ) != null && <unk> ( ) . length ( ) > <num> )
{
<unk> v = new <unk> ( space . <unk> ( <unk> ( ) ) , <unk> . TYPE_STRING ) ;
v . setLength ( <num> ,  <num> ) ;
v . setOrigin ( name ) ;
r . <unk> ( v ) ;
}
}
public void <unk> ( Repository rep , <unk> <unk> , List < <unk> > databases , Map < String , Counter > <unk> )
throws <unk>
{
try
{
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
int <unk> = rep . <unk> ( <unk> , " ) ;
int <unk> = rep . <unk> ( <unk> , " ) ;
allocate ( <unk> , <unk> ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
fileName [ i ] = rep . <unk> ( <unk> , i , " ) ;
<unk> [ i ] = rep . <unk> ( <unk> , i , " ) ;
<unk> [ i ] = rep . <unk> ( <unk> , i , " ) ;
<unk> [ i ] = rep . <unk> ( <unk> , i , " ) ;
<unk> [ i ] = rep . <unk> ( <unk> , i , " ) ;
}
for ( int i = <num> ; i < <unk> ; i ++ )
{
<unk> field = new <unk> ( ) ;
field . setName ( rep . <unk> ( <unk> , i , " ) ) ;
field . setPath ( rep . <unk> ( <unk> , i , " ) ) ;
field . setType ( <unk> . getType ( rep . <unk> ( <unk> , i , " ) ) ) ;
field . setFormat ( rep . <unk> ( <unk> , i , " ) ) ;
field . <unk> ( rep . <unk> ( <unk> , i , " ) ) ;
field . <unk> ( rep . <unk> ( <unk> , i , " ) ) ;
field . <unk> ( rep . <unk> ( <unk> , i , " ) ) ;
field . setLength ( ( int ) rep . <unk> ( <unk> , i , " ) ) ;
field . setPrecision ( ( int ) rep . <unk> ( <unk> , i , " ) ) ;
field . <unk> ( <unk> . <unk> ( rep . <unk> ( <unk> , i , " ) ) ) ;
field . <unk> ( rep . <unk> ( <unk> , i , " ) ) ;
<unk> [ i ] = field ;
}
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
<unk> = rep . <unk> ( <unk> , " ) ;
}
catch ( Exception e )
{
throw new <unk> ( <unk> . getString ( <unk> , " ) , e ) ;
}
}
public void <unk> ( Repository rep , <unk> <unk> , <unk> <unk> )
throws <unk>
{
try
{
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
for ( int i = <num> ; i < fileName . length ; i ++ )
{
rep . <unk> ( <unk> , <unk> , i , " , fileName [ i ] ) ;
rep . <unk> ( <unk> , <unk> , i , " , <unk> [ i ] ) ;
rep . <unk> ( <unk> , <unk> , i , " , <unk> [ i ] ) ;
rep . <unk> ( <unk> , <unk> , i , " , <unk> [ i ] ) ;
rep . <unk> ( <unk> , <unk> , i , " , <unk> [ i ] ) ;
}
for ( int i = <num> ; i < <unk> . length ; i ++ )
{
<unk> field = <unk> [ i ] ;
rep . <unk> ( <unk> , <unk> , i , " , field . getName ( ) ) ;
rep . <unk> ( <unk> , <unk> , i , " , field . getPath ( ) ) ;
rep . <unk> ( <unk> , <unk> , i , " , field . <unk> ( ) ) ;
rep . <unk> ( <unk> , <unk> , i , " , field . getFormat ( ) ) ;
rep . <unk> ( <unk> , <unk> , i , " , field . <unk> ( ) ) ;
rep . <unk> ( <unk> , <unk> , i , " , field . <unk> ( ) ) ;
rep . <unk> ( <unk> , <unk> , i , " , field . <unk> ( ) ) ;
rep . <unk> ( <unk> , <unk> , i , " , field . getLength ( ) ) ;
rep . <unk> ( <unk> , <unk> , i , " , field . getPrecision ( ) ) ;
rep . <unk> ( <unk> , <unk> , i , " , field . <unk> ( ) ) ;
rep . <unk> ( <unk> , <unk> , i , " , field . <unk> ( ) ) ;
}
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
rep . <unk> ( <unk> , <unk> , " , <unk> ) ;
}
catch ( Exception e )
{
throw new <unk> ( <unk> . getString ( <unk> , " , " + <unk> ) , e ) ;
}
}
public <unk> getFiles ( <unk> space )
{
return <unk> . <unk> ( space , fileName , <unk> , <unk> , <unk> , <unk> ( ) ) ;
}
private boolean [ ] <unk> ( )
{
int len = fileName . length ;
boolean <unk> [ ] = new boolean [ len ] ;
for ( int i = <num> ; i < len ; i ++ )
{
<unk> [ i ] = YES . equalsIgnoreCase ( <unk> [ i ] ) ;
}
return <unk> ;
}
public void check ( List < <unk> > <unk> , <unk> <unk> , <unk> <unk> , <unk> prev , String input [ ] , String output [ ] , <unk> info )
{
<unk> cr ;
if ( ! <unk> ( ) )
{
if ( input . length <= <num> )
{
cr = new <unk> ( <unk> . <unk> , <unk> . getString ( <unk> , " ) , <unk> ) ;
<unk> . add ( cr ) ;
}
else
{
cr = new <unk> ( <unk> . <unk> , <unk> . getString ( <unk> , " ) , <unk> ) ;
<unk> . add ( cr ) ;
}
}
if ( <unk> ( ) . length <= <num> )
{
cr = new <unk> ( <unk> . <unk> , <unk> . getString ( <unk> , " ) , <unk> ) ;
<unk> . add ( cr ) ;
}
if ( <unk> ( ) )
{
if ( Const . isEmpty ( <unk> ( ) ) )
{
cr = new <unk> ( <unk> . <unk> , <unk> . getString ( <unk> , " ) , <unk> ) ;
<unk> . add ( cr ) ;
}
else
{
cr = new <unk> ( <unk> . <unk> , <unk> . getString ( <unk> , " ) , <unk> ) ;
<unk> . add ( cr ) ;
}
}
else
{
<unk> <unk> = getFiles ( <unk> ) ;
if ( <unk> == null || <unk> . getFiles ( ) . size ( ) == <num> )
{
cr = new <unk> ( <unk> . <unk> , <unk> . getString ( <unk> , " ) , <unk> ) ;
<unk> . add ( cr ) ;
}
else
{
cr = new <unk> ( <unk> . <unk> , <unk> . getString ( <unk> , " , " + <unk> . getFiles ( ) . size ( ) ) , <unk> ) ;
<unk> . add ( cr ) ;
}
}
}
public <unk> getStep ( <unk> <unk> , <unk> <unk> , int <unk> , <unk> tr , <unk> trans )
{
return new <unk> ( <unk> , <unk> , <unk> , tr , trans ) ;
}
public <unk> <unk> ( )
{
return new <unk> ( ) ;
}
public boolean <unk> ( )
{
return true ;
}
public String <unk> ( <unk> space , Map < String , <unk> > <unk> , <unk> <unk> , Repository repository ) throws <unk> {
try {
List < String > <unk> = new ArrayList < String > ( ) ;
if ( ! <unk> ( ) ) {
<unk> fileList = getFiles ( space ) ;
if ( fileList . getFiles ( ) . size ( ) > <num> ) {
for ( <unk> <unk> : fileList . getFiles ( ) ) {
if ( <unk> . exists ( ) ) {
<unk> . add ( <unk> . getName ( ) . getPath ( ) ) ;
}
}
fileName = <unk> . toArray ( new String [ <unk> . size ( ) ] ) ;
<unk> = new String [ <unk> . size ( ) ] ;
<unk> = new String [ <unk> . size ( ) ] ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ ) <unk> [ i ] = " ;
}
}
return null ;
} catch ( Exception e ) {
throw new <unk> ( e ) ;
}
}
package <unk> . <unk> . <unk> . jsoup ;
import java . io . BufferedInputStream ;
import java . io . FileInputStream ;
import java . util . Date ;
import java . util . List ;
import org . apache . commons . <unk> . <unk> ;
import org . jsoup . nodes . Document ;
import org . jsoup . select . Elements ;
import org . <unk> . di . core . <unk> . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
public class <unk> extends <unk> implements <unk>
{
public Object [ ] <unk> ;
public <unk> <unk> ;
public <unk> <unk> ;
public <unk> <unk> ;
public int <unk> ;
public int <unk> ;
public int <unk> ;
public int <unk> ;
public Object [ ] <unk> ;
public int <unk> ;
public <unk> files ;
public <unk> file ;
public int <unk> ;
public FileInputStream fr ;
public BufferedInputStream is ;
public String <unk> ;
public int itemCount ;
public int itemPosition ;
public long <unk> ;
public int <unk> ;
<unk> <unk> ;
public String filename ;
public String <unk> ;
public String path ;
public String extension ;
public boolean hidden ;
public Date <unk> ;
public String <unk> ;
public String <unk> ;
public long size ;
public Document <unk> ;
public List < Elements > resultList ;
public String <unk> ;
public <unk> ( )
{
super ( ) ;
<unk> = <num> ;
<unk> = null ;
<unk> = <num> ;
fr = null ;
is = null ;
<unk> =  <num> ;
<unk> =  <num> ;
<unk> = <num> ;
<unk> = <num> ;
<unk> = null ;
<unk> = <num> ;
}
}
package <unk> . <unk> . <unk> . jsoup ;
import java . io . File ;
import java . net . URL ;
import java . util . ArrayList ;
import java . util . Date ;
import java . util . Iterator ;
import java . util . List ;
import org . apache . commons . <unk> . <unk> ;
import org . jsoup . Jsoup ;
import org . jsoup . nodes . Document ;
import org . jsoup . nodes . Element ;
import org . jsoup . select . Elements ;
import org . <unk> . di . core . Const ;
import org . <unk> . di . core . <unk> ;
import org . <unk> . di . core . exception . <unk> ;
import org . <unk> . di . core . <unk> . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . core . <unk> . <unk> ;
import org . <unk> . di . i18n . <unk> ;
import org . <unk> . di . trans . <unk> ;
import org . <unk> . di . trans . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
public class <unk> extends <unk> implements <unk>
{
private static Class < ? > <unk> = <unk> . class ;
private <unk> meta ;
private <unk> data ;
public <unk> ( <unk> <unk> , <unk> <unk> , int <unk> , <unk> <unk> , <unk> trans )
{
super ( <unk> , <unk> , <unk> , <unk> , trans ) ;
}
private Object [ ] <unk> ( ) {
Object [ ] rowData = <unk> . <unk> ( data . <unk> . size ( ) ) ;
return rowData ;
}
private void <unk> ( ) throws <unk> {
List < <unk> > <unk> = data . files . <unk> ( ) ;
if ( <unk> . size ( ) != <num> ) {
String message = <unk> . <unk> ( <unk> ) ;
log . logError ( <unk> . getString ( <unk> , " ) , <unk> . getString ( <unk> , " , message ) ) ;
throw new <unk> ( <unk> . getString ( <unk> , " , message ) ) ;
}
List < <unk> > <unk> = data . files . <unk> ( ) ;
if ( <unk> . size ( ) != <num> )
{
String message = <unk> . <unk> ( <unk> ) ;
log . logError ( <unk> . getString ( <unk> , " ) , <unk> . getString ( <unk> , " , message ) ) ;
throw new <unk> ( <unk> . getString ( <unk> , " , message ) ) ;
}
}
private boolean <unk> ( )
{
try {
data . <unk> = getRow ( ) ;
if ( data . <unk> == null ) {
if ( log . <unk> ( ) ) <unk> ( <unk> . getString ( <unk> , " ) ) ;
return false ;
}
if ( first ) {
first = false ;
data . <unk> = <unk> ( ) ;
data . <unk> = data . <unk> . clone ( ) ;
meta . getFields ( data . <unk> , <unk> ( ) , null , null , this ) ;
data . <unk> = data . <unk> . size ( ) ;
data . <unk> = data . <unk> . clone ( ) ;
for ( int i = <num> ; i < data . <unk> . size ( ) ; i ++ ) data . <unk> . <unk> ( i ) . setType ( <unk> . TYPE_STRING ) ;
data . <unk> = data . <unk> . clone ( ) ;
for ( int i = <num> ; i < data . <unk> . size ( ) ; i ++ ) {
data . <unk> . <unk> ( i ) . setType ( <unk> . TYPE_STRING ) ;
}
if ( Const . isEmpty ( meta . <unk> ( ) ) ) {
logError ( <unk> . getString ( <unk> , " ) ) ;
throw new <unk> ( <unk> . getString ( <unk> , " ) ) ;
}
if ( data . <unk> < <num> ) {
data . <unk> = <unk> ( ) . <unk> ( meta . <unk> ( ) ) ;
if ( data . <unk> < <num> )
{
logError ( <unk> . getString ( <unk> , " , meta . <unk> ( ) ) ) ;
throw new <unk> ( <unk> . getString ( <unk> , " , meta . <unk> ( ) ) ) ;
}
}
}
String fieldValue = <unk> ( ) . getString ( data . <unk> , data . <unk> ) ;
if ( log . <unk> ( ) ) <unk> ( <unk> . getString ( <unk> , " , meta . <unk> ( ) , fieldValue ) ) ;
if ( meta . <unk> ( ) ) {
data . file = <unk> . <unk> ( fieldValue , <unk> ( ) ) ;
if ( meta . <unk> ( ) && data . file . getContent ( ) . getSize ( ) == <num> ) {
<unk> ( <unk> . getString ( <unk> , " , data . file . getName ( ) ) ) ;
<unk> ( ) ;
}
} else {
data . <unk> = fieldValue ;
}
<unk> ( ) ;
} catch ( Exception e ) {
logError ( <unk> . getString ( <unk> , " , e . toString ( ) ) ) ;
<unk> ( ) ;
logError ( Const . <unk> ( e ) ) ;
<unk> ( <num> ) ;
return false ;
}
return true ;
}
private void <unk> ( <unk> file ) throws Exception {
if ( meta . <unk> ( ) ) {
<unk> resultFile = new <unk> ( <unk> . <unk> , file , <unk> ( ) . getName ( ) , <unk> ( ) ) ;
resultFile . setComment ( <unk> . getString ( <unk> , " ) ) ;
<unk> ( resultFile ) ;
}
}
private boolean <unk> ( ) {
try {
if ( data . <unk> >= data . files . <unk> ( ) ) {
if ( log . <unk> ( ) ) <unk> ( <unk> . getString ( <unk> , " ) ) ;
return false ;
}
if ( data . file != null ) data . file . close ( ) ;
data . file = ( <unk> ) data . files . getFile ( data . <unk> ) ;
if ( meta . <unk> ( ) && data . file . getContent ( ) . getSize ( ) == <num> ) {
<unk> ( <unk> . getString ( <unk> , " , " + data . file . getName ( ) ) ) ;
<unk> ( ) ;
}
<unk> ( ) ;
} catch ( Exception e ) {
logError ( <unk> . getString ( <unk> , " , " + data . <unk> , data . file . toString ( ) , e . toString ( ) ) ) ;
<unk> ( ) ;
<unk> ( <num> ) ;
return false ;
}
return true ;
}
private void <unk> ( ) throws Exception {
if ( data . file != null ) {
data . filename = <unk> . getFilename ( data . file ) ;
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
data . <unk> = data . file . getName ( ) . getBaseName ( ) ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
data . path = <unk> . getFilename ( data . file . getParent ( ) ) ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
data . hidden = data . file . isHidden ( ) ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
data . extension = data . file . getName ( ) . getExtension ( ) ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
data . <unk> = new Date ( data . file . getContent ( ) . <unk> ( ) ) ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
data . <unk> = data . file . getName ( ) . getURI ( ) ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
data . <unk> = data . file . getName ( ) . <unk> ( ) ;
}
long fileSize = data . file . getContent ( ) . getSize ( ) ;
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
data . size = fileSize ;
}
data . <unk> ++ ;
if ( log . <unk> ( ) ) <unk> ( <unk> . getString ( <unk> , " , data . file . toString ( ) ) ) ;
<unk> ( data . file ) ;
}
<unk> ( ) ;
}
private void <unk> ( ) throws Exception {
if ( data . file != null ) {
data . <unk> = Jsoup . parse ( new File ( data . filename ) , " ) ;
} else {
if ( meta . <unk> ( ) ) {
data . <unk> = Jsoup . parse ( new URL ( data . <unk> ) , <num> ) ;
} else {
data . <unk> = Jsoup . parse ( data . <unk> ) ;
}
}
List < Elements > resultList = new ArrayList < Elements > ( ) ;
data . <unk> =  <num> ;
data . <unk> = <num> ;
String <unk> = " ;
for ( int i = <num> ; i < data . <unk> ; i ++ ) {
String path = meta . <unk> ( ) [ i ] . getPath ( ) ;
Elements ja = data . <unk> . select ( path ) ;
if ( ja . size ( ) > <num> && ( data . <unk> !=  <num> && data . <unk> != ja . size ( ) && ja != null ) ) {
throw new <unk> ( <unk> . getString ( <unk> , " , ja . size ( ) , path , <unk> , data . <unk> ) ) ;
}
resultList . add ( ja ) ;
if ( data . <unk> ==  <num> && ja != null ) {
data . <unk> = ja . size ( ) ;
}
<unk> = path ;
}
data . resultList = new ArrayList < Elements > ( ) ;
Iterator < Elements > it = resultList . iterator ( ) ;
while ( it . hasNext ( ) ) {
Elements j = it . next ( ) ;
if ( j == null || j . size ( ) == <num> ) {
if ( data . <unk> ==  <num> ) {
data . <unk> = <num> ;
}
j = new Elements ( ) ;
for ( int i = <num> ; i < data . <unk> ; i ++ ) {
j . add ( null ) ;
}
}
data . resultList . add ( j ) ;
}
resultList = null ;
if ( log . <unk> ( ) ) {
<unk> ( <unk> . getString ( <unk> , " , data . <unk> ) ) ;
}
}
public boolean processRow ( <unk> <unk> , <unk> <unk> ) throws <unk> {
if ( first && ! meta . <unk> ( ) ) {
first = false ;
data . files = meta . getFiles ( this ) ;
if ( ! meta . <unk> ( ) && data . files . <unk> ( ) == <num> ) {
throw new <unk> ( <unk> . getString ( <unk> , " ) ) ;
}
<unk> ( ) ;
data . <unk> = new <unk> ( ) ;
meta . getFields ( data . <unk> , <unk> ( ) , null , null , this ) ;
data . <unk> = data . <unk> . clone ( ) ;
for ( int i = <num> ; i < data . <unk> . size ( ) ; i ++ ) data . <unk> . <unk> ( i ) . setType ( <unk> . TYPE_STRING ) ;
data . <unk> = data . <unk> . clone ( ) ;
for ( int i = <num> ; i < data . <unk> . size ( ) ; i ++ ) {
data . <unk> . <unk> ( i ) . setType ( <unk> . TYPE_STRING ) ;
}
}
Object [ ] r = null ;
try {
r = <unk> ( ) ;
if ( r == null ) {
<unk> ( ) ;
return false ;
}
if ( log . <unk> ( ) ) <unk> ( <unk> . getString ( <unk> , " , data . <unk> . getString ( r ) ) ) ;
<unk> ( ) ;
data . <unk> ++ ;
<unk> ( data . <unk> , r ) ;
if ( meta . <unk> ( ) > <num> && data . <unk> > meta . <unk> ( ) ) {
<unk> ( ) ;
return false ;
}
} catch ( Exception e ) {
boolean <unk> = false ;
String errorMessage = null ;
if ( <unk> ( ) . <unk> ( ) ) {
<unk> = true ;
errorMessage = e . toString ( ) ;
} else {
logError ( <unk> . getString ( <unk> , " , e . getMessage ( ) ) ) ;
<unk> ( <num> ) ;
<unk> ( ) ;
<unk> ( ) ;
return false ;
}
if ( <unk> ) {
<unk> ( <unk> ( ) , r , <num> , errorMessage , null , " ) ;
}
}
return true ;
}
private Object [ ] <unk> ( ) throws <unk> {
if ( ! meta . <unk> ( ) ) {
while ( ( data . <unk> >= data . <unk> || data . file == null ) ) {
if ( ! <unk> ( ) ) {
return null ;
}
}
} else {
while ( ( data . <unk> >= data . <unk> || data . <unk> == null ) ) {
if ( ! <unk> ( ) ) {
return null ;
}
if ( data . <unk> == null ) {
return null ;
}
}
}
return buildRow ( ) ;
}
private Object [ ] buildRow ( ) throws <unk> {
Object [ ] <unk> = <unk> ( ) ;
if ( data . <unk> != null ) <unk> = data . <unk> . clone ( ) ;
for ( int i = <num> ; i < data . <unk> ; i ++ ) {
<unk> field = meta . <unk> ( ) [ i ] ;
Elements <unk> = data . resultList . get ( i ) ;
String <unk> = null ;
if ( <unk> != null ) {
Object jo = ( Object ) <unk> . get ( data . <unk> ) ;
if ( jo != null ) {
<unk> = jo . toString ( ) ;
}
}
switch ( field . <unk> ( ) ) {
case <unk> . <unk> :
<unk> = Const . <unk> ( <unk> ) ;
break ;
case <unk> . <unk> :
<unk> = Const . <unk> ( <unk> ) ;
break ;
case <unk> . <unk> :
<unk> = Const . trim ( <unk> ) ;
break ;
default :
break ;
}
if ( meta . <unk> ( ) ) {
<unk> = <unk> . <unk> ( <unk> , data . <unk> + i , <unk> ) ;
}
<unk> <unk> = data . <unk> . <unk> ( data . <unk> + i ) ;
<unk> <unk> = data . <unk> . <unk> ( data . <unk> + i ) ;
<unk> [ data . <unk> + i ] = <unk> . <unk> ( <unk> , <unk> ) ;
if ( meta . <unk> ( ) [ i ] . <unk> ( ) ) {
if ( data . <unk> != null && Const . isEmpty ( <unk> ) ) {
<unk> [ data . <unk> + i ] = data . <unk> [ data . <unk> + i ] ;
}
}
}
int rowIndex = data . <unk> ;
if ( meta . <unk> ( ) && ! Const . isEmpty ( meta . <unk> ( ) ) ) {
<unk> [ rowIndex ++ ] = data . filename ;
}
if ( meta . <unk> ( ) && ! Const . isEmpty ( meta . <unk> ( ) ) ) {
<unk> [ rowIndex ++ ] = new Long ( data . <unk> ) ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
<unk> [ rowIndex ++ ] = data . <unk> ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
<unk> [ rowIndex ++ ] = data . extension ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
<unk> [ rowIndex ++ ] = data . path ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
<unk> [ rowIndex ++ ] = new Long ( data . size ) ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
<unk> [ rowIndex ++ ] = new Boolean ( data . path ) ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
<unk> [ rowIndex ++ ] = data . <unk> ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
<unk> [ rowIndex ++ ] = data . <unk> ;
}
if ( meta . <unk> ( ) != null && meta . <unk> ( ) . length ( ) > <num> ) {
<unk> [ rowIndex ++ ] = data . <unk> ;
}
data . <unk> ++ ;
<unk> irow = <unk> ( ) ;
data . <unk> = irow == null ? <unk> : ( Object [ ] ) irow . <unk> ( <unk> ) ;
return <unk> ;
}
public boolean init ( <unk> <unk> , <unk> <unk> ) {
meta = ( <unk> ) <unk> ;
data = ( <unk> ) <unk> ;
if ( super . init ( <unk> , <unk> ) ) {
data . <unk> = <num> ;
data . <unk> = meta . <unk> ( ) . length ;
for ( int i = <num> ; i < data . <unk> ; i ++ ) {
<unk> field = meta . <unk> ( ) [ i ] ;
field . setPath ( <unk> ( field . getPath ( ) ) ) ;
}
data . <unk> = new Document ( " ) ;
return true ;
}
return false ;
}
public void dispose ( <unk> <unk> , <unk> <unk> ) {
meta = ( <unk> ) <unk> ;
data = ( <unk> ) <unk> ;
if ( data . file != null ) {
try {
data . file . close ( ) ;
} catch ( Exception e ) { }
}
data . resultList = null ;
super . dispose ( <unk> , <unk> ) ;
}
package <unk> . <unk> . <unk> . jsoup ;
import org . eclipse . swt . SWT ;
import org . eclipse . swt . custom . <unk> ;
import org . eclipse . swt . custom . <unk> ;
import org . eclipse . swt . custom . <unk> ;
import org . eclipse . swt . events . FocusListener ;
import org . eclipse . swt . events . ModifyEvent ;
import org . eclipse . swt . events . ModifyListener ;
import org . eclipse . swt . events . SelectionAdapter ;
import org . eclipse . swt . events . SelectionEvent ;
import org . eclipse . swt . events . <unk> ;
import org . eclipse . swt . events . <unk> ;
import org . eclipse . swt . graphics . Cursor ;
import org . eclipse . swt . layout . <unk> ;
import org . eclipse . swt . layout . <unk> ;
import org . eclipse . swt . layout . <unk> ;
import org . eclipse . swt . widgets . Button ;
import org . eclipse . swt . widgets . Composite ;
import org . eclipse . swt . widgets . DirectoryDialog ;
import org . eclipse . swt . widgets . Display ;
import org . eclipse . swt . widgets . Event ;
import org . eclipse . swt . widgets . FileDialog ;
import org . eclipse . swt . widgets . Group ;
import org . eclipse . swt . widgets . Label ;
import org . eclipse . swt . widgets . Listener ;
import org . eclipse . swt . widgets . MessageBox ;
import org . eclipse . swt . widgets . Shell ;
import org . eclipse . swt . widgets . TableItem ;
import org . eclipse . swt . widgets . Text ;
import org . <unk> . di . core . Const ;
import org . <unk> . di . core . <unk> ;
import org . <unk> . di . core . exception . <unk> ;
import org . <unk> . di . core . <unk> . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . core . row . <unk> ;
import org . <unk> . di . i18n . <unk> ;
import org . <unk> . di . trans . <unk> ;
import org . <unk> . di . trans . <unk> ;
import org . <unk> . di . trans . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . <unk> . di . trans . step . <unk> ;
import org . <unk> . di . ui . core . dialog . <unk> ;
import org . <unk> . di . ui . core . dialog . <unk> ;
import org . <unk> . di . ui . core . dialog . <unk> ;
import org . <unk> . di . ui . core . dialog . <unk> ;
import org . <unk> . di . ui . core . dialog . <unk> ;
import org . <unk> . di . ui . core . widget . <unk> ;
import org . <unk> . di . ui . core . widget . <unk> ;
import org . <unk> . di . ui . core . widget . <unk> ;
import org . <unk> . di . ui . trans . dialog . <unk> ;
import org . <unk> . di . ui . trans . step . <unk> ;
public class <unk> extends <unk> implements <unk>
{
private static Class < ? > <unk> = <unk> . class ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> , <unk> , <unk> ;
private Composite <unk> , <unk> , <unk> ;
private <unk> <unk> , <unk> , <unk> ;
private Label <unk> , <unk> ;
private Button <unk> ;
private Button <unk> ;
private Button <unk> ;
private Button <unk> ;
private <unk> <unk> ;
private <unk> <unk> , <unk> , <unk> , <unk> , <unk> , <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> , <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> , <unk> ;
private Button <unk> ;
private <unk> <unk> ;
private <unk> <unk> , <unk> , <unk> ;
private <unk> <unk> , <unk> ;
private <unk> <unk> , <unk> , <unk> , <unk> , <unk> ;
private Label <unk> , <unk> ;
private <unk> <unk> ;
private Button <unk> , <unk> ;
private Label <unk> ;
private Button <unk> , <unk> ;
private <unk> <unk> , <unk> , <unk> , <unk> ;
private Label <unk> ;
private Button <unk> ;
private <unk> <unk> , <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> , <unk> ;
private Label <unk> , <unk> ;
private Button <unk> ;
private <unk> <unk> , <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> , <unk> ;
private Label <unk> ;
private Text <unk> ;
private <unk> <unk> , <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private Group <unk> ;
private Group <unk> ;
private Group <unk> ;
private Group <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> , <unk> ;
private Label <unk> ;
private Button <unk> ;
private <unk> <unk> , <unk> ;
private Label <unk> ;
private Button <unk> ;
private <unk> <unk> , <unk> ;
private <unk> <unk> ;
private Composite <unk> ;
private <unk> <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private Label <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> input ;
private int middle ;
private int margin ;
private ModifyListener <unk> ;
public <unk> ( Shell parent , Object in , <unk> <unk> , String <unk> )
{
super ( parent , ( <unk> ) in , <unk> , <unk> ) ;
input = ( <unk> ) in ;
}
public String open ( )
{
Shell parent = getParent ( ) ;
Display display = parent . getDisplay ( ) ;
shell = new Shell ( parent , SWT . DIALOG_TRIM | SWT . <unk> | SWT . MAX | SWT . MIN ) ;
props . <unk> ( shell ) ;
<unk> ( shell , input ) ;
<unk> = new ModifyListener ( )
{
public void modifyText ( ModifyEvent e )
{
input . setChanged ( ) ;
}
} ;
changed = input . hasChanged ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . marginWidth = Const . <unk> ;
<unk> . marginHeight = Const . <unk> ;
shell . setLayout ( <unk> ) ;
shell . setText ( <unk> . getString ( <unk> , " ) ) ;
middle = props . <unk> ( ) ;
margin = Const . MARGIN ;
<unk> = new Label ( shell , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <num> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Text ( shell , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
<unk> . setText ( <unk> ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . top = new <unk> ( <num> , margin ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( shell , SWT . BORDER ) ;
props . <unk> ( <unk> , <unk> . <unk> ) ;
<unk> = new <unk> ( <unk> , SWT . NONE ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new Composite ( <unk> , SWT . NONE ) ;
props . <unk> ( <unk> ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . marginWidth = <num> ;
<unk> . marginHeight = <num> ;
<unk> . setLayout ( <unk> ) ;
<unk> = new Group ( <unk> , SWT . <unk> ) ;
props . <unk> ( <unk> ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . marginWidth = <num> ;
<unk> . marginHeight = <num> ;
<unk> . setLayout ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <num> , margin ) ;
<unk> . right = new <unk> ( middle ,  <num> * margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . CHECK ) ;
props . <unk> ( <unk> ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle ,  margin ) ;
<unk> . top = new <unk> ( <num> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
SelectionAdapter <unk> = new SelectionAdapter ( )
{
public void widgetSelected ( SelectionEvent arg0 )
{
<unk> ( ) ;
input . setChanged ( ) ;
}
} ;
<unk> . addSelectionListener ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  <num> * margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . CHECK ) ;
props . <unk> ( <unk> ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
SelectionAdapter <unk> = new SelectionAdapter ( )
{
public void widgetSelected ( SelectionEvent arg0 )
{
if ( <unk> . getSelection ( ) )
<unk> . setSelection ( false ) ;
input . setChanged ( ) ;
}
} ;
<unk> . addSelectionListener ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  <num> * margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . CHECK ) ;
props . <unk> ( <unk> ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
SelectionAdapter <unk> = new SelectionAdapter ( )
{
public void widgetSelected ( SelectionEvent arg0 )
{
if ( <unk> . getSelection ( ) )
<unk> . setSelection ( false ) ;
input . setChanged ( ) ;
}
} ;
<unk> . addSelectionListener ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  <num> * margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , SWT . BORDER | SWT . READ_ONLY ) ;
<unk> . setEditable ( true ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . addFocusListener ( new FocusListener ( )
{
public void focusLost ( org . eclipse . swt . events . FocusEvent e )
{
}
public void focusGained ( org . eclipse . swt . events . FocusEvent e )
{
Cursor <unk> = new Cursor ( shell . getDisplay ( ) , SWT . <unk> ) ;
shell . setCursor ( <unk> ) ;
<unk> ( ) ;
shell . setCursor ( null ) ;
<unk> . dispose ( ) ;
}
}
) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . PUSH | SWT . CENTER ) ;
props . <unk> ( <unk> ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . PUSH | SWT . CENTER ) ;
props . <unk> ( <unk> ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . right = new <unk> ( <unk> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . right = new <unk> ( <unk> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( <unk> , <num> , SWT . RIGHT ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . PUSH | SWT . CENTER ) ;
props . <unk> ( <unk> ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . PUSH | SWT . CENTER ) ;
props . <unk> ( <unk> ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . left = new <unk> ( <unk> , <num> , SWT . LEFT ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . PUSH | SWT . CENTER ) ;
props . <unk> ( <unk> ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . bottom = new <unk> ( <num> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> [ ] <unk> = new <unk> [ <num> ] ;
<unk> [ <num> ] = new <unk> ( <unk> . getString ( <unk> , " ) , <unk> . <unk> , false ) ;
<unk> [ <num> ] = new <unk> ( <unk> . getString ( <unk> , " ) , <unk> . <unk> , false ) ;
<unk> [ <num> ] = new <unk> ( <unk> . getString ( <unk> , " ) , <unk> . <unk> , false ) ;
<unk> [ <num> ] . <unk> ( true ) ;
<unk> [ <num> ] . <unk> ( true ) ;
<unk> [ <num> ] . setToolTip ( <unk> . getString ( <unk> , " ) ) ;
<unk> [ <num> ] . <unk> ( true ) ;
<unk> [ <num> ] . setToolTip ( <unk> . getString ( <unk> , " ) ) ;
<unk> [ <num> ] = new <unk> ( <unk> . getString ( <unk> , " ) , <unk> . <unk> , <unk> . <unk> ) ;
<unk> [ <num> ] . setToolTip ( <unk> . getString ( <unk> , " ) ) ;
<unk> [ <num> ] = new <unk> ( <unk> . getString ( <unk> , " ) , <unk> . <unk> , <unk> . <unk> ) ;
<unk> [ <num> ] . setToolTip ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( <unk> , <unk> ,
SWT . FULL_SELECTION | SWT . SINGLE | SWT . BORDER ,
<unk> ,
2 ,
<unk> ,
props
) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . right = new <unk> ( <unk> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . bottom = new <unk> ( <unk> ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <num> , <num> ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . bottom = new <unk> ( <num> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . layout ( ) ;
<unk> . setControl ( <unk> ) ;
<unk> = new <unk> ( <unk> , SWT . NONE ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . marginWidth = <num> ;
<unk> . marginHeight = <num> ;
<unk> = new Composite ( <unk> , SWT . NONE ) ;
props . <unk> ( <unk> ) ;
<unk> . setLayout ( <unk> ) ;
<unk> = new Group ( <unk> , SWT . <unk> ) ;
props . <unk> ( <unk> ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . marginWidth = <num> ;
<unk> . marginHeight = <num> ;
<unk> . setLayout ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <num> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . CHECK ) ;
props . <unk> ( <unk> ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . top = new <unk> ( <num> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . CHECK ) ;
props . <unk> ( <unk> ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Text ( <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , margin ) ;
<unk> . top = new <unk> ( <num> , margin ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Group ( <unk> , SWT . <unk> ) ;
props . <unk> ( <unk> ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . marginWidth = <num> ;
<unk> . marginHeight = <num> ;
<unk> . setLayout ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , <num> * margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . CHECK ) ;
props . <unk> ( <unk> ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . top = new <unk> ( <unk> , <num> * margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . LEFT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <unk> , margin ) ;
<unk> . top = new <unk> ( <unk> , <num> * margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <unk> , margin ) ;
<unk> . top = new <unk> ( <unk> , <num> * margin ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . CHECK ) ;
props . <unk> ( <unk> ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <unk> , margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <unk> , margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Group ( <unk> , SWT . <unk> ) ;
props . <unk> ( <unk> ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . marginWidth = <num> ;
<unk> . marginHeight = <num> ;
<unk> . setLayout ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( <unk> , SWT . CHECK ) ;
props . <unk> ( <unk> ) ;
<unk> . setToolTipText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <num> , <num> ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . bottom = new <unk> ( <num> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . layout ( ) ;
<unk> . setControl ( <unk> ) ;
<unk> = new <unk> ( <unk> , SWT . NONE ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . marginWidth = Const . <unk> ;
<unk> . marginHeight = Const . <unk> ;
<unk> = new Composite ( <unk> , SWT . NONE ) ;
<unk> . setLayout ( <unk> ) ;
props . <unk> ( <unk> ) ;
final int <unk> = input . <unk> ( ) . length ;
<unk> [ ] <unk> = new <unk> [ ]
{
new <unk> (
<unk> . getString ( <unk> , " ) ,
<unk> . <unk> ,
false ) ,
new <unk> (
<unk> . getString ( <unk> , " ) ,
<unk> . <unk> ,
false ) ,
new <unk> (
<unk> . getString ( <unk> , " ) ,
<unk> . <unk> ,
<unk> . getTypes ( ) ,
true ) ,
new <unk> (
<unk> . getString ( <unk> , " ) ,
<unk> . <unk> ,
Const . <unk> ( ) ) ,
new <unk> (
<unk> . getString ( <unk> , " ) ,
<unk> . <unk> ,
false ) ,
new <unk> (
<unk> . getString ( <unk> , " ) ,
<unk> . <unk> ,
false ) ,
new <unk> (
<unk> . getString ( <unk> , " ) ,
<unk> . <unk> ,
false ) ,
new <unk> (
<unk> . getString ( <unk> , " ) ,
<unk> . <unk> ,
false ) ,
new <unk> (
<unk> . getString ( <unk> , " ) ,
<unk> . <unk> ,
false ) ,
new <unk> (
<unk> . getString ( <unk> , " ) ,
<unk> . <unk> ,
<unk> . <unk> ,
true ) ,
new <unk> (
<unk> . getString ( <unk> , " ) ,
<unk> . <unk> ,
new String [ ] { <unk> . getString ( <unk> , " ) , <unk> . getString ( <unk> , " ) } ,
true ) ,
} ;
<unk> [ <num> ] . <unk> ( true ) ;
<unk> [ <num> ] . setToolTip ( <unk> . getString ( <unk> , " ) ) ;
<unk> [ <num> ] . <unk> ( true ) ;
<unk> [ <num> ] . setToolTip ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new <unk> ( <unk> , <unk> ,
SWT . FULL_SELECTION | SWT . MULTI ,
<unk> ,
<unk> ,
<unk> ,
props
) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <num> , <num> ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . bottom = new <unk> ( <num> ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <num> , <num> ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . bottom = new <unk> ( <num> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . layout ( ) ;
<unk> . setControl ( <unk> ) ;
<unk> ( ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . bottom = new <unk> ( <num> ,  <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Button ( shell , SWT . PUSH ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new Button ( shell , SWT . PUSH ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new Button ( shell , SWT . PUSH ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> ( new Button [ ] { <unk> , <unk> , <unk> } , margin , <unk> ) ;
<unk> = new Listener ( ) { public void handleEvent ( Event e ) { ok ( ) ; } } ;
<unk> = new Listener ( ) { public void handleEvent ( Event e ) { preview ( ) ; } } ;
<unk> = new Listener ( ) { public void handleEvent ( Event e ) { cancel ( ) ; } } ;
<unk> . addListener ( SWT . Selection , <unk> ) ;
<unk> . addListener ( SWT . Selection , <unk> ) ;
<unk> . addListener ( SWT . Selection , <unk> ) ;
<unk> = new SelectionAdapter ( ) { public void widgetDefaultSelected ( SelectionEvent e ) { ok ( ) ; } } ;
<unk> . addSelectionListener ( <unk> ) ;
<unk> . addSelectionListener ( <unk> ) ;
<unk> . addSelectionListener ( <unk> ) ;
<unk> . addSelectionListener ( <unk> ) ;
SelectionAdapter <unk> = new SelectionAdapter ( )
{
public void widgetSelected ( SelectionEvent arg0 )
{
<unk> . add ( new String [ ] { <unk> . getText ( ) , <unk> . getText ( ) , <unk> . getText ( ) , <unk> . <unk> [ <num> ] , <unk> . <unk> [ <num> ] } ) ;
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( true ) ;
}
} ;
<unk> . addSelectionListener ( <unk> ) ;
<unk> . addSelectionListener ( <unk> ) ;
<unk> . addSelectionListener ( new SelectionAdapter ( )
{
public void widgetSelected ( SelectionEvent arg0 )
{
int idx [ ] = <unk> . <unk> ( ) ;
<unk> . remove ( idx ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
}
} ) ;
<unk> . addSelectionListener ( new SelectionAdapter ( )
{
public void widgetSelected ( SelectionEvent arg0 )
{
int idx = <unk> . <unk> ( ) ;
if ( idx >= <num> )
{
String string [ ] = <unk> . getItem ( idx ) ;
<unk> . setText ( string [ <num> ] ) ;
<unk> . setText ( string [ <num> ] ) ;
<unk> . setText ( string [ <num> ] ) ;
<unk> . remove ( idx ) ;
}
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
}
} ) ;
<unk> . addSelectionListener ( new SelectionAdapter ( )
{
public void widgetSelected ( SelectionEvent e )
{
try
{
<unk> <unk> = new <unk> ( ) ;
getInfo ( <unk> ) ;
<unk> <unk> = <unk> . getFiles ( <unk> ) ;
String files [ ] = <unk> . <unk> ( ) ;
if ( files != null && files . length > <num> )
{
<unk> <unk> = new <unk> ( shell , files , <unk> . getString ( <unk> , " ) , <unk> . getString ( <unk> , " ) ) ;
<unk> . <unk> ( ) ;
<unk> . open ( ) ;
}
else
{
MessageBox mb = new MessageBox ( shell , SWT . OK | SWT . <unk> ) ;
mb . setMessage ( <unk> . getString ( <unk> , " ) ) ;
mb . setText ( <unk> . getString ( <unk> , " ) ) ;
mb . open ( ) ;
}
}
catch ( <unk> ex )
{
new <unk> ( shell , <unk> . getString ( <unk> , " ) , <unk> . getString ( <unk> , " ) , ex ) ;
}
}
}
) ;
<unk> . addSelectionListener ( new SelectionAdapter ( )
{
public void widgetSelected ( SelectionEvent e )
{
<unk> ( ) ;
}
}
) ;
<unk> . addSelectionListener ( new SelectionAdapter ( )
{
public void widgetSelected ( SelectionEvent e )
{
<unk> ( ) ;
}
}
) ;
<unk> . addModifyListener ( new ModifyListener ( )
{
public void modifyText ( ModifyEvent e )
{
<unk> . setToolTipText ( <unk> . getText ( ) ) ;
}
}
) ;
<unk> . addSelectionListener
(
new SelectionAdapter ( )
{
public void widgetSelected ( SelectionEvent e )
{
if ( ! Const . isEmpty ( <unk> . getText ( ) ) || ! Const . isEmpty ( <unk> . getText ( ) ) )
{
DirectoryDialog dialog = new DirectoryDialog ( shell , SWT . OPEN ) ;
if ( <unk> . getText ( ) != null )
{
String <unk> = <unk> . <unk> ( <unk> . getText ( ) ) ;
dialog . setFilterPath ( <unk> ) ;
}
if ( dialog . open ( ) != null )
{
String str = dialog . <unk> ( ) ;
<unk> . setText ( str ) ;
}
}
else
{
FileDialog dialog = new FileDialog ( shell , SWT . OPEN ) ;
dialog . setFilterExtensions ( new String [ ] { " , " } ) ;
if ( <unk> . getText ( ) != null )
{
String fname = <unk> . <unk> ( <unk> . getText ( ) ) ;
dialog . setFileName ( fname ) ;
}
dialog . <unk> ( new String [ ] { <unk> . getString ( <unk> , " ) , <unk> . getString ( <unk> , " ) } ) ;
if ( dialog . open ( ) != null )
{
String str = dialog . <unk> ( ) + System . getProperty ( " ) + dialog . getFileName ( ) ;
<unk> . setText ( str ) ;
}
}
}
}
) ;
shell . <unk> ( new <unk> ( ) { public void <unk> ( <unk> e ) { cancel ( ) ; } } ) ;
<unk> . setSelection ( <num> ) ;
setSize ( ) ;
getData ( input ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
input . setChanged ( changed ) ;
<unk> . <unk> ( true ) ;
shell . open ( ) ;
while ( ! shell . isDisposed ( ) )
{
if ( ! display . readAndDispatch ( ) ) display . sleep ( ) ;
}
return <unk> ;
}
private void <unk> ( )
{
try {
String value = <unk> . getText ( ) ;
<unk> . removeAll ( ) ;
<unk> r = <unk> . <unk> ( <unk> ) ;
if ( r != null ) {
<unk> . setItems ( r . getFieldNames ( ) ) ;
}
if ( value != null ) <unk> . setText ( value ) ;
} catch ( <unk> <unk> ) {
new <unk> ( shell , <unk> . getString ( <unk> , " ) , <unk> . getString ( <unk> , " ) , <unk> ) ;
}
}
private void <unk> ( )
{
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
if ( <unk> . getSelection ( ) )
{
<unk> . setSelection ( false ) ;
<unk> . setEnabled ( false ) ;
<unk> . setEnabled ( false ) ;
} else
{
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
}
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( ! <unk> . getSelection ( ) ) ;
}
public void <unk> ( )
{
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
}
public void <unk> ( )
{
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
<unk> . setEnabled ( <unk> . getSelection ( ) ) ;
}
public void getData ( <unk> in )
{
if ( in . getFileName ( ) != null )
{
<unk> . removeAll ( ) ;
for ( int i = <num> ; i < in . getFileName ( ) . length ; i ++ )
{
<unk> . add ( new String [ ] { in . getFileName ( ) [ i ] , in . <unk> ( ) [ i ] , in . <unk> ( ) [ i ] ,
in . <unk> ( in . <unk> ( ) [ i ] ) , in . <unk> ( in . <unk> ( ) [ i ] ) } ) ;
}
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( true ) ;
}
<unk> . setSelection ( in . <unk> ( ) ) ;
<unk> . setSelection ( in . <unk> ( ) ) ;
<unk> . setSelection ( in . <unk> ( ) ) ;
<unk> . setSelection ( in . <unk> ( ) ) ;
<unk> . setSelection ( in . <unk> ( ) ) ;
<unk> . setSelection ( in . <unk> ( ) ) ;
<unk> . setSelection ( in . <unk> ( ) ) ;
<unk> . setSelection ( in . <unk> ( ) ) ;
if ( in . <unk> ( ) != null ) <unk> . setText ( in . <unk> ( ) ) ;
if ( in . <unk> ( ) != null ) <unk> . setText ( in . <unk> ( ) ) ;
if ( in . <unk> ( ) != null ) <unk> . setText ( in . <unk> ( ) ) ;
<unk> . setText ( " + in . <unk> ( ) ) ;
if ( isDebug ( ) ) logDebug ( <unk> . getString ( <unk> , " ) ) ;
for ( int i = <num> ; i < in . <unk> ( ) . length ; i ++ )
{
<unk> field = in . <unk> ( ) [ i ] ;
if ( field != null )
{
TableItem item = <unk> . table . getItem ( i ) ;
String name = field . getName ( ) ;
String xpath = field . getPath ( ) ;
String type = field . <unk> ( ) ;
String format = field . getFormat ( ) ;
String length = " + field . getLength ( ) ;
String <unk> = " + field . getPrecision ( ) ;
String curr = field . <unk> ( ) ;
String group = field . <unk> ( ) ;
String <unk> = field . <unk> ( ) ;
String trim = field . <unk> ( ) ;
String rep = field . <unk> ( ) ? <unk> . getString ( <unk> , " ) : <unk> . getString ( <unk> , " ) ;
if ( name != null ) item . setText ( <num> , name ) ;
if ( xpath != null ) item . setText ( <num> , xpath ) ;
if ( type != null ) item . setText ( <num> , type ) ;
if ( format != null ) item . setText ( <num> , format ) ;
if ( length != null && ! " . equals ( length ) ) item . setText ( <num> , length ) ;
if ( <unk> != null && ! " . equals ( <unk> ) ) item . setText ( <num> , <unk> ) ;
if ( curr != null ) item . setText ( <num> , curr ) ;
if ( <unk> != null ) item . setText ( <num> , <unk> ) ;
if ( group != null ) item . setText ( <num> , group ) ;
if ( trim != null ) item . setText ( <num> , trim ) ;
if ( rep != null ) item . setText ( <num> , rep ) ;
}
}
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( true ) ;
if ( in . <unk> ( ) != null ) <unk> . setText ( in . <unk> ( ) ) ;
if ( in . <unk> ( ) != null ) <unk> . setText ( in . <unk> ( ) ) ;
if ( in . <unk> ( ) != null ) <unk> . setText ( in . <unk> ( ) ) ;
if ( in . <unk> ( ) != null ) <unk> . setText ( in . <unk> ( ) ) ;
if ( in . <unk> ( ) != null ) <unk> . setText ( in . <unk> ( ) ) ;
if ( in . <unk> ( ) != null ) <unk> . setText ( in . <unk> ( ) ) ;
if ( in . <unk> ( ) != null ) <unk> . setText ( in . <unk> ( ) ) ;
if ( in . <unk> ( ) != null ) <unk> . setText ( in . <unk> ( ) ) ;
<unk> . selectAll ( ) ;
}
private void cancel ( )
{
<unk> = null ;
input . setChanged ( changed ) ;
dispose ( ) ;
}
private void ok ( )
{
try
{
getInfo ( input ) ;
}
catch ( <unk> e )
{
new <unk> ( shell , <unk> . getString ( <unk> , " ) , <unk> . getString ( <unk> , " ) , e ) ;
}
dispose ( ) ;
}
private void getInfo ( <unk> in ) throws <unk>
{
<unk> = <unk> . getText ( ) ;
in . <unk> ( Const . <unk> ( <unk> . getText ( ) , <num> ) ) ;
in . <unk> ( <unk> . getText ( ) ) ;
in . <unk> ( <unk> . getText ( ) ) ;
in . <unk> ( <unk> . getSelection ( ) ) ;
in . <unk> ( <unk> . getSelection ( ) ) ;
in . <unk> ( <unk> . getSelection ( ) ) ;
in . <unk> ( <unk> . getSelection ( ) ) ;
in . <unk> ( <unk> . getSelection ( ) ) ;
in . <unk> ( <unk> . getSelection ( ) ) ;
in . <unk> ( <unk> . getSelection ( ) ) ;
in . <unk> ( <unk> . getSelection ( ) ) ;
in . <unk> ( <unk> . getText ( ) ) ;
int <unk> = <unk> . getItemCount ( ) ;
int <unk> = <unk> . <unk> ( ) ;
in . allocate ( <unk> , <unk> ) ;
in . setFileName ( <unk> . getItems ( <num> ) ) ;
in . <unk> ( <unk> . getItems ( <num> ) ) ;
in . <unk> ( <unk> . getItems ( <num> ) ) ;
in . <unk> ( <unk> . getItems ( <num> ) ) ;
in . <unk> ( <unk> . getItems ( <num> ) ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
<unk> field = new <unk> ( ) ;
TableItem item = <unk> . <unk> ( i ) ;
field . setName ( item . getText ( <num> ) ) ;
field . setPath ( item . getText ( <num> ) ) ;
field . setType ( <unk> . getType ( item . getText ( <num> ) ) ) ;
field . setFormat ( item . getText ( <num> ) ) ;
field . setLength ( Const . toInt ( item . getText ( <num> ) ,  <num> ) ) ;
field . setPrecision ( Const . toInt ( item . getText ( <num> ) ,  <num> ) ) ;
field . <unk> ( item . getText ( <num> ) ) ;
field . <unk> ( item . getText ( <num> ) ) ;
field . <unk> ( item . getText ( <num> ) ) ;
field . <unk> ( <unk> . <unk> ( item . getText ( <num> ) ) ) ;
field . <unk> ( <unk> . getString ( <unk> , " ) . equalsIgnoreCase ( item . getText ( <num> ) ) ) ;
in . <unk> ( ) [ i ] = field ;
}
in . <unk> ( <unk> . getText ( ) ) ;
in . <unk> ( <unk> . getText ( ) ) ;
in . <unk> ( <unk> . getText ( ) ) ;
in . <unk> ( <unk> . getText ( ) ) ;
in . <unk> ( <unk> . getText ( ) ) ;
in . <unk> ( <unk> . getText ( ) ) ;
in . <unk> ( <unk> . getText ( ) ) ;
in . <unk> ( <unk> . getText ( ) ) ;
}
private void preview ( )
{
try
{
<unk> <unk> = new <unk> ( ) ;
getInfo ( <unk> ) ;
<unk> <unk> = <unk> . <unk> ( <unk> , <unk> , <unk> . getText ( ) ) ;
<unk> <unk> = new <unk> ( shell , props . <unk> ( ) , <unk> . getString ( <unk> , " ) , <unk> . getString ( <unk> , " ) ) ;
int previewSize = <unk> . open ( ) ;
if ( previewSize > <num> )
{
<unk> progressDialog = new <unk> ( shell , <unk> , new String [ ] { <unk> . getText ( ) } , new int [ ] { previewSize } ) ;
progressDialog . open ( ) ;
if ( ! progressDialog . isCancelled ( ) )
{
<unk> trans = progressDialog . getTrans ( ) ;
String <unk> = progressDialog . <unk> ( ) ;
if ( trans . getResult ( ) != null && trans . getResult ( ) . <unk> ( ) > <num> )
{
<unk> <unk> = new <unk> ( shell , <unk> . getString ( <unk> , " ) ,
<unk> . getString ( <unk> , " ) , <unk> , true ) ;
<unk> . setReadOnly ( ) ;
<unk> . open ( ) ;
}
<unk> <unk> = new <unk> ( shell , <unk> , SWT . NONE , <unk> . getText ( ) ,
progressDialog . <unk> ( <unk> . getText ( ) ) , progressDialog
. <unk> ( <unk> . getText ( ) ) , <unk> ) ;
<unk> . open ( ) ;
}
}
}
catch ( <unk> e )
{
new <unk> ( shell , <unk> . getString ( <unk> , " ) , <unk> . getString ( <unk> , " ) , e ) ;
}
}
private void <unk> ( )
{
<unk> = new <unk> ( <unk> , SWT . NONE ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
<unk> = new Composite ( <unk> , SWT . NONE ) ;
props . <unk> ( <unk> ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . marginWidth = <num> ;
<unk> . marginHeight = <num> ;
<unk> . setLayout ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new Label ( <unk> , SWT . RIGHT ) ;
<unk> . setText ( <unk> . getString ( <unk> , " ) ) ;
props . <unk> ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( middle ,  margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( <unk> , <unk> , SWT . SINGLE | SWT . LEFT | SWT . BORDER ) ;
props . <unk> ( <unk> ) ;
<unk> . addModifyListener ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( middle , <num> ) ;
<unk> . right = new <unk> ( <num> ,  margin ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . top = new <unk> ( <unk> , margin ) ;
<unk> . right = new <unk> ( <num> , <num> ) ;
<unk> . bottom = new <unk> ( <num> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . layout ( ) ;
<unk> . setControl ( <unk> ) ;
}
package com . <unk> . model ;
import java . io . Serializable ;
import java . util . ArrayList ;
import java . util . List ;
import com . <unk> . <unk> ;
import com . <unk> . model . <unk> . <unk> ;
import com . <unk> . model . <unk> . <unk> ;
import com . <unk> . model . <unk> . <unk> ;
import com . <unk> . model . <unk> . <unk> ;
import com . <unk> . model . <unk> . <unk> ;
import com . <unk> . utils . Utils ;
public class <unk> implements Serializable {
private static final long serialVersionUID = <num> ;
private String id = " + System . currentTimeMillis ( ) ;
private String title ;
private String description ;
private String <unk> ;
private String category ;
private double latitude ;
private double longitude ;
private String <unk> ;
private List < String > <unk> ;
private String <unk> ;
private String <unk> ;
private List < <unk> > <unk> ;
private String credential ;
private boolean plus ;
private int <unk> = <num> ;
public <unk> <unk> ( ) {
<unk> data = new <unk> ( ) ;
data . title = title ;
data . category = category ;
return data ;
}
public <unk> copy ( ) {
<unk> data = new <unk> ( ) ;
data . id = id ;
data . title = title ;
data . description = description ;
data . <unk> = <unk> ;
data . category = category ;
data . latitude = latitude ;
data . longitude = longitude ;
data . <unk> = <unk> ;
data . <unk> = <unk> ;
data . <unk> = <unk> ;
data . credential = credential ;
data . plus = plus ;
data . <unk> = <unk> ;
return data ;
}
public String getId ( ) {
return id ;
}
public void setId ( String id ) {
this . id = id ;
}
public String getTitle ( ) {
if ( " . equalsIgnoreCase ( title ) ) {
return description . substring ( <num> , Math . min ( <num> , description . length ( ) ) ) ;
}
return title ;
}
public void setTitle ( String title ) {
this . title = title ;
}
public String getDescription ( ) {
return description ;
}
public void setDescription ( String description ) {
this . description = description ;
}
public String <unk> ( ) {
return <unk> ;
}
public void <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
public String getCategory ( ) {
return category ;
}
public void setCategory ( String category ) {
this . category = category ;
}
public String <unk> ( ) {
return <unk> ;
}
public void <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
public String <unk> ( ) {
return <unk> ;
}
public void <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
public double getLat ( ) {
return latitude ;
}
public void setLat ( double latitude ) {
this . latitude = latitude ;
}
public double <unk> ( ) {
return longitude ;
}
public void <unk> ( double longitude ) {
this . longitude = longitude ;
}
public String <unk> ( ) {
return <unk> ;
}
public void <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
public void <unk> ( boolean plus ) {
this . plus = plus ;
}
public boolean <unk> ( ) {
return this . plus ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return this . <unk> ;
}
public List < <unk> > getActions ( ) {
List < <unk> > actions = new ArrayList < <unk> > ( ) ;
actions . add ( new <unk> ( this ) ) ;
if ( ! Utils . isEmpty ( <unk> ) ) {
actions . add ( new <unk> ( this ) ) ;
}
if ( <unk> . <unk> ( ) ) {
actions . add ( new <unk> ( this ) ) ;
}
actions . add ( new <unk> ( this ) ) ;
actions . add ( new <unk> ( this ) ) ;
if ( <unk> != null ) {
for ( <unk> data : <unk> ) {
actions . add ( new <unk> ( this , data ) ) ;
}
}
return actions ;
}
public String getCredential ( ) {
return credential ;
}
public void setCredential ( String credential ) {
this . credential = credential ;
}
public List < <unk> > <unk> ( ) {
return <unk> ;
}
public void <unk> ( List < <unk> > <unk> ) {
this . <unk> = <unk> ;
}
public List < String > <unk> ( ) {
return <unk> ;
}
public void <unk> ( List < String > <unk> ) {
this . <unk> = <unk> ;
}
}
package com . <unk> . service ;
import java . io . IOException ;
import java . io . InputStream ;
import java . util . ArrayList ;
import java . util . List ;
import java . util . zip . GZIPInputStream ;
import javax . xml . parsers . DocumentBuilder ;
import javax . xml . parsers . DocumentBuilderFactory ;
import javax . xml . parsers . ParserConfigurationException ;
import org . apache . http . Header ;
import org . apache . http . HttpResponse ;
import org . apache . http . client . HttpClient ;
import org . apache . http . client . methods . HttpGet ;
import org . apache . http . client . methods . HttpUriRequest ;
import org . apache . http . impl . client . DefaultHttpClient ;
import org . json . JSONException ;
import org . w3c . dom . Document ;
import org . w3c . dom . Element ;
import org . w3c . dom . Node ;
import org . w3c . dom . NodeList ;
import org . xml . sax . SAXException ;
import android . os . AsyncTask ;
import android . util . Log ;
import com . <unk> . model . <unk> ;
import com . <unk> . model . <unk> ;
public class <unk> extends AsyncTask < Void , Void , Void > {
private final <unk> <unk> ;
private int <unk> =  <num> ;
private <unk> <unk> ;
private List < <unk> > <unk> ;
public <unk> ( <unk> activity , <unk> <unk> ) {
<unk> = activity ;
this . <unk> = <unk> ;
}
@Override
protected Void doInBackground ( Void . . . arg0 ) {
String url = " + <unk> . getLat ( ) + " + <unk> . <unk> ( ) ;
<unk> ( url ) ;
return null ;
}
private void <unk> ( String baseUrl ) {
Log . i ( " , baseUrl ) ;
final HttpClient httpClient = new DefaultHttpClient ( ) ;
HttpResponse response = null ;
InputStream instream = null ;
<unk> =  <num> ;
try {
java . net . URLEncoder . encode ( baseUrl . toString ( ) , " ) ;
final HttpUriRequest request = new HttpGet ( baseUrl ) ;
request . addHeader ( " , " ) ;
request . addHeader ( " , " ) ;
response = httpClient . execute ( request ) ;
instream = response . getEntity ( ) . getContent ( ) ;
final Header contentEncoding = response . getFirstHeader ( " ) ;
if ( contentEncoding != null && contentEncoding . getValue ( ) . equalsIgnoreCase ( " ) ) {
instream = new GZIPInputStream ( instream ) ;
}
try {
<unk> = parseXML ( instream ) ;
} catch ( final Exception e ) {
e . printStackTrace ( ) ;
<unk> = <num> ;
}
} catch ( final Exception e ) {
e . printStackTrace ( ) ;
<unk> = <num> ;
} finally {
try {
if ( instream != null ) {
instream . close ( ) ;
}
if ( response != null && response . getEntity ( ) != null ) {
response . getEntity ( ) . consumeContent ( ) ;
}
} catch ( final IOException e ) {
e . printStackTrace ( ) ;
}
}
}
public List < <unk> > parseXML ( InputStream instream ) throws JSONException {
Log . v ( " , " ) ;
List < <unk> > urls = new ArrayList < <unk> > ( <num> ) ;
try {
final DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ;
final DocumentBuilder builder = factory . newDocumentBuilder ( ) ;
final Document dom = builder . parse ( instream ) ;
if ( dom != null ) {
final Element itemNode = ( Element ) <unk> ( dom . getChildNodes ( ) . item ( <num> ) , " , true ) ;
final NodeList <unk> = itemNode . getElementsByTagName ( " ) ;
for ( int i = <num> ; i < <unk> . getLength ( ) ; i ++ ) {
try {
final Node node = <unk> . item ( i ) ;
<unk> data = new <unk> ( ) ;
data . setName ( <unk> ( node , " , false ) ) ;
data . setUrl ( <unk> ( node , " , false ) ) ;
urls . add ( data ) ;
} catch ( final Exception e ) {
e . printStackTrace ( ) ;
}
}
}
} catch ( final ParserConfigurationException e ) {
e . printStackTrace ( ) ;
} catch ( final SAXException e ) {
e . printStackTrace ( ) ;
} catch ( final Exception e ) {
e . printStackTrace ( ) ;
}
return urls ;
}
@Override
protected void onPostExecute ( Void result ) {
if ( <unk> >= <num> ) {
showError ( ) ;
}
else if ( <unk> != null && <unk> != null && <unk> . size ( ) > <num> ) {
<unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( new ArrayList < Object > ( <unk> ) ) ;
}
}
private void showError ( ) {
if ( <unk> != null ) {
<unk> . onError ( <unk> ) ;
}
}
private Node <unk> ( Node <unk> , String tag , boolean mandatory ) throws Exception {
final NodeList list = ( ( Element ) <unk> ) . getElementsByTagName ( tag ) ;
if ( list . getLength ( ) > <num> ) {
return list . item ( <num> ) ;
}
if ( mandatory ) {
throw ( new Exception ( " ) ) ;
}
return null ;
}
private String <unk> ( Node <unk> , String tag , boolean mandatory ) throws Exception {
final Node node = <unk> ( <unk> , tag , mandatory ) ;
if ( node != null ) {
return node . getFirstChild ( ) . getNodeValue ( ) ;
}
return null ;
}
}
package com . <unk> . utils ;
import java . util . List ;
import com . <unk> . model . <unk> ;
public class <unk> {
public static void <unk> ( List < <unk> > list , <unk> data , int maxSize ) {
for ( <unk> poi : list ) {
if ( poi . getId ( ) == data . getId ( ) ) {
list . remove ( poi ) ;
break ;
}
}
list . add ( data ) ;
if ( list . size ( ) > maxSize ) {
list . remove ( maxSize ) ;
}
}
public static void <unk> ( List < <unk> > list , <unk> data , int maxSize ) {
for ( int i = <num> ; i < list . size ( ) ; i ++ ) {
if ( list . get ( i ) . getId ( ) . equals ( data . getId ( ) ) ) {
list . set ( i , data ) ;
break ;
}
}
}
public static boolean contains ( List < <unk> > list , <unk> data ) {
for ( <unk> poi : list ) {
if ( poi . getId ( ) . equals ( data . getId ( ) ) ) {
return true ;
}
}
return false ;
}
}
package com . <unk> . widget ;
import java . util . ArrayList ;
import java . util . List ;
import android . appwidget . AppWidgetManager ;
import android . content . Context ;
import android . content . Intent ;
import android . os . Bundle ;
import android . widget . RemoteViews ;
import android . widget . <unk> ;
import com . <unk> . R ;
public class <unk> extends <unk> {
@Override
public <unk> <unk> ( Intent arg0 ) {
return new <unk> ( this . getApplicationContext ( ) , intent ) ;
}
class <unk> implements <unk> . <unk> {
private static final int mCount = <num> ;
private List < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
private Context mContext ;
private int mAppWidgetId ;
public <unk> ( Context context , Intent intent ) {
mContext = context ;
mAppWidgetId = intent . getIntExtra ( AppWidgetManager . EXTRA_APPWIDGET_ID ,
AppWidgetManager . INVALID_APPWIDGET_ID ) ;
}
public void onCreate ( ) {
for ( int i = <num> ; i < mCount ; i ++ ) {
<unk> . add ( new <unk> ( i + " ) ) ;
}
try {
Thread . sleep ( <num> ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
}
public void onDestroy ( ) {
<unk> . clear ( ) ;
}
public int getCount ( ) {
return mCount ;
}
public RemoteViews <unk> ( int position ) {
RemoteViews rv = new RemoteViews ( mContext . getPackageName ( ) , R . layout . <unk> ) ;
rv . setTextViewText ( R . id . <unk> , <unk> . get ( position ) . text ) ;
Bundle extras = new Bundle ( ) ;
extras . putInt ( <unk> . <unk> , position ) ;
Intent <unk> = new Intent ( ) ;
<unk> . putExtras ( extras ) ;
rv . <unk> ( R . id . <unk> , <unk> ) ;
try {
System . out . println ( " + position ) ;
Thread . sleep ( <num> ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
return rv ;
}
public RemoteViews <unk> ( ) {
return null ;
}
public int getViewTypeCount ( ) {
return <num> ;
}
public long getItemId ( int position ) {
return position ;
}
public boolean hasStableIds ( ) {
return true ;
}
public void <unk> ( ) {
}
}
}
package com . <unk> . adapters ;
import android . content . Context ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . BaseAdapter ;
import android . widget . ImageView ;
import android . widget . TextView ;
import com . <unk> . R ;
import com . <unk> . model . <unk> ;
import com . <unk> . model . <unk> ;
public class <unk> extends BaseAdapter {
private <unk> data ;
public <unk> ( <unk> data ) {
super ( ) ;
this . data = data ;
}
@Override
public int getCount ( ) {
return data . getActions ( ) . size ( ) ;
}
@Override
public Object getItem ( int arg0 ) {
return data . getActions ( ) . get ( arg0 ) ;
}
@Override
public long getItemId ( int arg0 ) {
return arg0 ;
}
@Override
public View getView ( int position , View convertView , ViewGroup parent ) {
View cell = convertView ;
if ( cell == null ) {
final LayoutInflater layoutInflater = ( LayoutInflater ) parent . getContext ( ) . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ;
cell = layoutInflater . inflate ( R . layout . <unk> , null ) ;
}
<unk> action = ( <unk> ) getItem ( position ) ;
ImageView image = ( ImageView ) cell . findViewById ( R . id . <unk> ) ;
image . setImageResource ( action . <unk> ( ) ) ;
TextView text = ( TextView ) cell . findViewById ( R . id . <unk> ) ;
text . setText ( action . getName ( ) ) ;
return cell ;
}
}
package com . <unk> . adapters ;
import java . util . List ;
import android . content . Context ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . BaseAdapter ;
import android . widget . ImageView ;
import android . widget . TextView ;
import com . <unk> . <unk> ;
import com . <unk> . R ;
import com . <unk> . model . <unk> ;
import com . <unk> . service . <unk> ;
import com . <unk> . service . <unk> ;
public class POIAdapter extends BaseAdapter {
private List < <unk> > datas ;
public POIAdapter ( List < <unk> > datas ) {
super ( ) ;
this . datas = datas ;
}
@Override
public int getCount ( ) {
return datas . size ( ) ;
}
@Override
public Object getItem ( int arg0 ) {
return datas . get ( arg0 ) ;
}
@Override
public long getItemId ( int arg0 ) {
return arg0 ;
}
@Override
public View getView ( int position , View convertView , ViewGroup parent ) {
View cell = convertView ;
if ( cell == null ) {
final LayoutInflater layoutInflater = ( LayoutInflater ) parent . getContext ( ) . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ;
cell = layoutInflater . inflate ( R . layout . <unk> , null ) ;
}
<unk> data = ( <unk> ) getItem ( position ) ;
ImageView image = ( ImageView ) cell . findViewById ( R . id . <unk> ) ;
if ( data . <unk> ( ) == null ) {
new <unk> ( new <unk> ( image , data ) , data ) . execute ( null ) ;
} else {
<unk> . <unk> ( ) . download ( data . <unk> ( ) , image , null , " ) ;
}
TextView text = ( TextView ) cell . findViewById ( R . id . <unk> ) ;
text . setText ( data . getTitle ( ) ) ;
TextView <unk> = ( TextView ) cell . findViewById ( R . id . <unk> ) ;
<unk> . setText ( data . getDescription ( ) ) ;
return cell ;
}
public class <unk> implements <unk> {
private ImageView view ;
private <unk> <unk> ;
public <unk> ( ImageView view , <unk> <unk> ) {
super ( ) ;
this . view = view ;
this . <unk> = <unk> ;
}
@Override
public void <unk> ( List < Object > datas ) {
<unk> . <unk> ( ) . download ( ( String ) datas . get ( <num> ) , view , null , " ) ;
}
@Override
public void onError ( int code ) {
}
}
}
package com . <unk> ;
import android . content . Intent ;
import android . net . Uri ;
import android . os . Bundle ;
import android . support . v4 . app . Fragment ;
import android . support . v4 . app . FragmentActivity ;
import android . support . v4 . app . FragmentManager ;
import android . support . v4 . app . FragmentPagerAdapter ;
import android . support . v4 . view . ViewPager ;
import android . support . v4 . view . ViewPager . OnPageChangeListener ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . view . ViewGroup ;
import android . widget . ImageView ;
public class <unk> extends FragmentActivity implements OnPageChangeListener {
static final int <unk> = <num> ;
MyAdapter mAdapter ;
ViewPager mPager ;
@Override
public void onSaveInstanceState ( Bundle outState ) {
}
@Override
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
mAdapter = new MyAdapter ( getSupportFragmentManager ( ) ) ;
mPager = ( ViewPager ) findViewById ( R . id . pager ) ;
mPager . setAdapter ( mAdapter ) ;
mPager . setOnPageChangeListener ( this ) ;
}
public static class MyAdapter extends FragmentPagerAdapter {
public MyAdapter ( FragmentManager fm ) {
super ( fm ) ;
}
@Override
public int getCount ( ) {
return <unk> ;
}
@Override
public Fragment getItem ( int position ) {
return <unk> . newInstance ( position ) ;
}
}
public static class <unk> extends Fragment {
int mNum ;
static <unk> newInstance ( int num ) {
<unk> f = new <unk> ( ) ;
Bundle args = new Bundle ( ) ;
args . putInt ( " , num ) ;
f . setArguments ( args ) ;
return f ;
}
@Override
public void onSaveInstanceState ( Bundle outState ) {
}
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
mNum = getArguments ( ) != null ? getArguments ( ) . getInt ( " ) : <num> ;
}
@Override
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {
View v = null ;
switch ( mNum ) {
case <num> :
v = inflater . inflate ( R . layout . <unk> , container , false ) ;
break ;
case <num> :
v = inflater . inflate ( R . layout . <unk> , container , false ) ;
ImageView <unk> = ( ImageView ) v . findViewById ( R . id . <unk> ) ;
ImageView <unk> = ( ImageView ) v . findViewById ( R . id . <unk> ) ;
ImageView <unk> = ( ImageView ) v . findViewById ( R . id . <unk> ) ;
ImageView <unk> = ( ImageView ) v . findViewById ( R . id . <unk> ) ;
ImageView <unk> = ( ImageView ) v . findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( new OnClickListener ( ) {
@Override
public void onClick ( View v ) {
Intent myIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . <unk> ) ) ) ;
startActivity ( myIntent ) ;
}
} ) ;
<unk> . setOnClickListener ( new OnClickListener ( ) {
@Override
public void onClick ( View v ) {
Intent myIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . <unk> ) ) ) ;
startActivity ( myIntent ) ;
}
} ) ;
<unk> . setOnClickListener ( new OnClickListener ( ) {
@Override
public void onClick ( View v ) {
Intent myIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . <unk> ) ) ) ;
startActivity ( myIntent ) ;
}
} ) ;
<unk> . setOnClickListener ( new OnClickListener ( ) {
@Override
public void onClick ( View v ) {
Intent myIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . <unk> ) ) ) ;
startActivity ( myIntent ) ;
}
} ) ;
<unk> . setOnClickListener ( new OnClickListener ( ) {
@Override
public void onClick ( View v ) {
Intent myIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . <unk> ) ) ) ;
startActivity ( myIntent ) ;
}
} ) ;
break ;
case <num> :
v = new ImageView ( inflater . getContext ( ) ) ;
( ( ImageView ) v ) . setImageBitmap ( null ) ;
break ;
}
return v ;
}
}
@Override
public void onPageScrollStateChanged ( int arg0 ) {
}
@Override
public void onPageScrolled ( int position , float arg1 , int arg2 ) {
if ( position == <num> ) {
Intent i1 = new Intent ( this , <unk> . class ) ;
i1 . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ;
startActivity ( i1 ) ;
finish ( ) ;
}
}
@Override
public void onPageSelected ( int arg0 ) {
}
}
package com . <unk> . model ;
import java . io . Serializable ;
public class <unk> implements Serializable {
private static final long serialVersionUID = <num> ;
public String title ;
public String category ;
}
package com . <unk> . utils ;
import java . io . BufferedReader ;
import java . io . FileInputStream ;
import java . io . FileNotFoundException ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . InputStreamReader ;
import java . io . ObjectInputStream ;
import java . io . ObjectOutputStream ;
import java . io . UnsupportedEncodingException ;
import java . security . MessageDigest ;
import java . security . NoSuchAlgorithmException ;
import java . util . List ;
import android . app . Activity ;
import android . content . Context ;
import android . content . Intent ;
import android . content . pm . PackageManager ;
import android . content . pm . ResolveInfo ;
import android . net . ConnectivityManager ;
import android . net . NetworkInfo ;
import android . util . Log ;
public final class Utils {
private final static int bufferSize = <num> ;
public static String <unk> ( InputStream is )
throws UnsupportedEncodingException {
BufferedReader reader = new BufferedReader ( new InputStreamReader ( is , " ) , bufferSize ) ;
StringBuilder sb = new StringBuilder ( ) ;
String line = null ;
try {
while ( ( line = reader . readLine ( ) ) != null ) {
sb . append ( line + " ) ;
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
} finally {
try {
is . close ( ) ;
reader . close ( ) ;
} catch ( IOException e ) {
Log . e ( " , e . getMessage ( ) , e ) ;
}
}
return sb . toString ( ) ;
}
public static boolean <unk> ( Intent intent , Context context ) {
List < ResolveInfo > list = context . getPackageManager ( ) . queryIntentActivities ( intent ,
PackageManager . MATCH_DEFAULT_ONLY ) ;
return list . size ( ) > <num> ;
}
static public Object <unk> ( String fileName , Context activity ) {
Object res = null ;
try {
FileInputStream fis = activity . openFileInput ( fileName ) ;
ObjectInputStream ois = new ObjectInputStream ( fis ) ;
try {
res = ( Object ) ois . readObject ( ) ;
} catch ( ClassNotFoundException e ) {
e . printStackTrace ( ) ;
} finally {
try {
ois . close ( ) ;
} finally {
fis . close ( ) ;
}
}
} catch ( Exception e ) {
e . printStackTrace ( ) ;
return null ;
}
return res ;
}
static public void writeToFile ( String fileName , Context activity , Object <unk> ) {
try {
FileOutputStream fos = activity . openFileOutput ( fileName , Context . MODE_PRIVATE ) ;
ObjectOutputStream oos = new ObjectOutputStream ( fos ) ;
try {
oos . writeObject ( <unk> ) ;
oos . flush ( ) ;
} finally {
try {
oos . close ( ) ;
} finally {
fos . close ( ) ;
}
}
} catch ( FileNotFoundException ioe ) {
ioe . printStackTrace ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
}
public static boolean isConnected ( Activity activity ) {
ConnectivityManager cm = ( ConnectivityManager ) activity . getSystemService ( Context . CONNECTIVITY_SERVICE ) ;
NetworkInfo netInfo = cm . getActiveNetworkInfo ( ) ;
if ( netInfo != null && netInfo . isConnectedOrConnecting ( ) ) {
return true ;
}
return false ;
}
public static String md5 ( String s ) {
if ( s == null ) {
return null ;
}
try {
MessageDigest digest = java . security . MessageDigest . getInstance ( " ) ;
digest . update ( s . getBytes ( ) ) ;
byte messageDigest [ ] = digest . digest ( ) ;
StringBuffer hexString = new StringBuffer ( ) ;
for ( int i = <num> ; i < messageDigest . length ; i ++ )
hexString . append ( Integer . toHexString ( <num> & messageDigest [ i ] ) ) ;
return hexString . toString ( ) ;
} catch ( NoSuchAlgorithmException e ) {
e . printStackTrace ( ) ;
}
return " ;
}
public static String <unk> ( String url , String param ) {
if ( url == null || param == null ) {
return null ;
}
param += " ;
int <unk> = url . lastIndexOf ( param ) + param . length ( ) ;
int lastId = url . indexOf ( &' , <unk> ) ;
if ( lastId ==  <num> ) {
lastId = url . length ( ) ;
}
if ( <unk> ==  <num> ) {
return " ;
}
return url . substring ( <unk> , lastId ) ;
}
public static boolean isEmpty ( String str ) {
return str == null || str . equals ( " ) ;
}
}
package com . <unk> . adapters ;
import android . content . Context ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . BaseAdapter ;
import android . widget . ImageView ;
import android . widget . TextView ;
import com . <unk> . R ;
import com . <unk> . model . Category ;
public class <unk> extends BaseAdapter {
@Override
public int getCount ( ) {
return Category . getCategories ( ) . size ( ) ;
}
@Override
public Object getItem ( int arg0 ) {
return Category . getCategories ( ) . get ( arg0 ) ;
}
@Override
public long getItemId ( int arg0 ) {
return arg0 ;
}
@Override
public View getView ( int position , View convertView , ViewGroup parent ) {
View cell = convertView ;
if ( cell == null ) {
final LayoutInflater layoutInflater = ( LayoutInflater ) parent . getContext ( ) . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ;
cell = layoutInflater . inflate ( R . layout . <unk> , null ) ;
}
Category pref = ( Category ) getItem ( position ) ;
<unk> ( cell , pref ) ;
ImageView image = ( ImageView ) cell . findViewById ( R . id . <unk> ) ;
image . setImageResource ( pref . <unk> ( ) ) ;
TextView text = ( TextView ) cell . findViewById ( R . id . <unk> ) ;
text . setText ( pref . getName ( ) ) ;
return cell ;
}
public static void <unk> ( View view , Category pref ) {
ImageView <unk> = ( ImageView ) view . findViewById ( R . id . <unk> ) ;
<unk> . setImageResource ( pref . isChecked ( ) ? R . drawable . <unk> : R . drawable . <unk> ) ;
}
}
package com . <unk> . widget ;
import android . appwidget . AppWidgetManager ;
import android . appwidget . AppWidgetProvider ;
import android . content . Context ;
import android . content . Intent ;
import android . net . Uri ;
import android . widget . RemoteViews ;
import com . <unk> . R ;
public class <unk> extends AppWidgetProvider {
@Override
public void onUpdate ( Context context , AppWidgetManager appWidgetManager ,
int [ ] appWidgetIds ) {
for ( int i = <num> ; i < appWidgetIds . length ; ++ i ) {
Intent intent = new Intent ( context , <unk> . class ) ;
intent . putExtra ( AppWidgetManager . EXTRA_APPWIDGET_ID , appWidgetIds [ i ] ) ;
intent . setData ( Uri . parse ( intent . toUri ( Intent . URI_INTENT_SCHEME ) ) ) ;
RemoteViews rv = new RemoteViews ( context . getPackageName ( ) , R . layout . appwidget ) ;
rv . <unk> ( appWidgetIds [ i ] , R . id . <unk> , intent ) ;
rv . <unk> ( R . id . <unk> , R . id . <unk> ) ;
appWidgetManager . updateAppWidget ( appWidgetIds [ i ] , rv ) ;
}
super . onUpdate ( context , appWidgetManager , appWidgetIds ) ;
}
}
package com . <unk> . adapters ;
import java . util . List ;
import android . content . Context ;
import android . content . res . TypedArray ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . BaseAdapter ;
import android . widget . Gallery ;
import android . widget . ImageView ;
import com . <unk> . <unk> ;
import com . <unk> . R ;
import com . <unk> . model . <unk> ;
public class ImageAdapter extends BaseAdapter {
int mGalleryItemBackground ;
private Context mContext ;
private List < String > datas ;
public ImageAdapter ( Context c , <unk> <unk> ) {
mContext = c ;
datas = <unk> . <unk> ( ) ;
TypedArray attr = mContext . obtainStyledAttributes ( R . styleable . HelloGallery ) ;
mGalleryItemBackground = attr . getResourceId (
R . styleable . HelloGallery_android_galleryItemBackground , <num> ) ;
attr . recycle ( ) ;
}
public int getCount ( ) {
return datas . size ( ) ;
}
public Object getItem ( int position ) {
return position ;
}
public long getItemId ( int position ) {
return position ;
}
public View getView ( int position , View convertView , ViewGroup parent ) {
ImageView imageView = new ImageView ( mContext ) ;
imageView . setImageResource ( R . drawable . <unk> ) ;
<unk> . <unk> ( ) . download ( datas . get ( position ) , imageView , null , " ) ;
imageView . setLayoutParams ( new Gallery . LayoutParams ( <num> , <num> ) ) ;
imageView . setScaleType ( ImageView . ScaleType . FIT_XY ) ;
imageView . setBackgroundResource ( mGalleryItemBackground ) ;
return imageView ;
}
}
package com . <unk> . model ;
import java . io . Serializable ;
public class Coordinate implements Serializable {
private static final long serialVersionUID = <num> ;
public double lat ;
public double lng ;
public Coordinate ( double lat , double lng ) {
this . lat = lat ;
this . lng = lng ;
}
}
package com . <unk> ;
public final class R {
public static final class attr {
}
public static final class drawable {
public static final int ic_launcher = <num> ;
}
public static final class layout {
public static final int main = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int hello = <num> ;
}
}
package com . <unk> ;
import android . app . ListActivity ;
import android . app . PendingIntent ;
import android . content . Context ;
import android . content . Intent ;
import android . os . Bundle ;
import android . view . Menu ;
import android . view . MenuItem ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . widget . ListView ;
import android . widget . TextView ;
import android . widget . Toast ;
import android . widget . ToggleButton ;
import com . <unk> . adapters . <unk> ;
import com . <unk> . model . Category ;
public class <unk> extends ListActivity {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
final TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> . setText ( getString ( R . string . <unk> ) ) ;
final ToggleButton <unk> = ( ToggleButton ) findViewById ( R . id . <unk> ) ;
<unk> . setChecked ( <unk> . <unk> ( ) ) ;
<unk> . setOnClickListener ( new OnClickListener ( ) {
public void onClick ( View v ) {
<unk> . <unk> ( <unk> . this , <unk> . isChecked ( ) ) ;
}
} ) ;
final ToggleButton <unk> = ( ToggleButton ) findViewById ( R . id . <unk> ) ;
<unk> . setChecked ( <unk> . <unk> ( ) ) ;
<unk> . setOnClickListener ( new OnClickListener ( ) {
public void onClick ( View v ) {
<unk> . setEnabled ( ! <unk> . isEnabled ( ) ) ;
<unk> . <unk> ( <unk> . this , <unk> . isChecked ( ) ) ;
}
} ) ;
getListView ( ) . setSelector ( R . drawable . <unk> ) ;
setListAdapter ( new <unk> ( ) ) ;
}
@Override
protected void onListItemClick ( ListView l , View v , int position , long id ) {
Category category = Category . getCategories ( ) . get ( position ) ;
category . setChecked ( ! category . isChecked ( ) ) ;
<unk> . <unk> ( v , category ) ;
<unk> . setCategories ( this , Category . getCategories ( ) ) ;
}
public static PendingIntent <unk> ( Context context ) {
Intent intent = new Intent ( context , <unk> . class ) ;
intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ;
PendingIntent contentIntent = PendingIntent . getActivity ( context , <num> , intent , PendingIntent . FLAG_UPDATE_CURRENT ) ;
return contentIntent ;
}
@Override
public boolean onOptionsItemSelected ( MenuItem item ) {
if ( item . getTitle ( ) . equals ( getString ( R . string . <unk> ) ) ) {
Intent intent = new Intent ( this , <unk> . class ) ;
intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ;
startActivity ( intent ) ;
return true ;
}
if ( item . getTitle ( ) . equals ( getString ( R . string . <unk> ) ) ) {
Intent intent = new Intent ( this , <unk> . class ) ;
intent . setFlags ( Intent . FLAG_ACTIVITY_REORDER_TO_FRONT ) ;
startActivity ( intent ) ;
return true ;
}
if ( item . getTitle ( ) . equals ( getString ( R . string . <unk> ) ) ) {
<unk> . <unk> = ! <unk> . <unk> ;
Toast . makeText ( this , " + <unk> . <unk> , Toast . LENGTH_SHORT ) . show ( ) ;
return true ;
}
return false ;
}
@Override
public boolean onPrepareOptionsMenu ( Menu menu ) {
menu . clear ( ) ;
menu . add ( R . string . <unk> ) . setIcon ( android . R . drawable . ic_menu_gallery ) ;
menu . add ( R . string . <unk> ) . setIcon ( android . R . drawable . ic_menu_help ) ;
menu . add ( R . string . <unk> ) . setIcon ( android . R . drawable . ic_menu_edit ) ;
return super . onPrepareOptionsMenu ( menu ) ;
}
package com . <unk> . model ;
import java . util . List ;
import android . app . SearchManager ;
import android . content . Context ;
import android . content . Intent ;
import android . net . Uri ;
import android . util . Log ;
import com . <unk> . <unk> ;
import com . <unk> . R ;
public abstract class <unk> {
private static List < <unk> > actions ;
protected int <unk> ;
protected int <unk> ;
protected int <unk> ;
protected <unk> data ;
public int getName ( ) {
return <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public abstract void execute ( Context context ) ;
public <unk> ( int name , int <unk> , int <unk> , <unk> data ) {
super ( ) ;
this . <unk> = name ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . data = data ;
}
public static class <unk> extends <unk> {
public <unk> ( <unk> data ) {
super ( R . string . maps , R . drawable . maps , <num> , data ) ;
}
@Override
public void execute ( Context context ) {
String <unk> = " + <unk> . getLat ( ) + " + <unk> . <unk> ( ) + " + data . getLat ( ) + " + data . <unk> ( ) ;
Log . i ( " , " + <unk> ) ;
Intent intent = new Intent ( android . content . Intent . ACTION_VIEW , Uri . parse ( <unk> ) ) ;
intent . setClassName ( " , " ) ;
context . startActivity ( intent ) ;
}
}
public static class <unk> extends <unk> {
public <unk> ( <unk> data ) {
super ( R . string . search , R . drawable . search , <num> , data ) ;
}
@Override
public void execute ( Context context ) {
Intent intent = new Intent ( Intent . ACTION_SEARCH ) ;
intent . putExtra ( SearchManager . QUERY , data . getTitle ( ) ) ;
context . startActivity ( intent ) ;
}
}
public static class <unk> extends <unk> {
public <unk> ( <unk> data ) {
super ( R . string . share , R . drawable . <unk> , <num> , data ) ;
}
@Override
public void execute ( Context context ) {
Intent shareIntent = new Intent ( Intent . ACTION_SEND ) ;
shareIntent . setType ( " ) ;
shareIntent . putExtra ( Intent . EXTRA_SUBJECT , " + data . getTitle ( ) ) ;
shareIntent . putExtra ( Intent . EXTRA_TEXT , data . getDescription ( ) ) ;
context . startActivity ( shareIntent ) ;
}
}
public static class <unk> extends <unk> {
public <unk> <unk> ;
public String <unk> ( Context context ) {
return context . getString ( R . string . <unk> ) + " + <unk> . getName ( ) ;
}
public <unk> ( <unk> data ) {
super ( R . string . <unk> , R . drawable . <unk> , <num> , data ) ;
}
public <unk> ( <unk> data , <unk> <unk> ) {
this ( data ) ;
this . <unk> = <unk> ;
}
@Override
public void execute ( Context context ) {
if ( <unk> == null && <unk> == null ) {
return ;
}
Intent browserIntent = new Intent ( " , Uri . parse ( <unk> == null ? data . <unk> ( ) : <unk> . getUrl ( ) ) ) ;
context . startActivity ( browserIntent ) ;
}
}
public static class <unk> extends <unk> {
public <unk> ( <unk> data ) {
super ( R . string . photos , R . drawable . <unk> , <num> , data ) ;
}
@Override
public void execute ( Context context ) {
Intent i = new Intent ( " ) ;
i . putExtra ( " , data . getLat ( ) ) ;
i . putExtra ( " , data . <unk> ( ) ) ;
context . startActivity ( i ) ;
}
}
public static class <unk> extends <unk> {
public <unk> ( <unk> data ) {
super ( R . string . youtube , R . drawable . youtube , <num> , data ) ;
}
@Override
public void execute ( Context context ) {
Intent intent = new Intent ( Intent . ACTION_SEARCH , Uri . parse ( " + data . getTitle ( ) ) ) ;
context . startActivity ( intent ) ;
}
}
}
package com . <unk> ;
import java . util . ArrayList ;
import java . util . List ;
import android . app . Notification ;
import android . app . NotificationManager ;
import android . app . PendingIntent ;
import android . app . Service ;
import android . content . Intent ;
import android . graphics . Color ;
import android . location . Location ;
import android . location . LocationListener ;
import android . location . LocationManager ;
import android . os . Binder ;
import android . os . Bundle ;
import android . os . IBinder ;
import android . util . Log ;
import android . widget . Toast ;
import com . <unk> . model . Category ;
import com . <unk> . model . Coordinate ;
import com . <unk> . model . <unk> ;
import com . <unk> . service . <unk> ;
import com . <unk> . service . <unk> ;
import com . <unk> . utils . <unk> ;
public class <unk> extends Service {
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static final boolean <unk> = false ;
private boolean <unk> = <unk> ;
public static final Category [ ] <unk> = new Category [ <num> ] ;
private Category [ ] categories = <unk> ;
private final Binder binder = new LocalBinder ( ) ;
public class LocalBinder extends Binder {
public <unk> getService ( ) {
return <unk> . this ;
}
}
@Override
public IBinder onBind ( Intent intent ) {
return binder ;
}
private final int <unk> = <num> ;
private List < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
public synchronized List < <unk> > <unk> ( ) {
return new ArrayList < <unk> > ( <unk> ) ;
}
private void <unk> ( CharSequence tickerText , <unk> data , int count ) {
NotificationManager notificationManager = ( NotificationManager ) getSystemService ( NOTIFICATION_SERVICE ) ;
long when = System . currentTimeMillis ( ) ;
Notification notification = new Notification ( android . R . drawable . <unk> , tickerText , when ) ;
PendingIntent contentIntent = <unk> . <unk> ( this , data ) ;
notification . setLatestEventInfo ( this , tickerText , data . getTitle ( ) , contentIntent ) ;
if ( <unk> )
notification . defaults |= Notification . DEFAULT_SOUND ;
notification . defaults |= Notification . DEFAULT_VIBRATE ;
notification . flags |= Notification . FLAG_SHOW_LIGHTS ;
notification . ledARGB = Color . GREEN ;
notification . ledOffMS = <num> ;
notification . ledOnMS = <num> ;
if ( count > <num> ) {
notification . number = count ;
}
notificationManager . notify ( R . string . app_name , notification ) ;
}
private static final float <unk> = <num> ;
private void <unk> ( double lat , double lng ) {
Log . v ( " , " + lat + " + lng ) ;
try {
new <unk> ( this , lat , lng , <unk> , categories ) . execute ( null ) ; ;
}
catch ( Exception e ) {
Log . e ( " , e . getMessage ( ) , e ) ;
}
}
private void <unk> ( <unk> data , String md5 ) {
Log . v ( " , " + data . getId ( ) + " + data . <unk> ( ) + " + md5 ) ;
try {
new <unk> ( data , md5 ) . execute ( null ) ; ;
}
catch ( Exception e ) {
Log . e ( " , e . getMessage ( ) , e ) ;
}
}
public void processServerResponse ( <unk> data ) {
synchronized ( <unk> ) {
if ( ! <unk> . contains ( <unk> , data ) )
<unk> ( getString ( R . string . <unk> ) , data , <num> ) ;
<unk> . <unk> ( <unk> , data , <unk> ) ;
}
Intent <unk> = new Intent ( <unk> ) ;
<unk> . putExtra ( <unk> , data ) ;
sendBroadcast ( <unk> ) ;
<unk> = new Intent ( <unk> ) ;
<unk> . putExtra ( <unk> , data . <unk> ( ) ) ;
sendBroadcast ( <unk> ) ;
}
private static final int <unk> = <num> ;
private double <unk> = <num> ;
private double <unk> = <num> ;
private LocationListener <unk> ;
private void startLocation ( ) {
LocationManager locationManager = ( LocationManager ) getSystemService ( LOCATION_SERVICE ) ;
<unk> = new LocationListener ( ) {
@Override
public void onLocationChanged ( Location location ) {
float [ ] results = new float [ <num> ] ;
Location . distanceBetween ( <unk> , <unk> , location . getLatitude ( ) , location . getLongitude ( ) , results ) ;
float distance = results [ <num> ] ;
if ( distance > <unk> ) {
<unk> = location . getLatitude ( ) ;
<unk> = location . getLongitude ( ) ;
<unk> ( location . getLatitude ( ) , location . getLongitude ( ) ) ;
Intent <unk> = new Intent ( <unk> ) ;
<unk> . putExtra ( <unk> , new Coordinate ( <unk> , <unk> ) ) ;
sendBroadcast ( <unk> ) ;
}
}
@Override
public void onProviderDisabled ( String str ) {
}
@Override
public void onProviderEnabled ( String str ) {
}
@Override
public void onStatusChanged ( String str , int arg1 , Bundle arg2 ) {
}
} ;
locationManager . requestLocationUpdates ( LocationManager . NETWORK_PROVIDER , <num> , <num> , <unk> ) ;
}
@Override
public int onStartCommand ( Intent intent , int flags , int startId ) {
String action = intent . getAction ( ) ;
Log . v ( " , " + action ) ;
if ( <unk> . equals ( action ) ) {
<unk> = intent . getBooleanExtra ( <unk> , false ) ;
}
else if ( <unk> . equals ( action ) ) {
Object [ ] array = ( Object [ ] ) intent . getSerializableExtra ( <unk> ) ;
categories = new Category [ array . length ] ;
for ( int i = <num> ; i < array . length ; i ++ ) categories [ i ] = ( Category ) array [ i ] ;
}
else if ( <unk> . equals ( action ) ) {
<unk> <unk> = ( <unk> ) intent . getSerializableExtra ( <unk> . <unk> ) ;
String md5 = intent . getStringExtra ( <unk> . <unk> ) ;
synchronized ( <unk> ) {
<unk> . <unk> ( <unk> , <unk> , <unk> ) ;
}
<unk> ( <unk> , md5 ) ;
}
else if ( <unk> . equals ( action ) ) {
double lat = intent . getDoubleExtra ( " , <num> ) ;
double lng = intent . getDoubleExtra ( " , <num> ) ;
Toast . makeText ( this , " + lat + " + lng , Toast . LENGTH_SHORT ) . show ( ) ;
Intent <unk> = new Intent ( <unk> ) ;
<unk> . putExtra ( <unk> , new Coordinate ( lat , lng ) ) ;
sendBroadcast ( <unk> ) ;
<unk> ( lat , lng ) ;
}
else if ( <unk> . equals ( action ) ) {
}
return START_STICKY ;
}
@Override
public void onCreate ( ) {
super . onCreate ( ) ;
<unk> . <unk> ( this , true ) ;
startLocation ( ) ;
}
@Override
public void onDestroy ( ) {
<unk> . <unk> ( this , false ) ;
LocationManager locationManager = ( LocationManager ) getSystemService ( LOCATION_SERVICE ) ;
locationManager . removeUpdates ( <unk> ) ;
}
@Override
protected void finalize ( ) throws Throwable {
super . finalize ( ) ;
}
}
package com . <unk> . model ;
import java . io . Serializable ;
import java . util . LinkedList ;
import java . util . List ;
import com . <unk> . <unk> ;
import com . <unk> . R ;
public class Category implements Serializable {
private static final long serialVersionUID = <num> ;
private transient static List < Category > categories ;
private String name ;
private int <unk> ;
private String <unk> ;
private boolean checked ;
public Category ( String name , int <unk> , String <unk> ) {
super ( ) ;
this . name = name ;
this . <unk> = <unk> ;
this . <unk> ( <unk> ) ;
}
public static List < Category > getCategories ( ) {
if ( categories == null ) {
<unk> ( ) ;
}
return categories ;
}
public static void <unk> ( ) {
categories = new LinkedList < Category > ( ) ;
categories . add ( new Category ( " , R . drawable . <unk> , " ) ) ;
categories . add ( new Category ( " , R . drawable . <unk> , " ) ) ;
categories . add ( new Category ( " , R . drawable . <unk> , " ) ) ;
categories . add ( new Category ( " , R . drawable . <unk> , " ) ) ;
for ( Category category : categories ) {
<unk> . <unk> ( category ) ;
}
}
public String getName ( ) {
return name ;
}
public void setName ( String name ) {
this . name = name ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public String <unk> ( ) {
return <unk> ;
}
public void <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
public boolean isChecked ( ) {
return checked ;
}
public void setChecked ( boolean checked ) {
this . checked = checked ;
}
}
package com . <unk> . service ;
import java . util . List ;
public interface <unk> {
public void <unk> ( List < Object > datas ) ;
public void onError ( int code ) ;
}
package com . <unk> . utils ;
import java . io . File ;
import java . io . FileOutputStream ;
import java . io . FilterInputStream ;
import java . io . IOException ;
import java . io . InputStream ;
import java . lang . ref . WeakReference ;
import java . lang . reflect . Method ;
import java . util . HashMap ;
import java . util . Iterator ;
import java . util . LinkedHashMap ;
import org . apache . http . HttpEntity ;
import org . apache . http . HttpResponse ;
import org . apache . http . HttpStatus ;
import org . apache . http . client . HttpClient ;
import org . apache . http . client . methods . HttpGet ;
import org . apache . http . impl . client . DefaultHttpClient ;
import org . apache . http . params . CoreProtocolPNames ;
import android . content . Context ;
import android . graphics . Bitmap ;
import android . graphics . BitmapFactory ;
import android . graphics . drawable . BitmapDrawable ;
import android . graphics . drawable . Drawable ;
import android . os . AsyncTask ;
import android . os . Debug ;
import android . os . Handler ;
import android . util . Log ;
import android . view . ViewGroup . LayoutParams ;
import android . widget . ImageView ;
public class ImageDownloader {
private static final String LOG_TAG = " ;
private static Class <unk> = null ;
private static Method <unk> = null ;
private static Method <unk> = null ;
static {
try {
<unk> = Class . forName ( " ) ;
<unk> = <unk> . getMethod ( " , String . class ) ;
<unk> = <unk> . getMethod ( " ) ;
} catch ( Exception <unk> ) {
}
}
public enum Mode {
NO_ASYNC_TASK , NO_DOWNLOADED_DRAWABLE , CORRECT
}
private Mode mode = Mode . CORRECT ;
private Context context ;
public static HashMap < BitmapDownloaderTask , String > <unk> = new HashMap < BitmapDownloaderTask , String > ( ) ;
public ImageDownloader ( Context context ) {
this . context = context ;
<unk> = ( <unk> ) Utils . <unk> ( " , context ) ;
if ( <unk> == null ) {
<unk> = new <unk> ( <unk> ( ) ) ;
} else {
<unk> . clean ( ) ;
}
}
public void <unk> ( ) {
Utils . writeToFile ( " , context , <unk> ) ;
}
public void <unk> ( ) {
int <unk> = ( int ) ( Debug . <unk> ( ) / <num> ) ;
String <unk> = String . format ( " , <unk> ) ;
Log . i ( LOG_TAG , <unk> ) ;
}
protected File <unk> ( ) {
File file = new File ( this . context . getCacheDir ( ) , " ) ;
if ( ! file . exists ( ) )
file . mkdir ( ) ;
return file ;
}
public static void <unk> ( String <unk> ) {
Iterator < HashMap . Entry < BitmapDownloaderTask , String >> iterator = <unk> . entrySet ( ) . iterator ( ) ;
while ( iterator . hasNext ( ) ) {
HashMap . Entry < BitmapDownloaderTask , String > entry = iterator . next ( ) ;
String activity = entry . getValue ( ) ;
if ( activity != null && ! activity . equals ( <unk> ) ) {
entry . getKey ( ) . cancel ( true ) ;
}
}
}
public void download ( String url , ImageView imageView , BitmapDrawable image , String activityName ) {
resetPurgeTimer ( ) ;
Bitmap bitmap = getBitmapFromCache ( url , imageView , image ) ;
if ( bitmap == null ) {
BitmapDownloaderTask task = forceDownload ( url , imageView , image ) ;
if ( task != null )
<unk> . put ( task , activityName ) ;
} else {
cancelPotentialDownload ( url , imageView ) ;
imageView . setImageBitmap ( bitmap ) ;
}
}
private BitmapDownloaderTask forceDownload ( String url , ImageView imageView , BitmapDrawable tempImage ) {
BitmapDownloaderTask task = null ;
if ( url == null ) {
imageView . setImageDrawable ( null ) ;
return null ;
}
int w = <num> , h = <num> ;
LayoutParams params = imageView . getLayoutParams ( ) ;
if ( params != null ) {
w = params . width ;
h = params . height ;
}
if ( <unk> ( url , imageView , w , h ) ) {
switch ( mode ) {
case NO_ASYNC_TASK :
Bitmap bitmap = downloadBitmap ( url , w , h ) ;
addBitmapToCache ( url , bitmap ) ;
imageView . setImageBitmap ( bitmap ) ;
break ;
case NO_DOWNLOADED_DRAWABLE :
imageView . setMinimumHeight ( <num> ) ;
imageView . setMinimumWidth ( <num> ) ;
task = new BitmapDownloaderTask ( imageView , w , h ) ;
task . execute ( url ) ;
break ;
case CORRECT :
task = new BitmapDownloaderTask ( imageView , w , h ) ;
DownloadedDrawable downloadedDrawable = null ;
if ( tempImage != null ) {
downloadedDrawable = new DownloadedDrawable ( task , tempImage ) ;
} else {
downloadedDrawable = new DownloadedDrawable ( task ) ;
}
int <unk> = <num> ;
int <unk> = <num> ;
if ( params != null ) {
<unk> = params . width ;
<unk> = params . height ;
}
imageView . setImageDrawable ( downloadedDrawable ) ;
imageView . setMinimumWidth ( <unk> ) ;
imageView . setMinimumHeight ( <unk> ) ;
task . execute ( url ) ;
break ;
}
}
return task ;
}
private static boolean cancelPotentialDownload ( String url , ImageView imageView ) {
BitmapDownloaderTask bitmapDownloaderTask = getBitmapDownloaderTask ( imageView ) ;
if ( bitmapDownloaderTask != null ) {
String bitmapUrl = bitmapDownloaderTask . url ;
if ( ( bitmapUrl == null ) || ( ! bitmapUrl . equals ( url ) ) ) {
bitmapDownloaderTask . cancel ( true ) ;
} else {
return false ;
}
}
return true ;
}
private static boolean <unk> ( String url , ImageView imageView , int w , int h ) {
BitmapDownloaderTask bitmapDownloaderTask = getBitmapDownloaderTask ( imageView ) ;
if ( bitmapDownloaderTask != null ) {
String bitmapUrl = bitmapDownloaderTask . url ;
if ( ( bitmapUrl == null ) || ( ! bitmapUrl . equals ( url ) ) ) {
bitmapDownloaderTask . cancel ( true ) ;
return true ;
} else {
return false ;
}
}
return true ;
}
public static BitmapDownloaderTask getBitmapDownloaderTask ( ImageView imageView ) {
if ( imageView != null ) {
Drawable drawable = imageView . getDrawable ( ) ;
if ( drawable instanceof DownloadedDrawable ) {
DownloadedDrawable downloadedDrawable = ( DownloadedDrawable ) drawable ;
return downloadedDrawable . getBitmapDownloaderTask ( ) ;
}
}
return null ;
}
protected HttpClient getHttpClient ( ) {
HttpClient client = null ;
if ( mode != Mode . NO_ASYNC_TASK || <unk> != null ) {
try {
client = ( HttpClient ) <unk> . invoke ( null , " ) ;
} catch ( Exception e ) {
}
} else
client = new DefaultHttpClient ( ) ;
client . getParams ( ) . setParameter ( CoreProtocolPNames . USER_AGENT , " ) ;
return client ;
}
Bitmap downloadBitmap ( String url , int width , int height ) {
HttpClient client = null ;
HttpGet getRequest = null ;
try {
getRequest = new HttpGet ( url ) ;
client = getHttpClient ( ) ;
HttpResponse response = client . execute ( getRequest ) ;
final int statusCode = response . getStatusLine ( ) . getStatusCode ( ) ;
if ( statusCode != HttpStatus . SC_OK ) {
Log . w ( " , " + statusCode + " + url ) ;
return null ;
}
final HttpEntity entity = response . getEntity ( ) ;
if ( entity != null ) {
String md5 = Utils . md5 ( url ) ;
File outputFile = <unk> . <unk> ( md5 ) ;
FileOutputStream stream = new FileOutputStream ( outputFile ) ;
entity . writeTo ( stream ) ;
stream . close ( ) ;
Bitmap res = <unk> ( outputFile , width , height ) ;
if ( res != null ) {
synchronized ( <unk> ) {
<unk> . put ( url , md5 ) ;
<unk> ( ) ;
}
}
return res ;
}
} catch ( IOException e ) {
if ( getRequest != null )
getRequest . abort ( ) ;
Log . w ( LOG_TAG , " + url , e ) ;
} catch ( IllegalStateException e ) {
if ( getRequest != null )
getRequest . abort ( ) ;
Log . w ( LOG_TAG , " + url ) ;
} catch ( Exception e ) {
if ( getRequest != null )
getRequest . abort ( ) ;
Log . w ( LOG_TAG , " + url , e ) ;
} finally {
if ( client == null ) {
return null ;
}
if ( <unk> != null && <unk> . isAssignableFrom ( client . getClass ( ) ) ) {
try {
<unk> . invoke ( client ) ;
} catch ( Exception e ) {
}
}
}
return null ;
}
static class FlushedInputStream extends FilterInputStream {
public FlushedInputStream ( InputStream inputStream ) {
super ( inputStream ) ;
}
@Override
public long skip ( long n ) throws IOException {
long totalBytesSkipped = <num> ;
while ( totalBytesSkipped < n ) {
long bytesSkipped = in . skip ( n  totalBytesSkipped ) ;
if ( bytesSkipped == <num> ) {
int b = read ( ) ;
if ( b < <num> ) {
break ;
} else {
bytesSkipped = <num> ;
}
}
totalBytesSkipped += bytesSkipped ;
}
return totalBytesSkipped ;
}
}
public class BitmapDownloaderTask extends AsyncTask < String , Void , Bitmap > {
private String url ;
private WeakReference < ImageView > imageViewReference ;
private int <unk> ;
private int <unk> ;
private boolean finished = false ;
public BitmapDownloaderTask ( ImageView imageView , int w , int h ) {
imageViewReference = new WeakReference < ImageView > ( imageView ) ;
<unk> = w ;
<unk> = h ;
}
public void resetData ( ImageView imageView , int w , int h ) {
imageViewReference = new WeakReference < ImageView > ( imageView ) ;
<unk> = w ;
<unk> = h ;
}
@Override
protected void onCancelled ( ) {
super . onCancelled ( ) ;
<unk> . remove ( this ) ;
}
@Override
protected Bitmap doInBackground ( String . . . params ) {
url = params [ <num> ] ;
Bitmap bitmap = downloadBitmap ( url , <unk> , <unk> ) ;
bitmap = <unk> ( bitmap , <unk> , <unk> ) ;
return bitmap ;
}
@Override
protected void onPostExecute ( Bitmap bitmap ) {
if ( isCancelled ( ) ) {
bitmap = null ;
}
addBitmapToCache ( url , bitmap ) ;
<unk> . remove ( this ) ;
if ( imageViewReference != null && imageViewReference . get ( ) != null ) {
ImageView imageView = imageViewReference . get ( ) ;
BitmapDownloaderTask bitmapDownloaderTask = getBitmapDownloaderTask ( imageView ) ;
if ( ( this == bitmapDownloaderTask ) || ( mode != Mode . CORRECT ) ) {
if ( bitmap != null ) {
Drawable <unk> = imageView . getDrawable ( ) ;
imageView . setImageBitmap ( bitmap ) ;
}
}
}
finished = true ;
}
public boolean isFinished ( ) {
return finished ;
}
}
static class DownloadedDrawable extends BitmapDrawable {
private final WeakReference < BitmapDownloaderTask > bitmapDownloaderTaskReference ;
public DownloadedDrawable ( BitmapDownloaderTask bitmapDownloaderTask , BitmapDrawable bitmapDrawable ) {
super ( bitmapDrawable . getBitmap ( ) ) ;
bitmapDownloaderTaskReference = new WeakReference < BitmapDownloaderTask > ( bitmapDownloaderTask ) ;
}
public DownloadedDrawable ( BitmapDownloaderTask bitmapDownloaderTask ) {
bitmapDownloaderTaskReference = new WeakReference < BitmapDownloaderTask > ( bitmapDownloaderTask ) ;
}
public BitmapDownloaderTask getBitmapDownloaderTask ( ) {
return bitmapDownloaderTaskReference . get ( ) ;
}
}
public void setMode ( Mode mode ) {
this . mode = mode ;
clearCache ( ) ;
}
private static int <unk> = <num> ;
private static final int HARD_CACHE_CAPACITY = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int DELAY_BEFORE_PURGE = <num> * <num> * <num> * <num> ;
private <unk> <unk> ;
private final HashMap < String , Bitmap > sHardBitmapCache = new LinkedHashMap < String , Bitmap > ( HARD_CACHE_CAPACITY / <num> ,
<unk> , false ) {
private static final long serialVersionUID = <num> ;
@Override
protected boolean removeEldestEntry ( LinkedHashMap . Entry < String , Bitmap > eldest ) {
if ( size ( ) > HARD_CACHE_CAPACITY ) {
super . removeEldestEntry ( eldest ) ;
sSoftBitmapCache . put ( eldest . getKey ( ) , new WeakReference < Bitmap > ( eldest . getValue ( ) ) ) ;
return true ;
} else
return false ;
}
} ;
private final HashMap < String , Bitmap > <unk> = new LinkedHashMap < String , Bitmap > (
<unk> , <num> , false ) {
private static final long serialVersionUID =  <num> ;
@Override
protected boolean removeEldestEntry ( LinkedHashMap . Entry < String , Bitmap > eldest ) {
if ( size ( ) > <unk> ) {
super . removeEldestEntry ( eldest ) ;
sSoftBitmapCache . put ( eldest . getKey ( ) , new WeakReference < Bitmap > ( eldest . getValue ( ) ) ) ;
return true ;
} else
return false ;
}
} ;
private final HashMap < String , WeakReference < Bitmap >> sSoftBitmapCache = new LinkedHashMap < String , WeakReference < Bitmap >> (
<unk> , <num> , false ) {
private static final long serialVersionUID =  <num> ;
@Override
protected boolean removeEldestEntry ( LinkedHashMap . Entry < String , WeakReference < Bitmap >> eldest ) {
if ( size ( ) > <unk>  <num> ) {
try {
eldest . getValue ( ) . clear ( ) ;
} catch ( Exception e ) {
}
super . removeEldestEntry ( eldest ) ;
return true ;
} else
return false ;
}
} ;
private final Handler purgeHandler = new Handler ( ) ;
private final Runnable purger = new Runnable ( ) {
public void run ( ) {
clearCache ( ) ;
}
} ;
private void addBitmapToCache ( String url , Bitmap bitmap ) {
return ;
}
private Bitmap <unk> ( File file , int width , int height ) {
BitmapFactory . Options options = new BitmapFactory . Options ( ) ;
if ( width != <num> && height != <num> ) {
options . inJustDecodeBounds = true ;
BitmapFactory . decodeFile ( file . getAbsolutePath ( ) , options ) ;
float heightRatio = ( float ) options . outHeight / ( float ) height ;
float widthRatio = ( float ) options . outWidth / ( float ) width ;
float <unk> = Math . max ( widthRatio , heightRatio ) ;
if ( <unk> > <num> )
options . inSampleSize = <num> ;
else if ( <unk> > <num> )
options . inSampleSize = <num> ;
else if ( <unk> > <num> )
options . inSampleSize = <num> ;
options . inJustDecodeBounds = false ;
}
options . <unk> = new byte [ <num> * <num> ] ;
Bitmap bitmap = BitmapFactory . decodeFile ( file . getAbsolutePath ( ) , options ) ;
return bitmap ;
}
private Bitmap getBitmapFromCache ( String url , ImageView imageView , BitmapDrawable tempImage ) {
synchronized ( sHardBitmapCache ) {
final Bitmap bitmap = sHardBitmapCache . get ( url ) ;
if ( bitmap != null ) {
sHardBitmapCache . remove ( url ) ;
sHardBitmapCache . put ( url , bitmap ) ;
return bitmap ;
}
}
synchronized ( <unk> ) {
final Bitmap bitmap = <unk> . get ( url ) ;
if ( bitmap != null ) {
<unk> . remove ( url ) ;
<unk> . put ( url , bitmap ) ;
return bitmap ;
}
}
WeakReference < Bitmap > bitmapReference = sSoftBitmapCache . get ( url ) ;
if ( bitmapReference != null ) {
final Bitmap bitmap = bitmapReference . get ( ) ;
if ( bitmap != null ) {
return bitmap ;
} else {
sSoftBitmapCache . remove ( url ) ;
}
}
synchronized ( <unk> ) {
String filename = <unk> . get ( url ) ;
if ( filename != null ) {
LayoutParams params = imageView . getLayoutParams ( ) ;
int width = <num> ;
int height = <num> ;
if ( params != null ) {
width = params . width ;
height = params . height ;
}
Bitmap bitmap = <unk> ( <unk> . <unk> ( filename ) , width , height ) ;
if ( bitmap != null ) {
<unk> . refresh ( url , filename ) ;
addBitmapToCache ( url , bitmap ) ;
return bitmap ;
}
}
}
return null ;
}
private Bitmap <unk> ( Bitmap bitmap , int <unk> , int <unk> ) {
if ( bitmap == null ) {
return null ;
}
if ( <unk> > <num> && <unk> > <num> && bitmap . getWidth ( ) > <num> && bitmap . getHeight ( ) > <num> ) {
float deltaX = ( ( float ) <unk> ) / ( ( float ) bitmap . getWidth ( ) ) ;
float deltaY = ( ( float ) <unk> ) / ( ( float ) bitmap . getHeight ( ) ) ;
float delta = Math . max ( deltaX , deltaY ) ;
if ( delta < <num> ) {
bitmap = Bitmap . createScaledBitmap ( bitmap , ( int ) ( delta * bitmap . getWidth ( ) ) ,
( int ) ( delta * bitmap . getHeight ( ) ) , false ) ;
}
}
return bitmap ;
}
public void clearCache ( ) {
sHardBitmapCache . clear ( ) ;
<unk> . clear ( ) ;
sSoftBitmapCache . clear ( ) ;
}
private void resetPurgeTimer ( ) {
purgeHandler . removeCallbacks ( purger ) ;
purgeHandler . postDelayed ( purger , DELAY_BEFORE_PURGE ) ;
}
public void <unk> ( ) {
File cacheDir = <unk> ( ) ;
if ( cacheDir . exists ( ) ) {
File [ ] files = cacheDir . listFiles ( ) ;
for ( int i = <num> ; i < files . length ; i ++ ) {
files [ i ] . delete ( ) ;
}
}
}
package com . <unk> . widget ;
public class <unk> {
private <unk> data ;
public <unk> ( <unk> data ) {
this . data = data ;
}
}
package com . <unk> . service ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . UnsupportedEncodingException ;
import java . net . URLEncoder ;
import java . util . ArrayList ;
import java . util . List ;
import java . util . zip . GZIPInputStream ;
import org . apache . http . Header ;
import org . apache . http . HttpResponse ;
import org . apache . http . client . HttpClient ;
import org . apache . http . client . methods . HttpGet ;
import org . apache . http . client . methods . HttpUriRequest ;
import org . apache . http . impl . client . DefaultHttpClient ;
import org . json . JSONArray ;
import org . json . JSONException ;
import org . json . JSONObject ;
import android . os . AsyncTask ;
import android . util . Log ;
import com . <unk> . model . <unk> ;
import com . <unk> . utils . Utils ;
public class <unk> extends AsyncTask < Void , Void , Void > {
private final <unk> <unk> ;
private int <unk> =  <num> ;
private <unk> <unk> ;
private List < String > <unk> ;
public <unk> ( <unk> activity , <unk> <unk> ) {
<unk> = activity ;
this . <unk> = <unk> ;
}
@Override
protected Void doInBackground ( Void . . . arg0 ) {
String url = " ;
try {
url += URLEncoder . encode ( <unk> . getTitle ( ) , " ) ;
} catch ( UnsupportedEncodingException e ) {
e . printStackTrace ( ) ;
}
<unk> ( url ) ;
return null ;
}
private void <unk> ( String baseUrl ) {
final HttpClient httpClient = new DefaultHttpClient ( ) ;
HttpResponse response = null ;
InputStream instream = null ;
<unk> =  <num> ;
try {
java . net . URLEncoder . encode ( baseUrl . toString ( ) , " ) ;
final HttpUriRequest request = new HttpGet ( baseUrl ) ;
request . addHeader ( " , " ) ;
request . addHeader ( " , " ) ;
response = httpClient . execute ( request ) ;
instream = response . getEntity ( ) . getContent ( ) ;
final Header contentEncoding = response . getFirstHeader ( " ) ;
if ( contentEncoding != null && contentEncoding . getValue ( ) . equalsIgnoreCase ( " ) ) {
instream = new GZIPInputStream ( instream ) ;
}
try {
String <unk> = Utils . <unk> ( instream ) ;
<unk> = parseJSON ( <unk> ) ;
} catch ( final Exception e ) {
e . printStackTrace ( ) ;
<unk> = <num> ;
}
} catch ( final Exception e ) {
e . printStackTrace ( ) ;
<unk> = <num> ;
} finally {
try {
if ( instream != null ) {
instream . close ( ) ;
}
if ( response != null && response . getEntity ( ) != null ) {
response . getEntity ( ) . consumeContent ( ) ;
}
} catch ( final IOException e ) {
e . printStackTrace ( ) ;
}
}
}
public List < String > parseJSON ( String jsonString ) throws JSONException {
Log . v ( " , jsonString ) ;
List < String > images = new ArrayList < String > ( <num> ) ;
JSONObject jsonObject = new JSONObject ( jsonString ) . getJSONObject ( " ) ;
JSONArray jsonArray = jsonObject . getJSONArray ( " ) ;
for ( int i = <num> ; i < jsonArray . length ( ) ; i ++ ) {
jsonObject = jsonArray . getJSONObject ( i ) ;
images . add ( jsonObject . getString ( " ) ) ;
}
return images ;
}
@Override
protected void onPostExecute ( Void result ) {
if ( <unk> >= <num> ) {
showError ( ) ;
}
else if ( <unk> != null && <unk> != null && <unk> . size ( ) > <num> ) {
<unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( ( String ) <unk> . get ( <num> ) ) ;
<unk> . <unk> ( new ArrayList < Object > ( <unk> ) ) ;
}
}
private void showError ( ) {
if ( <unk> != null ) {
<unk> . onError ( <unk> ) ;
}
}
}
package com . <unk> . utils ;
import java . io . File ;
import java . util . Iterator ;
import java . util . LinkedHashMap ;
class <unk> extends LinkedHashMap < String , String > {
private static final int <unk> = <num> ;
private static final int <unk> = <num> * <num> * <num> ;
private static final long serialVersionUID = <num> ;
private long <unk> = <num> ;
private File <unk> ;
public <unk> ( ) {
super ( <unk> / <num> , <num> , false ) ;
}
public <unk> ( File <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public File getBaseDirectory ( ) {
return <unk> ;
}
public void <unk> ( File <unk> ) {
this . <unk> = <unk> ;
}
public File <unk> ( String filename ) {
return new File ( <unk> , filename ) ;
}
private long getFileSize ( String filename ) {
if ( filename != null ) {
File file = <unk> ( filename ) ;
if ( file . exists ( ) )
return file . length ( ) ;
}
return <num> ;
}
@Override
public String put ( String key , String value ) {
<unk> += getFileSize ( value ) ;
return super . put ( key , value ) ;
}
@Override
public String remove ( Object key ) {
<unk> -= getFileSize ( get ( key ) ) ;
return super . remove ( key ) ;
}
@Override
protected boolean removeEldestEntry ( LinkedHashMap . Entry < String , String > eldest ) {
if ( <unk> >= <unk> ) {
File file = <unk> ( eldest . getValue ( ) ) ;
<unk> -= file . length ( ) ;
file . delete ( ) ;
return true ;
} else
return false ;
}
public void clean ( ) {
long mySize = <num> ;
long <unk> = <num> ;
Iterator < <unk> . Entry < String , String >> iterator = entrySet ( ) . iterator ( ) ;
while ( iterator . hasNext ( ) ) {
<unk> . Entry < String , String > entry = iterator . next ( ) ;
File file = <unk> ( entry . getValue ( ) ) ;
if ( file . exists ( ) ) {
mySize += file . length ( ) ;
<unk> ++ ;
} else
iterator . remove ( ) ;
}
<unk> = mySize ;
}
public void refresh ( String key , String value ) {
super . remove ( key ) ;
super . put ( key , value ) ;
}
package com . <unk> ;
import java . security . MessageDigest ;
import java . security . NoSuchAlgorithmException ;
import java . util . List ;
import android . accounts . Account ;
import android . accounts . AccountManager ;
import android . app . Activity ;
import android . app . AlertDialog ;
import android . app . Dialog ;
import android . app . PendingIntent ;
import android . content . Context ;
import android . content . DialogInterface ;
import android . content . Intent ;
import android . content . SharedPreferences ;
import android . os . Bundle ;
import android . util . Log ;
import android . view . Menu ;
import android . view . MenuItem ;
import android . view . MotionEvent ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . view . View . OnTouchListener ;
import android . view . ViewGroup ;
import android . widget . AdapterView ;
import android . widget . AdapterView . OnItemClickListener ;
import android . widget . Button ;
import android . widget . Gallery ;
import android . widget . ImageView ;
import android . widget . TextView ;
import android . widget . Toast ;
import com . <unk> . adapters . ImageAdapter ;
import com . <unk> . model . <unk> ;
import com . <unk> . model . <unk> . <unk> ;
import com . <unk> . model . <unk> ;
import com . <unk> . service . <unk> ;
import com . <unk> . service . <unk> ;
import com . <unk> . service . <unk> ;
public class <unk> extends Activity implements <unk> {
public Button <unk> ;
private <unk> <unk> ;
private static final int <unk> = <num> ;
protected static final String <unk> = " ;
Context context ;
private Gallery gallery ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
context = this ;
final TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> . setText ( getString ( R . string . <unk> ) ) ;
<unk> = ( <unk> ) getIntent ( ) . getSerializableExtra ( <unk> . <unk> ) ;
final TextView title = ( TextView ) findViewById ( R . id . <unk> ) ;
final TextView descr = ( TextView ) findViewById ( R . id . <unk> ) ;
final TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
title . setText ( <unk> . getTitle ( ) ) ;
descr . setText ( <unk> . getDescription ( ) ) ;
<unk> . setText ( Integer . toString ( <unk> . <unk> ( ) ) ) ;
Log . v ( " , " + <unk> . <unk> ( ) + " + <unk> . <unk> ( ) ) ;
<unk> . setPressed ( <unk> . <unk> ( ) ) ;
<unk> . setOnTouchListener ( new OnTouchListener ( ) {
@Override
public boolean onTouch ( View v , MotionEvent event ) {
if ( event . getAction ( ) == MotionEvent . ACTION_DOWN )
return true ;
if ( event . getAction ( ) != MotionEvent . ACTION_UP )
return false ;
String md5 = <unk> ( ) ;
if ( md5 != null ) {
if ( <unk> . isPressed ( ) ) {
<unk> . <unk> ( <unk> . <unk> ( )  <num> ) ;
<unk> . setPressed ( false ) ;
} else {
<unk> . <unk> ( <unk> . <unk> ( ) + <num> ) ;
<unk> . setPressed ( true ) ;
}
<unk> . setText ( Integer . toString ( <unk> . <unk> ( ) ) ) ;
<unk> . <unk> ( <unk> . isPressed ( ) ) ;
Intent serviceIntent = new Intent ( <unk> . <unk> ) ;
serviceIntent . setClassName ( context , " ) ;
serviceIntent . putExtra ( <unk> . <unk> , <unk> . copy ( ) ) ;
serviceIntent . putExtra ( <unk> . <unk> , md5 ) ;
context . startService ( serviceIntent ) ;
}
return true ;
}
} ) ;
gallery = ( Gallery ) findViewById ( R . id . gallery ) ;
if ( <unk> . <unk> ( ) == null ) {
new <unk> ( this , <unk> ) . execute ( null ) ;
} else {
gallery . setAdapter ( new ImageAdapter ( this , <unk> ) ) ;
}
gallery . setOnItemClickListener ( new OnItemClickListener ( ) {
public void onItemClick ( AdapterView parent , View v , int position , long id ) {
Intent intent = new Intent ( <unk> . this , <unk> . class ) ;
intent . putExtra ( <unk> . <unk> , <unk> ) ;
intent . putExtra ( <unk> . <unk> , position ) ;
startActivity ( intent ) ;
}
} ) ;
addActions ( ) ;
if ( <unk> . <unk> ( ) == null ) {
new <unk> ( new <unk> ( ) {
@Override
public void onError ( int code ) {
}
@Override
public void <unk> ( List < Object > datas ) {
addActions ( ) ;
}
} , <unk> ) . execute ( null ) ;
}
if ( <unk> . <unk> ( ) && getIntent ( ) . getExtras ( ) . getBoolean ( <unk> . <unk> , false ) ) {
<unk> . <unk> ( this ) ;
}
}
private void addActions ( ) {
ViewGroup listView = ( ViewGroup ) findViewById ( R . id . <unk> ) ;
listView . removeAllViews ( ) ;
List < <unk> > actions = <unk> . getActions ( ) ;
boolean first = true ;
for ( final <unk> action : actions ) {
if ( ! first ) {
getLayoutInflater ( ) . inflate ( R . layout . separator , listView ) ;
}
View view = getLayoutInflater ( ) . inflate ( R . layout . <unk> , null ) ;
listView . addView ( view ) ;
ImageView image = ( ImageView ) view . findViewById ( R . id . <unk> ) ;
image . setImageResource ( action . <unk> ( ) ) ;
TextView text = ( TextView ) view . findViewById ( R . id . <unk> ) ;
text . setText ( action . getName ( ) ) ;
if ( action instanceof <unk> ) {
<unk> <unk> = ( <unk> ) action ;
text . setText ( <unk> . <unk> == null ? getString ( action . getName ( ) ) : <unk> . <unk> ( this ) ) ;
}
view . setOnClickListener ( new OnClickListener ( ) {
@Override
public void onClick ( View v ) {
action . execute ( <unk> . this ) ;
}
} ) ;
}
}
public static PendingIntent <unk> ( Context context , <unk> data ) {
Intent intent = new Intent ( context , <unk> . class ) ;
intent . putExtra ( <unk> . <unk> , data ) ;
intent . putExtra ( <unk> . <unk> , true ) ;
PendingIntent contentIntent = PendingIntent . getActivity ( context , <num> , intent , PendingIntent . FLAG_CANCEL_CURRENT ) ;
return contentIntent ;
}
@Override
public void <unk> ( List < Object > datas ) {
if ( datas == null || datas . size ( ) == <num> ) {
Log . w ( " , " ) ;
return ;
}
gallery . setAdapter ( new ImageAdapter ( this , <unk> ) ) ;
}
@Override
public void onError ( int code ) {
}
@Override
protected Dialog onCreateDialog ( int id ) {
switch ( id ) {
case <unk> :
AlertDialog . Builder builder = new AlertDialog . Builder ( this ) ;
builder . setTitle ( " ) ;
final AccountManager manager = AccountManager . get ( this ) ;
final Account [ ] accounts = manager . getAccountsByType ( " ) ;
final int size = accounts . length ;
String [ ] names = new String [ size ] ;
for ( int i = <num> ; i < size ; i ++ ) {
names [ i ] = accounts [ i ] . name ;
}
builder . setItems ( names , new DialogInterface . OnClickListener ( ) {
public void onClick ( DialogInterface dialog , int which ) {
<unk> ( manager , accounts [ which ] ) ;
}
} ) ;
return builder . create ( ) ;
}
return null ;
}
public String md5 ( String s ) {
try {
MessageDigest digest = java . security . MessageDigest . getInstance ( " ) ;
digest . update ( s . getBytes ( ) ) ;
byte messageDigest [ ] = digest . digest ( ) ;
StringBuffer hexString = new StringBuffer ( ) ;
for ( int i = <num> ; i < messageDigest . length ; i ++ )
hexString . append ( Integer . toHexString ( <num> & messageDigest [ i ] ) ) ;
return hexString . toString ( ) ;
} catch ( NoSuchAlgorithmException e ) {
e . printStackTrace ( ) ;
}
return " ;
}
private String <unk> ( ) {
SharedPreferences settings = getSharedPreferences ( " , <num> ) ;
String accountName = settings . getString ( " , null ) ;
if ( accountName != null ) {
AccountManager manager = AccountManager . get ( this ) ;
Account [ ] accounts = manager . getAccountsByType ( " ) ;
int size = accounts . length ;
for ( int i = <num> ; i < size ; i ++ ) {
Account account = accounts [ i ] ;
if ( accountName . equals ( account . name ) ) {
String md5 = md5 ( account . name ) ;
if ( <unk> . isPressed ( ) ) {
Toast . makeText ( this , " + account . name , Toast . LENGTH_SHORT ) . show ( ) ;
} else {
Toast . makeText ( this , " + account . name , Toast . LENGTH_SHORT ) . show ( ) ;
}
<unk> . setSelected ( true ) ;
<unk> ( manager , account ) ;
return md5 ;
}
}
}
showDialog ( <unk> ) ;
return null ;
}
private void <unk> ( final AccountManager manager , final Account account ) {
SharedPreferences settings = getSharedPreferences ( " , <num> ) ;
SharedPreferences . Editor editor = settings . edit ( ) ;
editor . putString ( " , account . name ) ;
editor . commit ( ) ;
}
@Override
public boolean onOptionsItemSelected ( MenuItem item ) {
if ( item . getTitle ( ) . equals ( getString ( R . string . <unk> ) ) ) {
Intent intent = new Intent ( this , <unk> . class ) ;
intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ;
startActivity ( intent ) ;
return true ;
}
return false ;
}
@Override
public boolean onPrepareOptionsMenu ( Menu menu ) {
menu . clear ( ) ;
menu . add ( R . string . <unk> ) . setIcon ( android . R . drawable . ic_menu_preferences ) ;
return super . onPrepareOptionsMenu ( menu ) ;
}
}
package com . <unk> . service ;
import java . io . IOException ;
import java . io . InputStream ;
import org . apache . http . HttpEntity ;
import org . apache . http . HttpResponse ;
import org . apache . http . client . ClientProtocolException ;
import org . apache . http . client . HttpClient ;
import org . apache . http . client . methods . HttpGet ;
import org . apache . http . impl . client . DefaultHttpClient ;
import org . apache . http . params . BasicHttpParams ;
import org . apache . http . params . HttpConnectionParams ;
import org . apache . http . params . HttpParams ;
import org . json . JSONArray ;
import org . json . JSONException ;
import org . json . JSONObject ;
import android . os . AsyncTask ;
import android . util . Log ;
import com . <unk> . <unk> ;
import com . <unk> . <unk> ;
import com . <unk> . model . Category ;
import com . <unk> . model . <unk> ;
import com . <unk> . utils . Utils ;
public class <unk> extends AsyncTask < Void , Void , Void > {
private <unk> <unk> ;
private <unk> service ;
private double lat ;
private double lng ;
private double radius ;
private Category [ ] categories ;
public <unk> ( <unk> service , double lat , double lng , double radius , Category [ ] categories ) {
this . service = service ;
this . lat = lat ;
this . lng = lng ;
this . radius = radius ;
this . categories = categories ;
}
@Override
protected Void doInBackground ( Void . . . arg0 ) {
try {
if ( categories . length > <num> ) <unk> = <unk> ( ) ;
} catch ( ClientProtocolException e ) {
e . printStackTrace ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
} catch ( JSONException e ) {
e . printStackTrace ( ) ;
}
return null ;
}
@Override
protected void onPostExecute ( Void result ) {
if ( <unk> == null ) {
return ;
}
service . processServerResponse ( <unk> ) ;
}
private static final String <unk> = " ;
private static final String <unk> = " ;
private static final int <unk> = <num> ;
public <unk> <unk> ( ) throws ClientProtocolException , IOException , JSONException {
HttpParams httpParameters = new BasicHttpParams ( ) ;
HttpConnectionParams . setConnectionTimeout ( httpParameters , <unk> ) ;
HttpConnectionParams . setSoTimeout ( httpParameters , <unk> ) ;
HttpClient httpclient = new DefaultHttpClient ( httpParameters ) ;
StringBuilder sb = new StringBuilder ( ) ;
for ( Category category : categories ) {
if ( sb . length ( ) > <num> ) sb . append ( " ) ;
if ( category . isChecked ( ) ) sb . append ( category . <unk> ( ) ) ;
}
String <unk> = <unk> . <unk> ? <unk> : <unk> ;
String serverURL = <unk> + lat + " + lng + " + radius + " + sb . toString ( ) ;
Log . v ( " , " + serverURL ) ;
HttpGet httpget = new HttpGet ( serverURL ) ;
HttpResponse httpResponse = httpclient . execute ( httpget ) ;
HttpEntity entity = httpResponse . getEntity ( ) ;
if ( entity != null )
{
InputStream instream = entity . getContent ( ) ;
String <unk> = Utils . <unk> ( instream ) ;
return parseJSON ( <unk> ) ;
}
return null ;
}
public static <unk> parseJSON ( String jsonString ) throws JSONException {
Log . v ( " , jsonString ) ;
<unk> data = new <unk> ( ) ;
JSONObject jsonData = new JSONObject ( jsonString ) ;
Object obj = jsonData . opt ( " ) ;
JSONObject jsonObject = null ;
if ( obj instanceof JSONArray ) {
jsonObject = ( ( JSONArray ) obj ) . getJSONObject ( <num> ) ;
}
else if ( obj instanceof JSONObject ) {
jsonObject = ( ( JSONObject ) obj ) ;
}
data . setTitle ( jsonObject . getString ( " ) ) ;
data . setDescription ( jsonObject . getString ( " ) ) ;
data . <unk> ( jsonObject . getString ( " ) ) ;
data . setLat ( jsonObject . getDouble ( " ) ) ;
data . <unk> ( jsonObject . getDouble ( " ) ) ;
data . setCategory ( jsonObject . getString ( " ) ) ;
return data ;
}
}
package com . <unk> ;
import android . app . Activity ;
import android . os . Bundle ;
import android . widget . ImageView ;
import com . <unk> . model . <unk> ;
public class <unk> extends Activity {
public static String <unk> = " ;
public static String <unk> = " ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
<unk> data = ( <unk> ) getIntent ( ) . getSerializableExtra ( <unk> ) ;
int position = getIntent ( ) . getIntExtra ( <unk> , <num> ) ;
String url = data . <unk> ( ) . get ( position ) ;
ImageView view = ( ImageView ) findViewById ( R . id . <unk> ) ;
<unk> . <unk> ( ) . download ( url , view , null , " ) ;
}
}
package com . <unk> . model ;
import java . io . Serializable ;
public class <unk> implements Serializable {
private String name ;
private String url ;
public String getName ( ) {
return name ;
}
public void setName ( String name ) {
this . name = name ;
}
public String getUrl ( ) {
return url ;
}
public void setUrl ( String url ) {
this . url = url ;
}
}
package com . <unk> . service ;
import java . io . IOException ;
import org . apache . http . client . ClientProtocolException ;
import org . apache . http . client . HttpClient ;
import org . apache . http . client . methods . HttpPost ;
import org . apache . http . impl . client . DefaultHttpClient ;
import org . apache . http . params . BasicHttpParams ;
import org . apache . http . params . HttpConnectionParams ;
import org . apache . http . params . HttpParams ;
import org . json . JSONException ;
import android . os . AsyncTask ;
import android . util . Log ;
import com . <unk> . model . <unk> ;
public class <unk> extends AsyncTask < Void , Void , Void > {
@SuppressWarnings("unused")
private <unk> <unk> ;
private String md5 ;
public <unk> ( <unk> <unk> , String md5 ) {
this . <unk> = <unk> ;
this . md5 = md5 ;
}
@Override
protected Void doInBackground ( Void . . . arg0 ) {
try {
<unk> ( ) ;
} catch ( ClientProtocolException e ) {
e . printStackTrace ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
} catch ( JSONException e ) {
e . printStackTrace ( ) ;
}
return null ;
}
@Override
protected void onPostExecute ( Void result ) {
}
private static final String <unk> = " ;
private static final int <unk> = <num> ;
public void <unk> ( ) throws ClientProtocolException , IOException , JSONException {
HttpParams httpParameters = new BasicHttpParams ( ) ;
HttpConnectionParams . setConnectionTimeout ( httpParameters , <unk> ) ;
HttpConnectionParams . setSoTimeout ( httpParameters , <unk> ) ;
HttpClient httpclient = new DefaultHttpClient ( httpParameters ) ;
String serverURL = <unk> + <unk> . getId ( ) + " + md5 + " + <unk> . <unk> ( ) ;
Log . v ( " , " + serverURL ) ;
HttpPost httpPost = new HttpPost ( serverURL ) ;
httpclient . execute ( httpPost ) ;
}
}
package com . <unk> ;
import java . util . List ;
import android . app . Application ;
import android . app . Notification ;
import android . app . NotificationManager ;
import android . app . PendingIntent ;
import android . content . Context ;
import android . content . Intent ;
import android . content . SharedPreferences ;
import android . content . SharedPreferences . Editor ;
import android . preference . PreferenceManager ;
import com . <unk> . model . Category ;
import com . <unk> . utils . ImageDownloader ;
import com . <unk> . utils . Utils ;
public class <unk> extends Application {
private static final String <unk> = " ;
private static final String <unk> = " ;
private static final String <unk> = " ;
private static SharedPreferences preferences ;
private static ImageDownloader <unk> ;
private static double lat ;
private static double lng ;
private static boolean <unk> ;
public static boolean <unk> = true ;
private static boolean <unk> = true ;
public static boolean <unk> ( ) {
return preferences . getBoolean ( <unk> , <unk> . <unk> ) ;
}
public static void <unk> ( Context context , Boolean status ) {
Editor editor = preferences . edit ( ) ;
editor . putBoolean ( <unk> , status ) ;
editor . commit ( ) ;
Intent serviceIntent = new Intent ( <unk> . <unk> ) ;
serviceIntent . setClassName ( context , " ) ;
serviceIntent . putExtra ( <unk> . <unk> , status ) ;
context . startService ( serviceIntent ) ;
}
public static boolean <unk> ( ) {
return preferences . getBoolean ( <unk> , true ) ;
}
public static void <unk> ( Context context , Boolean status ) {
Editor editor = preferences . edit ( ) ;
editor . putBoolean ( <unk> , status ) ;
editor . commit ( ) ;
Intent serviceIntent = new Intent ( <unk> . <unk> ) ;
serviceIntent . setClassName ( context , " ) ;
if ( status ) {
context . startService ( serviceIntent ) ;
}
else {
context . stopService ( serviceIntent ) ;
}
if ( status ) {
<unk> ( context ) ;
} else {
<unk> ( context ) ;
}
}
@Override
public void onCreate ( ) {
super . onCreate ( ) ;
preferences = PreferenceManager . getDefaultSharedPreferences ( getApplicationContext ( ) ) ;
<unk> = new ImageDownloader ( getApplicationContext ( ) ) ;
<unk> = preferences . getBoolean ( " , true ) ;
Intent <unk> = new Intent ( " ) ;
<unk> . putExtra ( " , <num> ) ;
<unk> . putExtra ( " , <num> ) ;
<unk> = Utils . <unk> ( <unk> , this ) ;
<unk> ( getApplicationContext ( ) , <unk> ( ) ) ;
<unk> ( getApplicationContext ( ) , <unk> ( ) ) ;
setCategories ( getApplicationContext ( ) , Category . getCategories ( ) ) ;
}
public static void <unk> ( Context context ) {
NotificationManager notificationManager = ( NotificationManager ) context . getSystemService ( NOTIFICATION_SERVICE ) ;
PendingIntent contentIntent = <unk> . <unk> ( context ) ;
long when = System . currentTimeMillis ( ) ;
Notification notification = new Notification ( android . R . drawable . <unk> , context . getString ( R . string . <unk> ) , when ) ;
notification . setLatestEventInfo ( context , context . getString ( R . string . <unk> ) , context . getString ( R . string . <unk> ) , contentIntent ) ;
notificationManager . notify ( R . string . app_name , notification ) ;
}
public static void <unk> ( Context context ) {
NotificationManager notificationManager = ( NotificationManager ) context . getSystemService ( NOTIFICATION_SERVICE ) ;
notificationManager . cancel ( R . string . app_name ) ;
}
public static void setCategories ( Context context , List < Category > categories ) {
for ( Category category : categories ) {
<unk> ( category ) ;
}
Intent serviceIntent = new Intent ( <unk> . <unk> ) ;
serviceIntent . setClassName ( context , " ) ;
Category [ ] <unk> = categories . toArray ( new Category [ <num> ] ) ;
serviceIntent . putExtra ( <unk> . <unk> , <unk> ) ;
context . startService ( serviceIntent ) ;
}
private static void <unk> ( Category category ) {
Editor editor = preferences . edit ( ) ;
editor . putBoolean ( <unk> + category . <unk> ( ) , category . isChecked ( ) ) ;
editor . commit ( ) ;
}
public static void <unk> ( Category category ) {
category . setChecked ( preferences . getBoolean ( <unk> + category . <unk> ( ) , category . isChecked ( ) ) ) ;
}
public static ImageDownloader <unk> ( ) {
return <unk> ;
}
public static double getLat ( ) {
return lat ;
}
public static void setLat ( double lat ) {
<unk> . lat = lat ;
}
public static double <unk> ( ) {
return lng ;
}
public static void <unk> ( double lng ) {
<unk> . lng = lng ;
}
public static boolean isFirstLaunch ( ) {
return <unk> ;
}
public static void <unk> ( ) {
<unk> = false ;
Editor editor = preferences . edit ( ) ;
editor . putBoolean ( " , false ) ;
editor . commit ( ) ;
}
public static boolean <unk> ( ) {
return <unk> ;
}
public static void <unk> ( boolean <unk> ) {
<unk> . <unk> = <unk> ;
}
}
package com . <unk> ;
import java . util . List ;
import android . app . ListActivity ;
import android . content . BroadcastReceiver ;
import android . content . ComponentName ;
import android . content . Context ;
import android . content . Intent ;
import android . content . IntentFilter ;
import android . content . ServiceConnection ;
import android . os . Bundle ;
import android . os . IBinder ;
import android . view . Menu ;
import android . view . MenuItem ;
import android . view . View ;
import android . widget . ListView ;
import android . widget . TextView ;
import com . <unk> . adapters . POIAdapter ;
import com . <unk> . model . Coordinate ;
import com . <unk> . model . <unk> ;
import com . <unk> . utils . <unk> ;
public class <unk> extends ListActivity {
private final int <unk> = <num> ;
private List < <unk> > <unk> ;
private <unk> <unk> ;
private void <unk> ( ) {
if ( <unk> != null ) {
List < <unk> > list = <unk> . <unk> ( ) ;
<unk> = list . subList ( Math . max ( <num> , list . size ( )  <unk> ) , list . size ( ) ) ;
getListView ( ) . setVisibility ( View . VISIBLE ) ;
findViewById ( R . id . nodata ) . setVisibility ( View . INVISIBLE ) ;
getListView ( ) . setAdapter ( new POIAdapter ( <unk> ) ) ;
}
}
private ServiceConnection <unk> = new ServiceConnection ( ) {
public void onServiceConnected ( ComponentName className , IBinder <unk> ) {
<unk> = ( ( <unk> . LocalBinder ) <unk> ) . getService ( ) ;
<unk> ( ) ;
}
public void onServiceDisconnected ( ComponentName className ) {
<unk> = null ;
}
} ;
private BroadcastReceiver <unk> = new BroadcastReceiver ( ) {
public void onReceive ( Context context , Intent intent ) {
<unk> <unk> = ( <unk> ) intent . getSerializableExtra ( <unk> . <unk> ) ;
<unk> . <unk> ( <unk> , <unk> , <unk> ) ;
getListView ( ) . setVisibility ( View . VISIBLE ) ;
findViewById ( R . id . nodata ) . setVisibility ( View . INVISIBLE ) ;
getListView ( ) . setAdapter ( new POIAdapter ( <unk> ) ) ;
}
} ;
private BroadcastReceiver <unk> = new BroadcastReceiver ( ) {
public void onReceive ( Context context , Intent intent ) {
Coordinate currentLocation = ( Coordinate ) intent . getSerializableExtra ( <unk> . <unk> ) ;
<unk> . setLat ( currentLocation . lat ) ;
<unk> . <unk> ( currentLocation . lng ) ;
}
} ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
if ( <unk> . isFirstLaunch ( ) ) {
<unk> . <unk> ( ) ;
Intent intent = new Intent ( this , <unk> . class ) ;
startActivity ( intent ) ;
}
setContentView ( R . layout . <unk> ) ;
getListView ( ) . setSelector ( R . drawable . <unk> ) ;
getListView ( ) . setVisibility ( View . INVISIBLE ) ;
final TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> . setText ( getString ( R . string . <unk> ) ) ;
bindService ( new Intent ( this , <unk> . class ) , <unk> , BIND_AUTO_CREATE ) ;
}
@Override
protected void onListItemClick ( ListView l , View v , int position , long id ) {
try {
Intent intent = new Intent ( this , <unk> . class ) ;
<unk> <unk> = <unk> . get ( position ) ;
intent . putExtra ( <unk> . <unk> , <unk> ) ;
startActivity ( intent ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
@Override
public void onResume ( ) {
super . onResume ( ) ;
<unk> ( ) ;
registerReceiver ( <unk> , new IntentFilter ( <unk> . <unk> ) ) ;
registerReceiver ( <unk> , new IntentFilter ( <unk> . <unk> ) ) ;
}
@Override
public void onPause ( ) {
super . onPause ( ) ;
unregisterReceiver ( <unk> ) ;
unregisterReceiver ( <unk> ) ;
}
@Override
public void onDestroy ( ) {
super . onDestroy ( ) ;
unbindService ( <unk> ) ;
}
@Override
public boolean onOptionsItemSelected ( MenuItem item ) {
if ( item . getTitle ( ) . equals ( getString ( R . string . <unk> ) ) ) {
Intent intent = new Intent ( this , <unk> . class ) ;
intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ;
startActivity ( intent ) ;
return true ;
}
if ( item . getTitle ( ) . equals ( getString ( R . string . <unk> ) ) ) {
Intent intent = new Intent ( this , <unk> . class ) ;
intent . setFlags ( Intent . FLAG_ACTIVITY_REORDER_TO_FRONT ) ;
startActivity ( intent ) ;
return true ;
}
return false ;
}
@Override
public boolean onPrepareOptionsMenu ( Menu menu ) {
menu . clear ( ) ;
menu . add ( R . string . <unk> ) . setIcon ( android . R . drawable . ic_menu_preferences ) ;
menu . add ( R . string . <unk> ) . setIcon ( android . R . drawable . ic_menu_help ) ;
return super . onPrepareOptionsMenu ( menu ) ;
}
}
package com . <unk> . bukkit . <unk> . configuration ;
import java . io . File ;
import java . io . IOException ;
import java . io . InputStream ;
import org . bukkit . configuration . file . YamlConfiguration ;
import org . bukkit . plugin . java . JavaPlugin ;
public class Config extends YamlConfiguration {
private JavaPlugin plugin ;
private String file ;
public Config ( JavaPlugin plugin , String file ) {
this . plugin = plugin ;
this . file = file ;
this . reload ( ) ;
}
public void reload ( ) {
try { load ( new File ( plugin . getDataFolder ( ) , file ) ) ; } catch ( Exception e ) { }
try {
InputStream defConfigStream = plugin . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( file ) ;
if ( defConfigStream != null ) {
YamlConfiguration defConfig = YamlConfiguration . loadConfiguration ( defConfigStream ) ;
setDefaults ( defConfig ) ;
}
} catch ( Exception e ) { }
}
public boolean save ( ) {
try { this . save ( new File ( plugin . getDataFolder ( ) , file ) ) ; } catch ( IOException e ) { return false ; }
return true ;
}
}
package com . <unk> . bukkit . <unk> . <unk> ;
import org . bukkit . entity . Creeper ;
import org . bukkit . event . EventHandler ;
import org . bukkit . event . Listener ;
import org . bukkit . event . entity . EntityExplodeEvent ;
import com . <unk> . bukkit . <unk> . <unk> ;
import com . <unk> . bukkit . <unk> . <unk> ;
public class <unk> extends <unk> implements Listener {
public <unk> ( <unk> plugin ) { super ( plugin ) ; }
@EventHandler
public void <unk> ( EntityExplodeEvent event ) {
if ( event . isCancelled ( ) ) return ;
if ( ! ( event . getEntity ( ) instanceof Creeper ) ) return ;
event . <unk> ( ) . clear ( ) ;
}
@Override
public void start ( ) {
plugin . registerListener ( this ) ;
}
@Override
public void stop ( ) {
}
}
package com . <unk> . bukkit . <unk> ;
import org . bukkit . configuration . file . FileConfiguration ;
import org . bukkit . event . Listener ;
public interface <unk> {
public FileConfiguration getConfig ( ) ;
public void registerListener ( Listener mod ) ;
}
package com . <unk> . bukkit . <unk> . command ;
import org . bukkit . entity . Player ;
public interface <unk> {
public boolean onCommand ( Player player , String command , String [ ] args ) ;
}
package com . <unk> . bukkit . <unk> . <unk> ;
import java . util . ArrayList ;
import java . util . List ;
import org . bukkit . event . EventHandler ;
import org . bukkit . event . Listener ;
import org . bukkit . event . block . <unk> ;
import org . bukkit . event . block . <unk> ;
import org . bukkit . event . world . <unk> ;
import com . <unk> . bukkit . <unk> . configuration . * ;
import com . <unk> . bukkit . <unk> . <unk> ;
import com . <unk> . bukkit . <unk> . <unk> ;
public class <unk> extends <unk> implements Listener {
private Config <unk> = <unk> . getInstance ( ) . loadConfig ( " ) ;
public <unk> ( <unk> plugin ) {
super ( plugin ) ;
}
@Override
public void start ( ) {
plugin . registerListener ( this ) ;
}
@Override
public void stop ( ) {
}
private enum type { <unk> , <unk> , STRUCTURE } ;
@EventHandler
public void <unk> ( <unk> e ) {
<unk> ( type . <unk> , e . <unk> ( ) . getType ( ) . toString ( ) ) ;
}
@EventHandler
public void <unk> ( <unk> e ) {
<unk> ( type . <unk> , e . <unk> ( ) . getType ( ) . toString ( ) ) ;
}
@EventHandler
public void <unk> ( <unk> e ) {
<unk> ( type . STRUCTURE , e . getSpecies ( ) . name ( ) ) ;
}
private void <unk> ( type t , String i ) {
List < String > l = <unk> . getStringList ( t . name ( ) ) ;
if ( l == null ) l = new ArrayList < String > ( ) ;
if ( l . contains ( i ) ) return ;
l . add ( i ) ;
<unk> . set ( t . name ( ) , l ) ;
<unk> . save ( ) ;
}
}
package com . <unk> . bukkit . <unk> ;
import java . lang . reflect . Constructor ;
import java . util . ArrayList ;
import java . util . List ;
import java . util . logging . Logger ;
import org . bukkit . configuration . file . FileConfiguration ;
import org . bukkit . event . Listener ;
import org . bukkit . plugin . java . JavaPlugin ;
import com . <unk> . bukkit . <unk> . command . <unk> ;
import com . <unk> . bukkit . <unk> . configuration . <unk> ;
public class <unk> extends JavaPlugin implements <unk> {
public static <unk> plugin ;
public static Logger logger ;
private List < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
@Override
public void onDisable ( ) {
for ( <unk> mod : <unk> ) {
mod . stop ( ) ;
}
<unk> . clear ( ) ;
}
@Override
public void onEnable ( ) {
logger = getLogger ( ) ;
plugin = this ;
<unk> . install ( this ) ;
<unk> . install ( this ) ;
getConfig ( ) . options ( ) . copyDefaults ( true ) ;
saveConfig ( ) ;
FileConfiguration config = getConfig ( ) ;
List < String > mods = config . getStringList ( " ) ;
for ( String mod : mods ) {
try {
Class < ? > c = Class . forName ( mod ) ;
logger . info ( " + c . getCanonicalName ( ) ) ;
Constructor < ? > ct = c . getConstructor ( <unk> . class ) ;
<unk> <unk> = ( <unk> ) ct . newInstance ( this ) ;
<unk> . start ( ) ;
} catch ( Exception ex ) {
logger . severe ( " + mod ) ;
logger . severe ( ex . getMessage ( ) ) ;
ex . printStackTrace ( ) ;
}
}
}
@Override
public void registerListener ( Listener mod ) {
plugin . getServer ( ) . getPluginManager ( ) . registerEvents ( mod , plugin ) ;
}
}
package com . <unk> . bukkit . <unk> . <unk> ;
import java . util . HashMap ;
import org . bukkit . ChatColor ;
import org . bukkit . block . Block ;
import org . bukkit . entity . Player ;
import org . bukkit . event . EventHandler ;
import org . bukkit . event . Listener ;
import org . bukkit . event . block . SignChangeEvent ;
import com . <unk> . bukkit . <unk> . <unk> ;
import com . <unk> . bukkit . <unk> . <unk> ;
import com . <unk> . bukkit . <unk> . <unk> . <unk> . * ;
public class <unk> extends <unk> implements Listener {
public <unk> ( <unk> plugin ) {
super ( plugin ) ;
}
@Override
public void start ( ) {
plugin . registerListener ( this ) ;
plugin . registerListener ( new Receiver ( ) ) ;
plugin . registerListener ( new Sensor ( ) ) ;
}
@Override
public void stop ( ) {
}
private HashMap < String , Block > <unk> = new HashMap < String , Block > ( ) ;
@EventHandler
public void onSignChange ( SignChangeEvent event ) {
if ( event . isCancelled ( ) ) return ;
Player p = event . getPlayer ( ) ;
if ( ! p . hasPermission ( " ) ) {
boolean test = false ;
if ( event . getLine ( <num> ) . equals ( " ) ) test = true ;
else if ( event . getLine ( <num> ) . equals ( " ) ) test = true ;
else if ( event . getLine ( <num> ) . equals ( " ) ) test = true ;
if ( test ) {
event . setCancelled ( true ) ;
p . sendMessage ( " ) ;
}
return ;
}
if ( event . getLine ( <num> ) . equals ( " ) ) {
<unk> . put ( p . getName ( ) , event . getBlock ( ) ) ;
p . sendMessage ( " ) ;
return ;
}
if ( event . getLine ( <num> ) . equals ( " )
|| event . getLine ( <num> ) . equals ( " ) ) {
if ( ! <unk> . containsKey ( p . getName ( ) ) ) {
p . sendMessage ( ChatColor . RED + " ) ;
event . setCancelled ( true ) ;
return ;
}
Block t = <unk> . remove ( p . getName ( ) ) ;
event . setLine ( <num> , " + t . getLocation ( ) . getBlockX ( ) ) ;
event . setLine ( <num> , " + t . getLocation ( ) . getBlockY ( ) ) ;
event . setLine ( <num> , " + t . getLocation ( ) . getBlockZ ( ) ) ;
p . sendMessage ( ChatColor . GREEN + " ) ;
}
}
}
package com . <unk> . bukkit . <unk> . command ;
import java . util . Arrays ;
import java . util . List ;
public class Command {
private String cmd ;
private List < String > usage ;
private <unk> runner ;
public Command ( String cmd , List < String > usage , <unk> runner ) {
this . cmd = cmd ;
this . usage = usage ;
this . runner = runner ;
}
public Command ( String cmd , String [ ] usage , <unk> runner ) {
this ( cmd , ( List < String > ) Arrays . asList ( usage ) , runner ) ;
}
public String <unk> ( ) { return cmd ; }
public List < String > getUsage ( ) { return usage ; }
public <unk> <unk> ( ) { return runner ; }
}
package com . <unk> . bukkit . <unk> . <unk> . <unk> ;
import org . bukkit . Material ;
import org . bukkit . block . Block ;
import org . bukkit . block . Sign ;
import org . bukkit . event . EventHandler ;
import org . bukkit . event . Listener ;
import org . bukkit . event . block . <unk> ;
public class Receiver implements Listener {
@EventHandler
public void <unk> ( <unk> event ) {
if ( event . getBlock ( ) . getType ( ) != Material . <unk>
&& event . getBlock ( ) . getType ( ) != Material . <unk> ) return ;
Sign sign = ( Sign ) event . getBlock ( ) . getState ( ) ;
if ( ! sign . getLine ( <num> ) . equals ( " ) ) return ;
if ( ! sign . getLine ( <num> ) . matches ( " ) ) return ;
if ( ! sign . getLine ( <num> ) . matches ( " ) ) return ;
if ( ! sign . getLine ( <num> ) . matches ( " ) ) return ;
Block <unk> = event . getBlock ( ) . getWorld ( ) . getBlockAt (
Integer . parseInt ( sign . getLine ( <num> ) ) ,
Integer . parseInt ( sign . getLine ( <num> ) ) ,
Integer . parseInt ( sign . getLine ( <num> ) )
) ;
<unk> . setPowered ( <unk> , event . <unk> ( ) > <num> ) ;
}
}
package com . <unk> . bukkit . <unk> . <unk> ;
import java . util . Collections ;
import java . util . HashMap ;
import java . util . List ;
import org . bukkit . ChatColor ;
import org . bukkit . Material ;
import org . bukkit . block . Block ;
import org . bukkit . entity . Player ;
import org . bukkit . event . EventHandler ;
import org . bukkit . event . Listener ;
import org . bukkit . event . block . Action ;
import org . bukkit . event . player . PlayerInteractEvent ;
import com . <unk> . bukkit . <unk> . <unk> ;
import com . <unk> . bukkit . <unk> . <unk> ;
import com . <unk> . bukkit . <unk> . Tools ;
import com . <unk> . bukkit . <unk> . command . <unk> ;
import com . <unk> . bukkit . <unk> . command . <unk> ;
import com . <unk> . bukkit . <unk> . configuration . Config ;
import com . <unk> . bukkit . <unk> . configuration . <unk> ;
public class <unk> extends <unk> implements <unk> , Listener {
public <unk> ( <unk> plugin ) {
super ( plugin ) ;
}
private Config config ;
private HashMap < String , Block > <unk> = new HashMap < String , Block > ( ) ;
@Override
public void start ( ) {
<unk> . getInstance ( ) . addCommand ( " , new String [ ] {
" ,
" ,
" ,
" ,
" ,
" ,
"
} , this ) ;
plugin . registerListener ( this ) ;
config = <unk> . getInstance ( ) . loadConfig ( " ) ;
config . save ( ) ;
}
@Override
public void stop ( ) {
}
@Override
public boolean onCommand ( Player player , String command , String [ ] args ) {
if ( ! command . equals ( " ) ) return false ;
if ( args . length == <num> ) return false ;
if ( ! <unk> . containsKey ( player . getName ( ) ) ) { player . sendMessage ( ChatColor . RED + " ) ; return true ; }
if ( args [ <num> ] . equalsIgnoreCase ( " ) ) {
if ( config . save ( ) )
player . sendMessage ( ChatColor . GREEN + " ) ;
else
player . sendMessage ( ChatColor . RED + " ) ;
return true ;
}
if ( args [ <num> ] . equalsIgnoreCase ( " ) ) {
config . reload ( ) ;
player . sendMessage ( ChatColor . GREEN + " ) ;
return true ;
}
String <unk> = <unk> ( <unk> . get ( player . getName ( ) ) ) ;
if ( args [ <num> ] . equalsIgnoreCase ( " ) ) {
List < String > msgs = config . getStringList ( <unk> ) ;
int begin = <num> , end = msgs . size ( )  <num> ;
if ( args . length >= <num> ) {
if ( ! args [ <num> ] . matches ( " ) ) return false ;
begin = Integer . parseInt ( args [ <num> ] ) ;
}
if ( args . length >= <num> ) {
if ( ! args [ <num> ] . matches ( " ) ) return false ;
end = Integer . parseInt ( args [ <num> ] ) ;
}
if ( begin > end ) { int tmp = begin ; begin = end ; end = tmp ; }
if ( end > msgs . size ( )  <num> ) end = msgs . size ( )  <num> ;
for ( int i = begin ; i <= end ; i ++ ) {
player . sendMessage ( i + " + msgs . get ( i ) ) ;
}
return true ;
}
if ( args [ <num> ] . matches ( " ) ) {
if ( args . length < <num> ) return false ;
List < String > msgs = config . getStringList ( <unk> ) ;
String line = Tools . <unk> ( args , <num> ) ;
if ( args [ <num> ] . length ( ) > <num> ) {
int i = Integer . parseInt ( args [ <num> ] . substring ( <num> ) ) ;
if ( i > msgs . size ( ) ) {
player . sendMessage ( ChatColor . GRAY + " ) ;
i = msgs . size ( ) ;
}
msgs . add ( i , line ) ;
} else {
msgs . add ( line ) ;
}
config . set ( <unk> , msgs ) ;
player . sendMessage ( ChatColor . GREEN + " ) ;
return true ;
}
if ( args [ <num> ] . equalsIgnoreCase ( " ) ) {
if ( args . length < <num> ) return false ;
if ( ! args [ <num> ] . matches ( " ) ) return false ;
int i = Integer . parseInt ( args [ <num> ] ) ;
List < String > msgs = config . getStringList ( <unk> ) ;
if ( i > msgs . size ( )  <num> ) {
player . sendMessage ( ChatColor . RED + " ) ;
return true ;
}
msgs . set ( i , Tools . <unk> ( args , <num> ) ) ;
config . set ( <unk> , msgs ) ;
player . sendMessage ( ChatColor . GREEN + " ) ;
return true ;
}
if ( args [ <num> ] . equalsIgnoreCase ( " ) ) {
if ( args . length != <num> ) return false ;
if ( ! args [ <num> ] . matches ( " ) ) return false ;
int i = Integer . parseInt ( args [ <num> ] ) ;
List < String > msgs = config . getStringList ( <unk> ) ;
if ( i > msgs . size ( )  <num> ) {
player . sendMessage ( ChatColor . RED + " ) ;
return true ;
}
msgs . remove ( i ) ;
config . set ( <unk> , msgs ) ;
player . sendMessage ( ChatColor . GREEN + " ) ;
return true ;
}
if ( args [ <num> ] . equalsIgnoreCase ( " ) ) {
if ( args . length != <num> ) return false ;
config . set ( <unk> , null ) ;
player . sendMessage ( ChatColor . GREEN + " ) ;
return true ;
}
return false ;
}
@EventHandler
public void onPlayerInteract ( PlayerInteractEvent event ) {
if ( event . getAction ( ) != Action . RIGHT_CLICK_BLOCK ) return ;
if ( event . getClickedBlock ( ) . getType ( ) != Material . <unk>
&& event . getClickedBlock ( ) . getType ( ) != Material . <unk> ) return ;
if ( event . getItem ( ) == null ) return ;
if ( event . getItem ( ) . getType ( ) == Material . getMaterial ( config . getString ( " ) ) ) {
List < String > messages = config . getStringList ( <unk> ( event . getClickedBlock ( ) ) ) ;
if ( messages == null || messages . isEmpty ( ) ) return ;
new messageSender ( event . getPlayer ( ) , messages , config . getLong ( " ) ) . start ( ) ;
return ;
}
if ( event . getItem ( ) . getType ( ) == Material . getMaterial ( config . getString ( " ) ) ) {
if ( ! event . getPlayer ( ) . hasPermission ( " ) ) return ;
<unk> . put ( event . getPlayer ( ) . getName ( ) , event . getClickedBlock ( ) ) ;
event . getPlayer ( ) . sendMessage ( ChatColor . GREEN + " ) ;
event . getPlayer ( ) . sendMessage ( ChatColor . GOLD + " ) ;
return ;
}
}
private static String <unk> ( Block b ) {
return " + b . getWorld ( ) . getUID ( ) + " + Tools . <unk> ( b . getLocation ( ) . <unk> ( ) ) ;
}
class messageSender implements Runnable {
private Player p ;
private List < String > messages ;
private long delay ;
public messageSender ( Player p , List < String > messages , long delay ) {
this . p = p ;
this . messages = Collections . unmodifiableList ( messages ) ;
this . delay = delay ;
}
public void start ( ) {
new Thread ( this ) . start ( ) ;
}
public void run ( ) {
for ( String line : messages ) {
p . sendMessage ( line ) ;
try { Thread . sleep ( line . length ( ) * delay ) ; } catch ( InterruptedException ex ) { }
}
}
}
}
package com . <unk> . bukkit . <unk> . configuration ;
import java . util . HashMap ;
import org . bukkit . plugin . java . JavaPlugin ;
public class <unk> {
private static <unk> <unk> = null ;
public static void install ( JavaPlugin plugin ) {
<unk> = new <unk> ( plugin ) ;
}
public static <unk> getInstance ( ) { return <unk> ; }
private JavaPlugin plugin ;
private HashMap < String , Config > <unk> = new HashMap < String , Config > ( ) ;
private <unk> ( JavaPlugin plugin ) {
this . plugin = plugin ;
}
public Config loadConfig ( String config ) {
if ( ! <unk> . containsKey ( config ) ) {
Config c = new Config ( plugin , config ) ;
c . options ( ) . copyDefaults ( true ) ;
<unk> . put ( config , c ) ;
}
return <unk> . get ( config ) ;
}
}
package com . <unk> . bukkit . <unk> . command ;
import java . util . HashMap ;
import org . bukkit . ChatColor ;
import org . bukkit . event . EventHandler ;
import org . bukkit . event . Listener ;
import org . bukkit . event . player . PlayerCommandPreprocessEvent ;
import org . bukkit . plugin . java . JavaPlugin ;
public class <unk> implements Listener {
private static <unk> <unk> = null ;
private HashMap < String , Command > <unk> = new HashMap < String , Command > ( ) ;
public static <unk> getInstance ( ) { return <unk> ; }
public static void install ( JavaPlugin plugin ) { if ( <unk> == null ) <unk> = new <unk> ( plugin ) ; }
private <unk> ( JavaPlugin plugin ) {
plugin . getServer ( ) . getPluginManager ( ) . registerEvents ( this , plugin ) ;
}
public void addCommand ( String cmd , String [ ] usage , <unk> runner ) {
Command command = new Command ( cmd , usage , runner ) ;
<unk> . put ( cmd , command ) ;
}
@EventHandler
public void <unk> ( PlayerCommandPreprocessEvent event ) {
String [ ] parts = event . getMessage ( ) . split ( " ) ;
String cmd = parts [ <num> ] . toLowerCase ( ) ;
if ( ! cmd . startsWith ( " ) ) return ;
cmd = cmd . substring ( <num> ) ;
if ( ! <unk> . containsKey ( cmd ) ) return ;
String [ ] args = new String [ parts . length  <num> ] ;
for ( int i = <num> ; i < parts . length ; i ++ ) args [ i  <num> ] = parts [ i ] ;
Command <unk> = <unk> . get ( cmd ) ;
if ( ! <unk> . <unk> ( ) . onCommand ( event . getPlayer ( ) , cmd , args ) ) {
event . getPlayer ( ) . sendMessage ( ChatColor . RED + " + cmd + " ) ;
for ( String line : <unk> . getUsage ( ) ) {
event . getPlayer ( ) . sendMessage ( ChatColor . GRAY + " + line ) ;
}
}
event . setCancelled ( true ) ;
}
}
package com . <unk> . bukkit . <unk> ;
import java . util . HashMap ;
import java . util . regex . Matcher ;
import java . util . regex . Pattern ;
import java . util . regex . PatternSyntaxException ;
public class Tools {
public static String <unk> ( org . bukkit . util . Vector vector ) {
return new StringBuilder ( ) . append ( " ) . append ( vector . getBlockX ( ) ) . append ( " ) . append ( vector . getBlockY ( ) ) . append ( " ) . append ( vector . getBlockZ ( ) ) . toString ( ) ;
}
public static org . bukkit . util . Vector <unk> ( String hash ) {
String [ ] elements = <unk> ( " , hash , true ) ;
if ( elements . length != <num> ) return null ;
return new org . bukkit . util . Vector (
Integer . parseInt ( elements [ <num> ] ) ,
Integer . parseInt ( elements [ <num> ] ) ,
Integer . parseInt ( elements [ <num> ] )
) ;
}
public static String <unk> ( String [ ] strings ) { return <unk> ( strings , <num> , strings . length  <num> ) ; }
public static String <unk> ( String [ ] strings , int start ) { return <unk> ( strings , start , strings . length  <num> ) ; }
public static String <unk> ( String [ ] strings , int start , int end ) {
if ( start > end ) return " ;
if ( start < <num> ) start = <num> ;
if ( start > strings . length  <num> ) return " ;
if ( end > strings . length ) end = strings . length  <num> ;
StringBuilder sb = new StringBuilder ( strings [ start ] ) ;
for ( int i = start + <num> ; i <= end ; i ++ ) {
sb . append ( " ) . append ( strings [ i ] ) ;
}
return sb . toString ( ) ;
}
public static String [ ] <unk> ( String regex , String subject ) throws PatternSyntaxException {
return <unk> ( regex , subject , false ) ;
}
public static String [ ] <unk> ( String regex , String subject , boolean safe ) throws PatternSyntaxException {
Pattern pattern ;
if ( <unk> . containsKey ( regex ) ) {
pattern = <unk> . get ( regex ) ;
} else {
pattern = Pattern . compile ( regex ) ;
if ( safe ) <unk> . put ( regex , pattern ) ;
}
Matcher matcher = pattern . matcher ( subject ) ;
boolean matchFound = matcher . find ( ) ;
if ( ! matchFound ) return null ;
String [ ] lines = new String [ matcher . <unk> ( ) + <num> ] ;
for ( int i = <num> ; i <= matcher . <unk> ( ) ; i ++ )
lines [ i ] = matcher . group ( i ) ;
return lines ;
}
private static HashMap < String , Pattern > <unk> = new HashMap < String , Pattern > ( ) ;
}
package com . <unk> . bukkit . <unk> ;
public abstract class <unk> {
protected <unk> plugin ;
public <unk> ( <unk> plugin ) {
this . plugin = plugin ;
}
public abstract void start ( ) ;
public abstract void stop ( ) ;
}
package com . <unk> . bukkit . <unk> . <unk> . <unk> ;
import org . bukkit . block . Block ;
import org . bukkit . block . Sign ;
import org . bukkit . event . EventHandler ;
import org . bukkit . event . Listener ;
import org . bukkit . event . player . PlayerMoveEvent ;
public class Sensor implements Listener {
@EventHandler
public void onPlayerMove ( PlayerMoveEvent event ) {
if ( event . getFrom ( ) . getBlockX ( ) == event . getTo ( ) . getBlockX ( )
&& event . getFrom ( ) . getBlockY ( ) == event . getTo ( ) . getBlockY ( )
&& event . getFrom ( ) . getBlockZ ( ) == event . getTo ( ) . getBlockZ ( )
&& event . getFrom ( ) . getWorld ( ) == event . getTo ( ) . getWorld ( ) ) return ;
Block <unk> = event . getFrom ( ) . getBlock ( ) . getRelative ( <num> ,  <num> , <num> ) ;
Block <unk> = event . getTo ( ) . getBlock ( ) . getRelative ( <num> ,  <num> , <num> ) ;
Sign <unk> = null , <unk> = null ;
if ( <unk> . getState ( ) instanceof Sign ) {
<unk> = ( Sign ) <unk> . getState ( ) ;
if ( ! <unk> . getLine ( <num> ) . equals ( " ) ) <unk> = null ;
}
if ( <unk> . getState ( ) instanceof Sign ) {
<unk> = ( Sign ) <unk> . getState ( ) ;
if ( ! <unk> . getLine ( <num> ) . equals ( " ) ) <unk> = null ;
}
if ( <unk> != null && <unk> != null
&& <unk> . getLine ( <num> ) . equals ( <unk> . getLine ( <num> ) )
&& <unk> . getLine ( <num> ) . equals ( <unk> . getLine ( <num> ) )
&& <unk> . getLine ( <num> ) . equals ( <unk> . getLine ( <num> ) )
&& <unk> . getWorld ( ) == <unk> . getWorld ( ) ) return ;
if ( <unk> != null ) {
Block <unk> = <unk> . getWorld ( ) . getBlockAt (
Integer . parseInt ( <unk> . getLine ( <num> ) ) ,
Integer . parseInt ( <unk> . getLine ( <num> ) ) ,
Integer . parseInt ( <unk> . getLine ( <num> ) )
) ;
<unk> . setPowered ( <unk> , false ) ;
}
if ( <unk> != null ) {
Block <unk> = <unk> . getWorld ( ) . getBlockAt (
Integer . parseInt ( <unk> . getLine ( <num> ) ) ,
Integer . parseInt ( <unk> . getLine ( <num> ) ) ,
Integer . parseInt ( <unk> . getLine ( <num> ) )
) ;
<unk> . setPowered ( <unk> , true ) ;
}
}
}
package com . <unk> . bukkit . <unk> . <unk> ;
import org . bukkit . Material ;
import org . bukkit . block . Block ;
import org . bukkit . block . BlockFace ;
import org . bukkit . event . EventHandler ;
import org . bukkit . event . Listener ;
import org . bukkit . event . block . <unk> ;
import com . <unk> . bukkit . <unk> . <unk> ;
import com . <unk> . bukkit . <unk> . <unk> ;
public class <unk> extends <unk> implements Listener {
public <unk> ( <unk> plugin ) {
super ( plugin ) ;
}
@Override
public void start ( ) {
plugin . registerListener ( this ) ;
}
@Override
public void stop ( ) {
}
@EventHandler
public void <unk> ( <unk> event ) {
try {
if ( event . getBlock ( ) . getType ( ) == Material . <unk> ) {
Block b = event . getBlock ( ) ;
Block a = b . getRelative ( BlockFace . UP ) ;
if ( event . <unk> ( ) > <num> ) {
if ( a . getType ( ) != Material . AIR ) return ;
a . setType ( Material . FIRE ) ;
} else {
if ( a . getType ( ) != Material . FIRE ) return ;
a . setType ( Material . AIR ) ;
}
}
} catch ( Exception e ) { }
}
}
package com . <unk> . bukkit . <unk> . <unk> . <unk> ;
import org . bukkit . Material ;
import org . bukkit . block . Block ;
import org . bukkit . block . BlockFace ;
public class <unk> {
private <unk> ( ) { }
public static boolean isPowered ( Block block ) {
return block . getType ( ) == Material . REDSTONE_TORCH_ON || block . getType ( ) == Material . <unk> ;
}
public static void setPowered ( Block block , boolean <unk> ) {
if ( block . getType ( ) != Material . <unk>
&& block . getType ( ) != Material . REDSTONE_TORCH_ON
&& block . getType ( ) != Material . <unk> ) return ;
if ( <unk> == isPowered ( block ) ) return ;
Block tmp = block . getRelative ( BlockFace . DOWN ) ;
if ( ! tmp . getType ( ) . <unk> ( ) || tmp . isLiquid ( ) ) return ;
if ( <unk> ) {
block . <unk> ( Material . REDSTONE_TORCH_ON . getId ( ) , ( byte ) <num> , true ) ;
} else {
block . <unk> ( Material . <unk> . getId ( ) , ( byte ) <num> , true ) ;
org . bukkit . block . Sign sign = ( org . bukkit . block . Sign ) block . getState ( ) ;
sign . setLine ( <num> , " ) ;
sign . update ( true ) ;
}
}
}
import <unk> . linear . solver . <unk> ;
public class Example {
public static void main ( String [ ] args ) throws InterruptedException {
<unk> equations = new <unk> ( <num> ) ;
<unk> <unk> = new <unk> ( equations . getA ( ) , equations . <unk> ( ) , <num> ) ;
double s [ ] = <unk> . solve ( ) ;
}
}
class <unk> {
private double [ ] [ ] a ;
private double [ ] b ;
public <unk> ( int size ) {
a = new double [ size ] [ size ] ;
b = new double [ size ] ;
for ( int i = <num> ; i < size ; i ++ ) {
for ( int j = <num> ; j < size ; j ++ ) {
a [ i ] [ j ] = <num> ;
if ( i == j )
a [ i ] [ j ] = <num> ;
}
b [ i ] = <num> ;
}
}
public double [ ] [ ] getA ( ) {
return a ;
}
public double [ ] <unk> ( ) {
return b ;
}
}
package <unk> . linear . solver ;
public class <unk> {
private double [ ] [ ] a ;
private double [ ] b ;
private double [ ] x1 ;
private double [ ] x2 ;
private double [ ] <unk> ;
private int SIZE ;
private double <unk> ;
public <unk> ( double [ ] [ ] a , double [ ] b , double <unk> ) {
this . a = a ;
this . b = b ;
this . SIZE = b . length ;
this . x1 = new double [ this . SIZE ] ;
this . x2 = new double [ this . SIZE ] ;
this . <unk> = new double [ this . SIZE ] ;
this . <unk> = <unk> ;
}
public double [ ] solve ( ) {
double <unk> ;
double <unk> ;
long start = System . currentTimeMillis ( ) ;
do {
System . arraycopy ( x1 , <num> , <unk> , <num> , SIZE ) ;
System . arraycopy ( x2 , <num> , x1 , <num> , SIZE ) ;
for ( int i = <num> ; i < SIZE ; i ++ ) {
<unk> = <num> ;
<unk> = <num> ;
for ( int j = <num> ; j < i ; j ++ )
<unk> += ( a [ i ] [ j ] * x2 [ j ] ) ;
for ( int j = i + <num> ; j < SIZE ; j ++ )
<unk> += ( a [ i ] [ j ] * x1 [ j ] ) ;
x2 [ i ] = ( <unk> / a [ i ] [ i ] ) * ( b [ i ]  <unk>  <unk> )
+ ( ( <num>  <unk> ) * x1 [ i ] ) ;
}
} while ( <unk> ( <unk> ( x2 , x1 ) ) < <unk> ( <unk> ( x1 , <unk> ) ) ) ;
long end = System . currentTimeMillis ( ) ;
System . out . println ( " + ( end  start ) ) ;
return x2 ;
}
private double [ ] <unk> ( double [ ] <unk> , double [ ] <unk> ) {
double [ ] result = new double [ <unk> . length ] ;
for ( int i = <num> ; i < <unk> . length ; i ++ )
result [ i ] = <unk> [ i ]  <unk> [ i ] ;
return result ;
}
private double <unk> ( double [ ] vector ) {
double norm = <num> ;
for ( double <unk> : vector ) norm += <unk> * <unk> ;
return Math . sqrt ( norm ) ;
}
}
public class Main {
public static void main ( String [ ] args ) {
if ( args . length > <num> ) {
String s1 = args [ <num> ] ;
String s2 = args [ <num> ] ;
<unk> <unk> = new <unk> ( ) ;
System . out . println ( <unk> . <unk> ( s1 , s2 ) ) ;
} else {
System . out . println ( " ) ;
}
}
}
class <unk> {
private Node <unk> ;
private int beginIndex ;
private int endIndex ;
public <unk> ( Node <unk> , int beginIndex , int endIndex ) {
this . <unk> = <unk> ;
this . beginIndex = beginIndex ;
this . endIndex = endIndex ;
}
public boolean <unk> ( ) {
return beginIndex > endIndex ;
}
public boolean <unk> ( ) {
return endIndex >= beginIndex ;
}
public void <unk> ( ) {
if ( ! <unk> ( ) ) {
Edge edge = <unk> . <unk> ( <unk> . charAt ( beginIndex ) ) ;
int <unk> = edge . <unk> ( ) ;
while ( <unk> <= <unk> ( ) ) {
beginIndex += <unk> + <num> ;
<unk> = edge . <unk> ( ) ;
if ( beginIndex <= endIndex ) {
edge = edge . <unk> ( ) . <unk> ( <unk> . charAt ( beginIndex ) ) ;
<unk> = edge . <unk> ( ) ;
}
}
}
}
public int <unk> ( ) {
return endIndex  beginIndex ;
}
public Node <unk> ( ) {
return <unk> ;
}
public int <unk> ( ) {
return beginIndex ;
}
public void <unk> ( ) {
beginIndex ++ ;
}
public void <unk> ( ) {
<unk> = <unk> . <unk> ( ) ;
}
public int <unk> ( ) {
return endIndex ;
}
public void <unk> ( ) {
endIndex ++ ;
}
}
public class <unk> {
private String text ;
private Node root ;
private int <unk> ;
public <unk> ( String text ) {
<unk> = <num> ;
this . text = text ;
root = new Node ( this , null ) ;
<unk> active = new <unk> ( root , <num> ,  <num> ) ;
for ( int i = <num> ; i < text . length ( ) ; i ++ ) {
addPrefix ( active , i ) ;
}
}
private void addPrefix ( <unk> active , int endIndex ) {
Node <unk> = null ;
Node parentNode ;
while ( true ) {
Edge edge ;
parentNode = active . <unk> ( ) ;
if ( active . <unk> ( ) ) {
edge = active . <unk> ( ) . <unk> ( text . charAt ( endIndex ) ) ;
if ( edge != null )
break ;
} else {
edge = active . <unk> ( ) . <unk> ( text . charAt ( active . <unk> ( ) ) ) ;
int span = active . <unk> ( ) ;
if ( text . charAt ( edge . <unk> ( ) + span + <num> ) == text . charAt ( endIndex ) )
break ;
parentNode = edge . <unk> ( active ) ;
}
Edge newEdge = new Edge ( endIndex , text . length ( )  <num> , parentNode ) ;
newEdge . insert ( ) ;
<unk> ( <unk> , parentNode ) ;
<unk> = parentNode ;
if ( active . <unk> ( ) == root )
active . <unk> ( ) ;
else
active . <unk> ( ) ;
active . <unk> ( ) ;
}
<unk> ( <unk> , parentNode ) ;
active . <unk> ( ) ;
active . <unk> ( ) ;
}
private void <unk> ( Node node , Node <unk> ) {
if ( ( node != null ) && ( node != root ) ) {
node . <unk> ( <unk> ) ;
}
}
public int <unk> ( ) {
return <unk> ++ ;
}
public boolean contains ( String str ) {
return indexOf ( str ) >= <num> ;
}
public int indexOf ( String str ) {
if ( str . length ( ) == <num> )
return  <num> ;
int index =  <num> ;
Node node = root ;
int i = <num> ;
while ( i < str . length ( ) ) {
if ( ( node == null ) || ( i == text . length ( ) ) )
return  <num> ;
Edge edge = node . <unk> ( str . charAt ( i ) ) ;
if ( edge == null )
return  <num> ;
index = edge . <unk> ( )  i ;
i ++ ;
for ( int j = edge . <unk> ( ) + <num> ; j <= edge . <unk> ( ) ; j ++ ) {
if ( i == str . length ( ) )
break ;
if ( text . charAt ( j ) != str . charAt ( i ) )
return  <num> ;
i ++ ;
}
node = edge . <unk> ( ) ;
}
return index ;
}
public String getText ( ) {
return text ;
}
public Node getRootNode ( ) {
return root ;
}
}
import java . util . * ;
public class <unk> {
public static void main ( String [ ] args ) {
<unk> g = new <unk> ( " , " ) ;
System . out . println ( g . <unk> ( ) ) ;
}
public static final char <unk> = <unk> ;
public static final char <unk> = ' ;
private String texts [ ] ;
private String <unk> ;
private <unk> <unk> ;
public <unk> ( String text1 , String text2 ) {
this ( text1 , text2 , <unk> , <unk> ) ;
}
public <unk> ( String text1 , String text2 , char <unk> , char <unk> ) {
this . texts = new String [ ] { text1 , text2 } ;
char <unk> [ ] = new char [ ] { <unk> , <unk> } ;
StringBuilder sb = new StringBuilder ( ) ;
for ( int i = <num> ; i < texts . length ; i ++ ) {
sb . append ( texts [ i ] ) ;
sb . append ( <unk> [ i ] ) ;
}
<unk> = sb . toString ( ) ;
<unk> = new <unk> ( <unk> ) ;
}
private int <unk> ( int n ) {
int length = <num> ;
for ( int i = <num> ; i <= n ; i ++ ) {
length += texts [ i ] . length ( ) + <num> ;
}
return length  <num> ;
}
public String <unk> ( ) {
<unk> <unk> = <unk> ( ) ;
return texts [ <num> ] . substring ( <unk> . <unk> [ <num> ] , <unk> . <unk> [ <num> ] + <num> ) ;
}
public <unk> <unk> ( ) {
int <unk> [ ] = new int [ texts . length ] ;
int <unk> [ ] = new int [ texts . length ] ;
<unk> ( <unk> , <unk> ) ;
return <unk> ( <unk> , <unk> ) ;
}
private void <unk> ( int <unk> [ ] , int <unk> [ ] ) {
<unk> [ <num> ] = <num> ;
<unk> [ <num> ] = texts [ <num> ] . length ( ) ;
for ( int i = <num> ; i < texts . length ; i ++ ) {
<unk> [ i ] = <unk> [ i  <num> ] + <num> ;
<unk> [ i ] = <unk> [ i ] + texts [ i ] . length ( ) ;
}
}
public int [ ] <unk> ( ) {
int <unk> [ ] = new int [ texts . length ] ;
<unk> ( <unk> , new int [ texts . length ] ) ;
return <unk> ;
}
public int [ ] <unk> ( ) {
int <unk> [ ] = new int [ texts . length ] ;
<unk> ( new int [ texts . length ] , <unk> ) ;
return <unk> ;
}
public int [ ] <unk> ( int indexes [ ] ) {
for ( int i = <num> ; i < texts . length ; i ++ )
indexes [ i ] ++ ;
return indexes ;
}
public <unk> <unk> ( int <unk> [ ] , int <unk> [ ] ) {
Map < Node , <unk> > statuses = new HashMap < Node , <unk> > ( ) ;
<unk> ( <unk> . getRootNode ( ) , <num> , statuses ) ;
<unk> <unk> = <unk> ( <unk> , <unk> , statuses ) ;
statuses . clear ( ) ;
return <unk> ;
}
private <unk> <unk> ( int <unk> [ ] , int <unk> [ ] , Map < Node , <unk> > statuses ) {
int max = <num> ;
int <unk> [ ] = null ;
for ( <unk> status : statuses . values ( ) ) {
if ( ( status . getHeight ( ) > <num> ) && ( status . <unk> ( ) ) && ( max <= status . getHeight ( ) ) ) {
Node node = status . getNode ( ) ;
int <unk> [ ] = <unk> ( ) ;
<unk> ( <unk> , <unk> , node , status . getHeight ( ) ,
statuses , <unk> ) ;
if ( <unk> ( <unk> ) ) {
<unk> = <unk> ;
max = status . getHeight ( ) ;
}
}
}
if ( <unk> == null )
return null ;
return new <unk> ( <unk> , max ) ;
}
private int [ ] <unk> ( ) {
int <unk> [ ] = new int [ texts . length ] ;
for ( int i = <num> ; i < texts . length ; i ++ )
<unk> [ i ] = Integer . MAX_VALUE ;
return <unk> ;
}
private void <unk> ( int <unk> [ ] , int <unk> [ ] , Node node , int height ,
Map < Node , <unk> > statuses , int [ ] <unk> ) {
for ( Edge edge : node . getEdges ( ) ) {
<unk> <unk> = statuses . get ( edge . <unk> ( ) ) ;
if ( ( <unk> != null ) && <unk> . <unk> ( ) ) {
<unk> ( <unk> , <unk> , edge . <unk> ( ) ,
height + <unk> ( edge ) , statuses , <unk> ) ;
} else {
int <unk> = <unk> ( edge ) ;
int beginIndex = edge . <unk> ( )  height ;
if ( ( beginIndex < <unk> [ <unk> ] ) &&
( beginIndex >= <unk> [ <unk> ] ) &&
( <unk> [ <unk> ] > beginIndex ) ) {
<unk> [ <unk> ] = beginIndex ;
}
}
}
}
private boolean <unk> ( int [ ] <unk> ) {
for ( int i = <num> ; i < texts . length ; i ++ )
if ( <unk> [ i ] == Integer . MAX_VALUE )
return false ;
return true ;
}
private int <unk> ( Edge edge ) {
for ( int i = <num> ; i < texts . length ; i ++ ) {
if ( edge . <unk> ( ) <= <unk> ( i ) )
return i ;
}
return  <num> ;
}
private int <unk> ( Edge edge ) {
return edge . <unk> ( )  edge . <unk> ( ) ;
}
private int <unk> ( Edge edge ) {
int result = <unk> ( edge ) ;
int <unk> = <unk> ( edge ) ;
if ( edge . <unk> ( ) != <unk> ( <unk> ) )
result += <num> ;
return result ;
}
private <unk> <unk> ( Node node , int height , Map < Node , <unk> > statuses ) {
<unk> <unk> = new <unk> ( node , height ) ;
if ( node . getEdges ( ) . size ( ) == <num> ) {
return <unk> ;
}
for ( Edge edge : node . getEdges ( ) ) {
<unk> status = <unk> ( edge . <unk> ( ) ,
height + <unk> ( edge ) , statuses ) ;
status . addString ( <unk> ( edge ) ) ;
<unk> . <unk> ( status ) ;
}
statuses . put ( node , <unk> ) ;
return <unk> ;
}
public String <unk> ( ) {
return <unk> ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
private class <unk> {
private Node node ;
private boolean <unk> ;
private Set < Integer > <unk> ;
private int height ;
public <unk> ( Node node , int height ) {
this . node = node ;
<unk> = false ;
<unk> = new HashSet < Integer > ( ) ;
this . height = height ;
}
public boolean <unk> ( ) {
if ( ! <unk> ) {
for ( int i = <num> ; i < texts . length ; i ++ ) {
if ( ! <unk> . contains ( i ) )
return false ;
}
<unk> = true ;
}
return <unk> ;
}
public void addString ( int number ) {
if ( ! <unk> ( ) ) {
if ( ! <unk> . contains ( number ) )
<unk> . add ( number ) ;
}
}
public int getHeight ( ) {
return height ;
}
public Node getNode ( ) {
return node ;
}
public void <unk> ( <unk> status ) {
<unk> |= status . <unk> ;
if ( ! <unk> ( ) ) {
<unk> . addAll ( status . <unk> ) ;
}
}
}
public class <unk> {
private int <unk> [ ] ;
private int <unk> [ ] ;
public <unk> ( int <unk> [ ] , int <unk> [ ] ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public <unk> ( int <unk> [ ] , int max ) {
this . <unk> = <unk> ;
<unk> = new int [ texts . length ] ;
for ( int i = <num> ; i < texts . length ; i ++ ) {
<unk> [ i ] = <unk> [ i ] + max  <num> ;
}
}
public int [ ] <unk> ( ) {
return <unk> ;
}
public int [ ] <unk> ( ) {
return <unk> ;
}
}
}
public class Edge {
private int beginIndex ;
private int endIndex ;
private Node startNode ;
private Node <unk> ;
public Edge ( int beginIndex , int endIndex , Node startNode ) {
this . beginIndex = beginIndex ;
this . endIndex = endIndex ;
this . startNode = startNode ;
this . <unk> = new Node ( startNode , null ) ;
}
public Node <unk> ( <unk> suffix ) {
remove ( ) ;
Edge newEdge = new Edge ( beginIndex , beginIndex + suffix . <unk> ( ) , suffix . <unk> ( ) ) ;
newEdge . insert ( ) ;
newEdge . <unk> . <unk> ( suffix . <unk> ( ) ) ;
beginIndex += suffix . <unk> ( ) + <num> ;
startNode = newEdge . <unk> ( ) ;
insert ( ) ;
return newEdge . <unk> ( ) ;
}
public void insert ( ) {
startNode . addEdge ( beginIndex , this ) ;
}
public void remove ( ) {
startNode . removeEdge ( beginIndex ) ;
}
public int <unk> ( ) {
return endIndex  beginIndex ;
}
public int <unk> ( ) {
return beginIndex ;
}
public int <unk> ( ) {
return endIndex ;
}
public void <unk> ( int endIndex ) {
this . endIndex = endIndex ;
}
public Node <unk> ( ) {
return startNode ;
}
public void <unk> ( Node startNode ) {
this . startNode = startNode ;
}
public Node <unk> ( ) {
return <unk> ;
}
@Override
public String toString ( ) {
return <unk> . toString ( ) ;
}
import java . util . Arrays ;
public final class <unk> {
public String <unk> ( final String <unk> , final String <unk> ) {
final int m = <unk> . length ( ) ;
final int n = <unk> . length ( ) ;
if ( n > m ) {
return <unk> ( <unk> , <unk> ) ;
}
int maxLength = Math . min ( m , n ) ;
int [ ] last = new int [ maxLength ] ;
int [ ] next = new int [ maxLength ] ;
StringBuffer result = new StringBuffer ( ) ;
int len = <num> ;
final char [ ] a = <unk> . toCharArray ( ) ;
final char [ ] b = <unk> . toCharArray ( ) ;
for ( int i = <num> ; i < m ; i ++ ) {
for ( int j = <num> ; j < n ; j ++ ) {
if ( a [ i ] == b [ j ] ) {
next [ j ] = <num> + ( j  <num> >= <num> ? last [ j  <num> ] : <num> ) ;
if ( next [ j ] > len ) {
len = next [ j ] ;
result . setLength ( <num> ) ;
final int beginIndex = i  len + <num> ;
final int endIndex = len + beginIndex ;
result . append ( <unk> . subSequence ( beginIndex , endIndex ) ) ;
}
}
}
System . arraycopy ( next , <num> , last , <num> , maxLength ) ;
Arrays . fill ( next , <num> ) ;
}
return result . toString ( ) ;
}
}
import java . util . Collection ;
import java . util . HashMap ;
import java . util . Map ;
public class Node {
private <unk> <unk> ;
private Node <unk> ;
private Map < Character , Edge > edges ;
private int name ;
public Node ( Node node , Node <unk> ) {
this ( node . <unk> , <unk> ) ;
}
public Node ( <unk> <unk> , Node <unk> ) {
this . <unk> = <unk> ;
name = <unk> . <unk> ( ) ;
this . <unk> = <unk> ;
edges = new HashMap < Character , Edge > ( ) ;
}
public char charAt ( int index ) {
return <unk> . getText ( ) . charAt ( index ) ;
}
public void addEdge ( int charIndex , Edge edge ) {
edges . put ( charAt ( charIndex ) , edge ) ;
}
public void removeEdge ( int charIndex ) {
edges . remove ( charAt ( charIndex ) ) ;
}
public Edge <unk> ( char ch ) {
return edges . get ( ch ) ;
}
public Node <unk> ( ) {
return <unk> ;
}
public void <unk> ( Node <unk> ) {
this . <unk> = <unk> ;
}
public Collection < Edge > getEdges ( ) {
return edges . values ( ) ;
}
@Override
public String toString ( ) {
return ( ( Integer ) name ) . toString ( ) ;
}
@Override
public int hashCode ( ) {
return name ;
}
@Override
public boolean equals ( Object obj ) {
if ( this == obj )
return true ;
if ( ( obj == null ) || ( obj . getClass ( ) != this . getClass ( ) ) )
return false ;
Node node = ( Node ) obj ;
return name == node . name ;
}
}
public class Main {
public static void main ( String [ ] args ) {
if ( args . length > <num> ) {
String s1 = args [ <num> ] ;
String s2 = args [ <num> ] ;
<unk> g = new <unk> ( s1 , s2 ) ;
System . out . println ( g . <unk> ( ) ) ;
} else {
System . out . println ( " ) ;
}
}
}
public class <unk> {
public static void main ( String [ ] args ) {
System . out . println ( System . getProperty ( " ) ) ;
}
}
public class <unk> {
public static void main ( String [ ] args ) {
System . out . println ( " ) ;
}
}
package com . <unk> . <unk> ;
import java . util . ArrayList ;
import android . content . SharedPreferences ;
import android . os . Bundle ;
import android . preference . PreferenceManager ;
import android . util . Log ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . widget . Button ;
import android . widget . TextView ;
import android . widget . Toast ;
import com . <unk> . <unk> . core . Card ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . views . CardView ;
public class <unk> extends <unk> {
private final static int <unk> = <num> ;
private final static long <unk> = <num> ;
SharedPreferences mPrefs ;
<unk> <unk> = new <unk> ( ) ;
Button <unk> ;
TextView <unk> ;
<unk> <unk> = new <unk> ( ) ;
ArrayList < CardView > <unk> = new ArrayList < CardView > ( ) ;
int <unk> = <num> ;
int <unk> = <unk> ;
boolean <unk> = false ;
<unk> <unk> ;
final static int [ ] <unk> = {
R . layout . <unk> ,
R . layout . <unk> ,
R . layout . <unk>
} ;
@Override
public int getContentView ( ) {
return R . layout . classic ;
}
@Override
public int [ ] <unk> ( ) {
return <unk> ;
}
@Override
public void initGame ( ) {
mPrefs = PreferenceManager . getDefaultSharedPreferences ( this ) ;
<unk> = ( <unk> ) findViewById ( R . id . <unk> ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> ( ) ;
}
@Override
public void <unk> ( Bundle game ) {
if ( ! <unk> ( ) ) {
<unk> . newGame ( ) ;
<unk> = <num> ;
<unk> = <unk> ;
<unk> . clear ( ) ;
<unk> . clear ( ) ;
}
}
@Override
public Bundle <unk> ( Bundle <unk> ) {
saveGame ( ) ;
return <unk> ;
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
<unk> . <unk> ( <unk> . getTable ( ) ) ;
}
@Override
protected boolean <unk> ( ) {
return <unk> . <unk> ( ) ;
}
@Override
protected void <unk> ( ) {
<unk> . <unk> ( true ) ;
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
<unk> . <unk> ( ) ;
}
@Override
public void <unk> ( boolean won ) {
super . <unk> ( won ) ;
if ( won && <unk> ( ) ) {
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) ) ;
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) , <num> ) ;
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) , <num> ) ;
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) , getElapsedTime ( ) ) ;
}
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
<unk> . setText ( getString ( R . string . <unk> , <unk> ) ) ;
<unk> . setText ( " + <unk> . getGame ( ) . size ( ) ) ;
}
@Override
public void <unk> ( ) {
<unk> . <unk> ( ) ;
}
private void <unk> ( ) {
TextView <unk> = ( TextView ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
<unk> . setText ( <unk> ( true ) ) ;
<unk> . setText ( getString ( R . string . <unk> , <unk> ) ) ;
<unk> . setText ( getString ( R . string . <unk> , <unk> ) ) ;
}
@Override
public void <unk> ( ) {
<unk> ( ) ;
TextView statusView = ( TextView ) <unk> ( ) . findViewById ( R . id . gameStatus ) ;
statusView . setText ( getString ( R . string . <unk> , <unk> . getGame ( ) . size ( ) ) ) ;
Button buttonContinue = ( Button ) findViewById ( R . id . <unk> ) ;
buttonContinue . setText ( getString ( R . string . <unk> ) ) ;
buttonContinue . setVisibility ( View . VISIBLE ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
Button buttonQuit = ( Button ) findViewById ( R . id . <unk> ) ;
buttonQuit . setText ( getString ( R . string . <unk> ) ) ;
}
@Override
public void <unk> ( ) {
<unk> ( ) ;
TextView statusView = ( TextView ) <unk> ( ) . findViewById ( R . id . gameStatus ) ;
statusView . setText ( getString ( R . string . <unk> ) ) ;
Button buttonContinue = ( Button ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
buttonContinue . setVisibility ( View . GONE ) ;
Button <unk> = ( Button ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
Button buttonQuit = ( Button ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
buttonQuit . setText ( getString ( R . string . <unk> ) ) ;
}
private void <unk> ( ) {
<unk> . setOnItemClickListener ( new OnClickListener ( ) {
public void onClick ( View v ) {
CardView cv = ( CardView ) v ;
Card card = cv . getCard ( ) ;
if ( ! <unk> . contains ( card ) ) {
<unk> . add ( card ) ;
<unk> . add ( cv ) ;
cv . setSelected ( true ) ;
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " + card . toString ( ) ) ;
} else {
<unk> . remove ( card ) ;
<unk> . remove ( cv ) ;
cv . setSelected ( false ) ;
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " + card . toString ( ) ) ;
}
if ( <unk> . size ( ) == <num> ) {
if ( <unk> . <unk> ( ) ) {
<unk> ( <unk> , <unk> ) ;
} else {
<unk> ( <unk> , <unk> ) ;
}
<unk> . clear ( ) ;
<unk> . clear ( ) ;
} else {
<unk> ( ) ;
}
}
} ) ;
}
@Override
protected void onPause ( ) {
if ( ! <unk> ( ) ) {
saveGame ( ) ;
}
super . onPause ( ) ;
}
protected void <unk> ( <unk> <unk> ,
ArrayList < CardView > <unk> ) {
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " ) ;
<unk> ( ) ;
for ( CardView cv : <unk> ) {
cv . <unk> ( ) ;
}
if ( <unk> . <unk> ( ) ) {
<unk> ( <unk> ) ;
}
}
protected void <unk> ( <unk> <unk> ,
ArrayList < CardView > <unk> ) {
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " ) ;
<unk> ( ) ;
<unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> . getTable ( ) ) ;
<unk> . setText ( ( ( Integer ) <unk> . getGame ( ) . size ( ) ) . toString ( ) ) ;
<unk> += <num> ;
<unk> ( ) ;
if ( ! <unk> . getTable ( ) . <unk> ( ) && ! <unk> . getGame ( ) . hasNext ( ) ) {
endGame ( true ) ;
} else {
}
}
private boolean saveGame ( ) {
SharedPreferences . Editor ed = mPrefs . edit ( ) ;
ed . putString ( " , <unk> . <unk> ( ) ) ;
ed . putString ( " , <unk> . getGame ( ) . toString ( ) ) ;
ed . putString ( " , <unk> . getTable ( ) . toString ( ) ) ;
ed . putInt ( " , <unk> ) ;
ed . putInt ( " , <unk> ) ;
ed . putLong ( " , getElapsedTime ( ) ) ;
ed . putBoolean ( " , true ) ;
if ( ed . commit ( ) ) {
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " ) ;
return true ;
} else {
Log . e ( " , " ) ;
return false ;
}
}
private boolean <unk> ( ) {
SharedPreferences . Editor ed = mPrefs . edit ( ) ;
ed . putBoolean ( " , false ) ;
if ( ed . commit ( ) ) {
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " ) ;
return true ;
} else {
Log . e ( " , " ) ;
return false ;
}
}
private boolean <unk> ( ) {
if ( mPrefs . getBoolean ( " , false ) ) {
String game = mPrefs . getString ( " , " ) ;
String table = mPrefs . getString ( " , " ) ;
String <unk> = mPrefs . getString ( " , " ) ;
<unk> = mPrefs . getInt ( " , <unk> ) ;
<unk> = mPrefs . getInt ( " , <num> ) ;
setElapsedTime ( mPrefs . getLong ( " , <num> ) ) ;
if ( ! game . equals ( " ) && ! table . equals ( " ) ) {
<unk> . setGame ( <unk> . fromString ( <unk> . getDeck ( ) , game ) ) ;
<unk> . setTable ( <unk> . fromString ( <unk> . getDeck ( ) , table ) ) ;
<unk> . <unk> ( <unk> ) ;
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " ) ;
return true ;
} else {
Log . e ( " , " ) ;
}
}
return false ;
}
public void <unk> ( View v ) {
<unk> ( ) ;
if ( <unk> > <num> ) {
ArrayList < <unk> > <unk> = <unk> . getTable ( ) . <unk> ( ) ;
int <unk> = <unk> . size ( ) ;
if ( <unk> . size ( ) > <num> ) {
if ( <unk> == <num> ) {
Card selected = <unk> . get ( <num> ) ;
for ( <unk> <unk> : <unk> ) {
if ( <unk> . contains ( selected ) ) {
for ( Card c : <unk> ) {
if ( ! c . equals ( selected ) ) {
<unk> . add ( c ) ;
<unk> . add ( <unk> . select ( c ) ) ;
<unk> ( ) ;
if ( <unk> . LOCAL_LOGV )
Log . v ( " ,
" ) ;
return ;
}
}
}
}
} else if ( <unk> == <num> ) {
Card <unk> = <unk> . get ( <num> ) ;
Card <unk> = <unk> . get ( <num> ) ;
for ( <unk> <unk> : <unk> ) {
if ( <unk> . contains ( <unk> ) && <unk> . contains ( <unk> ) ) {
Toast . makeText ( getApplicationContext ( ) ,
getString ( R . string . <unk> ) ,
Toast . LENGTH_SHORT ) . show ( ) ;
return ;
}
}
}
<unk> . clear ( ) ;
Card <unk> = <unk> . get ( <num> ) . get ( <num> ) ;
<unk> . <unk> ( ) ;
<unk> . clear ( ) ;
<unk> . clear ( ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> . select ( <unk> ) ) ;
<unk> ( ) ;
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " ) ;
return ;
} else {
Log . e ( " ,
" ) ;
}
} else {
Toast . makeText ( this , getString ( R . string . <unk> ) ,
Toast . LENGTH_SHORT ) . show ( ) ;
}
}
public void <unk> ( ) {
<unk> -= <num> ;
<unk> . setText ( getString ( R . string . <unk> , <unk> ) ) ;
<unk> ( <unk> ) ;
}
public void <unk> ( View v ) {
<unk> ( ) ;
<unk> . newGame ( ) ;
resetGame ( ) ;
startGame ( ) ;
}
public void <unk> ( View v ) {
<unk> ( ) ;
if ( <unk> ( ) ) {
<unk> ( ) ;
} else {
saveGame ( ) ;
}
<unk> ( ) ;
finish ( ) ;
}
}
package com . <unk> . <unk> . core ;
import android . content . Context ;
import android . content . res . Resources ;
import android . graphics . BitmapFactory ;
import android . graphics . <unk> ;
import android . graphics . Paint ;
import android . graphics . Shader . TileMode ;
import android . graphics . drawable . BitmapDrawable ;
import com . <unk> . <unk> . R ;
public class <unk> {
private static BitmapDrawable <unk> ;
private static BitmapDrawable <unk> ;
private static <unk> <unk> ;
private static <unk> <unk> ;
private static <unk> <unk> ;
private static int <unk> ;
private static int <unk> ;
private static int <unk> ;
private static int <unk> ;
private static int strokeWidth ;
private static Paint bitmapPaint ;
private static boolean isInitialized = false ;
static public void initialize ( Context context ) {
if ( ! isInitialized ) {
Resources res = context . getResources ( ) ;
<unk> = ( BitmapDrawable ) res . getDrawable ( R . drawable . square ) ;
<unk> . setAntiAlias ( true ) ;
<unk> . setFilterBitmap ( true ) ;
<unk> = ( BitmapDrawable ) res . getDrawable ( R . drawable . <unk> ) ;
<unk> . setAntiAlias ( true ) ;
<unk> . setFilterBitmap ( true ) ;
<unk> = new <unk> ( BitmapFactory . decodeResource ( res , R . drawable . <unk> ) , TileMode . REPEAT , TileMode . REPEAT ) ;
<unk> = new <unk> ( BitmapFactory . decodeResource ( res , R . drawable . <unk> ) , TileMode . REPEAT , TileMode . REPEAT ) ;
<unk> = new <unk> ( BitmapFactory . decodeResource ( res , R . drawable . <unk> ) , TileMode . REPEAT , TileMode . REPEAT ) ;
<unk> = res . getColor ( R . color . white ) ;
<unk> = res . getColor ( R . color . green ) ;
<unk> = res . getColor ( R . color . blue ) ;
<unk> = res . getColor ( R . color . red ) ;
strokeWidth = res . getInteger ( R . integer . stroke ) ;
bitmapPaint = new Paint ( ) ;
bitmapPaint . setAntiAlias ( true ) ;
bitmapPaint . setFilterBitmap ( true ) ;
bitmapPaint . setDither ( true ) ;
isInitialized = true ;
}
}
static public BitmapDrawable <unk> ( boolean isSelected ) {
return isSelected ? <unk> : <unk> ;
}
static public <unk> <unk> ( int color ) {
switch ( color ) {
case Card . <unk> :
return <unk> ;
case Card . <unk> :
return <unk> ;
case Card . <unk> :
default :
return <unk> ;
}
}
static public int <unk> ( ) {
return <unk> ;
}
static public int <unk> ( int color ) {
switch ( color ) {
case Card . <unk> :
return <unk> ;
case Card . <unk> :
return <unk> ;
case Card . <unk> :
default :
return <unk> ;
}
}
static public int getStrokeWidth ( ) {
return strokeWidth ;
}
static public Paint <unk> ( ) {
return bitmapPaint ;
}
}
package com . <unk> . <unk> ;
import java . util . ArrayList ;
import java . util . List ;
import android . content . SharedPreferences ;
import android . os . Bundle ;
import android . preference . PreferenceManager ;
import android . text . TextUtils ;
import android . util . Log ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . view . animation . Animation ;
import android . view . animation . Animation . AnimationListener ;
import android . widget . Button ;
import android . widget . TextView ;
import android . widget . Toast ;
import com . <unk> . <unk> . core . Card ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . views . CardView ;
public class <unk> extends <unk> {
private static final String <unk> = " ;
private static final int <unk> = <num> ;
SharedPreferences mPrefs ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = new <unk> ( ) ;
ArrayList < CardView > <unk> = new ArrayList < CardView > ( ) ;
ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
<unk> <unk> ;
<unk> <unk> ;
private TextView <unk> ;
private boolean <unk> = false ;
private final int [ ] <unk> = {
R . layout . <unk> ,
R . layout . <unk> ,
R . layout . <unk>
} ;
@Override
public int getContentView ( ) {
return R . layout . <unk> ;
}
@Override
public int [ ] <unk> ( ) {
return <unk> ;
}
@Override
public void initGame ( ) {
mPrefs = PreferenceManager . getDefaultSharedPreferences ( this ) ;
<unk> = ( <unk> ) findViewById ( R . id . <unk> ) ;
<unk> = ( <unk> ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . gameStatus ) ;
<unk> ( ) ;
}
@Override
protected boolean <unk> ( ) {
return <unk> . <unk> ( ) ;
}
@Override
protected void <unk> ( ) {
<unk> . <unk> ( true ) ;
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
<unk> . <unk> ( ) ;
}
@Override
public void <unk> ( ) {
<unk> . <unk> ( ) ;
}
@Override
public Bundle <unk> ( Bundle <unk> ) {
List < String > <unk> = new ArrayList < String > ( ) ;
for ( <unk> <unk> : <unk> ) {
<unk> . add ( <unk> . toString ( ) ) ;
}
<unk> . putString ( " , <unk> . toString ( ) ) ;
<unk> . putString ( " , TextUtils . join ( <unk> , <unk> ) ) ;
<unk> . putLong ( " , getElapsedTime ( ) ) ;
return <unk> ;
}
@Override
public void <unk> ( Bundle savedInstanceState ) {
if ( savedInstanceState != null ) {
setElapsedTime ( savedInstanceState . getLong ( " ) ) ;
String <unk> = savedInstanceState . getString ( " ) ;
String challenge = savedInstanceState . getString ( " ) ;
<unk> three = new <unk> ( ) ;
<unk> . clear ( ) ;
if ( <unk> != null && ! <unk> . equals ( " ) ) {
for ( String card : TextUtils . split ( <unk> , <unk> ) ) {
three . addAll ( <unk> . fromString ( <unk> . getDeck ( ) , card ) ) ;
if ( three . size ( ) == <num> ) {
<unk> . add ( new <unk> ( three ) ) ;
three . clear ( ) ;
}
}
} else {
Log . d ( " , " ) ;
}
<unk> = new <unk> ( ) ;
<unk> = new ArrayList < CardView > ( ) ;
<unk> = <unk> . fromString ( <unk> . getDeck ( ) , challenge ) ;
} else {
setElapsedTime ( <num> ) ;
<unk> . clear ( ) ;
<unk> = new <unk> ( ) ;
<unk> = new ArrayList < CardView > ( ) ;
<unk> = <unk> . <unk> ( <unk> ) ;
}
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
if ( <unk> != null ) {
<unk> . <unk> ( <unk> ) ;
}
if ( <unk> != null ) {
<unk> . <unk> ( <num> ) ;
<unk> . <unk> ( R . drawable . <unk> ) ;
<unk> . <unk> ( ) ;
int index = <num> ;
for ( <unk> <unk> : <unk> ) {
<unk> . <unk> ( <unk> , index ) ;
<unk> . <unk> ( <unk> ) ;
index += <unk> . size ( ) ;
}
}
<unk> = false ;
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
<unk> . setText ( " + ( <unk>  <unk> . size ( ) ) ) ;
}
@Override
public void <unk> ( boolean won ) {
super . <unk> ( won ) ;
<unk> = won ;
if ( <unk> ( ) && <unk> ) {
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) , <num> ) ;
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) , <num> ) ;
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) , <num> ) ;
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) , getElapsedTime ( ) ) ;
}
}
private void <unk> ( ) {
<unk> . setOnItemClickListener ( new OnClickListener ( ) {
public void onClick ( View v ) {
CardView cv = ( CardView ) v ;
Card card = cv . getCard ( ) ;
if ( ! <unk> . contains ( card ) ) {
<unk> . add ( card ) ;
<unk> . add ( cv ) ;
cv . setSelected ( true ) ;
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " + card . toString ( ) ) ;
} else {
<unk> . remove ( card ) ;
<unk> . remove ( cv ) ;
cv . setSelected ( false ) ;
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " + card . toString ( ) ) ;
}
if ( <unk> . size ( ) == <num> ) {
if ( <unk> . <unk> ( ) ) {
<unk> ( <unk> , <unk> ) ;
} else {
<unk> ( <unk> , <unk> ) ;
}
<unk> . clear ( ) ;
<unk> . clear ( ) ;
} else {
<unk> ( ) ;
}
}
} ) ;
}
protected void <unk> ( <unk> <unk> , ArrayList < CardView > <unk> ) {
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " ) ;
<unk> ( ) ;
for ( CardView cv : <unk> ) {
cv . <unk> ( ) ;
}
if ( <unk> . <unk> ( ) ) {
<unk> ( <unk> ) ;
}
}
protected void <unk> ( <unk> <unk> , ArrayList < CardView > <unk> ) {
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " ) ;
<unk> ( ) ;
for ( CardView cv : <unk> ) {
cv . <unk> ( ) ;
}
if ( <unk> . <unk> ( ) ) {
Toast . makeText ( this , getString ( R . string . <unk> ) , Toast . LENGTH_SHORT ) . show ( ) ;
}
}
protected void <unk> ( <unk> <unk> , ArrayList < CardView > <unk> ) {
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " ) ;
boolean <unk> = false ;
for ( <unk> list : <unk> ) {
if ( <unk> . <unk> ( <unk> , list ) ) {
<unk> = true ;
}
}
if ( <unk> ) {
<unk> ( <unk> , <unk> ) ;
} else {
<unk> ( ) ;
<unk> . <unk> ( <unk> , <unk> . size ( ) * <num> ) ;
<unk> . add ( new <unk> ( <unk> ) ) ;
final ArrayList < CardView > views = new ArrayList < CardView > ( <unk> ) ;
<unk> . <unk> ( new AnimationListener ( ) {
public void onAnimationStart ( Animation animation ) { }
public void onAnimationRepeat ( Animation animation ) { }
public void onAnimationEnd ( Animation animation ) {
for ( CardView cv : views ) {
cv . setSelected ( false ) ;
cv . invalidate ( ) ;
cv . refreshDrawableState ( ) ;
}
}
} ) ;
<unk> . <unk> ( <unk> ) ;
<unk> ( ) ;
updateGame ( ) ;
}
if ( <unk> . size ( ) == <unk> ) {
endGame ( true ) ;
}
}
private void <unk> ( ) {
TextView <unk> = ( TextView ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
<unk> . setText ( <unk> ( true ) ) ;
}
@Override
public void <unk> ( ) {
<unk> ( ) ;
TextView <unk> = ( TextView ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
<unk> . setText ( getString ( R . string . <unk> , <unk> . size ( ) , <unk> ) ) ;
Button buttonContinue = ( Button ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
buttonContinue . setText ( R . string . <unk> ) ;
buttonContinue . setVisibility ( View . VISIBLE ) ;
Button <unk> = ( Button ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
<unk> <unk> = ( <unk> ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
<unk> . setVisibility ( View . INVISIBLE ) ;
}
@Override
public void <unk> ( ) {
<unk> ( ) ;
Button buttonContinue = ( Button ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
buttonContinue . setVisibility ( View . GONE ) ;
Button <unk> = ( Button ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
TextView statusView = ( TextView ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
<unk> <unk> = ( <unk> ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
if ( <unk> ) {
statusView . setText ( getString ( R . string . <unk> ) ) ;
<unk> . setVisibility ( View . INVISIBLE ) ;
} else {
statusView . setText ( getString ( R . string . <unk> , <unk>  <unk> . size ( ) ) ) ;
<unk> cards = <unk> . <unk> ( ) ;
ArrayList < <unk> > <unk> = cards . <unk> ( ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
<unk> . <unk> ( <unk> . difference ( <unk> , <unk> ) ) ;
<unk> . <unk> ( <num> ) ;
<unk> . render ( ) ;
}
}
public void <unk> ( View v ) {
<unk> ( ) ;
resetGame ( ) ;
startGame ( ) ;
}
public void <unk> ( View v ) {
<unk> ( ) ;
<unk> ( ) ;
finish ( ) ;
}
public void <unk> ( View v ) {
<unk> ( ) ;
endGame ( false ) ;
}
package com . <unk> . <unk> . tutorial ;
import com . <unk> . <unk> . core . Card ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
public class <unk> {
private Card <unk> ;
private Card <unk> ;
private Card solution ;
private boolean solved = false ;
private <unk> <unk> = null ;
public <unk> ( Card <unk> , Card <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public <unk> <unk> ( ) {
<unk> set = new <unk> ( ) ;
set . add ( <unk> ) ;
set . add ( <unk> ) ;
set . add ( <unk> . <unk> ( <unk> , <unk> ) ) ;
return set ;
}
public boolean <unk> ( ) {
return solved ;
}
public void <unk> ( boolean solved ) {
this . solved = solved ;
}
public Card <unk> ( ) {
return <unk> ;
}
public void <unk> ( Card <unk> ) {
this . <unk> = <unk> ;
}
public Card <unk> ( ) {
return <unk> ;
}
public void <unk> ( Card <unk> ) {
this . <unk> = <unk> ;
}
public Card <unk> ( ) {
if ( null == solution ) solution = <unk> . <unk> ( <unk> , <unk> ) ;
return solution ;
}
public void <unk> ( Card solution ) {
this . solution = solution ;
}
public <unk> <unk> ( <unk> deck , int <unk> ) {
if ( <unk> == null ) {
<unk> set = new <unk> ( ) ;
set . add ( <unk> ( ) ) ;
deck . shuffle ( ) ;
int i = <num> ;
do {
Card card = deck . get ( i ) ;
if ( ! card . isEqual ( <unk> ( ) ) && ! card . isEqual ( <unk> ( ) ) && ! card . isEqual ( <unk> ( ) ) ) {
set . add ( card ) ;
}
i ++ ;
} while ( set . size ( ) <= <unk> ) ;
<unk> = set ;
}
return <unk> ;
}
}
package com . <unk> . <unk> . views ;
import android . content . Context ;
import android . content . res . TypedArray ;
import android . util . AttributeSet ;
import android . widget . ImageView ;
import com . <unk> . <unk> . R ;
import com . <unk> . <unk> . views . <unk> . <unk> ;
public class <unk> extends ImageView {
private static final int [ ] <unk> = { R . attr . state_active } ;
private boolean mIsActive = false ;
private <unk> mType = null ;
public <unk> ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
TypedArray <unk> = context . obtainStyledAttributes ( attrs , R . styleable . <unk> ) ;
final int count = <unk> . getIndexCount ( ) ;
for ( int i = <num> ; i < count ; ++ i )
{
int attr = <unk> . getIndex ( i ) ;
if ( attr == R . styleable . <unk> ) {
mType = <unk> . valueOf ( <unk> . getString ( attr ) ) ;
}
}
<unk> . recycle ( ) ;
}
public void setActive ( boolean isActive ) {
mIsActive = isActive ;
refreshDrawableState ( ) ;
}
public boolean isActive ( ) {
return mIsActive ;
}
public <unk> getType ( ) {
return mType ;
}
@Override
public int [ ] onCreateDrawableState ( int extraSpace ) {
final int [ ] drawableState = super . onCreateDrawableState ( extraSpace + <num> ) ;
if ( isActive ( ) ) {
mergeDrawableStates ( drawableState , <unk> ) ;
}
return drawableState ;
}
}
package com . <unk> . <unk> . core ;
import java . util . ArrayList ;
import android . content . Context ;
import android . support . v4 . app . Fragment ;
import android . support . v4 . app . FragmentActivity ;
import android . support . v4 . app . FragmentPagerAdapter ;
public class <unk> extends FragmentPagerAdapter {
private Context mContext ;
private ArrayList < Fragment > mFragments = new ArrayList < Fragment > ( ) ;
public <unk> ( FragmentActivity context ) {
super ( context . getSupportFragmentManager ( ) ) ;
mContext = context ;
mFragments . clear ( ) ;
}
public void <unk> ( Class < ? > clss ) {
mFragments . add ( Fragment . instantiate ( mContext , clss . getName ( ) ) ) ;
}
@Override
public Fragment getItem ( int position ) {
return mFragments . get ( position ) ;
}
@Override
public int getCount ( ) {
return mFragments . size ( ) ;
}
}
package com . <unk> . <unk> . views ;
import android . content . Context ;
import android . graphics . Bitmap ;
import android . graphics . Bitmap . Config ;
import android . graphics . Canvas ;
import android . graphics . Matrix ;
import android . graphics . Paint ;
import android . graphics . Paint . Style ;
import android . graphics . Path ;
import android . graphics . PointF ;
import android . graphics . RectF ;
import android . util . AttributeSet ;
import android . view . View ;
import android . view . animation . Animation ;
import android . view . animation . Animation . AnimationListener ;
import android . view . animation . AnimationUtils ;
import android . widget . ImageView ;
import com . <unk> . <unk> . R ;
import com . <unk> . <unk> . core . Card ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
public class CardView extends ImageView {
private Card card = null ;
private Bitmap <unk> = null ;
private boolean <unk> = true ;
public CardView ( Context context , AttributeSet attrs , int defStyle ) {
super ( context , attrs , defStyle ) ;
}
public CardView ( Context context , AttributeSet attrs ) {
this ( context , attrs , <num> ) ;
}
public CardView ( Context context ) {
this ( context , null ) ;
}
public Card getCard ( ) {
return card ;
}
public void setCard ( Card card ) {
this . card = card ;
if ( <unk> != null ) {
<unk> . recycle ( ) ;
}
<unk> = null ;
invalidate ( ) ;
refreshDrawableState ( ) ;
}
public boolean <unk> ( ) {
return <unk> ;
}
public void <unk> ( boolean <unk> ) {
this . <unk> = <unk> ;
}
@Override
public void setSelected ( boolean selected ) {
super . setSelected ( selected ) ;
this . <unk> = null ;
}
@Override
protected void onDraw ( Canvas canvas ) {
if ( null != card ) {
if ( null == this . <unk> && getWidth ( ) > <num> && getHeight ( ) > <num> ) {
this . <unk> = Bitmap . createBitmap ( getWidth ( ) , getHeight ( ) ,
Config . ARGB_8888 ) ;
Canvas <unk> = new Canvas ( this . <unk> ) ;
Bitmap square = <unk> . <unk> ( isSelected ( ) ) . getBitmap ( ) ;
float <unk> = ( float ) getWidth ( ) / square . getWidth ( ) ;
float <unk> = ( float ) getHeight ( ) / square . getHeight ( ) ;
int <unk> = <num> , <unk> = <num> ;
if ( <unk> > <unk> ) {
<unk> = ( getWidth ( )  getHeight ( ) ) / <num> ;
} else {
<unk> = ( getHeight ( )  getWidth ( ) ) / <num> ;
}
float ratio = Math . min ( <unk> , <unk> ) ;
Matrix matrix = new Matrix ( ) ;
matrix . postScale ( ratio , ratio ) ;
<unk> . drawBitmap ( Bitmap . createBitmap ( square , <num> , <num> , square . getWidth ( ) , square . getHeight ( ) , matrix , false ) , <unk> , <unk> , <unk> . <unk> ( ) ) ;
drawCard ( <unk> , card , ( int ) ( square . getWidth ( ) * ratio ) , ( int ) ( square . getHeight ( ) * ratio ) , <unk> , <unk> ) ;
}
if ( this . <unk> != null && this . <unk> && getWidth ( ) > <num> && getHeight ( ) > <num> ) {
canvas . drawBitmap ( this . <unk> , <num> , <num> , null ) ;
} else {
super . onDraw ( canvas ) ;
}
} else {
super . onDraw ( canvas ) ;
}
}
public Canvas drawCard ( Canvas canvas , Card card , int width , int height , int <unk> , int <unk> ) {
PointF [ ] points = { } ;
float <unk> = width / <num> ;
float <unk> = height / <num> ;
PointF point1 , point2 , <unk> ;
switch ( card . getNumber ( ) ) {
case Card . <unk> :
point1 = new PointF ( ( width  <unk> ) / <num> + <unk> ,
( height  <unk> ) / <num> + <unk> ) ;
points = new PointF [ ] { point1 } ;
break ;
case Card . <unk> :
point1 = new PointF ( width / <num>  <unk> / <num> + <unk> , height / <unk>
<unk> / <num> + <unk> ) ;
point2 = new PointF ( <num> * width / <num>  <num> * <unk> / <num> + <unk> , <num> * height / <unk>
2 * <unk> / <num> + <unk> ) ;
points = new PointF [ ] { point1 , point2 } ;
break ;
case Card . <unk> :
point1 = new PointF ( width / <num>  <unk> / <num> + <unk> , height / <unk>
<unk> / <num> + <unk> ) ;
point2 = new PointF ( <num> * width / <num>  <num> * <unk> / <num> + <unk> , height / <unk>
<unk> / <num> + <unk> ) ;
<unk> = new PointF ( width / <num>  <unk> / <num> + <unk> , <num> * height / <unk>
2 * <unk> / <num> + <unk> ) ;
points = new PointF [ ] { point1 , point2 , <unk> } ;
break ;
}
Paint paint = new Paint ( ) ;
Paint <unk> = new Paint ( ) ;
Paint whitePaint = new Paint ( ) ;
whitePaint . setStyle ( Style . FILL ) ;
whitePaint . setAntiAlias ( true ) ;
whitePaint . setColor ( <unk> . <unk> ( ) ) ;
<unk> . setStyle ( Style . FILL ) ;
<unk> . setAntiAlias ( true ) ;
paint . setAntiAlias ( true ) ;
paint . setStrokeWidth ( <num> ) ;
paint . setColor ( <unk> . <unk> ( card . getColor ( ) ) ) ;
<unk> . setShader ( <unk> . <unk> ( card . getColor ( ) ) ) ;
switch ( card . <unk> ( ) ) {
case Card . <unk> :
paint . setStyle ( Style . FILL_AND_STROKE ) ;
break ;
case Card . <unk> :
paint . setStyle ( Style . STROKE ) ;
paint . setStrokeWidth ( <unk> . getStrokeWidth ( ) ) ;
break ;
case Card . <unk> :
paint . setStyle ( Style . STROKE ) ;
paint . setStrokeWidth ( <unk> . getStrokeWidth ( ) ) ;
break ;
}
for ( int i = <num> ; i < ( card . getNumber ( ) + <num> ) ; i ++ ) {
switch ( card . getShape ( ) ) {
case Card . <unk> :
if ( Card . <unk> == card . <unk> ( ) ) {
canvas . drawCircle ( points [ i ] . x + <unk> / <num> , points [ i ] . y + <unk> / <num> ,
<unk> / <num> , <unk> ) ;
}
if ( Card . <unk> == card . <unk> ( ) ) {
canvas . drawCircle ( points [ i ] . x + <unk> / <num> , points [ i ] . y + <unk> / <num> ,
<unk> / <num> , whitePaint ) ;
}
canvas . drawCircle ( points [ i ] . x + <unk> / <num> , points [ i ] . y + <unk> / <num> ,
<unk> / <num> , paint ) ;
break ;
case Card . <unk> :
RectF rect = new RectF ( points [ i ] . x , points [ i ] . y , points [ i ] . x
+ <unk> , points [ i ] . y + <unk> ) ;
if ( Card . <unk> == card . <unk> ( ) ) {
canvas . drawRect ( rect , <unk> ) ;
}
if ( Card . <unk> == card . <unk> ( ) ) {
canvas . drawRect ( rect , whitePaint ) ;
}
canvas . drawRect ( rect , paint ) ;
break ;
case Card . <unk> :
Path path = new Path ( ) ;
PointF top = new PointF ( points [ i ] . x + <unk> / <num> , points [ i ] . y + <num> * <unk> ) ;
PointF <unk> = new PointF ( points [ i ] . x , points [ i ] . y + <unk> ) ;
PointF <unk> = new PointF ( points [ i ] . x + <unk> , points [ i ] . y + <unk> ) ;
path . moveTo ( top . x , top . y ) ;
path . lineTo ( <unk> . x , <unk> . y ) ;
path . lineTo ( <unk> . x , <unk> . y ) ;
path . lineTo ( top . x , top . y ) ;
path . close ( ) ;
if ( Card . <unk> == card . <unk> ( ) ) {
canvas . drawPath ( path , whitePaint ) ;
}
if ( Card . <unk> == card . <unk> ( ) ) {
canvas . drawPath ( path , <unk> ) ;
}
canvas . drawPath ( path , paint ) ;
}
}
return canvas ;
}
public void <unk> ( ) {
this . <unk> = null ;
}
private AnimationListener <unk> = null ;
private AnimationListener <unk> = null ;
private AnimationListener <unk> = null ;
private AnimationListener <unk> ;
private AnimationListener <unk> ;
public void <unk> ( AnimationListener <unk> ) {
<unk> = <unk> ;
}
public void <unk> ( ) {
Animation <unk> = new <unk> ( ) ;
<unk> . setAnimationListener ( new AnimationListener ( ) {
public void onAnimationStart ( Animation animation ) {
if ( <unk> != null ) <unk> . onAnimationStart ( animation ) ;
}
public void onAnimationRepeat ( Animation animation ) {
if ( <unk> != null ) <unk> . onAnimationRepeat ( animation ) ;
}
public void onAnimationEnd ( Animation animation ) {
invalidate ( ) ;
refreshDrawableState ( ) ;
setSelected ( false ) ;
if ( <unk> != null ) <unk> . onAnimationEnd ( animation ) ;
}
} ) ;
startAnimation ( <unk> ) ;
}
public void <unk> ( AnimationListener animationListener ) {
<unk> = animationListener ;
}
public void <unk> ( final Card <unk> ) {
int duration = getResources ( ) . getInteger ( R . integer . <unk> ) ;
<unk> ( <unk> , duration ) ;
}
public void <unk> ( Card card , int duration ) {
<unk> ( card , duration , <num> ) ;
}
public void <unk> ( ) {
Animation <unk> = getAnimation ( ) ;
if ( <unk> != null ) {
<unk> . setAnimationListener ( null ) ;
<unk> . cancel ( ) ;
}
}
public void <unk> ( final Card <unk> , int duration , int delay ) {
final Animation <unk> = new <unk> ( <num> , <num> ) ;
final Animation <unk> = new <unk> ( <num> , <num> ) ;
<unk> . setDuration ( duration ) ;
<unk> . <unk> ( delay ) ;
<unk> . setDuration ( duration ) ;
<unk> . setAnimationListener ( new AnimationListener ( ) {
public void onAnimationStart ( Animation animation ) {
}
public void onAnimationRepeat ( Animation animation ) {
}
public void onAnimationEnd ( Animation animation ) {
setSelected ( false ) ;
invalidate ( ) ;
refreshDrawableState ( ) ;
if ( <unk> != null ) <unk> . onAnimationEnd ( animation ) ;
}
} ) ;
<unk> . setAnimationListener ( new AnimationListener ( ) {
public void onAnimationStart ( Animation animation ) {
if ( <unk> != null ) <unk> . onAnimationStart ( animation ) ;
}
public void onAnimationRepeat ( Animation animation ) {
}
public void onAnimationEnd ( Animation animation ) {
setCard ( <unk> ) ;
setSelected ( false ) ;
invalidate ( ) ;
refreshDrawableState ( ) ;
startAnimation ( <unk> ) ;
}
} ) ;
startAnimation ( <unk> ) ;
}
public void <unk> ( AnimationListener animationListener ) {
<unk> = animationListener ;
}
public void <unk> ( ) {
Animation <unk> = AnimationUtils . loadAnimation ( getContext ( ) , R . anim . <unk> ) ;
final Animation <unk> = AnimationUtils . loadAnimation ( getContext ( ) , R . anim . <unk> ) ;
<unk> . setAnimationListener ( new AnimationListener ( ) {
public void onAnimationStart ( Animation animation ) {
}
public void onAnimationRepeat ( Animation animation ) {
}
public void onAnimationEnd ( Animation animation ) {
invalidate ( ) ;
refreshDrawableState ( ) ;
setSelected ( false ) ;
if ( <unk> != null ) <unk> . onAnimationEnd ( animation ) ;
}
} ) ;
<unk> . setAnimationListener ( new AnimationListener ( ) {
public void onAnimationStart ( Animation animation ) {
<unk> ( false ) ;
if ( <unk> != null ) <unk> . onAnimationStart ( animation ) ;
}
public void onAnimationRepeat ( Animation animation ) {
}
public void onAnimationEnd ( Animation animation ) {
setSelected ( false ) ;
invalidate ( ) ;
refreshDrawableState ( ) ;
<unk> ( true ) ;
startAnimation ( <unk> ) ;
}
} ) ;
startAnimation ( <unk> ) ;
}
public void <unk> ( AnimationListener animationListener ) {
<unk> = animationListener ;
}
public void <unk> ( ) {
Animation <unk> = AnimationUtils . loadAnimation ( getContext ( ) , R . anim . <unk> ) ;
<unk> . setAnimationListener ( new AnimationListener ( ) {
public void onAnimationStart ( Animation animation ) {
if ( <unk> != null ) <unk> . onAnimationStart ( animation ) ;
}
public void onAnimationRepeat ( Animation animation ) {
if ( <unk> != null ) <unk> . onAnimationRepeat ( animation ) ;
}
public void onAnimationEnd ( Animation animation ) {
setVisibility ( View . GONE ) ;
if ( <unk> != null ) <unk> . onAnimationEnd ( animation ) ;
}
} ) ;
startAnimation ( <unk> ) ;
}
public void <unk> ( AnimationListener animationListener ) {
<unk> = animationListener ;
}
public void <unk> ( ) {
Animation <unk> = AnimationUtils . loadAnimation ( getContext ( ) , R . anim . <unk> ) ;
<unk> . setAnimationListener ( new AnimationListener ( ) {
public void onAnimationStart ( Animation animation ) {
if ( <unk> != null ) <unk> . onAnimationStart ( animation ) ;
}
public void onAnimationRepeat ( Animation animation ) {
if ( <unk> != null ) <unk> . onAnimationRepeat ( animation ) ;
}
public void onAnimationEnd ( Animation animation ) {
setVisibility ( View . VISIBLE ) ;
if ( <unk> != null ) <unk> . onAnimationEnd ( animation ) ;
}
} ) ;
startAnimation ( <unk> ) ;
}
public void <unk> ( int width , int height ) {
setMeasuredDimension ( width , height ) ;
}
}
package com . <unk> . <unk> . tutorial ;
import android . os . Bundle ;
import android . support . v4 . app . Fragment ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import com . <unk> . <unk> . R ;
import com . <unk> . <unk> . core . Card ;
import com . <unk> . <unk> . tutorial . <unk> . <unk> ;
import com . <unk> . <unk> . views . CardView ;
abstract public class <unk> extends <unk> {
@Override
public View onCreateView ( LayoutInflater inflater , ViewGroup container ,
Bundle savedInstanceState ) {
return inflater . inflate ( R . layout . <unk> , container , false ) ;
}
static public class <unk> extends <unk> {
@Override
<unk> getType ( ) {
return <unk> . <unk> ;
}
}
static public class <unk> extends <unk> {
@Override
<unk> getType ( ) {
return <unk> . <unk> ;
}
}
static public class <unk> extends <unk> {
@Override
<unk> getType ( ) {
return <unk> . <unk> ;
}
}
static public class <unk> extends <unk> {
@Override
<unk> getType ( ) {
return <unk> . <unk> ;
}
}
static public class <unk> extends <unk> {
@Override
<unk> getType ( ) {
return <unk> . <unk> ;
}
}
static public class <unk> extends <unk> {
@Override
<unk> getType ( ) {
return <unk> . <unk> ;
}
}
}
package com . <unk> . <unk> . tutorial ;
import android . os . Bundle ;
import android . support . v4 . app . Fragment ;
import android . util . Log ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . TextView ;
import com . <unk> . <unk> . R ;
import com . <unk> . <unk> . core . Card ;
import com . <unk> . <unk> . views . CardView ;
abstract public class <unk> extends Fragment {
@Override
public void onActivityCreated ( Bundle savedInstanceState ) {
super . onActivityCreated ( savedInstanceState ) ;
<unk> details = getType ( ) ;
<unk> ( R . id . card1 , details . card1 ) ;
<unk> ( R . id . card2 , details . card2 ) ;
<unk> ( R . id . <unk> , details . <unk> ) ;
( ( TextView ) getView ( ) . findViewById ( R . id . <unk> ) ) . setText ( getString ( details . <unk> ) ) ;
}
private void <unk> ( int resourceId , Card card ) {
CardView <unk> = ( CardView ) getView ( ) . findViewById ( resourceId ) ;
if ( <unk> != null ) {
<unk> . setCard ( card ) ;
} else {
Log . e ( " , " ) ;
}
}
@Override
public View onCreateView ( LayoutInflater inflater , ViewGroup container ,
Bundle savedInstanceState ) {
return inflater . inflate ( R . layout . <unk> , container , false ) ;
}
abstract <unk> getType ( ) ;
enum <unk> {
COLOR (
R . string . <unk> ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> )
) ,
QUANTITY (
R . string . <unk> ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> )
) ,
FILL (
R . string . <unk> ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> )
) ,
<unk> (
R . string . <unk> ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> )
) ,
<unk> (
R . string . <unk> ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> )
) ,
<unk> (
R . string . <unk> ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> )
) ,
<unk> (
R . string . <unk> ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> )
) ,
<unk> (
R . string . <unk> ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> )
) ,
<unk> (
R . string . <unk> ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> )
) ,
<unk> (
R . string . <unk> ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> )
)
;
public Card card1 ;
public Card card2 ;
public Card <unk> ;
public int <unk> ;
<unk> ( int <unk> , Card card1 , Card card2 , Card <unk> ) {
this . <unk> = <unk> ;
this . card1 = card1 ;
this . card2 = card2 ;
this . <unk> = <unk> ;
}
}
static public class <unk> extends <unk> {
@Override
<unk> getType ( ) {
return <unk> . <unk> ;
}
}
static public class <unk> extends <unk> {
@Override
<unk> getType ( ) {
return <unk> . COLOR ;
}
}
static public class <unk> extends <unk> {
@Override
<unk> getType ( ) {
return <unk> . QUANTITY ;
}
}
static public class <unk> extends <unk> {
@Override
<unk> getType ( ) {
return <unk> . FILL ;
}
}
}
package com . <unk> . <unk> . views ;
import com . <unk> . <unk> . core . <unk> ;
import android . content . Context ;
import android . support . v4 . view . <unk> ;
import android . util . AttributeSet ;
import android . util . Log ;
import android . view . MotionEvent ;
import android . widget . RelativeLayout ;
public class <unk> extends RelativeLayout {
private <unk> mListener = null ;
private final int SWIPE_MIN_DISTANCE = <num> ;
private boolean <unk> = false ;
private float <unk> = <num> ;
public <unk> ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
}
public void <unk> ( <unk> listener ) {
mListener = listener ;
}
public <unk> <unk> ( ) {
return mListener ;
}
public interface <unk> {
public void onUp ( int diff ) ;
public void <unk> ( int diff , boolean isMoving ) ;
public void onDown ( int diff ) ;
public void <unk> ( int diff ) ;
}
@Override
public boolean onTouchEvent ( MotionEvent event ) {
int action = <unk> . getActionMasked ( event ) ;
int diff ;
switch ( action ) {
case MotionEvent . ACTION_DOWN :
<unk> = event . getY ( ) ;
return true ;
case MotionEvent . ACTION_MOVE :
diff = Math . round ( event . getY ( )  <unk> ) ;
<unk> = Math . abs ( diff ) > SWIPE_MIN_DISTANCE ;
if ( <unk> . <unk> )
Log . d ( " , " + diff ) ;
if ( mListener != null ) {
mListener . <unk> ( diff , <unk> ) ;
}
return true ;
case MotionEvent . ACTION_CANCEL :
case MotionEvent . ACTION_UP :
diff = Math . round ( event . getY ( )  <unk> ) ;
if ( <unk> ) {
if ( mListener != null ) {
if ( diff > <num> ) {
if ( <unk> . <unk> ) Log . d ( " , " ) ;
mListener . onUp ( diff ) ;
} else {
if ( <unk> . <unk> ) Log . d ( " , " ) ;
mListener . onDown ( diff ) ;
}
}
} else {
if ( mListener != null ) {
mListener . <unk> ( diff ) ;
}
}
<unk> = false ;
return true ;
default :
return super . onTouchEvent ( event ) ;
}
}
package com . <unk> . <unk> . tutorial ;
import java . util . ArrayList ;
import java . util . EnumSet ;
import android . app . Dialog ;
import android . os . Bundle ;
import android . os . Handler ;
import android . support . v4 . app . Fragment ;
import android . text . TextUtils ;
import android . util . Log ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . view . ViewGroup ;
import android . view . Window ;
import android . view . animation . Animation ;
import android . view . animation . Animation . AnimationListener ;
import android . widget . Button ;
import android . widget . TextView ;
import android . widget . Toast ;
import com . <unk> . <unk> . R ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . core . Card ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . SoundManager ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> . <unk> ;
import com . <unk> . <unk> . views . CardView ;
public class <unk> extends Fragment {
private static final int <unk> = <num> ;
private int <unk> = <num> ;
private ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
private Button <unk> ;
private Button <unk> ;
private CardView <unk> ;
private CardView <unk> ;
private CardView <unk> ;
final private ArrayList < CardView > mOptions = new ArrayList < CardView > ( ) ;
private <unk> mActivity ;
private <unk> <unk> = new <unk> ( ) ;
private Dialog mDialog ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
<unk> ( ) ;
super . onCreate ( savedInstanceState ) ;
}
@Override
public void onActivityCreated ( Bundle savedInstanceState ) {
super . onActivityCreated ( savedInstanceState ) ;
mActivity = ( <unk> ) getActivity ( ) ;
<unk> = ( Button ) getView ( ) . findViewById ( R . id . <unk> ) ;
<unk> = ( Button ) getView ( ) . findViewById ( R . id . <unk> ) ;
<unk> = ( CardView ) getView ( ) . findViewById ( R . id . card1 ) ;
<unk> = ( CardView ) getView ( ) . findViewById ( R . id . card2 ) ;
<unk> = ( CardView ) getView ( ) . findViewById ( R . id . <unk> ) ;
mOptions . clear ( ) ;
for ( int id : new int [ ] {
R . id . <unk> ,
R . id . <unk> ,
R . id . <unk> ,
R . id . <unk> ,
R . id . <unk>
} ) {
mOptions . add ( ( CardView ) getView ( ) . findViewById ( id ) ) ;
}
<unk> ( ) ;
<unk> ( ) ;
}
private void <unk> ( ) {
<unk> . setOnClickListener ( new OnClickListener ( ) {
public void onClick ( View v ) {
SoundManager . getInstance ( getActivity ( ) ) . playSound (
SoundManager . <unk> ) ;
<unk> ( v ) ;
}
} ) ;
<unk> . setOnClickListener ( new OnClickListener ( ) {
public void onClick ( View v ) {
SoundManager . getInstance ( getActivity ( ) ) . playSound (
SoundManager . <unk> ) ;
<unk> ( v ) ;
}
} ) ;
OnClickListener <unk> = new OnClickListener ( ) {
public void onClick ( View v ) {
<unk> ( v ) ;
}
} ;
for ( CardView view : mOptions ) {
view . setOnClickListener ( <unk> ) ;
}
}
@Override
public View onCreateView ( LayoutInflater inflater , ViewGroup container ,
Bundle savedInstanceState ) {
return inflater . inflate ( R . layout . <unk> , container ,
false ) ;
}
public void <unk> ( final View v ) {
<unk> set = <unk> . get ( <unk> ) ;
<unk> selection = new <unk> ( ) ;
CardView currentCard = ( CardView ) v ;
currentCard . setSelected ( true ) ;
selection . add ( set . <unk> ( ) ) ;
selection . add ( set . <unk> ( ) ) ;
selection . add ( currentCard . getCard ( ) ) ;
if ( selection . <unk> ( ) ) {
set . <unk> ( true ) ;
<unk> . <unk> ( new AnimationListener ( ) {
public void onAnimationStart ( Animation animation ) {
}
public void onAnimationRepeat ( Animation animation ) {
}
public void onAnimationEnd ( Animation animation ) {
final Handler handler = new Handler ( ) ;
handler . postDelayed ( new Runnable ( ) {
public void run ( ) {
<unk> ( null ) ;
}
} , <num> ) ;
}
} ) ;
<unk> . <unk> ( set . <unk> ( ) ) ;
if ( <unk> ( ) ) {
<unk> ( ) ;
}
SoundManager . getInstance ( getActivity ( ) ) . playSound (
SoundManager . <unk> ) ;
} else {
SoundManager . getInstance ( getActivity ( ) ) . playSound (
SoundManager . <unk> ) ;
currentCard . <unk> ( ) ;
EnumSet < <unk> > status = <unk> . <unk> ( selection ) ;
ArrayList < String > errors = new ArrayList < String > ( ) ;
if ( status . contains ( <unk> . <unk> ) ) {
errors . add ( getString ( R . string . <unk> ) ) ;
}
if ( status . contains ( <unk> . <unk> ) ) {
errors . add ( getString ( R . string . <unk> ) ) ;
}
if ( status . contains ( <unk> . <unk> ) ) {
errors . add ( getString ( R . string . <unk> ) ) ;
}
if ( status . contains ( <unk> . <unk> ) ) {
errors . add ( getString ( R . string . <unk> ) ) ;
}
Toast . makeText (
getActivity ( ) ,
getString ( R . string . <unk> ,
TextUtils . join ( " , errors ) ) , Toast . LENGTH_LONG )
. show ( ) ;
}
}
private boolean <unk> ( ) {
for ( <unk> set : <unk> ) {
if ( ! set . <unk> ( ) ) return false ;
}
return true ;
}
private void <unk> ( ) {
mDialog = new Dialog ( getActivity ( ) ) ;
mDialog . requestWindowFeature ( Window . FEATURE_NO_TITLE ) ;
mDialog . setContentView ( R . layout . <unk> ) ;
mDialog . setCancelable ( true ) ;
mDialog . show ( ) ;
mDialog . findViewById ( R . id . <unk> ) . setOnClickListener ( new OnClickListener ( ) {
public void onClick ( View v ) {
mActivity . <unk> ( ) ;
mActivity . <unk> ( ) ;
mActivity . finish ( ) ;
mDialog . dismiss ( ) ;
}
} ) ;
}
private void <unk> ( ) {
<unk> . add ( new <unk> (
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ) ) ;
<unk> . add ( new <unk> (
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ) ) ;
<unk> . add ( new <unk> (
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ) ) ;
<unk> . add ( new <unk> (
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ) ) ;
<unk> . add ( new <unk> (
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ) ) ;
<unk> . add ( new <unk> (
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ) ) ;
<unk> . add ( new <unk> (
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ) ) ;
<unk> . add ( new <unk> (
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ) ) ;
<unk> . add ( new <unk> (
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ) ) ;
<unk> . add ( new <unk> (
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ,
new Card ( Card . <unk> , Card . <unk> , Card . <unk> , Card . <unk> ) ) ) ;
}
public void <unk> ( ) {
int size = <unk> . size ( ) ;
if ( <unk> <= <num> ) {
<unk> = <num> ;
<unk> . setVisibility ( View . INVISIBLE ) ;
} else {
<unk> . setVisibility ( View . VISIBLE ) ;
}
if ( <unk> >= size  <num> ) {
<unk> = size  <num> ;
<unk> . setVisibility ( View . INVISIBLE ) ;
} else {
<unk> . setVisibility ( View . VISIBLE ) ;
}
TextView summary = ( TextView ) getView ( ) . findViewById ( R . id . summary ) ;
summary . setText ( ( <unk> + <num> ) + " + size ) ;
<unk> <unk> = <unk> . get ( <unk> ) ;
<unk> . setCard ( <unk> . <unk> ( ) ) ;
<unk> . setCard ( <unk> . <unk> ( ) ) ;
if ( <unk> . <unk> ( ) ) {
<unk> . setCard ( <unk> . <unk> ( ) ) ;
} else {
<unk> . setCard ( null ) ;
}
<unk> cards = <unk> . <unk> ( <unk> . getDeck ( ) ,
<unk> ) ;
if ( <unk> . LOCAL_LOGV ) {
Log . v ( " , " + cards . toString ( ) ) ;
}
if ( ! <unk> . <unk> ( ) ) {
cards . shuffle ( ) ;
}
if ( mOptions . size ( ) == cards . size ( ) ) {
int i = <num> ;
for ( CardView view : mOptions ) {
view . setCard ( cards . get ( i ++ ) ) ;
view . setSelected ( false ) ;
}
} else {
Log . e ( " , " + mOptions . size ( ) + " + cards . size ( ) ) ;
}
if ( <unk> . LOCAL_LOGV ) {
Log . v ( " , " + <unk> ) ;
}
}
public void <unk> ( View v ) {
<unk> -= <num> ;
<unk> ( ) ;
}
public void <unk> ( View v ) {
<unk> += <num> ;
<unk> ( ) ;
}
@Override
public void onPause ( ) {
if ( mDialog != null ) {
mDialog . dismiss ( ) ;
}
super . onPause ( ) ;
}
}
package com . <unk> . <unk> ;
import android . os . Bundle ;
import android . support . v4 . view . ViewPager ;
import android . support . v4 . view . ViewPager . OnPageChangeListener ;
import android . view . View ;
import android . widget . Button ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . tutorial . <unk> ;
import com . <unk> . <unk> . tutorial . <unk> ;
import com . <unk> . <unk> . tutorial . <unk> ;
import com . viewpagerindicator . <unk> ;
public class TutorialActivity extends <unk> {
private <unk> <unk> ;
private ViewPager <unk> ;
private <unk> <unk> ;
private Button <unk> ;
private Button <unk> ;
@Override
protected void onCreate ( Bundle arg0 ) {
setContentView ( R . layout . tutorial ) ;
super . onCreate ( arg0 ) ;
<unk> = new <unk> ( this ) ;
<unk> . <unk> ( <unk> . <unk> . class ) ;
<unk> . <unk> ( <unk> . <unk> . class ) ;
<unk> . <unk> ( <unk> . <unk> . class ) ;
<unk> . <unk> ( <unk> . <unk> . class ) ;
<unk> . <unk> ( <unk> . <unk> . class ) ;
<unk> . <unk> ( <unk> . <unk> . class ) ;
<unk> . <unk> ( <unk> . <unk> . class ) ;
<unk> . <unk> ( <unk> . <unk> . class ) ;
<unk> . <unk> ( <unk> . <unk> . class ) ;
<unk> . <unk> ( <unk> . <unk> . class ) ;
<unk> . <unk> ( <unk> . class ) ;
<unk> = ( ViewPager ) findViewById ( R . id . <unk> ) ;
<unk> . <unk> ( <num> ) ;
<unk> . setAdapter ( <unk> ) ;
<unk> = ( <unk> ) findViewById ( R . id . indicator ) ;
<unk> . setViewPager ( <unk> ) ;
final float density = getResources ( ) . getDisplayMetrics ( ) . density ;
<unk> . setRadius ( <num> * density ) ;
<unk> . setFillColor ( getResources ( ) . getColor ( R . color . blue ) ) ;
<unk> . <unk> ( getResources ( ) . getColor ( R . color . black ) ) ;
<unk> . setStrokeWidth ( <num> ) ;
<unk> . setOnPageChangeListener ( new OnPageChangeListener ( ) {
public void onPageSelected ( int arg0 ) {
<unk> ( ) ;
}
public void onPageScrolled ( int arg0 , float arg1 , int arg2 ) { }
public void onPageScrollStateChanged ( int arg0 ) { }
} ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
}
@Override
protected void onResume ( ) {
<unk> ( ) ;
super . onResume ( ) ;
}
private void <unk> ( ) {
int pos = <unk> . getCurrentItem ( ) ;
int size = <unk> . getCount ( ) ;
if ( pos == <num> ) {
<unk> . setVisibility ( View . INVISIBLE ) ;
} else {
<unk> . setVisibility ( View . VISIBLE ) ;
}
if ( ( pos + <num> ) == size ) {
<unk> . setVisibility ( View . INVISIBLE ) ;
} else {
<unk> . setVisibility ( View . VISIBLE ) ;
}
}
public void <unk> ( View v ) {
<unk> ( ) ;
finish ( ) ;
}
public void <unk> ( View v ) {
int currentPage = <unk> . getCurrentItem ( ) ;
int size = <unk> . getCount ( ) ;
if ( currentPage < size  <num> ) {
<unk> ( ) ;
<unk> . setCurrentItem ( currentPage + <num> , true ) ;
}
}
public void <unk> ( View v ) {
int currentPage = <unk> . getCurrentItem ( ) ;
if ( currentPage > <num> ) {
<unk> ( ) ;
<unk> . setCurrentItem ( currentPage  <num> , true ) ;
}
}
}
package com . <unk> . <unk> . core ;
import java . util . ArrayList ;
import android . content . Context ;
import android . support . v4 . view . PagerAdapter ;
import android . support . v4 . view . ViewPager ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
public class <unk> extends PagerAdapter {
private Context mContext ;
private ArrayList < Integer > mResources = new ArrayList < Integer > ( ) ;
public <unk> ( Context context ) {
mContext = context ;
mResources . clear ( ) ;
}
public void <unk> ( int <unk> ) {
mResources . add ( <unk> ) ;
}
@Override
public int getCount ( ) {
return mResources . size ( ) ;
}
@Override
public Object instantiateItem ( View container , int position ) {
LayoutInflater l = LayoutInflater . from ( mContext ) ;
int resourceId = mResources . get ( position ) ;
View v ;
v = l . inflate ( resourceId , null ) ;
( ( ViewPager ) container ) . addView ( v ) ;
return v ;
}
@Override
public void destroyItem ( ViewGroup container , int position , Object object ) {
( ( ViewPager ) container ) . removeView ( ( View ) object ) ;
}
@Override
public boolean isViewFromObject ( View arg0 , Object arg1 ) {
return arg0 . equals ( arg1 ) ;
}
}
package com . <unk> . <unk> ;
public final class R {
public static final class anim {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class attr {
public static final int alpha = <num> ;
public static final int centered = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int lineWidth = <num> ;
public static final int <unk> = <num> ;
public static final int radius = <num> ;
public static final int <unk> = <num> ;
public static final int selectedColor = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int strokeWidth = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int type = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class bool {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class color {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int black = <num> ;
public static final int blue = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int green = <num> ;
public static final int red = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int white = <num> ;
public static final int yellow = <num> ;
}
public static final class dimen {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class drawable {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int ic_launcher = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int menu_help = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int ok = <num> ;
public static final int <unk> = <num> ;
public static final int square = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class id {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int ImageView01 = <num> ;
public static final int ImageView02 = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int LinearLayout1 = <num> ;
public static final int RelativeLayout1 = <num> ;
public static final int TextView01 = <num> ;
public static final int TextView02 = <num> ;
public static final int TextView03 = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int bottom = <num> ;
public static final int button1 = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int card1 = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int card2 = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int gameStatus = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int help = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int imageView1 = <num> ;
public static final int indicator = <num> ;
public static final int <unk> = <num> ;
public static final int l = <num> ;
public static final int layout = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int menuHelp = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int mute = <num> ;
public static final int none = <num> ;
public static final int pause = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int settings = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int showHelp = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int summary = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int textView1 = <num> ;
public static final int textView2 = <num> ;
public static final int top = <num> ;
public static final int triangle = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int tutorial = <num> ;
public static final int <unk> = <num> ;
public static final int underline = <num> ;
}
public static final class integer {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int stroke = <num> ;
}
public static final class layout {
public static final int classic = <num> ;
public static final int <unk> = <num> ;
public static final int help = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int home = <num> ;
public static final int <unk> = <num> ;
public static final int home_new = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int speed = <num> ;
public static final int testing = <num> ;
public static final int tutorial = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class menu {
public static final int menu = <num> ;
}
public static final class raw {
public static final int fail = <num> ;
public static final int music = <num> ;
public static final int select = <num> ;
public static final int success = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int help_button = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int hint = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int music = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int settings = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int settings_main = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class style {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int Widget = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class xml {
public static final int settings = <num> ;
}
public static final class styleable {
public static final int [ ] <unk> = {
<num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> ,
<num>
} ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int [ ] <unk> = {
<num> , <num> , <num> , <num> ,
<num> , <num> , <num>
} ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int [ ] <unk> = {
<num> , <num>
} ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int [ ] TitlePageIndicator = {
<num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> ,
<num> , <num> , <num>
} ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int [ ] <unk> = {
<num> , <num> , <num> , <num> ,
<num>
} ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int [ ] <unk> = {
<num> , <num> , <num> , <num> ,
<num> , <num>
} ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
} ;
}
package com . <unk> . <unk> . core ;
import java . util . ArrayList ;
import java . util . List ;
import android . content . Context ;
import android . util . AttributeSet ;
import android . util . Log ;
import android . view . animation . Animation ;
import android . view . animation . Animation . AnimationListener ;
import android . view . animation . AnimationUtils ;
import android . widget . RelativeLayout ;
import com . <unk> . <unk> . R ;
import com . <unk> . <unk> . views . CardView ;
public class <unk> extends RelativeLayout {
private static int <unk> = <num> ;
private static int <unk> = <num> ;
private static int <unk> = <num> ;
private ArrayList < CardView > <unk> = new ArrayList < CardView > ( ) ;
private OnClickListener <unk> = null ;
private <unk> mCards = new <unk> ( ) ;
private boolean <unk> = false ;
private int <unk> = <num> ;
private boolean <unk> = false ;
private int mWidth = <num> ;
private int mHeight = <num> ;
private AnimationListener <unk> ;
private int <unk> = <num> ;
public <unk> ( Context context , AttributeSet attrs , int defStyle ) {
super ( context , attrs , defStyle ) ;
}
public <unk> ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
}
public <unk> ( Context context ) {
super ( context ) ;
}
public void setOnItemClickListener ( OnClickListener listener ) {
<unk> = listener ;
<unk> ( ) ;
}
public void <unk> ( ) {
mCards . clear ( ) ;
<unk> . clear ( ) ;
removeAllViews ( ) ;
}
public void <unk> ( <unk> cards ) {
mCards . clear ( ) ;
<unk> . clear ( ) ;
removeAllViews ( ) ;
if ( cards != null ) {
mCards . addAll ( cards ) ;
}
int id = <num> ;
for ( Card card : cards ) {
CardView <unk> = new CardView ( getContext ( ) ) ;
<unk> . setId ( <unk> + id ++ ) ;
<unk> . setCard ( card ) ;
<unk> . setImageResource ( R . drawable . <unk> ) ;
<unk> . setOnClickListener ( <unk> ) ;
addView ( <unk> ) ;
<unk> . add ( <unk> ) ;
}
}
public void <unk> ( ArrayList < <unk> > cards ) {
<unk> sum = new <unk> ( ) ;
for ( <unk> list : cards ) {
sum . addAll ( list ) ;
}
<unk> ( sum ) ;
}
public <unk> getCards ( ) {
if ( mCards == null )
mCards = new <unk> ( ) ;
return mCards ;
}
public <unk> <unk> ( ) {
<unk> set = new <unk> ( ) ;
for ( CardView cv : <unk> ) {
set . add ( cv . getCard ( ) ) ;
}
return set ;
}
public void <unk> ( Integer value ) {
if ( value == null ) {
<unk> = false ;
} else {
<unk> = true ;
<unk> = value ;
}
}
public void render ( ) {
<unk> = false ;
<unk> ( getMeasuredWidth ( ) , getMeasuredHeight ( ) ) ;
}
public int <unk> ( ) {
if ( <unk> ) {
return <unk> ;
} else {
return <unk> ( getCards ( ) . size ( ) ) ;
}
}
public void <unk> ( final <unk> <unk> ) {
<unk> updated = new <unk> ( <unk> ) ;
ArrayList < CardView > <unk> = new ArrayList < CardView > ( ) ;
for ( CardView cv : <unk> ) {
Card c = cv . getCard ( ) ;
if ( ! updated . contains ( c ) ) {
<unk> . add ( cv ) ;
} else {
updated . remove ( c ) ;
}
}
if ( <unk> . LOCAL_LOGV ) {
Log . v ( " ,
" + updated . size ( ) + " + updated . toString ( )
+ " + <unk> . size ( ) ) ;
}
if ( <unk> . size ( ) == updated . size ( ) ) {
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ ) {
CardView cv = <unk> . get ( i ) ;
cv . <unk> ( updated . get ( i ) ) ;
}
} else {
final Animation hide = AnimationUtils . loadAnimation ( getContext ( ) ,
R . anim . <unk> ) ;
final Animation show = AnimationUtils . loadAnimation ( getContext ( ) ,
R . anim . <unk> ) ;
hide . setAnimationListener ( new AnimationListener ( ) {
public void onAnimationStart ( Animation animation ) {
}
public void onAnimationRepeat ( Animation animation ) {
}
public void onAnimationEnd ( Animation animation ) {
<unk> ( <unk> ) ;
render ( ) ;
startAnimation ( show ) ;
}
} ) ;
startAnimation ( hide ) ;
}
}
public void <unk> ( ) {
if ( <unk> . <unk> )
Log . d ( " , " + <unk> . size ( ) + " ) ;
for ( CardView cv : <unk> ) {
cv . <unk> ( false ) ;
cv . invalidate ( ) ;
cv . refreshDrawableState ( ) ;
cv . setOnClickListener ( null ) ;
}
}
public void <unk> ( ) {
for ( CardView cv : <unk> ) {
cv . <unk> ( true ) ;
cv . invalidate ( ) ;
cv . refreshDrawableState ( ) ;
cv . setOnClickListener ( <unk> ) ;
}
}
public CardView select ( Card card ) {
for ( CardView cv : <unk> ) {
if ( cv . getCard ( ) . equals ( card ) ) {
cv . setSelected ( true ) ;
cv . invalidate ( ) ;
cv . refreshDrawableState ( ) ;
return cv ;
}
}
return null ;
}
public void <unk> ( ) {
for ( CardView cv : <unk> ) {
cv . setSelected ( false ) ;
cv . invalidate ( ) ;
cv . refreshDrawableState ( ) ;
}
}
public void <unk> ( int resId ) {
for ( CardView cv : <unk> ) {
cv . setImageResource ( resId ) ;
cv . invalidate ( ) ;
cv . refreshDrawableState ( ) ;
}
}
public void <unk> ( AnimationListener animationListener ) {
<unk> = animationListener ;
}
public void <unk> ( <unk> <unk> ) {
int size = <unk> . size ( ) ;
int position = <num> ;
while ( position + size <= <unk> . size ( ) ) {
if ( <unk> . <unk> )
Log . d ( " , " + position ) ;
List < CardView > cardViews = <unk> . subList ( position , position
+ size ) ;
<unk> row = new <unk> ( ) ;
for ( CardView cv : cardViews ) {
row . add ( cv . getCard ( ) ) ;
}
if ( <unk> . <unk> ( row , <unk> ) ) {
if ( <unk> . <unk> )
Log . d ( " , " + row ) ;
cardViews . get ( <num> ) . <unk> (
<unk> ) ;
for ( CardView cv : cardViews ) {
cv . <unk> ( ) ;
}
return ;
}
position += size ;
}
}
public static int <unk> ( int size ) {
if ( size > <unk> . <unk> ) {
return <unk> ;
} else {
return <unk> ;
}
}
private void <unk> ( ) {
for ( CardView cv : <unk> ) {
cv . setOnClickListener ( <unk> ) ;
}
}
private int <unk> ( int width , int height ) {
if ( <unk> . <unk> )
Log . d ( " , " + width + " + height ) ;
if ( ! <unk> || mWidth != width || mHeight != height ) {
int <unk> = <unk> . size ( ) ;
if ( <unk> > <num> ) {
<unk> gridSize = <unk> . <unk> ( <unk> ) ;
int <unk> = gridSize . <unk> ( ) ;
int rows = gridSize . <unk> ( ) ;
int <unk> = ( height / rows ) ;
int <unk> = ( width / <unk> ) ;
int <unk> = Math . min ( <unk> , <unk> ) ;
int padding = ( int ) ( <num> / <num> * <unk> ) ;
int <unk> = <unk>  <num> * padding ;
int <unk> = width  <unk> * <unk> ;
int <unk> = height  <unk> * rows ;
int <unk> = padding ;
int <unk> = padding ;
if ( <unk> > <num> ) {
<unk> += <unk> / ( <num> * <unk> ) ;
}
if ( <unk> > <num> ) {
<unk> += <unk> / ( <num> * rows ) ;
}
if ( <unk> . <unk> )
Log . d ( " , " + <unk>
+ " + <unk>
+ " + <unk> ) ;
int position = <num> ;
for ( CardView cv : <unk> ) {
int row = gridSize . getRow ( position ) ;
int column = gridSize . getColumn ( position ) ;
if ( <unk> . <unk> )
Log . d ( " , " + row + " + column ) ;
position ++ ;
int <unk> = <unk> ;
if ( ! gridSize . <unk> ( row ) ) {
int <unk> = gridSize . <unk> ( row ) ;
<unk> = padding
+ ( ( width  <unk> * <unk> ) / ( <num> * <unk> ) ) ;
}
LayoutParams params = new LayoutParams ( <unk> , <unk> ) ;
params . addRule ( ALIGN_PARENT_LEFT , TRUE ) ;
params . addRule ( ALIGN_PARENT_TOP , TRUE ) ;
params . setMargins (
<unk>
+ ( column * ( <num> * <unk> + <unk> ) ) ,
<unk>
+ ( row * ( <num> * <unk> + <unk> ) ) ,
<unk> , <unk> ) ;
cv . setLayoutParams ( params ) ;
}
mHeight = height ;
mWidth = width ;
<unk> = true ;
return <unk> ;
}
}
return  <num> ;
}
@Override
protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) {
int widthSize = MeasureSpec . getSize ( widthMeasureSpec ) ;
int heightSize = MeasureSpec . getSize ( heightMeasureSpec ) ;
if ( <unk> . <unk> )
Log . d ( " , " + widthSize + " + heightSize
+ " + ( ++ <unk> ) + " ) ;
setMeasuredDimension ( widthSize , heightSize ) ;
<unk> ( widthSize , heightSize ) ;
super . onMeasure ( widthMeasureSpec , heightMeasureSpec ) ;
}
public void <unk> ( int quantity ) {
mCards . clear ( ) ;
<unk> . clear ( ) ;
removeAllViews ( ) ;
int id = <num> ;
for ( int i = <num> ; i < quantity ; i ++ ) {
CardView <unk> = new CardView ( getContext ( ) ) ;
<unk> . setId ( <unk> + id ++ ) ;
<unk> . setCard ( null ) ;
<unk> . setImageResource ( R . drawable . <unk> ) ;
<unk> . setOnClickListener ( <unk> ) ;
addView ( <unk> ) ;
<unk> . add ( <unk> ) ;
}
}
public void <unk> ( <unk> cards , int startIndex ) {
int size = cards . size ( ) ;
for ( int i = <num> ; i < size ; i ++ ) {
<unk> . get ( i + startIndex ) . setCard ( cards . get ( i ) ) ;
}
}
}
package com . <unk> . <unk> ;
import java . util . ArrayList ;
import java . util . HashMap ;
import android . content . Intent ;
import android . os . Bundle ;
import android . util . DisplayMetrics ;
import android . util . Log ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . view . animation . Animation ;
import android . view . animation . Animation . AnimationListener ;
import android . view . animation . AnimationUtils ;
import android . view . animation . TranslateAnimation ;
import android . widget . ImageView ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . Utils ;
import com . <unk> . <unk> . views . <unk> ;
import com . <unk> . <unk> . views . <unk> . <unk> ;
import com . <unk> . <unk> . views . <unk> . <unk> ;
import com . <unk> . <unk> . views . <unk> ;
import com . <unk> . <unk> . views . <unk> ;
import com . <unk> . <unk> . views . <unk> . <unk> ;
import com . google . android . <unk> . common . <unk> . <unk> ;
public class HomeActivity extends <unk> implements OnClickListener ,
<unk> , <unk> {
private ImageView <unk> ;
private HashMap < <unk> , <unk> > mMenu = new HashMap < <unk> . <unk> , <unk> > ( ) ;
private ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
private <unk> <unk> = null ;
private <unk> <unk> ;
private boolean <unk> = false ;
@Override
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . home ) ;
<unk> = ( ImageView ) findViewById ( R . id . <unk> ) ;
<unk> = ( <unk> ) findViewById ( R . id . <unk> ) ;
mMenu . put ( <unk> . <unk> ,
( <unk> ) findViewById ( R . id . <unk> ) ) ;
mMenu . put ( <unk> . HELP ,
( <unk> ) findViewById ( R . id . menuHelp ) ) ;
mMenu . put ( <unk> . SPEED ,
( <unk> ) findViewById ( R . id . <unk> ) ) ;
mMenu . put ( <unk> . <unk> ,
( <unk> ) findViewById ( R . id . <unk> ) ) ;
mMenu . put ( <unk> . <unk> , <unk> ) ;
for ( <unk> menu : mMenu . values ( ) ) {
menu . <unk> ( this ) ;
}
<unk> = mMenu
. get ( <unk> . <unk> ( ) ? <unk> . <unk>
: <unk> . HELP ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
<unk> ( <unk> . <unk> ( ) ) ;
for ( View view : new View [ ] {
findViewById ( R . id . <unk> ) ,
findViewById ( R . id . showHelp ) ,
findViewById ( R . id . <unk> ) ,
findViewById ( R . id . <unk> ) ,
findViewById ( R . id . <unk> ) ,
findViewById ( R . id . showSettings )
} ) {
view . setOnClickListener ( this ) ;
<unk> . add ( ( <unk> ) view ) ;
}
<unk> ( <unk> . <unk> ( ) ) ;
<unk> ( ) ;
( ( <unk> ) findViewById ( R . id . <unk> ) )
. <unk> ( this ) ;
if ( <unk> . <unk> ) {
DisplayMetrics metrics = getResources ( ) . getDisplayMetrics ( ) ;
Log . d ( " , metrics . density + " + metrics . densityDpi ) ;
}
}
@Override
protected void onResume ( ) {
<unk> . update ( ) ;
super . onResume ( ) ;
}
private void <unk> ( ) {
Animation <unk> = AnimationUtils . loadAnimation ( this ,
R . anim . <unk> ) ;
<unk> . startAnimation ( <unk> ) ;
}
@Override
protected void onDestroy ( ) {
<unk> ( ) . release ( ) ;
super . onDestroy ( ) ;
}
public void onClick ( View view ) {
if ( ! <unk> ) {
<unk> ( ) ;
<unk> type = ( ( <unk> ) view ) . getType ( ) ;
if ( type . equals ( <unk> . SETTINGS ) ) {
<unk> ( ) ;
} else {
<unk> ( type ) ;
<unk> ( type , <num> ) ;
}
}
}
private void <unk> ( <unk> exception ) {
for ( <unk> button : <unk> ) {
button . setActive ( button . getType ( ) == exception ) ;
}
}
private void <unk> ( <unk> exception ) {
for ( <unk> menu : mMenu . values ( ) ) {
if ( menu . <unk> ( ) != exception ) {
menu . setVisibility ( View . GONE ) ;
}
}
}
private void <unk> ( final <unk> type , int diff ) {
final long duration = Math . max ( <num>  Math . abs ( diff ) , <num> ) ;
Animation <unk> ;
Animation <unk> ;
if ( diff > <num> ) {
<unk> = Utils . <unk> ( diff , duration ) ;
<unk> = Utils . <unk> ( diff , duration ) ;
} else {
<unk> = Utils . <unk> ( diff , duration ) ;
<unk> = Utils . <unk> ( diff , duration ) ;
}
if ( ! type . equals ( <unk> . <unk> ( ) ) ) {
final <unk> next = mMenu . get ( type ) ;
final <unk> previous = <unk> ;
previous . setVisibility ( View . VISIBLE ) ;
next . setVisibility ( View . VISIBLE ) ;
<unk> . setAnimationListener ( new AnimationListener ( ) {
public void onAnimationStart ( Animation animation ) { }
public void onAnimationRepeat ( Animation animation ) { }
public void onAnimationEnd ( Animation animation ) {
<unk> = next ;
<unk> ( type ) ;
<unk> = false ;
findViewById ( android . R . id . content ) . invalidate ( ) ;
}
} ) ;
previous . clearAnimation ( ) ;
previous . startAnimation ( <unk> ) ;
next . clearAnimation ( ) ;
next . startAnimation ( <unk> ) ;
<unk> = true ;
}
}
public void <unk> ( <unk> type , View v ) {
<unk> ( ) ;
if ( type . equals ( <unk> . <unk> ) ) {
Intent intent = new Intent ( HomeActivity . this , <unk> . class ) ;
intent . putExtra ( <unk> . <unk> , true ) ;
startActivity ( intent ) ;
} else if ( type . equals ( <unk> . <unk> ) ) {
<unk> ( <unk> ( ) . <unk> ( ) ) ;
}
}
public void <unk> ( <unk> type , View v ) {
Intent intent = null ;
<unk> ( ) ;
switch ( type ) {
case <unk> :
<unk> . <unk> ( false ) ;
intent = new Intent ( HomeActivity . this , <unk> . class ) ;
intent . putExtra ( <unk> . <unk> , true ) ;
break ;
case HELP :
intent = new Intent ( HomeActivity . this , TutorialActivity . class ) ;
break ;
case SPEED :
intent = new Intent ( HomeActivity . this , <unk> . class ) ;
intent . putExtra ( <unk> . <unk> , true ) ;
break ;
case <unk> :
intent = new Intent ( HomeActivity . this , <unk> . class ) ;
intent . putExtra ( <unk> . <unk> , true ) ;
break ;
case <unk> :
if ( <unk> ( ) ) {
<unk> ( <unk> ( ) . <unk> ( ) ) ;
} else {
<unk> ( ) ;
}
break ;
}
if ( intent != null ) {
startActivity ( intent ) ;
}
}
private void <unk> ( final Intent intent ) {
if ( <unk> ( ) . isConnected ( ) ) {
startActivityForResult ( intent , <num> ) ;
} else {
<unk> ( ) . <unk> ( new <unk> ( ) {
public void <unk> ( ) { }
public void <unk> ( Bundle <unk> ) {
startActivityForResult ( intent , <num> ) ;
<unk> ( ) . <unk> ( this ) ;
}
} ) ;
<unk> ( ) . connect ( ) ;
}
}
public void onUp ( int diff ) {
if ( ! <unk> ) {
<unk> newType ;
switch ( <unk> . <unk> ( ) ) {
case <unk> :
newType = <unk> . <unk> ;
break ;
case <unk> :
newType = <unk> . <unk> ;
break ;
case SPEED :
newType = <unk> . <unk> ;
break ;
case HELP :
newType = <unk> . SPEED ;
break ;
case <unk> :
newType = <unk> . HELP ;
break ;
default :
newType = <unk> . <unk> ;
}
<unk> ( newType ) ;
<unk> ( newType , diff ) ;
}
}
public void onDown ( int diff ) {
if ( ! <unk> ) {
<unk> newType ;
switch ( <unk> . <unk> ( ) ) {
case <unk> :
newType = <unk> . <unk> ;
break ;
case <unk> :
newType = <unk> . SPEED ;
break ;
case SPEED :
newType = <unk> . HELP ;
break ;
case HELP :
newType = <unk> . <unk> ;
break ;
default :
newType = <unk> . <unk> ;
}
<unk> ( newType ) ;
<unk> ( newType , diff ) ;
}
}
public void <unk> ( int diff , boolean isMoving ) {
if ( ! <unk> ) {
TranslateAnimation <unk> = new TranslateAnimation ( <num> , <num> , diff , diff ) ;
<unk> . setFillAfter ( true ) ;
<unk> . <unk> ( true ) ;
<unk> . setDuration ( <num> ) ;
<unk> . clearAnimation ( ) ;
<unk> . startAnimation ( <unk> ) ;
}
}
public void <unk> ( int diff ) {
if ( ! <unk> ) {
TranslateAnimation <unk> = new TranslateAnimation ( <num> , <num> , diff , <num> ) ;
<unk> . <unk> ( true ) ;
<unk> . setDuration ( <num> ) ;
<unk> . clearAnimation ( ) ;
<unk> . startAnimation ( <unk> ) ;
}
}
private void <unk> ( ) {
<unk> . update ( ) ;
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
<unk> ( ) ;
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
<unk> ( ) ;
}
@Override
protected void <unk> ( ) {
super . <unk> ( ) ;
<unk> ( ) ;
}
package com . <unk> . <unk> . core ;
import android . view . animation . <unk> ;
public class <unk> extends <unk> {
public <unk> ( ) {
super ( <num> , <num> ) ;
setInterpolator ( new <unk> ( <num> ) ) ;
setDuration ( <num> ) ;
}
}
package com . <unk> . <unk> . core ;
import java . util . EnumSet ;
import android . util . Log ;
public class <unk> {
public static int <unk> = <num> ;
public static int <unk> = <num> ;
public static int <unk> = <num> ;
public enum <unk> {
EXISTS ,
<unk> ,
<unk> ,
<unk> ,
<unk> ,
<unk>
}
public static boolean <unk> = false ;
public static boolean LOCAL_LOGV = false ;
private <unk> <unk> ;
private <unk> <unk> ;
private String <unk> ;
private <unk> mTable ;
public <unk> ( ) {
<unk> ( ) ;
}
public <unk> getDeck ( ) {
if ( null == <unk> ) this . <unk> = new <unk> ( ) ;
return <unk> ;
}
public void <unk> ( <unk> cards ) {
this . <unk> = cards ;
}
public <unk> getGame ( ) {
if ( null == <unk> ) this . <unk> = getDeck ( ) ;
return <unk> ;
}
public void setGame ( <unk> game ) {
this . <unk> = game ;
}
public String <unk> ( ) {
return <unk> ;
}
public void <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
public void newGame ( ) {
<unk> . shuffle ( ) ;
<unk> = new <unk> ( <unk> ) ;
<unk> = <unk> . toString ( ) ;
mTable = new <unk> ( ) ;
<unk> ( ) ;
}
public void restartGame ( String <unk> ) {
<unk> = <unk> . fromString ( <unk> , <unk> ) ;
mTable = new <unk> ( ) ;
<unk> ( ) ;
}
public void <unk> ( ) {
if ( getGame ( ) . size ( ) > <num> ) {
if ( getTable ( ) . size ( ) <= <num> ) {
mTable = new <unk> ( getGame ( ) . getNext ( <unk> ) ) ;
}
if ( getTable ( ) . size ( ) < <unk> ) {
int missing = <unk>  getTable ( ) . size ( ) ;
if ( missing > getGame ( ) . size ( ) ) {
missing = getGame ( ) . size ( ) ;
}
if ( missing > <num> ) {
getTable ( ) . addAll ( getGame ( ) . getNext ( missing ) ) ;
if ( LOCAL_LOGV ) Log . v ( " , " ) ;
} else {
if ( LOCAL_LOGV ) Log . v ( " , " ) ;
}
}
} else {
if ( <unk> ) Log . d ( " , " ) ;
}
while ( ! getTable ( ) . <unk> ( ) && getGame ( ) . size ( ) > <num> ) {
getTable ( ) . addAll ( getGame ( ) . getNext ( <unk> ) ) ;
if ( LOCAL_LOGV ) Log . v ( " , " ) ;
}
if ( LOCAL_LOGV ) Log . v ( " , " ) ;
}
public <unk> getTable ( ) {
if ( null == mTable ) mTable = new <unk> ( ) ;
return mTable ;
}
public void setTable ( <unk> table ) {
this . mTable = table ;
}
public <unk> <unk> ( <unk> <unk> ) {
getTable ( ) . removeAll ( <unk> ) ;
<unk> ( ) ;
return getTable ( ) ;
}
public void shuffle ( ) {
getDeck ( ) . shuffle ( ) ;
if ( LOCAL_LOGV ) Log . v ( " , " ) ;
}
public static boolean <unk> ( <unk> cards ) {
if ( cards . size ( ) == <num> ) {
return <unk> ( cards . get ( <num> ) , cards . get ( <num> ) , cards . get ( <num> ) ) ;
}
return false ;
}
public static boolean <unk> ( Card <unk> , Card <unk> , Card <unk> ) {
if ( ( <unk> . getShape ( ) + <unk> . getShape ( ) + <unk> . getShape ( ) ) % <num> != <num> ) return false ;
if ( ( <unk> . getColor ( ) + <unk> . getColor ( ) + <unk> . getColor ( ) ) % <num> != <num> ) return false ;
if ( ( <unk> . <unk> ( ) + <unk> . <unk> ( ) + <unk> . <unk> ( ) ) % <num> != <num> ) return false ;
if ( ( <unk> . getNumber ( ) + <unk> . getNumber ( ) + <unk> . getNumber ( ) ) % <num> != <num> ) return false ;
return true ;
}
public <unk> <unk> ( int <unk> ) {
<unk> set = new <unk> ( getDeck ( ) ) ;
<unk> table ;
do {
table = set . <unk> ( <unk> ) ;
} while ( table . <unk> ( ) != <unk> ) ;
return table ;
}
public static Card <unk> ( Card <unk> , Card <unk> ) {
int <unk> = ( <num>  ( <unk> . getShape ( ) + <unk> . getShape ( ) ) % <num> ) % <num> ;
int <unk> = ( <num>  ( <unk> . getColor ( ) + <unk> . getColor ( ) ) % <num> ) % <num> ;
int <unk> = ( <num>  ( <unk> . getNumber ( ) + <unk> . getNumber ( ) ) % <num> ) % <num> ;
int <unk> = ( <num>  ( <unk> . <unk> ( ) + <unk> . <unk> ( ) ) % <num> ) % <num> ;
return new Card ( <unk> , <unk> , <unk> , <unk> ) ;
}
public static EnumSet < <unk> > <unk> ( <unk> <unk> ) {
if ( <unk> . size ( ) == <num> ) {
return <unk> ( <unk> . get ( <num> ) , <unk> . get ( <num> ) , <unk> . get ( <num> ) ) ;
} else {
EnumSet < <unk> > status = EnumSet . of ( <unk> . <unk> ) ;
return status ;
}
}
public static EnumSet < <unk> > <unk> ( Card <unk> , Card <unk> , Card <unk> ) {
EnumSet < <unk> > status = EnumSet . noneOf ( <unk> . class ) ;
if ( ( <unk> . getShape ( ) + <unk> . getShape ( ) + <unk> . getShape ( ) ) % <num> != <num> ) status . add ( <unk> . <unk> ) ;
if ( ( <unk> . getColor ( ) + <unk> . getColor ( ) + <unk> . getColor ( ) ) % <num> != <num> ) status . add ( <unk> . <unk> ) ;
if ( ( <unk> . <unk> ( ) + <unk> . <unk> ( ) + <unk> . <unk> ( ) ) % <num> != <num> ) status . add ( <unk> . <unk> ) ;
if ( ( <unk> . getNumber ( ) + <unk> . getNumber ( ) + <unk> . getNumber ( ) ) % <num> != <num> ) status . add ( <unk> . <unk> ) ;
if ( status . isEmpty ( ) ) status . add ( <unk> . EXISTS ) ;
return status ;
}
private void <unk> ( ) {
for ( int i = <num> ; i < <unk> ; i ++ ) {
getDeck ( ) . add ( new Card ( ( i / <num> ) % <num> , ( i / <num> ) % <num> , ( i / <num> ) % <num> , i % <num> ) ) ;
}
if ( LOCAL_LOGV ) Log . v ( " , " ) ;
}
}
package com . <unk> . <unk> ;
import java . util . ArrayList ;
import java . util . Collections ;
import java . util . EnumSet ;
import android . content . Intent ;
import android . os . Bundle ;
import android . support . v4 . view . ViewPager ;
import android . text . TextUtils ;
import android . view . Gravity ;
import android . view . Menu ;
import android . view . View ;
import android . widget . TextView ;
import android . widget . Toast ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . google . android . <unk> . games . <unk> ;
import com . viewpagerindicator . <unk> ;
abstract public class <unk> extends <unk> implements <unk> {
private static final String <unk> = " ;
private View <unk> ;
private View <unk> ;
private ViewPager <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private TextView <unk> ;
private TextView <unk> ;
private <unk> mTime = new <unk> ( this ) ;
private ArrayList < Long > <unk> = new ArrayList < Long > ( ) ;
private boolean <unk> = true ;
private boolean <unk> = false ;
public final static String <unk> = " ;
@Override
protected void onCreate ( Bundle savedInstance ) {
super . onCreate ( savedInstance ) ;
setContentView ( getContentView ( ) ) ;
<unk> = findViewById ( R . id . <unk> ) ;
<unk> = findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
if ( <unk> != null ) {
<unk> = new <unk> ( this ) ;
<unk> = ( ViewPager ) findViewById ( R . id . <unk> ) ;
<unk> . setAdapter ( <unk> ) ;
<unk> = ( <unk> ) findViewById ( R . id . indicator ) ;
<unk> . setViewPager ( <unk> ) ;
final float density = getResources ( ) . getDisplayMetrics ( ) . density ;
<unk> . setRadius ( <num> * density ) ;
}
<unk> . <unk> ( true ) ;
<unk> ( <unk> ( ) ) ;
initGame ( ) ;
<unk> ( ) ;
resetGame ( ) ;
if ( ! <unk> ( ) ) {
<unk> ( ) ;
<unk> ( ) ;
} else if ( <unk> ( ) ) {
startGame ( ) ;
} else {
pauseGame ( ) ;
}
}
abstract public int getContentView ( ) ;
abstract public int [ ] <unk> ( ) ;
public boolean <unk> ( ) {
Bundle params = getIntent ( ) . getExtras ( ) ;
if ( params != null ) {
return params . getBoolean ( <unk> , false ) ;
}
return false ;
}
abstract protected boolean <unk> ( ) ;
abstract protected void <unk> ( ) ;
private void <unk> ( int [ ] resId ) {
if ( <unk> != null ) {
for ( int id : resId ) {
<unk> . <unk> ( id ) ;
}
}
<unk> . notifyDataSetChanged ( ) ;
}
@Override
public boolean <unk> ( int featureId , Menu menu ) {
pauseGame ( ) ;
return super . <unk> ( featureId , menu ) ;
}
@Override
public void onBackPressed ( ) {
if ( <unk> ( ) ) {
startGame ( ) ;
return ;
}
if ( <unk> ( ) ) {
<unk> ( ) ;
finish ( ) ;
} else {
pauseGame ( ) ;
}
}
@Override
protected void onPause ( ) {
pauseGame ( ) ;
super . onPause ( ) ;
}
@Override
protected void onStop ( ) {
pauseGame ( ) ;
super . onStop ( ) ;
}
@Override
protected void onSaveInstanceState ( Bundle outState ) {
pauseGame ( ) ;
outState . putBoolean ( <unk> , <unk> ) ;
super . onSaveInstanceState ( <unk> ( outState ) ) ;
}
@Override
protected void onRestoreInstanceState ( Bundle savedInstanceState ) {
resetGame ( savedInstanceState ) ;
if ( savedInstanceState != null ) {
<unk> = savedInstanceState . getBoolean ( <unk> , false ) ;
}
pauseGame ( ) ;
super . onRestoreInstanceState ( savedInstanceState ) ;
}
public View <unk> ( ) {
return <unk> ;
}
public View <unk> ( ) {
return <unk> ;
}
public boolean <unk> ( ) {
return <unk> != null && <unk> . getVisibility ( ) == View . VISIBLE ;
}
public boolean <unk> ( ) {
return <unk> != null && <unk> . getVisibility ( ) == View . VISIBLE ;
}
public void <unk> ( ) {
<unk> ( ) ;
<unk> ( ) ;
}
private void <unk> ( ) {
if ( ! <unk> ( ) ) {
if ( ! <unk> ( ) ) {
<unk> . setVisibility ( View . VISIBLE ) ;
}
if ( <unk> ( ) ) {
<unk> ( ) ;
} else {
<unk> ( ) ;
}
}
}
private void <unk> ( ) {
if ( <unk> ( ) ) {
<unk> . setVisibility ( View . INVISIBLE ) ;
}
<unk> ( ) ;
}
private void <unk> ( ) {
if ( ! <unk> ( ) ) {
<unk> . setVisibility ( View . VISIBLE ) ;
}
<unk> ( ) ;
}
private void <unk> ( ) {
if ( <unk> ( ) ) {
<unk> . setVisibility ( View . INVISIBLE ) ;
}
<unk> ( ) ;
}
abstract public void initGame ( ) ;
abstract public void <unk> ( Bundle game ) ;
abstract public Bundle <unk> ( Bundle <unk> ) ;
final public void resetGame ( Bundle savedInstanceState ) {
<unk> ( ) ;
<unk> = false ;
<unk> = true ;
<unk> ( savedInstanceState ) ;
updateGame ( ) ;
<unk> ( ) ;
}
final public void resetGame ( ) {
resetGame ( null ) ;
}
final public void startGame ( ) {
startTimer ( ) ;
<unk> = false ;
<unk> ( ) ;
updateGame ( ) ;
<unk> ( ) ;
}
final public void pauseGame ( ) {
<unk> ( ) ;
<unk> = true ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
}
final public void <unk> ( ) {
<unk> ( ) ;
<unk> = true ;
<unk> ( ) ;
<unk> ( ) ;
}
final public void endGame ( boolean won ) {
<unk> ( ) ;
<unk> = true ;
<unk> = true ;
<unk> ( won ) ;
<unk> ( ) ;
<unk> ( ) ;
}
final public void updateGame ( ) {
if ( <unk> != null ) {
<unk> . setText ( <unk> ( false ) ) ;
}
if ( <unk> != null ) {
<unk> . setText ( <unk> ( false ) ) ;
}
<unk> ( ) ;
}
final public boolean <unk> ( ) {
return <unk> ;
}
final public boolean <unk> ( ) {
return <unk> ;
}
public void <unk> ( View v ) {
<unk> ( ) ;
pauseGame ( ) ;
}
public void <unk> ( View v ) {
<unk> ( ) ;
<unk> ( ) ;
}
public void <unk> ( View v ) {
<unk> ( ) ;
startGame ( ) ;
}
public void <unk> ( View v ) {
<unk> ( ) ;
Intent intent = new Intent ( this , TutorialActivity . class ) ;
startActivity ( intent ) ;
}
public void <unk> ( ) {
}
public void <unk> ( ) {
updateGame ( ) ;
}
private void <unk> ( ) {
mTime . setElapsedTime ( <num> ) ;
mTime . pause ( ) ;
}
private void startTimer ( ) {
mTime . start ( mTime . getElapsedTime ( ) ) ;
}
public void <unk> ( Long time ) {
mTime . <unk> ( time ) ;
}
private void <unk> ( ) {
mTime . pause ( ) ;
}
public void <unk> ( long time ) {
mTime . <unk> ( time ) ;
}
public void inform ( String message ) {
Toast toast = Toast . makeText ( this , message , Toast . LENGTH_SHORT ) ;
toast . setGravity ( Gravity . BOTTOM | Gravity . CENTER_HORIZONTAL , <num> , <num> ) ;
toast . show ( ) ;
}
public void <unk> ( <unk> <unk> ) {
EnumSet < <unk> > status = <unk> . <unk> ( <unk> ) ;
ArrayList < String > errors = new ArrayList < String > ( ) ;
if ( status . contains ( <unk> . <unk> ) ) {
errors . add ( getString ( R . string . <unk> ) ) ;
}
if ( status . contains ( <unk> . <unk> ) ) {
errors . add ( getString ( R . string . <unk> ) ) ;
}
if ( status . contains ( <unk> . <unk> ) ) {
errors . add ( getString ( R . string . <unk> ) ) ;
}
if ( status . contains ( <unk> . <unk> ) ) {
errors . add ( getString ( R . string . <unk> ) ) ;
}
inform ( getString ( R . string . <unk> , TextUtils . join ( " , errors ) ) ) ;
}
public long getElapsedTime ( ) {
return mTime . getElapsedTime ( ) ;
}
public void setElapsedTime ( long time ) {
mTime . setElapsedTime ( time ) ;
}
public String <unk> ( boolean <unk> ) {
return mTime . <unk> ( <unk> ) ;
}
public long <unk> ( ) {
return mTime . <unk> ( ) ;
}
public String <unk> ( boolean <unk> ) {
return mTime . <unk> ( <unk> ) ;
}
public void <unk> ( ) {
<unk> . add ( mTime . <unk> ( ) ) ;
}
public void <unk> ( ) {
int <unk> = <unk> . size ( ) ;
if ( <unk> > <num> && <unk> ( ) ) {
<unk> client = <unk> ( ) ;
Collections . sort ( <unk> ) ;
long <unk> = <unk> . get ( <num> ) ;
client . <unk> ( getString ( R . string . <unk> ) , <unk> ) ;
client . <unk> ( getString ( R . string . <unk> ) , <unk> ) ;
client . <unk> ( getString ( R . string . <unk> ) , <unk> ) ;
client . <unk> ( getString ( R . string . <unk> ) , <unk> ) ;
client . <unk> ( getString ( R . string . <unk> ) , <unk> ) ;
if ( <unk> < <num> ) {
client . <unk> ( getString ( R . string . <unk> ) ) ;
}
if ( <unk> < <num> ) {
client . <unk> ( getString ( R . string . <unk> ) ) ;
}
if ( <unk> < <num> ) {
client . <unk> ( getString ( R . string . <unk> ) ) ;
}
}
<unk> . clear ( ) ;
}
public void <unk> ( ) { }
public void <unk> ( ) { }
public void <unk> ( ) { }
public void <unk> ( ) { }
public void <unk> ( ) { }
public void <unk> ( ) { }
public void <unk> ( ) { }
public void <unk> ( boolean won ) { }
public void <unk> ( ) { }
public void <unk> ( ) { }
}
package com . <unk> . <unk> . core ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . Map . Entry ;
public class <unk> {
private HashMap < Integer , Integer > mMap = new HashMap < Integer , Integer > ( ) ;
private int mSize ;
private int mMax = <num> ;
private static ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
public <unk> ( int size , int rows , int . . . columns ) {
mSize = size ;
for ( int i = <num> ; i < rows ; i ++ ) {
mMap . put ( i , columns [ i ] ) ;
if ( columns [ i ] > mMax ) {
mMax = columns [ i ] ;
}
}
}
public int getSize ( ) {
return mSize ;
}
public int <unk> ( int row ) {
return mMap . get ( row ) ;
}
public int <unk> ( ) {
return mMap . size ( ) ;
}
public int getRow ( int position ) {
int passed = <num> ;
for ( Entry < Integer , Integer > row : mMap . entrySet ( ) ) {
passed += row . getValue ( ) ;
if ( passed > position ) {
return row . getKey ( ) ;
}
}
return  <num> ;
}
public int getColumn ( int position ) {
int passed = <num> ;
for ( Entry < Integer , Integer > row : mMap . entrySet ( ) ) {
if ( passed + row . getValue ( ) > position ) {
return position % row . getValue ( ) ;
} else {
passed += row . getValue ( ) ;
}
}
return  <num> ;
}
public int <unk> ( ) {
return mMax ;
}
public boolean <unk> ( int row ) {
return mMap . get ( row ) == mMax ;
}
public static <unk> <unk> ( int size ) {
if ( <unk> . isEmpty ( ) ) {
<unk> . add ( new <unk> ( <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> , <num> , <num> ) ) ;
<unk> . add ( new <unk> ( <num> , <num> , <num> , <num> , <num> , <num> , <num> ) ) ;
}
for ( <unk> set : <unk> ) {
if ( set . getSize ( ) == size ) {
return set ;
}
}
return null ;
}
}
package com . <unk> . <unk> . core ;
import java . util . ArrayList ;
import java . util . Collections ;
import java . util . List ;
import android . text . TextUtils ;
import android . util . Log ;
public class <unk> extends ArrayList < Card > {
private static final long serialVersionUID = <num> ;
public <unk> ( List < Card > subList ) {
addAll ( subList ) ;
}
public <unk> ( ) {
}
public <unk> ( Card . . . cards ) {
for ( Card c : cards ) {
add ( c ) ;
}
}
public void shuffle ( ) {
Collections . shuffle ( this ) ;
}
public <unk> <unk> ( int number ) {
shuffle ( ) ;
return subList ( <num> , number ) ;
}
public <unk> getNext ( int <unk> ) {
<unk> next = new <unk> ( ) ;
if ( size ( ) > <num> ) {
int limit = <unk> > size ( ) ? size ( ) : <unk> ;
next = subList ( <num> , limit ) ;
<unk> ( <num> , limit ) ;
}
if ( <unk> . LOCAL_LOGV ) Log . v ( " , " + next . size ( ) + " ) ;
return next ;
}
public boolean hasNext ( ) {
return ! isEmpty ( ) ;
}
public boolean <unk> ( ) {
int size = size ( ) ;
if ( size > <num> ) {
for ( int i = <num> ; i < size ; i ++ ) {
for ( int j = ( i + <num> ) ; j < size ; j ++ ) {
for ( int k = ( j + <num> ) ; k < size ; k ++ ) {
if ( <unk> . <unk> ( get ( i ) , get ( j ) , get ( k ) ) ) {
return true ;
}
}
}
}
}
return false ;
}
public int <unk> ( ) {
int size = size ( ) ;
int count = <num> ;
if ( size > <num> ) {
for ( int i = <num> ; i < size ; i ++ ) {
for ( int j = ( i + <num> ) ; j < size ; j ++ ) {
for ( int k = ( j + <num> ) ; k < size ; k ++ ) {
if ( <unk> . <unk> ( get ( i ) , get ( j ) , get ( k ) ) ) {
count += <num> ;
}
}
}
}
}
if ( <unk> . LOCAL_LOGV ) Log . v ( " , " + count + " ) ;
return count ;
}
public ArrayList < <unk> > <unk> ( ) {
int size = size ( ) ;
ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
if ( size > <num> ) {
for ( int i = <num> ; i < size ; i ++ ) {
for ( int j = ( i + <num> ) ; j < size ; j ++ ) {
for ( int k = ( j + <num> ) ; k < size ; k ++ ) {
if ( <unk> . <unk> ( get ( i ) , get ( j ) , get ( k ) ) ) {
<unk> <unk> = new <unk> ( get ( i ) , get ( j ) , get ( k ) ) ;
<unk> . add ( <unk> ) ;
if ( <unk> . LOCAL_LOGV ) Log . v ( " , " ) ;
}
}
}
}
}
return <unk> ;
}
@Override
public <unk> subList ( int start , int end ) {
return new <unk> ( super . subList ( start , end ) ) ;
}
public Card find ( String <unk> ) {
for ( Card c : this ) {
if ( c . toString ( ) . equals ( <unk> ) ) {
return c ;
}
}
return null ;
}
@Override
public String toString ( ) {
return TextUtils . join ( " , this ) ;
}
public static <unk> fromString ( <unk> <unk> , String <unk> ) {
<unk> cards = new <unk> ( ) ;
for ( String <unk> : TextUtils . split ( <unk> , " ) ) {
Card card = <unk> . find ( <unk> ) ;
if ( null != card ) {
cards . add ( card ) ;
}
}
return cards ;
}
public boolean equals ( <unk> other ) {
return <unk> . <unk> ( this , other ) ;
}
public static boolean <unk> ( <unk> <unk> , <unk> <unk> ) {
if ( <unk> . size ( ) == <unk> . size ( ) ) {
for ( Card c : <unk> ) {
if ( ! <unk> . contains ( c ) ) {
return false ;
}
}
return true ;
}
return false ;
}
public static ArrayList < <unk> > difference ( ArrayList < <unk> > setA ,
ArrayList < <unk> > <unk> ) {
ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
<unk> . addAll ( setA ) ;
for ( <unk> l : setA ) {
for ( <unk> c : <unk> ) {
if ( <unk> . <unk> ( l , c ) ) {
<unk> . remove ( l ) ;
}
}
}
return <unk> ;
}
}
package com . <unk> . <unk> . core ;
import java . util . ArrayList ;
import android . app . Activity ;
import android . content . Context ;
import android . media . AudioManager ;
import android . media . MediaPlayer ;
import android . media . SoundPool ;
import android . util . SparseIntArray ;
import com . <unk> . <unk> . R ;
public class SoundManager {
public static int <unk> = <num> ;
public static int <unk> = <num> ;
public static int <unk> = <num> ;
public static int <unk> = <num> ;
private static int <unk> = <num> ;
private static SoundManager mInstance ;
private Context mContext ;
private SoundPool mSoundPool ;
private SparseIntArray mSoundPoolMap = new SparseIntArray ( ) ;
private AudioManager mAudioManager ;
private MediaPlayer <unk> ;
private boolean <unk> = false ;
private ArrayList < Activity > mActivities = new ArrayList < Activity > ( ) ;
private SoundManager ( Context context ) {
mContext = context ;
mSoundPool = new SoundPool ( <unk> , AudioManager . STREAM_MUSIC , <num> ) ;
mAudioManager = ( AudioManager ) mContext . getSystemService ( Context . AUDIO_SERVICE ) ;
<unk> = null ;
mActivities . clear ( ) ;
}
public static SoundManager getInstance ( Context context ) {
if ( mInstance == null ) {
mInstance = new SoundManager ( context ) ;
}
return mInstance ;
}
public void <unk> ( ) {
if ( ! <unk> ) {
addSound ( <unk> , R . raw . select ) ;
addSound ( <unk> , R . raw . success ) ;
addSound ( <unk> , R . raw . fail ) ;
<unk> = true ;
}
}
public void addSound ( int index , int <unk> ) {
mSoundPoolMap . put ( index , mSoundPool . load ( mContext , <unk> , <num> ) ) ;
}
public void <unk> ( Activity activity ) {
if ( ! mActivities . contains ( activity ) ) {
mActivities . add ( activity ) ;
}
<unk> ( ) ;
}
public void <unk> ( Activity activity ) {
if ( mActivities . contains ( activity ) ) {
mActivities . remove ( activity ) ;
}
<unk> ( ) ;
}
public void <unk> ( ) {
if ( ! <unk> . <unk> ( ) || mActivities . size ( ) == <num> ) {
<unk> ( ) ;
} else {
<unk> ( ) ;
}
}
public void <unk> ( ) {
if ( <unk> == null ) {
<unk> = MediaPlayer . create ( mContext , R . raw . music ) ;
}
if ( ! <unk> . isPlaying ( ) ) {
<unk> . setLooping ( true ) ;
<unk> . start ( ) ;
}
}
public void <unk> ( ) {
if ( <unk> != null && <unk> . isPlaying ( ) ) {
<unk> . pause ( ) ;
}
}
public boolean <unk> ( ) {
return <unk> != null ? <unk> . isPlaying ( ) : false ;
}
public void playSound ( int index ) {
<unk> ( ) ;
float volume = mAudioManager . getStreamVolume ( AudioManager . STREAM_MUSIC ) / mAudioManager . getStreamMaxVolume ( AudioManager . STREAM_MUSIC ) ;
int <unk> = mSoundPoolMap . get ( index ,  <num> ) ;
if ( <unk> > <num> ) {
mSoundPool . play ( <unk> , volume , volume , <num> , <num> , <num> ) ;
}
}
public void stopSound ( int index ) {
int <unk> = mSoundPoolMap . get ( index ,  <num> ) ;
if ( <unk> > <num> ) {
mSoundPool . stop ( <unk> ) ;
}
}
public void <unk> ( int index ) {
int <unk> = mSoundPoolMap . get ( index ,  <num> ) ;
if ( <unk> > <num> ) {
mSoundPool . pause ( <unk> ) ;
}
}
public void <unk> ( ) {
for ( int i = <num> , size = mSoundPoolMap . size ( ) ; i < size ; i += <num> ) {
<unk> ( mSoundPoolMap . keyAt ( i ) ) ;
}
}
public void <unk> ( ) {
for ( int i = <num> , size = mSoundPoolMap . size ( ) ; i < size ; i += <num> ) {
stopSound ( mSoundPoolMap . keyAt ( i ) ) ;
}
}
public void release ( ) {
if ( mSoundPool != null ) {
mSoundPool . release ( ) ;
mSoundPool = null ;
}
mSoundPoolMap . clear ( ) ;
<unk> = false ;
if ( mAudioManager != null ) {
mAudioManager . <unk> ( ) ;
}
if ( <unk> != null ) {
<unk> . release ( ) ;
<unk> = null ;
}
mInstance = null ;
}
package com . <unk> . <unk> . core ;
import android . view . animation . Animation ;
import android . view . animation . LinearInterpolator ;
import android . view . animation . Transformation ;
import android . graphics . Camera ;
import android . graphics . Matrix ;
public class <unk> extends Animation {
private final float mFromDegrees ;
private final float mToDegrees ;
private float mCenterX ;
private float mCenterY ;
private final float <unk> ;
private Camera mCamera ;
public <unk> ( float <unk> , float <unk> ) {
mFromDegrees = <unk> ;
mToDegrees = <unk> ;
<unk> = <num> ;
<unk> ( <unk> ) ;
<unk> ( true ) ;
setInterpolator ( new LinearInterpolator ( ) ) ;
}
@Override
public void initialize ( int width , int height , int parentWidth ,
int parentHeight ) {
super . initialize ( width , height , width * <num> , height * <num> ) ;
mCamera = new Camera ( ) ;
mCenterX = ( float ) width / <num> ;
mCenterY = ( float ) height / <num> ;
}
@Override
protected void applyTransformation ( float interpolatedTime , Transformation t ) {
final float fromDegrees = mFromDegrees ;
float degrees = fromDegrees
+ ( ( mToDegrees  fromDegrees ) * interpolatedTime ) ;
final float centerX = mCenterX ;
final float centerY = mCenterY ;
final Camera camera = mCamera ;
final Matrix matrix = t . getMatrix ( ) ;
camera . save ( ) ;
camera . translate ( <num> , <num> , <unk> * ( <num>  interpolatedTime ) ) ;
camera . rotateY ( degrees ) ;
camera . getMatrix ( matrix ) ;
camera . restore ( ) ;
matrix . preTranslate (  centerX ,  centerY ) ;
matrix . postTranslate ( centerX , centerY ) ;
}
}
package com . <unk> . <unk> . core ;
import android . os . Handler ;
import android . os . SystemClock ;
import android . util . Log ;
public class <unk> {
final static long SECOND = <num> ;
<unk> mListener = null ;
long <unk> = <num> ;
long <unk> = <num> ;
long <unk> = <num> ;
boolean <unk> = false ;
long <unk> = <num> ;
boolean <unk> = false ;
private Handler <unk> = new Handler ( ) ;
private Runnable <unk> = new Runnable ( ) {
public void run ( ) {
long elapsedTime = System . currentTimeMillis ( )  <unk> ;
<unk> . postAtTime ( this , SystemClock . uptimeMillis ( ) + SECOND ) ;
if ( mListener != null ) {
mListener . <unk> ( ) ;
if ( <unk> && elapsedTime >= <unk> ) {
mListener . <unk> ( ) ;
}
}
}
} ;
public <unk> ( <unk> listener ) {
mListener = listener ;
}
public void start ( long <unk> ) {
<unk> = <unk> = System . currentTimeMillis ( )  <unk> ;
<unk> = <num> ;
<unk> . removeCallbacks ( <unk> ) ;
long delay = ( SECOND  ( <unk> % SECOND ) + <num> ) % SECOND ;
<unk> . postDelayed ( <unk> , delay ) ;
<unk> = true ;
if ( <unk> . <unk> )
Log . d ( " , " + delay + " + <unk> ) ;
}
public void start ( ) {
start ( <num> ) ;
}
public void unpause ( ) {
start ( <unk> ) ;
}
public void pause ( ) {
<unk> = getElapsedTime ( ) ;
<unk> . removeCallbacks ( <unk> ) ;
<unk> = false ;
}
public void <unk> ( long time ) {
<unk> -= time ;
if ( mListener != null ) {
mListener . <unk> ( ) ;
if ( <unk> && getElapsedTime ( ) >= <unk> ) {
mListener . <unk> ( ) ;
}
}
if ( <unk> ) {
start ( getElapsedTime ( ) ) ;
}
}
public long <unk> ( ) {
long elapsedTime = System . currentTimeMillis ( )  <unk> ;
<unk> = System . currentTimeMillis ( ) ;
return elapsedTime ;
}
public void <unk> ( Long time ) {
if ( time != null ) {
<unk> = true ;
<unk> = time ;
} else {
<unk> = false ;
}
}
public void setListener ( <unk> listener ) {
mListener = listener ;
}
public void setElapsedTime ( long value ) {
<unk> = value ;
}
public long getElapsedTime ( ) {
return <unk> ? System . currentTimeMillis ( )  <unk> : <unk> ;
}
public String <unk> ( boolean <unk> ) {
return <unk> ( getElapsedTime ( ) , <unk> ) ;
}
public long <unk> ( ) {
return <unk>  getElapsedTime ( ) + SECOND ;
}
public String <unk> ( boolean <unk> ) {
return <unk> ( <unk> ( ) , <unk> ) ;
}
public interface <unk> {
public void <unk> ( ) ;
public void <unk> ( ) ;
}
public static String <unk> ( long value , boolean <unk> ) {
StringBuilder timeString = new StringBuilder ( ) ;
long seconds = value / <num> ;
long minutes = seconds / <num> ;
seconds %= <num> ;
long <unk> = value % <num> ;
timeString . append ( minutes ) ;
timeString . append ( seconds < <num> ? " : " ) ;
timeString . append ( seconds ) ;
if ( <unk> ) {
timeString . append ( <unk> < <num> ? ( <unk> < <num> ? " : " ) : " ) ;
timeString . append ( <unk> ) ;
}
return timeString . toString ( ) ;
}
}
package com . <unk> . <unk> . core ;
import android . view . View ;
import android . view . animation . AlphaAnimation ;
import android . view . animation . Animation ;
import android . view . animation . AnimationSet ;
import android . view . animation . TranslateAnimation ;
public class Utils {
public static void setAlpha ( View view , float alpha ) {
final AlphaAnimation animation = new AlphaAnimation ( alpha , alpha ) ;
animation . setDuration ( <num> ) ;
animation . setFillAfter ( true ) ;
view . startAnimation ( animation ) ;
}
public static AlphaAnimation <unk> ( float from , float to , long duration ) {
AlphaAnimation anim = new AlphaAnimation ( from , to ) ;
anim . setDuration ( duration ) ;
return anim ;
}
public static Animation <unk> ( int diff , long duration ) {
AnimationSet set = new AnimationSet ( true ) ;
TranslateAnimation <unk> = new TranslateAnimation (
TranslateAnimation . RELATIVE_TO_PARENT , <num> ,
TranslateAnimation . RELATIVE_TO_PARENT , <num> ,
TranslateAnimation . RELATIVE_TO_PARENT ,  <num> ,
TranslateAnimation . RELATIVE_TO_PARENT , <num> ) ;
set . addAnimation ( <unk> ) ;
set . addAnimation ( <unk> ( <num> , <num> , duration ) ) ;
set . setDuration ( duration ) ;
set . setFillAfter ( true ) ;
return set ;
}
public static Animation <unk> ( int diff , long duration ) {
AnimationSet set = new AnimationSet ( true ) ;
TranslateAnimation <unk> = new TranslateAnimation (
TranslateAnimation . RELATIVE_TO_PARENT , <num> ,
TranslateAnimation . RELATIVE_TO_PARENT , <num> ,
TranslateAnimation . ABSOLUTE , diff ,
TranslateAnimation . RELATIVE_TO_PARENT , <num> ) ;
set . addAnimation ( <unk> ) ;
set . addAnimation ( <unk> ( <num> , <num> , duration ) ) ;
set . setDuration ( duration ) ;
return set ;
}
public static Animation <unk> ( int diff , long duration ) {
AnimationSet set = new AnimationSet ( true ) ;
TranslateAnimation <unk> = new TranslateAnimation (
TranslateAnimation . RELATIVE_TO_PARENT , <num> ,
TranslateAnimation . RELATIVE_TO_PARENT , <num> ,
TranslateAnimation . RELATIVE_TO_PARENT , <num> ,
TranslateAnimation . RELATIVE_TO_PARENT , <num> ) ;
set . addAnimation ( <unk> ) ;
set . addAnimation ( <unk> ( <num> , <num> , duration ) ) ;
set . setDuration ( duration ) ;
return set ;
}
public static Animation <unk> ( int diff , long duration ) {
AnimationSet set = new AnimationSet ( true ) ;
TranslateAnimation <unk> = new TranslateAnimation (
TranslateAnimation . RELATIVE_TO_PARENT , <num> ,
TranslateAnimation . RELATIVE_TO_PARENT , <num> ,
TranslateAnimation . ABSOLUTE , diff ,
TranslateAnimation . RELATIVE_TO_PARENT ,  <num> ) ;
set . addAnimation ( <unk> ) ;
set . addAnimation ( <unk> ( <num> , <num> , duration ) ) ;
set . setDuration ( duration ) ;
return set ;
}
}
package com . <unk> . <unk> . views ;
import com . <unk> . <unk> . R ;
import com . <unk> . <unk> . core . Utils ;
import com . <unk> . <unk> . views . <unk> . <unk> ;
import android . content . Context ;
import android . content . res . TypedArray ;
import android . graphics . Typeface ;
import android . util . AttributeSet ;
import android . widget . TextView ;
public class <unk> extends TextView {
final static String DEFAULT_FONT = " ;
public <unk> ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
String font = DEFAULT_FONT ;
int color = getResources ( ) . getColor ( android . R . color . black ) ;
TypedArray <unk> = getContext ( ) . obtainStyledAttributes ( attrs , R . styleable . <unk> ) ;
if ( ! isInEditMode ( ) ) {
final int count = <unk> . getIndexCount ( ) ;
for ( int i = <num> ; i < count ; ++ i )
{
int attr = <unk> . getIndex ( i ) ;
switch ( attr )
{
case R . styleable . <unk> :
font = <unk> . getString ( attr ) ;
break ;
case R . styleable . <unk> :
color = <unk> . getInteger ( attr , color ) ;
break ;
}
}
<unk> . recycle ( ) ;
this . setTypeface ( Typeface . createFromAsset ( getContext ( ) . getAssets ( ) , font ) ) ;
}
this . setShadowLayer ( <num> , <num> , <num> , color ) ;
}
}
package com . <unk> . <unk> . core ;
public class Card {
public final static int <unk> = <num> , <unk> = <num> ,
<unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> ,
<unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> ,
<unk> = <num> , <unk> = <num> ;
private int shape , color , fill , number ;
public Card ( int shape , int color , int fill , int number ) {
this . color = color ;
this . shape = shape ;
this . fill = fill ;
this . number = number ;
}
public int getShape ( ) {
return shape ;
}
public void setShape ( int shape ) {
this . shape = shape ;
}
public int getColor ( ) {
return color ;
}
public void setColor ( int color ) {
this . color = color ;
}
public int <unk> ( ) {
return fill ;
}
public void <unk> ( int fill ) {
this . fill = fill ;
}
public int getNumber ( ) {
return number ;
}
public void setNumber ( int number ) {
this . number = number ;
}
@Override
public String toString ( ) {
StringBuilder sb = new StringBuilder ( ) ;
sb . append ( getColor ( ) ) ;
sb . append ( <unk> ( ) ) ;
sb . append ( getShape ( ) ) ;
sb . append ( getNumber ( ) ) ;
return sb . toString ( ) ;
}
public boolean isEqual ( Card c ) {
return c . toString ( ) . equals ( toString ( ) ) ;
}
}
package com . <unk> . <unk> ;
import java . util . ArrayList ;
import android . content . SharedPreferences ;
import android . os . Bundle ;
import android . preference . PreferenceManager ;
import android . util . Log ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . widget . Button ;
import android . widget . TextView ;
import android . widget . Toast ;
import com . <unk> . <unk> . core . Card ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . views . CardView ;
public class <unk> extends <unk> {
final static long <unk> = <num> ;
SharedPreferences mPrefs ;
<unk> <unk> = new <unk> ( ) ;
TextView <unk> ;
<unk> <unk> = new <unk> ( ) ;
ArrayList < CardView > <unk> = new ArrayList < CardView > ( ) ;
int <unk> = <num> ;
boolean <unk> = false ;
<unk> <unk> ;
private final int [ ] <unk> = {
R . layout . <unk> ,
R . layout . <unk>
} ;
@Override
public int getContentView ( ) {
return R . layout . speed ;
}
@Override
public int [ ] <unk> ( ) {
return <unk> ;
}
@Override
public void initGame ( ) {
mPrefs = PreferenceManager . getDefaultSharedPreferences ( this ) ;
<unk> = ( <unk> ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> ( ) ;
}
@Override
protected boolean <unk> ( ) {
return <unk> . <unk> ( ) ;
}
@Override
protected void <unk> ( ) {
<unk> . <unk> ( true ) ;
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
<unk> . <unk> ( ) ;
}
@Override
public Bundle <unk> ( Bundle outState ) {
outState . putString ( " , <unk> . <unk> ( ) ) ;
outState . putString ( " , <unk> . getGame ( ) . toString ( ) ) ;
outState . putString ( " , <unk> . getTable ( ) . toString ( ) ) ;
outState . putInt ( " , <unk> ) ;
outState . putLong ( " , getElapsedTime ( ) ) ;
return outState ;
}
@Override
public void <unk> ( Bundle savedInstanceState ) {
if ( savedInstanceState != null ) {
String game = savedInstanceState . getString ( " ) ;
String table = savedInstanceState . getString ( " ) ;
String <unk> = savedInstanceState . getString ( " ) ;
<unk> = savedInstanceState . getInt ( " ) ;
setElapsedTime ( savedInstanceState . getLong ( " ) ) ;
<unk> ( <unk> ) ;
if ( ! game . equals ( " ) && ! table . equals ( " ) ) {
<unk> . <unk> ( <unk> ) ;
<unk> . setGame ( <unk> . fromString ( <unk> . getDeck ( ) , game ) ) ;
<unk> . setTable ( <unk> . fromString ( <unk> . getDeck ( ) , table ) ) ;
<unk> . <unk> ( <unk> . getTable ( ) ) ;
} else {
Log . e ( " , " ) ;
}
} else {
setElapsedTime ( <num> ) ;
<unk> ( <unk> ) ;
<unk> = <num> ;
<unk> = new <unk> ( ) ;
<unk> = new ArrayList < CardView > ( ) ;
<unk> . newGame ( ) ;
}
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
if ( <unk> != null ) {
<unk> . <unk> ( <unk> . getTable ( ) ) ;
}
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
<unk> . <unk> ( ) ;
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
<unk> . setText ( " + <unk> ) ;
}
@Override
public void <unk> ( boolean won ) {
super . <unk> ( won ) ;
if ( <unk> ( ) && won ) {
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) , <num> ) ;
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) , <num> ) ;
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) , <num> ) ;
<unk> ( ) . <unk> ( getString ( R . string . <unk> ) , <unk> ) ;
}
}
private void <unk> ( ) {
TextView <unk> = ( TextView ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
<unk> . setText ( getString ( R . string . <unk> , ( int ) Math . ceil ( <unk> ( ) / <num> ) ) ) ;
TextView <unk> = ( TextView ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
<unk> . setText ( getString ( R . string . <unk> , <unk> ) ) ;
}
@Override
public void <unk> ( ) {
<unk> ( ) ;
Button buttonContinue = ( Button ) findViewById ( R . id . <unk> ) ;
buttonContinue . setText ( getString ( R . string . <unk> ) ) ;
buttonContinue . setVisibility ( View . VISIBLE ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
Button buttonQuit = ( Button ) findViewById ( R . id . <unk> ) ;
buttonQuit . setText ( getString ( R . string . <unk> ) ) ;
}
@Override
public void <unk> ( ) {
<unk> ( ) ;
TextView statusView = ( TextView ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
statusView . setText ( getString ( R . string . <unk> ) ) ;
Button buttonContinue = ( Button ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
buttonContinue . setVisibility ( View . GONE ) ;
Button <unk> = ( Button ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
Button buttonQuit = ( Button ) <unk> ( ) . findViewById ( R . id . <unk> ) ;
buttonQuit . setText ( getString ( R . string . <unk> ) ) ;
}
private void <unk> ( ) {
<unk> . setOnItemClickListener ( new OnClickListener ( ) {
public void onClick ( View v ) {
CardView cv = ( CardView ) v ;
Card card = cv . getCard ( ) ;
if ( ! <unk> . contains ( card ) ) {
<unk> . add ( card ) ;
<unk> . add ( cv ) ;
cv . setSelected ( true ) ;
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " + card . toString ( ) ) ;
} else {
<unk> . remove ( card ) ;
<unk> . remove ( cv ) ;
cv . setSelected ( false ) ;
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " + card . toString ( ) ) ;
}
if ( <unk> . size ( ) == <num> ) {
if ( <unk> . <unk> ( ) ) {
<unk> ( <unk> , <unk> ) ;
} else {
<unk> ( <unk> , <unk> ) ;
}
<unk> . clear ( ) ;
<unk> . clear ( ) ;
} else {
<unk> ( ) ;
}
}
} ) ;
}
protected void <unk> ( <unk> <unk> ,
ArrayList < CardView > <unk> ) {
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " ) ;
<unk> ( ) ;
for ( CardView cv : <unk> ) {
cv . <unk> ( ) ;
}
if ( <unk> . <unk> ( ) ) {
<unk> ( <unk> ) ;
}
}
protected void <unk> ( <unk> <unk> ,
ArrayList < CardView > <unk> ) {
if ( <unk> . LOCAL_LOGV )
Log . v ( " , " ) ;
<unk> ( ) ;
<unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> . getTable ( ) ) ;
<unk> += <num> ;
<unk> . setText ( Integer . toString ( <unk> ) ) ;
<unk> ( ) ;
if ( ! <unk> . getTable ( ) . <unk> ( ) && ! <unk> . getGame ( ) . hasNext ( ) ) {
endGame ( true ) ;
}
}
public void <unk> ( View v ) {
<unk> ( ) ;
resetGame ( ) ;
startGame ( ) ;
}
public void <unk> ( View v ) {
<unk> ( ) ;
<unk> ( ) ;
finish ( ) ;
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
endGame ( true ) ;
}
package com . <unk> . <unk> ;
import android . os . Bundle ;
import android . preference . Preference ;
import android . preference . PreferenceActivity ;
import android . preference . PreferenceScreen ;
import com . <unk> . <unk> . R ;
public class SettingsActivity extends PreferenceActivity {
@Override
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
addPreferencesFromResource ( R . xml . settings ) ;
}
@Override
public boolean onPreferenceTreeClick ( PreferenceScreen preferenceScreen ,
Preference preference ) {
return super . onPreferenceTreeClick ( preferenceScreen , preference ) ;
}
package com . <unk> . <unk> ;
import android . content . Intent ;
import android . media . AudioManager ;
import android . os . Bundle ;
import android . view . Menu ;
import android . view . MenuInflater ;
import android . view . MenuItem ;
import android . view . View ;
import android . widget . Button ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . SoundManager ;
import com . <unk> . <unk> . core . <unk> ;
import com . google . example . games . <unk> . BaseGameActivity ;
public class <unk> extends BaseGameActivity {
private SoundManager <unk> ;
@Override
protected void onCreate ( Bundle arg0 ) {
super . onCreate ( arg0 ) ;
overridePendingTransition ( R . anim . <unk> , R . anim . <unk> ) ;
setVolumeControlStream ( AudioManager . STREAM_MUSIC ) ;
<unk> . initialize ( this ) ;
<unk> . initialize ( this ) ;
}
@Override
public void onWindowFocusChanged ( boolean hasFocus ) {
if ( hasFocus ) {
<unk> ( ) . <unk> ( this ) ;
<unk> ( ) ;
}
super . onWindowFocusChanged ( hasFocus ) ;
}
@Override
protected void onStop ( ) {
<unk> ( ) . <unk> ( this ) ;
super . onStop ( ) ;
}
@Override
public boolean onCreateOptionsMenu ( Menu menu ) {
MenuInflater inflater = getMenuInflater ( ) ;
inflater . inflate ( R . menu . menu , menu ) ;
MenuItem item = menu . findItem ( R . id . mute ) ;
<unk> ( item ) ;
return true ;
}
public void <unk> ( ) {
Intent intent = new Intent ( this , SettingsActivity . class ) ;
startActivity ( intent ) ;
}
@Override
public boolean onOptionsItemSelected ( MenuItem item ) {
switch ( item . getItemId ( ) ) {
case R . id . settings :
<unk> ( ) ;
return true ;
case R . id . mute :
<unk> . <unk> ( ! <unk> . <unk> ( ) ) ;
<unk> ( ) . <unk> ( ) ;
<unk> ( ) ;
<unk> ( item ) ;
return true ;
default :
return super . onOptionsItemSelected ( item ) ;
}
}
public void <unk> ( ) {
Intent intent = new Intent ( this , HomeActivity . class ) ;
intent . addFlags ( Intent . FLAG_ACTIVITY_REORDER_TO_FRONT ) ;
startActivity ( intent ) ;
}
public SoundManager <unk> ( ) {
if ( <unk> == null ) {
<unk> = SoundManager . getInstance ( this ) ;
}
return <unk> ;
}
public void <unk> ( int type ) {
if ( <unk> . <unk> ( ) ) {
<unk> ( ) . playSound ( type ) ;
}
}
public void <unk> ( ) {
<unk> ( SoundManager . <unk> ) ;
}
public void <unk> ( ) {
<unk> ( SoundManager . <unk> ) ;
}
public void <unk> ( ) {
<unk> ( SoundManager . <unk> ) ;
}
private void <unk> ( MenuItem item ) {
if ( <unk> ( ) . <unk> ( ) ) {
item . setTitle ( R . string . <unk> ) ;
item . setIcon ( android . R . drawable . ic_media_pause ) ;
} else {
item . setTitle ( R . string . <unk> ) ;
item . setIcon ( android . R . drawable . ic_media_play ) ;
}
}
private void <unk> ( ) {
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
if ( <unk> != null ) {
if ( <unk> ( ) . <unk> ( ) ) {
<unk> . setBackgroundResource ( R . drawable . <unk> ) ;
} else {
<unk> . setBackgroundResource ( R . drawable . <unk> ) ;
}
}
}
public void <unk> ( View v ) {
<unk> . <unk> ( ! <unk> . <unk> ( ) ) ;
<unk> ( ) . <unk> ( ) ;
<unk> ( ) ;
}
@Override
public void startActivity ( Intent intent ) {
super . startActivity ( intent ) ;
overridePendingTransition ( R . anim . <unk> , R . anim . <unk> ) ;
}
@Override
public void finish ( ) {
super . finish ( ) ;
overridePendingTransition ( R . anim . <unk> , R . anim . <unk> ) ;
}
public void <unk> ( ) {
}
public void <unk> ( ) {
}
}
package com . <unk> . <unk> . views ;
import android . content . Context ;
import android . content . res . TypedArray ;
import android . graphics . Typeface ;
import android . util . AttributeSet ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . widget . Button ;
import android . widget . FrameLayout ;
import android . widget . ImageView ;
import android . widget . TextView ;
import com . <unk> . <unk> . R ;
import com . <unk> . <unk> . core . <unk> ;
import com . <unk> . <unk> . core . Utils ;
import com . google . example . games . <unk> . BaseGameActivity ;
public class <unk> extends FrameLayout {
private TextView mDescription ;
private ImageView <unk> ;
private Button <unk> ;
private Button <unk> ;
private <unk> <unk> = <unk> . <unk> ;
private <unk> mListener = null ;
public <unk> ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
<unk> ( attrs ) ;
}
public <unk> ( Context context ) {
super ( context ) ;
init ( ) ;
}
private void <unk> ( AttributeSet attrs ) {
TypedArray <unk> = getContext ( ) . obtainStyledAttributes ( attrs , R . styleable . <unk> ) ;
final int count = <unk> . getIndexCount ( ) ;
for ( int i = <num> ; i < count ; ++ i )
{
int attr = <unk> . getIndex ( i ) ;
switch ( attr )
{
case R . styleable . <unk> :
Utils . setAlpha ( this , <unk> . getFloat ( attr , <num> ) ) ;
break ;
case R . styleable . <unk> :
<unk> = <unk> . valueOf ( <unk> . getString ( attr ) ) ;
break ;
}
}
<unk> . recycle ( ) ;
init ( ) ;
}
private void init ( ) {
LayoutInflater inflater = ( LayoutInflater ) getContext ( )
. getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ;
View view = inflater . inflate ( R . layout . <unk> , null ) ;
if ( ! isInEditMode ( ) ) {
mDescription = ( TextView ) view . findViewById ( R . id . <unk> ) ;
if ( ! this . isInEditMode ( ) ) {
mDescription . setTypeface ( Typeface . createFromAsset ( getContext ( )
. getAssets ( ) , " ) ) ;
<unk> = ( ImageView ) view . findViewById ( R . id . <unk> ) ;
<unk> = ( Button ) view . findViewById ( R . id . <unk> ) ;
<unk> = ( Button ) view . findViewById ( R . id . <unk> ) ;
<unk> ( <unk> ) ;
}
addView ( view ) ;
}
}
private void <unk> ( int <unk> , int <unk> , Integer . . . <unk> ) {
<unk> . setImageResource ( <unk> ) ;
mDescription . setText ( getContext ( ) . getString ( <unk> ) ) ;
<unk> . setText ( getContext ( ) . getString ( <unk> [ <num> ] ) ) ;
if ( <unk> . length == <num> ) {
<unk> . setVisibility ( View . VISIBLE ) ;
<unk> . setText ( getContext ( ) . getString ( <unk> [ <num> ] ) ) ;
} else {
<unk> . setVisibility ( View . GONE ) ;
}
}
private void <unk> ( ) {
if ( <unk> . <unk> ( ) ) {
<unk> ( R . drawable . <unk> ,
R . string . <unk> ,
R . string . <unk> , R . string . <unk> ) ;
} else {
<unk> ( R . drawable . <unk> ,
R . string . <unk> ,
R . string . <unk> ) ;
}
}
private void <unk> ( ) {
<unk> ( R . drawable . <unk> ,
R . string . <unk> , R . string . <unk> ) ;
}
private void <unk> ( ) {
<unk> ( R . drawable . <unk> ,
R . string . <unk> ,
R . string . <unk> ) ;
}
private void <unk> ( ) {
<unk> ( R . drawable . <unk> , R . string . <unk> ,
R . string . <unk> ) ;
}
private void <unk> ( ) {
if ( ( ( BaseGameActivity ) getContext ( ) ) . <unk> ( ) ) {
<unk> ( R . drawable . <unk> , R . string . <unk> , R . string . <unk> , R . string . <unk> ) ;
} else {
<unk> ( R . drawable . <unk> , R . string . <unk> , R . string . <unk> ) ;
}
}
public <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( <unk> listener ) {
this . mListener = listener ;
if ( mListener != null ) {
<unk> . setOnClickListener ( new OnClickListener ( ) {
public void onClick ( View v ) {
mListener . <unk> ( <unk> , v ) ;
}
} ) ;
<unk> . setOnClickListener ( new OnClickListener ( ) {
public void onClick ( View v ) {
mListener . <unk> ( <unk> , v ) ;
}
} ) ;
} else {
<unk> . setOnClickListener ( null ) ;
<unk> . setOnClickListener ( null ) ;
}
}
public void <unk> ( <unk> item ) {
<unk> = item ;
switch ( item ) {
case <unk> :
<unk> ( ) ;
break ;
case SPEED :
<unk> ( ) ;
break ;
case <unk> :
<unk> ( ) ;
break ;
case HELP :
<unk> ( ) ;
break ;
case <unk> :
<unk> ( ) ;
break ;
}
}
public void update ( ) {
<unk> ( <unk> ( ) ) ;
}
public interface <unk> {
void <unk> ( <unk> type , View v ) ;
void <unk> ( <unk> type , View v ) ;
}
public enum <unk> {
<unk> , SPEED , <unk> , HELP , <unk> , SETTINGS
}
}
package com . <unk> . <unk> ;
public final class BuildConfig {
public final static boolean DEBUG = true ;
package com . viewpagerindicator ;
public final class R {
public static final class attr {
public static final int centered = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int lineWidth = <num> ;
public static final int <unk> = <num> ;
public static final int radius = <num> ;
public static final int <unk> = <num> ;
public static final int selectedColor = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int strokeWidth = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class bool {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class color {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class dimen {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class drawable {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class id {
public static final int bottom = <num> ;
public static final int none = <num> ;
public static final int top = <num> ;
public static final int triangle = <num> ;
public static final int underline = <num> ;
}
public static final class integer {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class style {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int Widget = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class styleable {
public static final int [ ] <unk> = { <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int [ ] <unk> = { <num> , <num> , <num> , <num> , <num> , <num> , <num> } ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int [ ] TitlePageIndicator = { <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int [ ] <unk> = { <num> , <num> , <num> , <num> , <num> } ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int [ ] <unk> = { <num> , <num> , <num> , <num> , <num> , <num> } ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
}
package com . <unk> . <unk> . core ;
import android . content . Context ;
import android . content . SharedPreferences ;
import android . preference . PreferenceManager ;
public class <unk> {
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
private static boolean isInitialized = false ;
private static Context <unk> = null ;
public static void initialize ( Context context ) {
if ( ! isInitialized ) {
<unk> = context ;
isInitialized = true ;
}
}
private static boolean <unk> ( String <unk> , boolean value ) {
if ( ! isInitialized ) {
return false ;
}
SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( <unk> ) ;
SharedPreferences . Editor ed = prefs . edit ( ) ;
ed . putBoolean ( <unk> , value ) ;
return ed . commit ( ) ;
}
private static boolean <unk> ( String <unk> , boolean defaultValue ) {
if ( ! isInitialized ) {
return defaultValue ;
}
SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( <unk> ) ;
return prefs . getBoolean ( <unk> , defaultValue ) ;
}
public static boolean <unk> ( ) {
return <unk> ( <unk> , true ) ;
}
public static boolean <unk> ( boolean value ) {
return <unk> ( <unk> , value ) ;
}
public static boolean <unk> ( ) {
return <unk> ( <unk> , false ) ;
}
public static boolean <unk> ( boolean value ) {
return <unk> ( <unk> , value ) ;
}
public static boolean <unk> ( ) {
return <unk> ( <unk> , true ) ;
}
public static boolean <unk> ( boolean value ) {
return <unk> ( <unk> , value ) ;
}
public static boolean <unk> ( ) {
return <unk> ( <unk> , true ) ;
}
public static boolean <unk> ( boolean value ) {
return <unk> ( <unk> , value ) ;
}
public static boolean <unk> ( ) {
return <unk> ( <unk> , false ) ;
}
public static boolean <unk> ( ) {
return <unk> ( <unk> , false ) ;
}
public static boolean <unk> ( ) {
return <unk> ( <unk> , false ) ;
}
public static boolean <unk> ( ) {
return <unk> ( <unk> , false ) ;
}
public static boolean <unk> ( boolean value ) {
return <unk> ( <unk> , value ) ;
}
public static boolean <unk> ( boolean value ) {
return <unk> ( <unk> , value ) ;
}
public static boolean <unk> ( boolean value ) {
return <unk> ( <unk> , value ) ;
}
public static boolean <unk> ( boolean value ) {
return <unk> ( <unk> , value ) ;
}
}
import java . io . * ;
import java . util . * ;
public class <unk> {
Pet [ ] <unk> = null ;
int size = <num> ;
public void readData ( String filename ) {
Scanner fileScanner = null ;
try {
fileScanner = new Scanner ( new File ( filename ) ) ;
}
catch ( FileNotFoundException e ) {
System . out . println ( e ) ;
System . exit ( <num> ) ;
}
String stringSize = fileScanner . next ( ) ;
size = Integer . parseInt ( stringSize ) ;
<unk> = new Pet [ size ] ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
String name = fileScanner . next ( ) ;
String <unk> = fileScanner . next ( ) ;
int quantity = Integer . parseInt ( <unk> ) ;
<unk> [ i ] = new Pet ( name , quantity ) ;
}
}
public void writeData ( String filename ) {
PrintWriter outStream = null ;
try {
outStream = new PrintWriter ( " ) ;
} catch ( FileNotFoundException e ) {
System . out . println ( e ) ;
System . exit ( <num> ) ;
}
outStream . println ( size ) ;
for ( int i = <num> ; i < <unk> . length ; ++ i ) {
outStream . println ( <unk> [ i ] . getName ( ) + " + <unk> [ i ] . getCount ( ) ) ;
}
outStream . close ( ) ;
}
public void <unk> ( ) {
int count = <num> ;
int stop = <num> ;
do {
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
if ( <unk> [ i ] . <unk> ( <unk> [ i  <num> ] ) == <num> ) {
<unk> ( i , i  <num> ) ;
count ++ ;
}
}
if ( count > <num> ) count = <num> ;
else stop = <num> ;
}
while ( stop < <num> ) ;
}
public void <unk> ( ) {
int count = <num> ;
int stop = <num> ;
do {
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
if ( <unk> [ i ] . <unk> ( <unk> [ i  <num> ] ) > <num> ) {
<unk> ( i , i  <num> ) ;
count ++ ;
}
}
if ( count > <num> ) count = <num> ;
else stop = <num> ;
}
while ( stop < <num> ) ;
}
public void <unk> ( ) {
int count = <num> ;
int stop = <num> ;
do {
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
if ( <unk> [ i ] . <unk> ( <unk> [ i  <num> ] ) ==  <num> ) {
<unk> ( i , i  <num> ) ;
count ++ ;
}
}
if ( count > <num> ) count = <num> ;
else stop = <num> ;
}
while ( stop < <num> ) ;
}
public void <unk> ( ) {
int count = <num> ;
int stop = <num> ;
do {
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
if ( <unk> [ i ] . <unk> ( <unk> [ i  <num> ] ) < <num> ) {
<unk> ( i , i  <num> ) ;
count ++ ;
}
}
if ( count > <num> ) count = <num> ;
else stop = <num> ;
}
while ( stop < <num> ) ;
}
public void <unk> ( int i , int j ) {
Pet [ ] <unk> = new Pet [ <num> ] ;
<unk> [ <num> ] = <unk> [ j ] ;
<unk> [ j ] = <unk> [ i ] ;
<unk> [ i ] = <unk> [ <num> ] ;
}
public String toString ( ) {
String <unk> = " ;
String temp = " ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
<unk> = <unk> [ i ] . toString ( ) ;
temp += <unk> + " ;
}
return temp ;
}
}
public class Pet {
public String name ;
public int quantity = <num> ;
public Pet ( String <unk> , int <unk> ) {
name = <unk> ;
quantity = <unk> ;
}
public int <unk> ( Pet p ) {
if ( p . quantity == quantity ) return <num> ;
else if ( p . quantity > quantity ) return <num> ;
else if ( p . quantity < quantity ) return  <num> ;
else return <num> ;
}
public int <unk> ( Pet p ) {
String <unk> = name . toLowerCase ( ) ;
String <unk> = p . name . toLowerCase ( ) ;
int value = <unk> . compareTo ( <unk> ) ;
return value ;
}
public int getCount ( ) {
return quantity ;
}
public String getName ( ) {
return name ;
}
public String toString ( ) {
String <unk> = name + " + quantity ;
return <unk> ;
}
}
import java . awt . BorderLayout ;
import java . awt . GridLayout ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import javax . swing . * ;
public class <unk> implements ActionListener {
private JButton <unk> = new JButton ( " ) ;
private JButton <unk> = new JButton ( " ) ;
private JButton <unk> = new JButton ( " ) ;
private JButton <unk> = new JButton ( " ) ;
private JButton <unk> = new JButton ( " ) ;
private JTextArea <unk> = new JTextArea ( <num> , <num> ) ;
private <unk> <unk> = null ;
public <unk> ( ) {
<unk> = new <unk> ( ) ;
JFrame frame = new JFrame ( " ) ;
frame . getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ;
JPanel buttonPanel = new JPanel ( ) ;
buttonPanel . setLayout ( new GridLayout ( <num> , <num> ) ) ;
buttonPanel . add ( <unk> ) ;
buttonPanel . add ( <unk> ) ;
buttonPanel . add ( <unk> ) ;
buttonPanel . add ( <unk> ) ;
frame . add ( <unk> , BorderLayout . NORTH ) ;
frame . add ( buttonPanel , BorderLayout . SOUTH ) ;
frame . add ( <unk> , BorderLayout . CENTER ) ;
frame . pack ( ) ;
frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
frame . setVisible ( true ) ;
<unk> . addActionListener ( this ) ;
<unk> . addActionListener ( this ) ;
<unk> . addActionListener ( this ) ;
<unk> . addActionListener ( this ) ;
<unk> . addActionListener ( this ) ;
}
@Override
public void actionPerformed ( ActionEvent event ) {
if ( event . getSource ( ) == <unk> ) {
<unk> . <unk> ( ) ;
} else if ( event . getSource ( ) == <unk> ) {
<unk> . <unk> ( ) ;
} else if ( event . getSource ( ) == <unk> ) {
<unk> . <unk> ( ) ;
} else if ( event . getSource ( ) == <unk> ) {
<unk> . <unk> ( ) ;
} else if ( event . getSource ( ) == <unk> ) {
<unk> . writeData ( " ) ;
} else {
<unk> . setText ( " ) ;
}
<unk> . setText ( <unk> . toString ( ) ) ;
}
public static void main ( String [ ] args ) {
<unk> tester = new <unk> ( ) ;
tester . <unk> . readData ( " ) ;
tester . <unk> . setText ( tester . <unk> . toString ( ) ) ;
}
package edu . <unk> . cs . <unk> ;
import java . io . BufferedWriter ;
import java . io . FileWriter ;
import java . io . IOException ;
import java . util . ArrayList ;
import java . util . Iterator ;
import java . util . Map ;
import edu . <unk> . cs . <unk> . <unk> ;
public class <unk> {
public <unk> ( ) { } ;
static public void <unk> ( Map < Integer , ArrayList < <unk> >> graph ,
int <unk> , int <unk> , String name , String output ) {
int vertex ;
int sink = <unk> + <unk> + <num> ;
String tempFile = " ;
ArrayList < <unk> > <unk> ;
Iterator < <unk> > it ;
<unk> edge ;
String <unk> , incoming ;
try {
BufferedWriter bw = new BufferedWriter ( new FileWriter ( tempFile ) ) ;
bw . write ( " + name + " ) ;
bw . newLine ( ) ;
bw . write ( " ) ;
bw . newLine ( ) ;
for ( vertex = <num> ; vertex <= sink ; vertex ++ ) {
if ( vertex == <num> )
<unk> = " ;
else if ( vertex >= <num> && vertex <= <unk> )
<unk> = " + vertex ;
else if ( vertex == sink )
<unk> = " ;
else
<unk> = " + vertex ;
<unk> = graph . get ( vertex ) ;
if ( <unk> == null )
continue ;
it = <unk> . iterator ( ) ;
while ( it . hasNext ( ) ) {
edge = it . next ( ) ;
if ( edge . vertex == <num> )
incoming = " ;
else if ( edge . vertex >= <num> && edge . vertex <= <unk> )
incoming = " + edge . vertex ;
else if ( edge . vertex == sink )
incoming = " ;
else
incoming = " + edge . vertex ;
bw . write ( " + <unk> + " + incoming + " +
edge . capacity + " ) ;
bw . newLine ( ) ;
}
}
bw . write ( " ) ;
bw . newLine ( ) ;
bw . flush ( ) ;
bw . close ( ) ;
String command = " + output + " + name + " + output +
" + tempFile ;
Process p = Runtime . getRuntime ( ) . exec ( command ) ;
p . waitFor ( ) ;
command = " + tempFile ;
p = Runtime . getRuntime ( ) . exec ( command ) ;
p . waitFor ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
System . err . println ( e . getMessage ( ) ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
System . err . println ( e . getMessage ( ) ) ;
}
return ;
}
}
package edu . <unk> . cs . <unk> ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . Iterator ;
import java . util . Map ;
import java . util . Random ;
import edu . <unk> . cs . <unk> . hdfs . <unk> ;
import edu . <unk> . cs . <unk> . <unk> . <unk> ;
public class <unk> {
final private int <unk> = <num> ;
private int <unk> ;
private Map < Integer , <unk> > <unk> ;
private Map < Integer , Integer > <unk> =
new HashMap < Integer , Integer > ( ) ;
private Map < Integer , ArrayList < Integer >> <unk> =
new HashMap < Integer , ArrayList < Integer >> ( ) ;
private ArrayList < Thread > <unk> = new ArrayList < Thread > ( ) ;
final private <unk> <unk> ;
final private <unk> nn ;
final private int <unk> ;
public <unk> ( int <unk> , String <unk> ,
String <unk> , boolean <unk> ) {
<unk> = <unk> ;
if ( ( <unk> % <unk> ) == <num> )
<unk> = <unk> / <unk> ;
else
<unk> = ( <unk> / <unk> ) + <num> ;
<unk> = new <unk> ( <unk> , <unk> , <unk> , <unk> ) ;
nn = new <unk> ( <unk> , <unk> , <unk> ) ;
<unk> ( ) ;
nn . <unk> ( <unk> , <unk> ) ;
return ;
}
private void <unk> ( ) {
int i , j , <unk> , <unk> ;
ArrayList < Integer > <unk> ;
Random randomGenerator = new Random ( ) ;
ArrayList < Integer > <unk> = new ArrayList < Integer > ( <unk> + <num> ) ;
for ( <unk> = <num> ; <unk> <= <unk> ; <unk> ++ )
<unk> . add ( <unk> ) ;
<unk> = <unk> ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
<unk> = new ArrayList < Integer > ( ) ;
for ( j = <num> ; j < <unk> ; j ++ ) {
if ( <unk> == <num> )
break ;
<unk> = randomGenerator . nextInt ( <unk> ) + <num> ;
if ( <unk> . contains ( <unk> ) ) {
<unk> . remove ( <unk> . indexOf ( <unk> ) ) ;
<unk> . put ( <unk> , i ) ;
<unk> . add ( <unk> ) ;
<unk>  ;
}
else
j  ;
}
<unk> . put ( i , <unk> ) ;
}
}
public void <unk> ( ) {
<unk> sn ;
Thread <unk> ;
<unk> = new HashMap < Integer , <unk> > ( ) ;
for ( int i = <num> ; i <= <unk> ; i ++ ) {
sn = new <unk> ( <unk> , nn , i ) ;
<unk> = new Thread ( sn ) ;
<unk> . add ( <unk> ) ;
<unk> . start ( ) ;
<unk> . put ( i , sn ) ;
}
return ;
}
public void <unk> ( ) {
int size ;
Thread <unk> ;
while ( ! <unk> . isEmpty ( ) ) {
size = <unk> . size ( )  <num> ;
<unk> = <unk> . get ( size ) ;
if ( ! <unk> . isInterrupted ( ) )
<unk> . interrupt ( ) ;
<unk> . remove ( size ) ;
}
return ;
}
public void <unk> ( ) {
int i , <unk> ;
StringBuilder <unk> = new StringBuilder ( ) ;
Iterator < Integer > it ;
ArrayList < Integer > <unk> = new ArrayList < Integer > ( ) ;
<unk> = <num> ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
<unk> = <unk> . get ( i ) ;
<unk> += <unk> . size ( ) ;
it = <unk> . iterator ( ) ;
while ( it . hasNext ( ) )
<unk> . append ( it . next ( ) . toString ( ) + " ) ;
System . out . println ( i + " + <unk> ) ;
<unk> . delete ( <num> , <unk> . length ( ) ) ;
}
if ( <unk> == <unk> )
System . out . println ( " ) ;
else
System . out . println ( " ) ;
nn . <unk> ( ) ; System . out . println ( ) ;
nn . <unk> ( ) ;
return ;
}
public void <unk> ( ) {
<unk> . <unk> ( ) ;
return ;
}
public void <unk> ( int <unk> ) {
nn . <unk> ( <unk> ) ;
<unk> . <unk> ( nn , <unk> ) ;
return ;
}
public void <unk> ( ) {
<unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( ) ;
return ;
}
public ArrayList < Thread > <unk> ( ) {
return <unk> ;
}
public int <unk> ( ) {
return <unk> . <unk> ( ) ;
}
}
package edu . <unk> . cs . <unk> . hdfs ;
import java . util . ArrayList ;
import java . util . Random ;
public class <unk> {
final private int <unk> ;
private ArrayList < Integer > <unk> ;
final private <unk> nn ;
public <unk> ( <unk> <unk> , int id ) {
<unk> = id ;
nn = <unk> ;
<unk> = new ArrayList < Integer > ( ) ;
return ;
}
public void <unk> ( int split ) {
<unk> . add ( split ) ;
return ;
}
public boolean <unk> ( int split ) {
return <unk> . contains ( split ) ;
}
public ArrayList < Integer > <unk> ( ) {
return <unk> ;
}
package edu . <unk> . cs . <unk> ;
public class <unk> {
public int capacity ;
public int <unk> ;
public int vertex ;
public <unk> ( int c , int f , int v ) {
capacity = c ;
<unk> = f ;
vertex = v ;
return ;
}
package edu . <unk> . cs . <unk> . <unk> ;
import java . util . ArrayList ;
import java . util . Comparator ;
import java . util . HashMap ;
import java . util . HashSet ;
import java . util . Iterator ;
import java . util . Map ;
import java . util . PriorityQueue ;
import java . util . Random ;
import java . util . Set ;
import edu . <unk> . cs . <unk> . <unk> ;
import edu . <unk> . cs . <unk> . <unk> ;
import edu . <unk> . cs . <unk> . <unk> ;
import edu . <unk> . cs . <unk> . <unk> ;
import edu . <unk> . cs . <unk> . <unk> ;
import edu . <unk> . cs . <unk> . hdfs . <unk> ;
import edu . <unk> . cs . <unk> . <unk> ;
public class <unk> {
private enum <unk> {
<unk> ,
<unk> ,
PUSH
}
public class Task {
public Float <unk> ;
public int <unk> ;
public Task ( Float <unk> , int id ) {
<unk> = <unk> ;
<unk> = id ;
return ;
}
}
public class <unk> implements Comparator < Task > {
@Override
public int compare ( final Task arg0 , final Task arg1 ) {
return <num>  arg0 . <unk> . compareTo ( arg1 . <unk> ) ;
}
}
private PriorityQueue < Task > <unk> ;
private boolean <unk> ;
private int <unk> ;
private double threshold ;
private int <unk> ;
private Map < Integer , float [ ] > <unk> ;
final private int <unk> ;
final private int <unk> ;
private <unk> nn ;
final private <unk> scheduler ;
private int <unk> ;
private int <unk> ;
private Map < Integer , ArrayList < Integer >> <unk> ;
private long timeElapsed ;
private Map < Integer , int [ ] > <unk> ;
private Map < Integer , Integer > <unk> ;
private Map < Integer , ArrayList < Integer >> <unk> ;
private HashSet < Integer > <unk> ;
private HashSet < Integer > <unk> ;
private Map < Integer , <unk> > <unk> ;
private Map < Integer , int [ ] > <unk> ;
private Map < Integer , ArrayList < <unk> >> <unk> ;
private int <unk> ;
private void <unk> ( ) {
<unk> . <unk> ( <unk> , <unk> , <unk> , " , " ) ;
return ;
}
private <unk> <unk> ( <unk> msg ) {
int task , <unk> , id , <unk> , <unk> , i ;
boolean <unk> ;
ArrayList < Integer > <unk> ;
ArrayList < Integer > <unk> ;
<unk> sn ;
Iterator < Integer > it , it2 ;
HashSet < Integer > <unk> ;
int [ ] <unk> ;
float [ ] <unk> ;
Random randomInt ;
long time = System . currentTimeMillis ( ) ;
<unk> = <num> ;
randomInt = new Random ( ) ;
if ( <unk> . isEmpty ( ) ) {
<unk> = <unk> ;
<unk> = true ;
}
else {
i = randomInt . nextInt ( <num> ) + <num> ;
if ( i >= <num> && i <= <unk> )
<unk> += ( <num> * i ) ;
<unk> = <unk> ;
<unk> = false ;
}
<unk> = msg . <unk> ( ) ;
sn = <unk> . get ( <unk> ) ;
<unk> = sn . <unk> ( ) ;
it = <unk> . iterator ( ) ;
while ( it . hasNext ( ) ) {
task = it . next ( ) ;
if ( <unk> . contains ( task ) ) {
<unk> = <unk> . get ( task ) ;
if ( <unk> == null ) {
<unk> = new float [ <num> ] ;
<unk> [ <num> ] = <unk> [ <num> ] =  <num> ;
}
msg . <unk> ( task ) ;
msg . <unk> ( <num> ) ;
msg . <unk> ( <unk> ) ;
if ( <unk> ) {
<unk> ++ ;
msg . <unk> ( true ) ;
<unk> [ <num> ] = <num> ;
if ( <unk> [ <num> ] >= <num> || <unk> [ <num> ] < <num> )
System . err . println ( " +
" +
" ) ;
}
else {
msg . <unk> ( false ) ;
<unk> [ <num> ] = <num> ;
if ( <unk> [ <num> ] >= <num> && <unk> [ <num> ] <= <num> )
System . err . println ( " +
" ) ;
}
<unk> . put ( task , <unk> ) ;
<unk> . remove ( task ) ;
timeElapsed += System . currentTimeMillis ( )  time ;
return msg ;
}
}
<unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
it = <unk> . iterator ( ) ;
while ( it . hasNext ( ) ) {
id = it . next ( ) ;
if ( id == <unk> )
continue ;
sn = <unk> . get ( id ) ;
<unk> = sn . <unk> ( ) ;
it2 = <unk> . iterator ( ) ;
while ( it2 . hasNext ( ) ) {
task = it2 . next ( ) ;
if ( <unk> . contains ( task ) ) {
<unk> = <unk> . get ( task ) ;
if ( <unk> == null ) {
<unk> = new float [ <num> ] ;
<unk> [ <num> ] = <unk> [ <num> ] =  <num> ;
}
msg . <unk> ( task ) ;
msg . <unk> ( <num> ) ;
msg . <unk> ( <unk> + <num> ) ;
if ( <unk> ) {
<unk> ++ ;
msg . <unk> ( true ) ;
<unk> [ <num> ] = <num> ;
if ( <unk> [ <num> ] >= <num> || <unk> [ <num> ] < <num> )
System . err . println ( " +
" +
" ) ;
}
else {
msg . <unk> ( false ) ;
<unk> [ <num> ] = <num> ;
if ( <unk> [ <num> ] >= <num> && <unk> [ <num> ] <= <num> )
System . err . println ( " +
" ) ;
}
<unk> . put ( task , <unk> ) ;
<unk> . remove ( task ) ;
timeElapsed += System . currentTimeMillis ( )  time ;
return msg ;
}
}
}
it = <unk> . iterator ( ) ;
task = it . next ( ) ;
<unk> = <unk> . get ( task ) ;
if ( <unk> . get ( <unk> [ <num> ] ) == <unk> ||
<unk> . get ( <unk> [ <num> ] ) == <unk> ||
<unk> . get ( <unk> [ <num> ] ) == <unk> ) {
System . err . println ( " ) ;
System . exit ( <num> ) ;
}
<unk> = <unk> . get ( task ) ;
if ( <unk> == null ) {
<unk> = new float [ <num> ] ;
<unk> [ <num> ] = <unk> [ <num> ] =  <num> ;
}
msg . <unk> ( task ) ;
msg . <unk> ( <num> ) ;
msg . <unk> ( <unk> + <num> ) ;
if ( <unk> ) {
<unk> ++ ;
msg . <unk> ( true ) ;
<unk> [ <num> ] = <num> ;
if ( <unk> [ <num> ] >= <num> || <unk> [ <num> ] < <num> )
System . err . println ( " +
" +
" ) ;
}
else {
msg . <unk> ( false ) ;
<unk> [ <num> ] = <num> ;
if ( <unk> [ <num> ] >= <num> && <unk> [ <num> ] <= <num> )
System . err . println ( " +
" ) ;
}
<unk> . put ( task , <unk> ) ;
<unk> . remove ( task ) ;
timeElapsed += System . currentTimeMillis ( )  time ;
return msg ;
}
private <unk> <unk> ( <unk> msg ) {
int <unk> , task , <unk> , <unk> ;
ArrayList < Integer > taskList , <unk> ;
<unk> sn ;
int [ ] <unk> ;
float [ ] <unk> ;
<unk> = msg . <unk> ( ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
sn = <unk> . get ( <unk> ) ;
taskList = <unk> . get ( <unk> ) ;
if ( taskList . size ( ) == <num> )
return null ;
task = taskList . get ( <num> ) ;
<unk> = <unk> . get ( task ) ;
taskList . remove ( <num> ) ;
<unk> . put ( <unk> , taskList ) ;
<unk> = <num> ;
msg . <unk> ( false ) ;
msg . <unk> ( task ) ;
<unk> = <unk> . get ( task ) ;
if ( <unk> == null ) {
<unk> = new float [ <num> ] ;
<unk> [ <num> ] = <unk> [ <num> ] =  <num> ;
}
if ( sn . <unk> ( task ) ) {
msg . <unk> ( <num> ) ;
msg . <unk> ( <unk> ) ;
}
else if ( <unk> . contains ( <unk> [ <num> ] ) ||
<unk> . contains ( <unk> [ <num> ] ) ||
<unk> . contains ( <unk> [ <num> ] ) ) {
msg . <unk> ( <num> ) ;
msg . <unk> ( <unk> + <num> ) ;
}
else {
msg . <unk> ( <num> ) ;
msg . <unk> ( <unk> + <num> ) ;
}
<unk> [ <num> ] = <num> ;
<unk> . put ( task , <unk> ) ;
return msg ;
}
private <unk> push ( <unk> msg ) {
int <unk> , <unk> , task , i , <unk> ;
<unk> sn ;
ArrayList < Integer > <unk> , <unk> ;
boolean <unk> ;
Random randomInt ;
int [ ] <unk> ;
float [ ] <unk> ;
randomInt = new Random ( ) ;
<unk> = <num> ;
<unk> = false ;
task =  <num> ;
<unk> = msg . <unk> ( ) ;
sn = <unk> . get ( <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> == null )
return null ;
if ( <unk> . isEmpty ( ) ) {
if ( <unk> ) {
<unk> = true ;
<unk> ( ) ;
}
else
return null ;
}
if ( <unk> ) {
if ( sn . <unk> ( ) )
return null ;
if ( <unk> . size ( ) == <num> )
return null ;
task = <unk> . poll ( ) . <unk> ;
}
else {
task = <unk> . get ( <num> ) ;
<unk> . remove ( <num> ) ;
<unk> . put ( <unk> , <unk> ) ;
i = randomInt . nextInt ( <num> ) + <num> ;
if ( i >= <num> && i <= <unk> )
<unk> += ( <num> * i ) ;
}
<unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> . get ( task ) ;
<unk> = <unk> . get ( task ) ;
if ( <unk> == null ) {
<unk> = new float [ <num> ] ;
<unk> [ <num> ] = <unk> [ <num> ] =  <num> ;
<unk> [ <num> ] = <unk> ;
}
if ( sn . <unk> ( task ) ) {
msg . <unk> ( <num> ) ;
msg . <unk> ( <unk> ) ;
msg . <unk> ( task ) ;
if ( <unk> ) {
msg . <unk> ( true ) ;
<unk> [ <num> ] = <num> ;
<unk> ++ ;
if ( <unk> [ <num> ] < <num> || <unk> [ <num> ] >= <num> )
System . err . println ( " +
" +
" ) ;
}
else {
msg . <unk> ( false ) ;
<unk> [ <num> ] = <num> ;
<unk> [ <num> ] = <unk> ;
if ( <unk> [ <num> ] >= <num> && <unk> [ <num> ] <= <num> )
System . err . println ( " +
" ) ;
}
<unk> . put ( task , <unk> ) ;
return msg ;
}
else if ( <unk> . contains ( <unk> [ <num> ] ) ||
<unk> . contains ( <unk> [ <num> ] ) ||
<unk> . contains ( <unk> [ <num> ] ) ) {
msg . <unk> ( <num> ) ;
msg . <unk> ( <unk> + <num> ) ;
msg . <unk> ( task ) ;
if ( <unk> ) {
msg . <unk> ( true ) ;
<unk> [ <num> ] = <num> ;
<unk> ++ ;
if ( <unk> [ <num> ] < <num> || <unk> [ <num> ] >= <num> )
System . err . println ( " +
" +
" ) ;
}
else {
msg . <unk> ( false ) ;
<unk> [ <num> ] = <num> ;
<unk> [ <num> ] = <unk> + <num> ;
if ( <unk> [ <num> ] >= <num> && <unk> [ <num> ] <= <num> )
System . err . println ( " +
" ) ;
}
<unk> . put ( task , <unk> ) ;
return msg ;
}
else {
msg . <unk> ( <num> ) ;
msg . <unk> ( <unk> + <num> ) ;
msg . <unk> ( task ) ;
if ( <unk> ) {
msg . <unk> ( true ) ;
<unk> [ <num> ] = <num> ;
<unk> ++ ;
if ( <unk> [ <num> ] < <num> || <unk> [ <num> ] >= <num> )
System . err . println ( " +
" +
" ) ;
}
else {
msg . <unk> ( false ) ;
<unk> [ <num> ] = <num> ;
<unk> [ <num> ] = <unk> + <num> ;
if ( <unk> [ <num> ] >= <num> && <unk> [ <num> ] <= <num> )
System . err . println ( " +
" ) ;
}
<unk> . put ( task , <unk> ) ;
return msg ;
}
}
private void <unk> ( ) {
int server ;
<unk> sn ;
Random r ;
int <unk> ;
r = new Random ( ) ;
<unk> = ( int ) Math . ceil ( ( ( double ) <unk> ) / <num> *
( ( double ) <unk> ) ) ;
System . out . println ( " + <unk> ) ;
for ( server = <num> ; server <= <unk> ; server ++ ) {
sn = <unk> . get ( server ) ;
if ( r . nextInt ( <num> ) == <num> && <unk> > <num> ) {
<unk>  ;
sn . <unk> ( true ) ;
}
else
sn . <unk> ( false ) ;
}
}
private void <unk> ( ) {
int task , <unk> = <num> ;
Set < Integer > tasks ;
Iterator < Integer > it ;
float [ ] <unk> ;
float <unk> = <num> ;
if ( <unk> == null )
<unk> = new HashSet < Integer > ( ) ;
else
<unk> . clear ( ) ;
tasks = <unk> . keySet ( ) ;
it = tasks . iterator ( ) ;
while ( it . hasNext ( ) ) {
task = it . next ( ) ;
<unk> = <unk> . get ( task ) ;
<unk> += <unk> [ <num> ] ;
if ( <unk> [ <num> ] >= <num> && <unk> [ <num> ] < <num> ) {
<unk> += <unk> [ <num> ] ;
<unk> ++ ;
}
}
threshold = <unk> / ( <unk> . size ( ) + <unk> )  <num> ;
if ( threshold > <num> ) {
System . err . println ( " ) ;
System . exit ( <num> ) ;
}
it = tasks . iterator ( ) ;
while ( it . hasNext ( ) ) {
task = it . next ( ) ;
<unk> = <unk> . get ( task ) ;
if ( <unk> [ <num> ] < threshold && <unk> [ <num> ] ==  <num> )
<unk> . add ( task ) ;
}
return ;
}
private void <unk> ( ) {
int task , <unk> , <unk> ;
float [ ] <unk> ;
float <unk> , <unk> , <unk> ;
Set < Integer > tasks ;
Iterator < Integer > <unk> ;
<unk> sn ;
Task <unk> ;
if ( <unk> == null ) {
Comparator < Task > <unk> = new <unk> ( ) ;
System . gc ( ) ;
<unk> = new PriorityQueue < Task > ( <unk> , <unk> ) ;
}
else
<unk> . clear ( ) ;
tasks = <unk> . keySet ( ) ;
<unk> = tasks . iterator ( ) ;
while ( <unk> . hasNext ( ) ) {
task = <unk> . next ( ) ;
<unk> = <unk> . get ( task ) ;
if ( <unk> == null )
continue ;
if ( <unk> [ <num> ] >= <num> && <unk> [ <num> ] <= <num> )
continue ;
<unk> = <unk> [ <num> ] ;
<unk> = ( int ) <unk> [ <num> ] ;
<unk> = <unk> [ <num> ] ;
sn = <unk> . get ( <unk> ) ;
<unk> = sn . <unk> ( ) ;
if ( <unk> > <num> || <unk> < <num> )
System . err . println ( " +
" ) ;
<unk> = <unk> / <unk> ;
<unk> = new Task ( ( <num>  <unk> ) / <unk> , task ) ;
<unk> . add ( <unk> ) ;
}
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int t ) {
int server , task ;
int [ ] <unk> ;
int source = <num> ;
int sink = <unk> + <unk> + <num> ;
<unk> <unk> ;
ArrayList < <unk> > <unk> ;
float loadFactor = ( float ) <num> ;
int <unk> = ( int ) ( ( <num> + <unk> + <unk> + <num> ) / loadFactor ) ;
if ( <unk> == null )
<unk> = new HashMap < Integer ,
ArrayList < <unk> >> ( <unk> ) ;
if ( <unk> . get ( source ) == null )
<unk> = new ArrayList < <unk> > ( <unk> ) ;
else {
<unk> = <unk> . get ( source ) ;
<unk> . clear ( ) ;
}
for ( task = <unk> + <num> ; task < sink ; task ++ )
<unk> . add ( new <unk> ( <num> , <num> , task ) ) ;
<unk> . put ( source , <unk> ) ;
for ( task = <unk> + <num> ; task < sink ; task ++ ) {
if ( <unk> . get ( task ) == null )
<unk> = new ArrayList < <unk> > ( <num> ) ;
else {
<unk> = <unk> . get ( task ) ;
<unk> . clear ( ) ;
}
<unk> = <unk> . get ( task  <unk> ) ;
<unk> = new <unk> ( <num> , <num> , <unk> [ <num> ] ) ;
<unk> . add ( <unk> ) ;
<unk> = new <unk> ( <num> , <num> , <unk> [ <num> ] ) ;
<unk> . add ( <unk> ) ;
<unk> = new <unk> ( <num> , <num> , <unk> [ <num> ] ) ;
<unk> . add ( <unk> ) ;
<unk> . put ( task , <unk> ) ;
}
for ( server = <num> ; server <= <unk> ; server ++ ) {
if ( <unk> . get ( server ) == null )
<unk> = new ArrayList < <unk> > ( <num> ) ;
else {
<unk> = <unk> . get ( server ) ;
<unk> . clear ( ) ;
}
<unk> . add ( new <unk> ( t , <num> , sink ) ) ;
<unk> . put ( server , <unk> ) ;
}
return ;
}
public <unk> ( int <unk> , int <unk> , String <unk> , boolean <unk> ) {
<unk> = <unk> ;
<unk> = <unk> ;
if ( <unk> . equals ( " ) )
scheduler = <unk> . <unk> ;
else if ( <unk> . equals ( " ) )
scheduler = <unk> . <unk> ;
else
scheduler = <unk> . PUSH ;
<unk> = <unk> ;
<unk> = <num> ;
<unk> = <num> ;
<unk> = new HashMap < Integer , Integer > ( ( int ) ( <unk> / <num> ) ) ;
<unk> = new HashMap < Integer , int [ ] > ( ( int ) ( <unk> / <num> ) ) ;
<unk> = new HashMap < Integer , ArrayList < Integer >>
( ( int ) ( ( ( <unk> / <num> ) + <num> ) / <num> ) ) ;
<unk> = <num> ;
return ;
}
public void <unk> ( Map < Integer , <unk> > map ) {
<unk> = map ;
return ;
}
public void <unk> ( ) {
int i , <unk> , <unk> , <unk> ;
int [ ] stats ;
int <unk> , <unk> ;
<unk> = <unk> = <num> ;
<unk> = <unk> =  <num> ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
<unk> = <num> ;
stats = <unk> . get ( i ) ;
<unk> += stats [ <num> ] ;
<unk> += stats [ <num> ] ;
<unk> += stats [ <num> ] ;
<unk> += stats [ <num> ] ;
<unk> += stats [ <num> ] ;
<unk> += stats [ <num> ] ;
<unk> = stats [ <num> ] + stats [ <num> ] * <num> + stats [ <num> ] * <num> ;
if ( <unk> > <unk> )
<unk> = <unk> ;
if ( stats [ <num> ] > <unk> )
<unk> = stats [ <num> ] ;
System . out . println ( " ) ;
System . out . println ( " + i + " + <unk> + " + stats [ <num> ] + " + stats [ <num> ] + " + stats [ <num> ] + " + stats [ <num> ] ) ;
System . out . println ( " + stats [ <num> ] + " + stats [ <num> ] + " + stats [ <num> ] ) ;
System . out . println ( " + stats [ <num> ] + " + stats [ <num> ] + " + stats [ <num> ] ) ;
}
System . out . print ( " ) ;
System . out . println ( " + <unk> + " + <unk> ) ;
System . out . println ( " + <unk> + " + <unk> ) ;
System . out . println ( " + <unk> ) ;
System . out . println ( " + <unk> ) ;
if ( <unk> != <unk> ||
<unk> != <unk> ) {
System . err . println ( " +
" ) ;
}
System . out . println ( " + timeElapsed ) ;
return ;
}
public void <unk> ( <unk> <unk> , int <unk> ) {
nn = <unk> ;
<unk> = nn . <unk> ( <unk> ) ;
<unk> = nn . <unk> ( ) ;
<unk> = <unk> ;
<unk> = new HashMap < Integer , float [ ] > ( ( int ) ( <unk> / <num> ) ) ;
if ( scheduler == <unk> . <unk> ||
scheduler == <unk> . <unk> )
<unk> ( <num> ) ;
}
public void <unk> ( ) {
int i ;
<unk> sn ;
<unk> ff ;
<unk> push ;
long time ;
<unk> = nn . <unk> ( ) ;
<unk> = nn . <unk> ( ) ;
for ( i = <num> ; i <= <unk> ; i ++ )
<unk> . put ( i , null ) ;
if ( scheduler == <unk> . <unk> ) {
<unk> = new HashSet < Integer > ( ( int ) ( <unk> / <num> ) ) ;
for ( i = <num> ; i <= <unk> ; i ++ )
<unk> . add ( i ) ;
timeElapsed = <num> ;
}
if ( scheduler == <unk> . <unk> ) {
ff = new <unk> ( <unk> , <unk> , <unk> ,
<unk> , <unk> , <unk> , this , nn ) ;
time = System . currentTimeMillis ( ) ;
<unk> = ff . <unk> ( ) ;
timeElapsed = System . currentTimeMillis ( )  time ;
System . gc ( ) ;
}
if ( scheduler == <unk> . PUSH ) {
push = new <unk> ( <unk> , <unk> , <unk> , <unk> ,
<unk> , nn ) ;
time = System . currentTimeMillis ( ) ;
<unk> = push . <unk> ( ) ;
timeElapsed = System . currentTimeMillis ( )  time ;
System . gc ( ) ;
}
<unk> ( ) ;
return ;
}
public synchronized void <unk> ( int [ ] stats , int id ) {
int [ ] <unk> = new int [ <num> ] ;
<unk> [ <num> ] = stats [ <num> ] ;
<unk> [ <num> ] = stats [ <num> ] ;
<unk> [ <num> ] = stats [ <num> ] ;
<unk> [ <num> ] = stats [ <num> ] ;
<unk> [ <num> ] = stats [ <num> ] ;
<unk> [ <num> ] = stats [ <num> ] ;
<unk> [ <num> ] = stats [ <num> ] ;
<unk> [ <num> ] = stats [ <num> ] ;
<unk> [ <num> ] = stats [ <num> ] ;
<unk> [ <num> ] = stats [ <num> ] ;
<unk> . put ( id , <unk> ) ;
return ;
}
public synchronized <unk> <unk> ( <unk> msg ) {
if ( <unk> == <num> ) {
msg . <unk> ( ) ;
return msg ;
}
switch ( scheduler ) {
case <unk> :
if ( <unk> ) {
if ( <unk> . isEmpty ( ) )
<unk> ( ) ;
if ( <unk> != null && <unk> . isEmpty ( ) )
return null ;
}
else {
if ( <unk> . isEmpty ( ) )
return null ;
}
msg = <unk> ( msg ) ;
break ;
case <unk> :
msg = <unk> ( msg ) ;
break ;
case PUSH :
msg = push ( msg ) ;
break ;
}
return msg ;
}
public synchronized boolean <unk> ( ArrayList < <unk> > slots ) {
int <unk> ;
<unk> task ;
Iterator < <unk> > it ;
float [ ] <unk> ;
float <unk> ;
boolean <unk> ;
if ( slots . isEmpty ( ) )
<unk> = true ;
else
<unk> = false ;
it = slots . iterator ( ) ;
while ( it . hasNext ( ) ) {
task = it . next ( ) ;
<unk> = task . <unk> ( ) ;
if ( ! <unk> . containsKey ( <unk> ) ) {
it . remove ( ) ;
continue ;
}
<unk> = task . <unk> ( ) ;
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> >= <num> ) {
<unk>  ;
it . remove ( ) ;
<unk> . remove ( <unk> ) ;
continue ;
}
if ( task . <unk> ( ) )
<unk> [ <num> ] = <unk> ;
else
<unk> [ <num> ] = <unk> ;
<unk> . put ( <unk> , <unk> ) ;
}
if ( ! <unk> )
return true ;
return false ;
}
package edu . <unk> . cs . <unk> . <unk> ;
import java . util . ArrayList ;
import java . util . Iterator ;
import java . util . Random ;
import edu . <unk> . cs . <unk> . <unk> ;
import edu . <unk> . cs . <unk> . hdfs . <unk> ;
public class <unk> {
private int <unk> ;
private int <unk> ;
ArrayList < <unk> > slots ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
int <unk> ;
<unk> <unk> ;
public <unk> ( <unk> <unk> , int id ) {
<unk> = <unk> ;
<unk> = id ;
<unk> = <num> ;
<unk> = <unk> = <unk> = <num> ;
<unk> = <unk> = <unk> = <num> ;
<unk> = <num> ;
slots = new ArrayList < <unk> > ( <unk> ) ;
<unk> =  <num> ;
return ;
}
public void <unk> ( int progress ) {
boolean <unk> , <unk> ;
<unk> = progress ;
Random <unk> ;
<unk> = new Random ( ) ;
<unk> = <unk> = false ;
while ( true ) {
if ( slots . size ( ) < <unk> )
<unk> = <unk> ( ) ;
if ( <unk> )
break ;
try {
Thread . sleep ( <unk> . nextInt ( <num> ) ) ;
<unk> ( ) ;
<unk> = <unk> . <unk> ( slots ) ;
if ( <unk> )
<unk> ++ ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
System . err . println ( e . getMessage ( ) ) ;
System . err . println ( " +
" ) ;
}
}
return ;
}
private void <unk> ( ) {
<unk> task ;
Iterator < <unk> > <unk> ;
<unk> = slots . iterator ( ) ;
while ( <unk> . hasNext ( ) ) {
task = <unk> . next ( ) ;
task . updateProgress ( <unk> ) ;
}
return ;
}
private boolean <unk> ( ) {
<unk> msg ;
while ( slots . size ( ) < <unk> ) {
msg = new <unk> ( <unk> ) ;
msg = <unk> . <unk> ( msg ) ;
if ( msg == null && ! slots . isEmpty ( ) )
return false ;
if ( msg == null && slots . isEmpty ( ) )
return false ;
if ( msg . <unk> ( ) )
return true ;
if ( msg . <unk> ( ) == <num> && ! msg . <unk> ( ) )
<unk> ++ ;
else if ( msg . <unk> ( ) == <num> && msg . <unk> ( ) )
<unk> ++ ;
else if ( msg . <unk> ( ) == <num> && ! msg . <unk> ( ) )
<unk> ++ ;
else if ( msg . <unk> ( ) == <num> && msg . <unk> ( ) )
<unk> ++ ;
else if ( msg . <unk> ( ) == <num> && ! msg . <unk> ( ) )
<unk> ++ ;
else if ( msg . <unk> ( ) == <num> && msg . <unk> ( ) )
<unk> ++ ;
else {
System . err . println ( " +
" ) ;
System . exit ( <num> ) ;
}
if ( msg . <unk> ( ) > <unk> )
<unk> = msg . <unk> ( ) ;
slots . add ( msg ) ;
}
return false ;
}
public void getStats ( int [ ] stats ) {
stats [ <num> ] = <unk> ;
stats [ <num> ] = <unk> ;
stats [ <num> ] = <unk> ;
stats [ <num> ] = <unk> ;
stats [ <num> ] = <unk> ;
stats [ <num> ] = <unk> ;
stats [ <num> ] = <unk> ;
stats [ <num> ] = <unk> ;
stats [ <num> ] = <unk> ;
return ;
}
}
package edu . <unk> . cs . <unk> ;
public class <unk> {
private float <unk> ;
private boolean <unk> ;
private int <unk> ;
private int <unk> ;
final private int <unk> ;
private boolean <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( int id ) {
<unk> = id ;
<unk> = false ;
<unk> = <num> ;
<unk> = false ;
<unk> = <num> ;
return ;
}
public void updateProgress ( int amount ) {
<unk> += amount ;
<unk> = ( ( float ) <unk> ) / ( ( float ) <unk> ) ;
return ;
}
public void <unk> ( int type ) {
<unk> = type ;
return ;
}
public void <unk> ( boolean <unk> ) {
<unk> = <unk> ;
return ;
}
public void <unk> ( int task ) {
<unk> = task ;
return ;
}
public void <unk> ( int progress ) {
<unk> = progress ;
return ;
}
public void <unk> ( ) {
<unk> = true ;
return ;
}
public boolean <unk> ( ) {
return <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public boolean <unk> ( ) {
return <unk> ;
}
package edu . <unk> . cs . <unk> ;
import java . util . ArrayList ;
import java . util . Random ;
import edu . <unk> . cs . <unk> . hdfs . <unk> ;
import edu . <unk> . cs . <unk> . hdfs . <unk> ;
import edu . <unk> . cs . <unk> . <unk> . <unk> ;
import edu . <unk> . cs . <unk> . <unk> . <unk> ;
public class <unk> implements Runnable {
private int <unk> ;
private boolean slow ;
private boolean startWorking ;
final private int <unk> ;
final private <unk> <unk> ;
final private <unk> nn ;
final private <unk> dn ;
final private <unk> tt ;
public <unk> ( <unk> <unk> , <unk> <unk> , int id ) {
startWorking = slow = false ;
<unk> = <num> ;
<unk> = id ;
nn = <unk> ;
<unk> = <unk> ;
dn = new <unk> ( <unk> , id ) ;
tt = new <unk> ( <unk> , id ) ;
return ;
}
public boolean <unk> ( int split ) {
return dn . <unk> ( split ) ;
}
public void <unk> ( int split ) {
dn . <unk> ( split ) ;
return ;
}
public ArrayList < Integer > <unk> ( ) {
return dn . <unk> ( ) ;
}
public void <unk> ( boolean <unk> ) {
Random r = new Random ( ) ;
float <unk> ;
float <unk> ;
<unk> = ( float ) ( ( ( float ) ( r . nextInt ( <num> ) + <num> ) ) / <num> ) ;
<unk> = <unk> * <unk> ;
slow = <unk> ;
if ( slow )
<unk> -= <unk> ;
startWorking = true ;
return ;
}
@Override
public void run ( ) {
int <unk> = <num> ;
int [ ] stats = new int [ <num> ] ;
Random <unk> = new Random ( ) ;
while ( ! startWorking ) {
<unk> = <unk> . nextInt ( <num> ) ;
try {
Thread . sleep ( <unk> ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
System . err . println ( e . getMessage ( ) ) ;
System . err . println ( " +
" ) ;
}
}
tt . <unk> ( <unk> ) ;
tt . getStats ( stats ) ;
if ( slow )
stats [ <num> ] = <num> ;
else
stats [ <num> ] = <num> ;
<unk> . <unk> ( stats , <unk> ) ;
return ;
}
public int <unk> ( ) {
return <unk> ;
}
public boolean <unk> ( ) {
return slow ;
}
package edu . <unk> . cs . <unk> ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . Iterator ;
import java . util . Map ;
import edu . <unk> . cs . <unk> . hdfs . <unk> ;
public class <unk> {
private Map < Integer , int [ ] > <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private Map < Integer , Integer > <unk> ;
private Map < Integer , ArrayList < Integer >> <unk> ;
private <unk> nn ;
private Map < Integer , Integer > <unk> ;
private ArrayList < Integer > <unk> ;
private Map < Integer , Integer > <unk> ;
private int <unk> ( ArrayList < Integer > list ) {
Iterator < Integer > it ;
int <unk> , <unk> , machine ;
it = list . iterator ( ) ;
<unk> = Integer . MAX_VALUE ;
<unk> =  <num> ;
while ( it . hasNext ( ) ) {
machine = it . next ( ) ;
if ( <unk> . get ( machine ) < <unk> ) {
<unk> = machine ;
<unk> = <unk> . get ( machine ) ;
}
}
return <unk> ;
}
private void <unk> ( Map < Integer , ArrayList < Integer >> <unk> ) {
ArrayList < Integer > <unk> ;
Iterator < Integer > it ;
int [ ] <unk> ;
int task , <unk> , <unk> , <unk> , <unk> , <unk> ;
it = <unk> . iterator ( ) ;
while ( it . hasNext ( ) ) {
task = it . next ( ) ;
<unk> = <unk> . get ( task ) ;
<unk> = <unk> [ <num> ] ;
<unk> = <unk> [ <num> ] ;
<unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> == <unk> && <unk> > <num> )
System . err . println ( " +
" ) ;
<unk> = <unk> ( <unk> . get ( <unk> ) ) ;
<unk> = <unk> ( <unk> . get ( <unk> ) ) ;
if ( <unk> . get ( <unk> ) <= <unk> . get ( <unk> ) ) {
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> == null )
<unk> = new ArrayList < Integer > ( ) ;
<unk> . add ( task ) ;
<unk> . put ( <unk> , <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> != <unk> [ <num> ] && <unk> != <unk> [ <num> ] &&
<unk> != <unk> [ <num> ] )
<unk> . put ( <unk> , <unk> + <num> ) ;
else
<unk> . put ( <unk> , <unk> + <num> ) ;
it . remove ( ) ;
}
else {
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> == null )
<unk> = new ArrayList < Integer > ( ) ;
<unk> . add ( task ) ;
<unk> . put ( <unk> , <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> != <unk> [ <num> ] && <unk> != <unk> [ <num> ] &&
<unk> != <unk> [ <num> ] )
<unk> . put ( <unk> , <unk> + <num> ) ;
else
<unk> . put ( <unk> , <unk> + <num> ) ;
it . remove ( ) ;
}
}
return ;
}
public <unk> ( Map < Integer , int [ ] > <unk> ,
int <unk> , int <unk> ,
Map < Integer , Integer > <unk> ,
Map < Integer , ArrayList < Integer >> <unk> ,
<unk> <unk> ) {
int i , lowest =  <num> ;
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = <unk> ;
nn = <unk> ;
<unk> = nn . <unk> ( ) ;
lowest = Integer . MAX_VALUE ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
if ( <unk> . get ( i ) < lowest )
lowest = <unk> . get ( i ) ;
}
<unk> = lowest ;
return ;
}
public Map < Integer , ArrayList < Integer >> <unk> ( ) {
Map < Integer , ArrayList < Integer >> <unk> ;
Map < Integer , ArrayList < Integer >> <unk> ;
int task , <unk> , <unk> , <unk> , <unk> , i , <unk> ;
int <unk> , <unk> ;
int [ ] <unk> ;
ArrayList < Integer > <unk> ;
<unk> = new ArrayList < Integer > ( ) ;
<unk> = new HashMap < Integer , ArrayList < Integer >> ( ( int ) ( <unk> / <num> ) ) ;
<unk> = new HashMap < Integer , Integer > ( ( int ) ( <unk> / <num> ) ) ;
<unk> = null ;
<unk> = Integer . MAX_VALUE ;
for ( <unk> = <num> ; <unk> <= <unk> ; <unk> ++ ) {
<unk> = <num> ;
for ( i = <num> ; i <= <unk> ; i ++ )
<unk> . put ( i , <num> ) ;
<unk> . clear ( ) ;
for ( task = <num> ; task <= <unk> ; task ++ ) {
if ( <unk> >= ( <unk> * <unk> ) ) {
for ( i = task ; i <= <unk> ; i ++ )
<unk> . add ( i ) ;
break ;
}
<unk> = <unk> . get ( task ) ;
<unk> = Integer . MAX_VALUE ;
<unk> =  <num> ;
for ( i = <num> ; i < <unk> . length ; i ++ ) {
if ( <unk> . get ( <unk> [ i ] ) >= <unk> )
continue ;
if ( <unk> . get ( <unk> [ i ] ) < <unk> ) {
<unk> = <unk> . get ( <unk> [ i ] ) ;
<unk> = <unk> [ i ] ;
}
}
if ( <unk> ==  <num> ) {
<unk> . add ( task ) ;
continue ;
}
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> == null )
<unk> = new ArrayList < Integer > ( ) ;
<unk> . add ( task ) ;
<unk> . put ( <unk> , <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> ++ ;
}
if ( <unk> . isEmpty ( ) ) {
<unk> =  <num> ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
if ( <unk> . get ( i ) > <unk> )
<unk> = <unk> . get ( i ) ;
}
if ( <unk> < <unk> )
return <unk> ;
else
return <unk> ;
}
<unk> ( <unk> ) ;
if ( ! <unk> . isEmpty ( ) ) {
System . err . println ( " +
" ) ;
System . exit ( <num> ) ;
}
<unk> =  <num> ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
if ( <unk> . get ( i ) > <unk> )
<unk> = <unk> . get ( i ) ;
}
if ( <unk> < <unk> ) {
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = new HashMap < Integer , ArrayList < Integer >>
( ( int ) ( <unk> / <num> ) ) ;
for ( i = <num> ; i <= <unk> ; i ++ )
<unk> . put ( i , null ) ;
}
else {
for ( i = <num> ; i <= <unk> ; i ++ ) {
<unk> = <unk> . get ( i ) ;
if ( <unk> != null )
<unk> . clear ( ) ;
}
}
}
return <unk> ;
}
private void <unk> ( int <unk> ) {
System . out . print ( " ) ;
System . out . println ( " ) ;
System . out . println ( " + <unk> ) ;
for ( int i = <num> ; i <= <unk> ; i ++ ) {
System . out . print ( " + i + " + <unk> . get ( i ) + " ) ;
}
}
package edu . <unk> . cs . <unk> ;
import java . util . ArrayList ;
import java . util . Collections ;
import java . util . HashMap ;
import java . util . Iterator ;
import java . util . LinkedList ;
import java . util . Map ;
import java . util . Queue ;
import java . util . Stack ;
import edu . <unk> . cs . <unk> . <unk> ;
import edu . <unk> . cs . <unk> . hdfs . <unk> ;
import edu . <unk> . cs . <unk> . <unk> . <unk> ;
public class <unk> {
final private int source ;
final private int sink ;
final private int <unk> ;
final private int <unk> ;
final private int <unk> ;
private <unk> <unk> ;
private Map < Integer , ArrayList < Integer >> <unk> ;
private int <unk> ;
private Map < Integer , int [ ] > <unk> ;
private Map < Integer , Integer > <unk> ;
private Map < Integer , ArrayList < <unk> >> graph ;
private int <unk> ;
private int <unk> ;
private ArrayList < Integer > <unk> ;
private Map < Integer , ArrayList < Integer >> <unk> ;
private Map < Integer , ArrayList < Integer >> <unk> ;
private Map < Integer , Integer > <unk> ;
private void <unk> ( int t ) {
int server , <unk> ;
ArrayList < <unk> > <unk> ;
ArrayList < Integer > <unk> ;
<unk> task ;
Iterator < <unk> > it ;
for ( server = <num> ; server <= <unk> ; server ++ ) {
<unk> = graph . get ( server ) ;
if ( <unk> . size ( ) > t ) {
System . err . println ( " +
" ) ;
System . exit ( <num> ) ;
}
<unk> = <unk> . get ( server ) ;
it = <unk> . iterator ( ) ;
while ( it . hasNext ( ) ) {
task = it . next ( ) ;
if ( task . vertex == sink )
continue ;
<unk> . remove ( <unk> . indexOf
( task . vertex  <unk> ) ) ;
<unk> . add ( task . vertex  <unk> ) ;
<unk> = <unk> . get ( server ) ;
<unk> . put ( server , <unk> + <num> ) ;
}
<unk> . put ( server , <unk> ) ;
}
}
private int <unk> ( ) {
int <unk> = Integer . MAX_VALUE ;
int <unk> = <num> ;
int server ;
for ( server = <num> ; server <= <unk> ; server ++ ) {
if ( <unk> . get ( server ) < <unk> ) {
<unk> = <unk> . get ( server ) ;
<unk> = server ;
}
}
return <unk> ;
}
private boolean <unk> ( ArrayList < Integer > path ) {
Map < Integer , Integer > parents = new HashMap < Integer , Integer > ( ) ;
ArrayList < <unk> > <unk> ;
Iterator < <unk> > it ;
int node , <unk> ;
Stack < Integer > stack = new Stack < Integer > ( ) ;
stack . push ( source ) ;
int <unk> =  <num> ;
while ( ! stack . isEmpty ( ) ) {
node = stack . pop ( ) ;
if ( node == sink ) {
path . add ( node ) ;
while ( parents . get ( node ) != source ) {
path . add ( parents . get ( node ) ) ;
node = parents . get ( node ) ;
if ( parents . get ( node ) == null ) {
System . out . println ( " +
" + node ) ;
System . exit ( <num> ) ;
}
}
path . add ( source ) ;
return true ;
}
<unk> = graph . get ( node ) ;
it = <unk> . iterator ( ) ;
while ( it . hasNext ( ) ) {
<unk> = it . next ( ) . vertex ;
if ( parents . get ( <unk> ) == null && <unk> != source ) {
stack . push ( <unk> ) ;
parents . put ( <unk> , node ) ;
}
}
<unk> ++ ;
}
return false ;
}
private boolean <unk> ( ArrayList < Integer > path ) {
Map < Integer , Integer > parents = new HashMap < Integer , Integer > ( ) ;
ArrayList < <unk> > <unk> ;
Iterator < <unk> > it ;
int node , <unk> ;
Queue < Integer > q = new LinkedList < Integer > ( ) ;
q . add ( source ) ;
int <unk> =  <num> ;
while ( ! q . isEmpty ( ) ) {
node = q . poll ( ) ;
if ( node == sink ) {
path . add ( node ) ;
while ( parents . get ( node ) != source ) {
path . add ( parents . get ( node ) ) ;
node = parents . get ( node ) ;
if ( parents . get ( node ) == null ) {
System . out . println ( " +
" + node ) ;
System . exit ( <num> ) ;
}
}
path . add ( source ) ;
return true ;
}
<unk> = graph . get ( node ) ;
it = <unk> . iterator ( ) ;
while ( it . hasNext ( ) ) {
<unk> = it . next ( ) . vertex ;
if ( parents . get ( <unk> ) == null && <unk> != source ) {
q . add ( <unk> ) ;
parents . put ( <unk> , node ) ;
}
}
<unk> ++ ;
}
return false ;
}
private int <unk> ( ArrayList < Integer > list ) {
Iterator < Integer > it ;
int <unk> , <unk> , machine ;
it = list . iterator ( ) ;
<unk> = Integer . MAX_VALUE ;
<unk> =  <num> ;
while ( it . hasNext ( ) ) {
machine = it . next ( ) ;
if ( <unk> . get ( machine ) < <unk> ) {
<unk> = machine ;
<unk> = <unk> . get ( machine ) ;
}
}
return <unk> ;
}
private void <unk> ( ) {
int [ ] <unk> ;
int task , <unk> , <unk> , <unk> , <unk> , <unk> ;
Iterator < Integer > it = <unk> . iterator ( ) ;
ArrayList < Integer > <unk> ;
while ( it . hasNext ( ) ) {
task = it . next ( ) ;
<unk> = <unk> . get ( task ) ;
<unk> = <unk> [ <num> ] ;
<unk> = <unk> [ <num> ] ;
<unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> ( <unk> . get ( <unk> ) ) ;
<unk> = <unk> ( <unk> . get ( <unk> ) ) ;
if ( <unk> . get ( <unk> ) <= <unk> . get ( <unk> ) ) {
<unk> = <unk> . get ( <unk> ) ;
<unk> . add ( task ) ;
<unk> . put ( <unk> , <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> != <unk> [ <num> ] && <unk> != <unk> [ <num> ] &&
<unk> != <unk> [ <num> ] )
<unk> . put ( <unk> , <unk> + <num> ) ;
else
<unk> . put ( <unk> , <unk> + <num> ) ;
it . remove ( ) ;
}
else {
<unk> = <unk> . get ( <unk> ) ;
<unk> . add ( task ) ;
<unk> . put ( <unk> , <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> != <unk> [ <num> ] && <unk> != <unk> [ <num> ] &&
<unk> != <unk> [ <num> ] )
<unk> . put ( <unk> , <unk> + <num> ) ;
else
<unk> . put ( <unk> , <unk> + <num> ) ;
it . remove ( ) ;
}
}
}
private void <unk> ( ) {
ArrayList < Integer > taskList , <unk> ;
Iterator < Integer > it = <unk> . iterator ( ) ;
int task , <unk> , <unk> , <unk> ;
int [ ] <unk> ;
while ( it . hasNext ( ) ) {
task = it . next ( ) ;
<unk> = <unk> ( ) ;
<unk> = <unk> . get ( task ) ;
<unk> = <unk> . get ( <unk> ) ;
taskList = <unk> . get ( <unk> ) ;
if ( <unk> [ <num> ] == <unk> ||
<unk> [ <num> ] == <unk> ||
<unk> [ <num> ] == <unk> ) {
taskList . add ( task ) ;
<unk> . put ( <unk> , taskList ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
it . remove ( ) ;
continue ;
}
<unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> . contains ( <unk> [ <num> ] ) ||
<unk> . contains ( <unk> [ <num> ] ) ||
<unk> . contains ( <unk> [ <num> ] ) ) {
taskList . add ( task ) ;
<unk> . put ( <unk> , taskList ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
it . remove ( ) ;
continue ;
}
taskList . add ( task ) ;
<unk> . put ( <unk> , taskList ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
it . remove ( ) ;
}
return ;
}
private void <unk> ( int t ) {
int <unk> , incoming = source ;
Iterator < Integer > it ;
Iterator < <unk> > <unk> ;
ArrayList < <unk> > <unk> ;
<unk> <unk> ;
ArrayList < Integer > path = new ArrayList < Integer > ( ) ;
int <unk> = <num> ;
while ( <unk> ( path ) ) {
Collections . reverse ( path ) ;
<unk> ++ ;
it = path . iterator ( ) ;
while ( it . hasNext ( ) ) {
<unk> = incoming ;
if ( <unk> == source )
incoming = it . next ( ) ;
incoming = it . next ( ) ;
if ( <unk> == sink )
continue ;
<unk> = graph . get ( <unk> ) ;
<unk> = <unk> . iterator ( ) ;
while ( <unk> . hasNext ( ) ) {
<unk> = <unk> . next ( ) ;
if ( <unk> . vertex == incoming ) {
if ( incoming == sink ) {
if ( <unk> . capacity == <num> ) {
<unk> . remove ( ) ;
graph . put ( <unk> , <unk> ) ;
}
else
<unk> . capacity -= <num> ;
}
else {
<unk> . remove ( ) ;
graph . put ( <unk> , <unk> ) ;
<unk> = graph . get ( incoming ) ;
<unk> . add ( new <unk> ( <num> , <num> , <unk> ) ) ;
graph . put ( incoming , <unk> ) ;
}
break ;
}
}
}
path . clear ( ) ;
incoming = source ;
}
return ;
}
public <unk> ( Map < Integer , ArrayList < <unk> >> <unk> ,
int <unk> , int numTasks ,
Map < Integer , int [ ] > <unk> ,
Map < Integer , Integer > <unk> ,
Map < Integer , ArrayList < Integer >> <unk> ,
<unk> <unk> ,
<unk> <unk> ) {
<unk> = <unk> ;
<unk> = numTasks ;
source = <unk> = <num> ;
sink = <unk> + <unk> + <num> ;
graph = <unk> ;
<unk> = <unk> ;
<unk> = new ArrayList < Integer > ( ) ;
<unk> = new HashMap < Integer , Integer > ( ) ;
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = Integer . MAX_VALUE ;
<unk> = <unk> ;
<unk> = new HashMap < Integer , ArrayList < Integer >> ( ) ;
Map < Integer , Integer > <unk> = <unk> . <unk> ( ) ;
int lowest = Integer . MAX_VALUE ;
for ( int i = <num> ; i <= <unk> ; i ++ ) {
if ( <unk> . get ( i ) < lowest )
lowest = <unk> . get ( i ) ;
}
<unk> = lowest ;
return ;
}
public Map < Integer , ArrayList < Integer >> <unk> ( ) {
int i , j ;
for ( i = ( <unk> / <unk>  <num> ) ; i <= <unk> ; i ++ ) {
System . out . print ( " + i ) ;
for ( j = <num> ; j <= <unk> ; j ++ )
<unk> . add ( j ) ;
for ( j = <num> ; j <= <unk> ; j ++ ) {
<unk> . put ( j , <num> ) ;
<unk> . put ( j , new ArrayList < Integer > ( ) ) ;
}
<unk> ( i ) ;
<unk> ( i ) ;
System . out . println ( " + <unk> . size ( ) ) ;
if ( <unk> . isEmpty ( ) ) {
<unk> =  <num> ;
for ( j = <num> ; j <= <unk> ; j ++ ) {
if ( <unk> . get ( j ) > <unk> )
<unk> = <unk> . get ( j ) ;
}
if ( <unk> < <unk> ) {
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = null ;
}
return <unk> ;
}
<unk> ( ) ;
if ( ! <unk> . isEmpty ( ) ) {
System . err . println ( " +
" ) ;
System . exit ( <num> ) ;
}
<unk> =  <num> ;
for ( j = <num> ; j <= <unk> ; j ++ ) {
if ( <unk> . get ( j ) > <unk> )
<unk> = <unk> . get ( j ) ;
}
if ( <unk> < <unk> ) {
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = new HashMap < Integer , ArrayList < Integer >> ( ) ;
}
<unk> . <unk> ( i + <num> ) ;
}
return <unk> ;
}
}
package edu . <unk> . cs . <unk> . hdfs ;
import java . awt . image . <unk> ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . Iterator ;
import java . util . Map ;
import java . util . Random ;
import edu . <unk> . cs . <unk> . <unk> ;
public class <unk> {
final private int <unk> ;
final private int <unk> ;
private enum <unk> {
RANDOM ,
<unk> ,
<unk> ,
} ;
private <unk> <unk> ;
private Map < Integer , <unk> > <unk> ;
private Map < Integer , int [ ] > <unk> ;
final private int blockSize ;
private int <unk> ;
private Map < Integer , Integer > <unk> ;
private Map < Integer , ArrayList < Integer >> <unk> ;
private Map < Integer , Integer > <unk> ;
private Map < Integer , Integer > <unk> ;
private Map < Integer , Integer > <unk> ;
private int <unk> ( Map < Integer , Integer > <unk> ) {
int i , load , <unk> ;
load = <unk> = Integer . MAX_VALUE ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
if ( <unk> . get ( i ) < load ) {
load = <unk> . get ( i ) ;
<unk> = i ;
}
}
return <unk> ;
}
private int <unk> ( int <unk> , int <unk> ,
ArrayList < Integer > <unk> ) {
int <unk> =  <num> ;
int size = <unk> . size ( ) ;
Random r = new Random ( ) ;
boolean trigger = true ;
while ( trigger ) {
<unk> = <unk> . get ( r . nextInt ( size ) ) ;
if ( ( <unk> != <unk> ) && ( <unk> != <unk> ) )
trigger = false ;
}
return <unk> ;
}
private int <unk> ( int <unk> ) {
int <unk> =  <num> ;
Random r = new Random ( ) ;
boolean trigger = true ;
while ( trigger ) {
<unk> = r . nextInt ( <unk> ) + <num> ;
if ( <unk> != <unk> )
trigger = false ;
}
return <unk> ;
}
private int <unk> ( int <unk> ,
Map < Integer , Integer > <unk> ) {
int <unk> , load , val ;
Iterator < Integer > it ;
ArrayList < Integer > <unk> ;
<unk> = <unk> . get ( <unk> ) ;
it = <unk> . iterator ( ) ;
load = <unk> = Integer . MAX_VALUE ;
while ( it . hasNext ( ) ) {
val = it . next ( ) ;
if ( <unk> . get ( val ) < load ) {
load = <unk> . get ( val ) ;
<unk> = val ;
}
}
return <unk> ;
}
public <unk> ( int <unk> , int <unk> , String <unk> ) {
int i ;
blockSize = <num> ;
<unk> = <unk> ;
<unk> = <unk> ;
if ( <unk> . equals ( " ) )
<unk> = <unk> . RANDOM ;
else if ( <unk> . equals ( " ) )
<unk> = <unk> . <unk> ;
else if ( <unk> . equals ( " ) )
<unk> = <unk> . <unk> ;
else
System . err . println ( " ) ;
<unk> = new HashMap < Integer , Integer > ( ( int ) ( <unk> / <num> ) ) ;
<unk> = new HashMap < Integer , Integer > ( ( int ) ( <unk> / <num> ) ) ;
<unk> = new HashMap < Integer , Integer > ( ( int ) ( <unk> / <num> ) ) ;
for ( i = <num> ; i <= <unk> ; i ++ )
<unk> . put ( i , <num> ) ;
return ;
}
public void <unk> ( Map < Integer , Integer > <unk> ,
Map < Integer , ArrayList < Integer >> <unk> ) {
<unk> = <unk> ;
<unk> = <unk> ;
return ;
}
public void <unk> ( ) {
int i ;
System . out . println ( " ) ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
System . out . print ( " + i + " + <unk> . get ( i ) + " ) ;
if ( i % <num> == <num> )
System . out . print ( \n' ) ;
}
System . out . print ( \n' ) ;
System . out . println ( " ) ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
System . out . print ( " + i + " + <unk> . get ( i ) + " ) ;
if ( i % <num> == <num> )
System . out . print ( \n' ) ;
}
return ;
}
public void <unk> ( Map < Integer , <unk> > map ) {
<unk> = map ;
return ;
}
private void <unk> ( int <unk> , int <unk> ) {
ArrayList < Integer > <unk> ;
<unk> . put ( <unk> , <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
return ;
}
private void <unk> ( int id ) {
ArrayList < Integer > <unk> ;
int <unk> , index ;
<unk> = <unk> . get ( id ) ;
<unk> . remove ( id ) ;
<unk> = <unk> . get ( <unk> ) ;
index = <unk> . indexOf ( id ) ;
<unk> . remove ( index ) ;
<unk> . put ( <unk> , <unk> ) ;
return ;
}
private Map < Integer , int [ ] > <unk> ( int fileSize ) {
int i , x , <unk> , <unk> , <unk> , <unk> , size , toRemove , <unk> ;
int [ ] <unk> ;
<unk> sn ;
Random randomGenerator = new Random ( ) ;
ArrayList < Integer > <unk> ;
Map < Integer , Integer > <unk> = new HashMap < Integer , Integer > ( ) ;
if ( fileSize % blockSize == <num> )
<unk> = fileSize / blockSize ;
else
<unk> = fileSize / blockSize + <num> ;
<unk> = new HashMap < Integer , int [ ] > ( ( int ) ( <unk> / <num> ) ) ;
for ( i = <num> ; i <= <unk> ; i ++ )
<unk> . put ( i , <num> ) ;
for ( i = <num> ; i <= <unk> ; i ++ )
<unk> . put ( i , <num> ) ;
x = ( int ) ( ( <unk> / <unk> ) * <num> ) ;
toRemove = ( int ) ( <unk> * <num> ) ;
for ( i = <unk> ; i > <num> ; i  ) {
<unk> = new int [ <num> ] ;
<unk> = randomGenerator . nextInt ( <unk> ) + <num> ;
<unk> = <unk> . get ( <unk> ) ;
size = <unk> . size ( ) ;
<unk> = <unk> . get ( randomGenerator . nextInt ( size ) ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
if ( <unk> >= x && <unk> . size ( ) > <num> && toRemove > <num> ) {
<unk> ( <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
toRemove  ;
}
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> ( <unk> , <unk> , <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
if ( <unk> >= x && <unk> . size ( ) > <num> && toRemove > <num> ) {
<unk> ( <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
toRemove  ;
}
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
if ( <unk> > <num> ) {
<unk> = <unk> ;
<unk> = <unk> ( <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> . get ( <unk> ) ;
size = <unk> . size ( ) ;
<unk> = <unk> . get ( randomGenerator . nextInt ( size ) ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
if ( <unk> >= x && <unk> . size ( ) > <num> && toRemove > <num> ) {
<unk> ( <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
toRemove  ;
}
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
}
else {
<unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> ( <unk> [ <num> ] , <unk> [ <num> ] ,
<unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
if ( <unk> >= x && <unk> . size ( ) > <num> && toRemove > <num> ) {
<unk> ( <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
toRemove  ;
}
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
}
<unk> . put ( i , <unk> ) ;
}
for ( i = <num> ; i <= <unk> ; i ++ ) {
if ( <unk> . containsKey ( i ) )
<unk> ( i , <unk> . get ( i ) ) ;
}
return <unk> ;
}
private Map < Integer , int [ ] > <unk> ( int fileSize ) {
int i , <unk> , <unk> , <unk> , <unk> , size , <unk> ;
int [ ] <unk> ;
<unk> sn ;
Random randomGenerator = new Random ( ) ;
ArrayList < Integer > <unk> ;
if ( fileSize % blockSize == <num> )
<unk> = fileSize / blockSize ;
else
<unk> = fileSize / blockSize + <num> ;
<unk> = new HashMap < Integer , int [ ] > ( ( int ) ( <unk> / <num> ) ) ;
for ( i = <num> ; i <= <unk> ; i ++ )
<unk> . put ( i , <num> ) ;
for ( i = <num> ; i <= <unk> ; i ++ )
<unk> . put ( i , <num> ) ;
for ( i = <unk> ; i > <num> ; i  ) {
<unk> = new int [ <num> ] ;
<unk> = randomGenerator . nextInt ( <unk> ) + <num> ;
<unk> = <unk> . get ( <unk> ) ;
size = <unk> . size ( ) ;
<unk> = <unk> . get ( randomGenerator . nextInt ( size ) ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> ( <unk> , <unk> ,
<unk> . get ( <unk> ) ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
if ( <unk> > <num> ) {
<unk> = <unk> ;
<unk> = <unk> ( <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> . get ( <unk> ) ;
size = <unk> . size ( ) ;
<unk> = <unk> . get ( randomGenerator . nextInt ( size ) ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
}
else {
<unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> ( <unk> [ <num> ] , <unk> [ <num> ] ,
<unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
}
<unk> . put ( i , <unk> ) ;
}
return <unk> ;
}
private Map < Integer , int [ ] > <unk> ( int fileSize ) {
int i , <unk> , <unk> , <unk> , <unk> , <unk> ;
int [ ] <unk> ;
<unk> sn ;
if ( fileSize % blockSize == <num> )
<unk> = fileSize / blockSize ;
else
<unk> = fileSize / blockSize + <num> ;
<unk> = new HashMap < Integer , int [ ] > ( ( int ) ( <unk> / <num> ) ) ;
for ( i = <num> ; i <= <unk> ; i ++ )
<unk> . put ( i , <num> ) ;
for ( i = <num> ; i <= <unk> ; i ++ )
<unk> . put ( i , <num> ) ;
for ( i = <unk> ; i > <num> ; i  ) {
<unk> = new int [ <num> ] ;
<unk> = <unk> ( <unk> ) ;
<unk> = <unk> ( <unk> , <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> ( <unk> , <unk> ) ;
if ( <unk> == <unk> [ <num> ] )
<unk> = <unk> ( <unk> , <unk> ,
<unk> . get ( <unk> ) ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
if ( <unk> > <num> ) {
<unk> = <unk> ;
<unk> = <unk> ( <unk> ) ; ;
if ( <unk> == <unk> )
<unk> = <unk> ( <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> ( <unk> , <unk> ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
}
else {
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> = <unk> ( <unk> , <unk> ) ;
if ( ( <unk> == <unk> [ <num> ] ) || ( <unk> == <unk> [ <num> ] ) )
<unk> = <unk> ( <unk> [ <num> ] , <unk> [ <num> ] , <unk> . get ( <unk> ) ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
<unk> [ <num> ] = <unk> ;
sn = <unk> . get ( <unk> ) ;
sn . <unk> ( i ) ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . put ( <unk> , <unk> + <num> ) ;
}
<unk> . put ( i , <unk> ) ;
}
return <unk> ;
}
public Map < Integer , int [ ] > <unk> ( int fileSize ) {
switch ( <unk> ) {
case RANDOM :
return <unk> ( fileSize ) ;
case <unk> :
return <unk> ( fileSize ) ;
case <unk> :
return <unk> ( fileSize ) ;
}
return null ;
}
public void <unk> ( ) {
int i , <unk> ;
<unk> sn ;
ArrayList < Integer > splits ;
Iterator < Integer > it ;
String s ;
<unk> = <num> ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
s = " + i + " ;
sn = <unk> . get ( i ) ;
splits = sn . <unk> ( ) ;
it = splits . iterator ( ) ;
<unk> += splits . size ( ) ;
while ( it . hasNext ( ) )
s += " + it . next ( ) . toString ( ) ;
System . out . println ( s ) ;
}
if ( ( <unk> / <num> ) != <unk> ) {
System . err . println ( "
+ <unk> + " + <unk> ) ;
System . exit ( <num> ) ;
}
}
public int <unk> ( ) { return <unk> ; }
public Map < Integer , ArrayList < Integer >> <unk> ( ) {
return <unk> ;
}
public Map < Integer , Integer > <unk> ( ) {
return <unk> ;
}
public Map < Integer , Integer > <unk> ( ) {
return <unk> ;
}
package edu . <unk> . cs . <unk> ;
import java . util . ArrayList ;
import java . util . Iterator ;
import edu . <unk> . cs . <unk> . <unk> ;
public class Simulation {
public static void main ( String [ ] args ) {
int <unk> = <num> , <unk> = <num> ;
int <unk> = <num> ;
String scheduler = " ;
String <unk> = " ;
ArrayList < Thread > <unk> ;
Iterator < Thread > it ;
Thread <unk> ;
boolean <unk> = true ;
boolean <unk> = false ;
if ( args . length < <num> || args . length > <num> ) {
System . err . println ( " +
" ) ;
System . exit ( <num> ) ;
}
<unk> = Integer . parseInt ( args [ <num> ] ) ;
if ( <unk> < <num> ) {
System . err . println ( " ) ;
System . exit ( <num> ) ;
}
<unk> = Integer . parseInt ( args [ <num> ] ) ;
if ( <unk> <= <num> ) {
System . err . println ( " +
" ) ;
System . exit ( <num> ) ;
}
scheduler = args [ <num> ] ;
if ( ! scheduler . equals ( " ) && ! scheduler . equals ( " ) &&
! scheduler . equals ( " ) && ! scheduler . equals ( " ) ) {
System . err . println ( " ) ;
System . err . println ( "
+ " ) ;
System . exit ( <num> ) ;
}
<unk> = args [ <num> ] ;
if ( ! <unk> . equals ( " ) &&
! <unk> . equals ( " ) &&
! <unk> . equals ( " ) ) {
System . err . println ( " ) ;
System . exit ( <num> ) ;
}
if ( args [ <num> ] . equals ( " ) )
<unk> = true ;
else if ( args [ <num> ] . equals ( " ) )
<unk> = false ;
else {
System . err . println ( " ) ;
System . exit ( <num> ) ;
}
<unk> master = new <unk> ( <unk> , scheduler , <unk> , <unk> ) ;
master . <unk> ( ) ;
master . <unk> ( <unk> ) ;
master . <unk> ( ) ;
System . out . println ( " ) ;
master . <unk> ( ) ;
try {
<unk> = master . <unk> ( ) ;
while ( <unk> ) {
<unk> = false ;
it = <unk> . iterator ( ) ;
<unk> = <num> ;
while ( it . hasNext ( ) ) {
<unk> = it . next ( ) ;
if ( <unk> . isAlive ( ) ) {
<unk> = true ;
<unk> ++ ;
}
}
if ( <unk> != <unk> && master . <unk> ( ) > <num> && <unk> ) {
System . err . println ( " ) ;
System . exit ( <num> ) ;
}
Thread . sleep ( <num> ) ;
}
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
master . <unk> ( ) ;
return ;
}
}
package com . <unk> . <unk> ;
public final class BuildConfig {
public final static boolean DEBUG = true ;
package com . <unk> . <unk> ;
public final class R {
public static final class attr {
}
public static final class drawable {
public static final int bg3 = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int ic_launcher = <num> ;
}
public static final class id {
public static final int <unk> = <num> ;
}
public static final class layout {
public static final int main = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int hello = <num> ;
public static final int <unk> = <num> ;
}
}
package com . <unk> . <unk> ;
import android . content . Context ;
import android . graphics . Canvas ;
import android . graphics . Color ;
import android . graphics . Paint ;
import android . util . AttributeSet ;
import android . view . MotionEvent ;
import android . view . SurfaceHolder ;
import android . view . SurfaceView ;
public class <unk> extends SurfaceView implements SurfaceHolder . Callback {
private <unk> thread ;
public <unk> ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
SurfaceHolder sh = this . getHolder ( ) ;
sh . addCallback ( this ) ;
thread = new <unk> ( sh , this . getResources ( ) ) ;
}
public void surfaceCreated ( SurfaceHolder holder ) {
thread . setRunning ( true ) ;
thread . start ( ) ;
}
public boolean onTouchEvent ( MotionEvent evt ) {
thread . <unk> ( ) ;
return true ;
}
public void surfaceDestroyed ( SurfaceHolder holder ) {
boolean retry = true ;
thread . setRunning ( false ) ;
while ( retry ) {
try {
thread . join ( ) ;
retry = false ;
} catch ( InterruptedException e ) {
System . out . println ( " ) ;
}
}
}
public void surfaceChanged ( SurfaceHolder holder , int format , int width , int height ) {
System . out . println ( " ) ;
}
}
package com . <unk> . <unk> ;
import android . app . Activity ;
import android . os . Bundle ;
import android . widget . TextView ;
public class <unk> extends Activity {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
}
package com . <unk> . <unk> ;
import android . content . Context ;
import android . content . res . Resources ;
import android . graphics . BitmapFactory ;
import android . graphics . Canvas ;
import android . graphics . Color ;
import android . graphics . Paint ;
import android . util . AttributeSet ;
import android . view . SurfaceHolder ;
import android . view . SurfaceView ;
public class <unk> extends Thread {
private boolean running ;
private SurfaceHolder <unk> ;
private <unk> <unk> ;
public <unk> ( SurfaceHolder surfaceHolder , Resources r ) {
this . <unk> = surfaceHolder ;
this . <unk> = new <unk> ( r ) ;
}
public void run ( ) {
while ( running ) {
Canvas c = null ;
try {
c = <unk> . lockCanvas ( ) ;
synchronized ( <unk> ) {
update ( ) ;
draw ( c ) ;
}
} finally {
if ( c != null ) {
<unk> . unlockCanvasAndPost ( c ) ;
}
}
}
}
private void update ( ) {
<unk> . update ( ) ;
}
private void draw ( Canvas c ) {
<unk> . draw ( c ) ;
c . restore ( ) ;
}
public void <unk> ( ) {
<unk> . <unk> = true ;
}
public void setRunning ( boolean b ) {
running = b ;
}
}
package com . <unk> . <unk> ;
import android . content . res . Resources ;
import android . graphics . Bitmap ;
import android . graphics . BitmapFactory ;
import android . graphics . Canvas ;
import android . graphics . Color ;
import android . graphics . Matrix ;
import android . graphics . Paint ;
public class <unk> {
private Bitmap bg ;
private Bitmap [ ] <unk> ;
private Paint <unk> ;
private int px , py ;
private int vx , vy ;
private int w , h ;
private Matrix <unk> ;
public boolean <unk> = false ;
public <unk> ( Resources r ) {
bg = BitmapFactory . decodeResource ( r , R . drawable . bg3 ) ;
Bitmap [ ] <unk> = {
BitmapFactory . decodeResource ( r , R . drawable . <unk> ) ,
BitmapFactory . decodeResource ( r , R . drawable . <unk> ) ,
BitmapFactory . decodeResource ( r , R . drawable . <unk> )
} ;
this . <unk> = <unk> ;
this . <unk> = new Paint ( ) ;
this . <unk> . setColor ( Color . BLACK ) ;
}
public void draw ( Canvas c ) {
if ( <unk> == null ) {
<unk> ( c ) ;
px = c . getWidth ( ) / <num>  <unk> [ <num> ] . getWidth ( ) / <num> ;
py = <num> ;
}
c . drawBitmap ( bg , <unk> , <unk> ) ;
if ( vy > <num> ) {
c . drawBitmap ( <unk> [ <num> ] , px , py , <unk> ) ;
} else if ( vy < <num> ) {
c . drawBitmap ( <unk> [ <num> ] , px , py , <unk> ) ;
} else {
c . drawBitmap ( <unk> [ <num> ] , px , py , <unk> ) ;
}
}
private void <unk> ( Canvas c ) {
<unk> = new Matrix ( ) ;
w = c . getWidth ( ) ;
h = c . getHeight ( ) ;
<unk> . postScale ( ( float ) ( ( double ) w / ( double ) bg . getWidth ( ) ) , <num> ) ;
<unk> . postTranslate ( <num> ,  ( bg . getHeight ( )  h ) ) ;
}
public void update ( ) {
if ( <unk> == null ) {
return ;
}
int bot = h  <unk> [ <num> ] . getHeight ( ) ;
if ( py > bot ) {
py = bot ;
}
if ( py < bot ) {
vy += <num> ;
} else if ( this . <unk> && py == bot ) {
vy =  <num> ;
} else {
vy = <num> ;
}
py += vy ;
this . <unk> = false ;
}
}
package com . <unk> ;
import org . apache . tools . ant . BuildException ;
import org . apache . tools . ant . Task ;
public class <unk> extends Task {
private String propertyName ;
@Override
public void execute ( ) throws BuildException {
final String millis = String . valueOf ( System . currentTimeMillis ( ) ) ;
getProject ( ) . setProperty ( this . propertyName , millis ) ;
log ( this . propertyName + " + millis ) ;
}
public void setProperty ( String propertyName ) {
this . propertyName = propertyName ;
}
}
import java . io . File ;
import java . util . logging . Logger ;
public class <unk> extends Plugin {
String name = " ;
String version = " ;
String author = " ;
static Logger log = Logger . getLogger ( " ) ;
public void initialize ( ) {
<unk> listener = new <unk> ( ) ;
log . info ( this . name + " + this . version + " + this . author + " ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . <unk> , listener , this , PluginListener . Priority . MEDIUM ) ;
File f = new File ( " ) ;
f . mkdir ( ) ;
listener . reload ( ) ;
}
public void enable ( ) {
log . info ( this . name + " + this . version + " + this . author
+ " ) ;
}
public void disable ( ) {
log . info ( this . name + " + this . version + " ) ;
}
}
public class <unk> extends PluginListener {
boolean <unk> ;
boolean <unk> ;
boolean <unk> ;
PropertiesFile props = new PropertiesFile (
" ) ;
public void reload ( ) {
this . <unk> = this . props . getBoolean ( " , false ) ;
this . <unk> = this . props . getBoolean ( " , false ) ;
this . <unk> = this . props . getBoolean ( " , false ) ;
}
public boolean <unk> ( Block <unk> , int <unk> ) {
switch ( <unk> . getType ( ) ) {
case <num> :
if ( <unk> == <num> || <unk> == <num> ) {
return this . <unk> ;
}
case <num> :
if ( <unk> == <num> ) {
return this . <unk> ;
}
case <num> :
if ( <unk> == <num> ) {
return this . <unk> ;
}
}
return false ;
}
}
package org . <unk> . android ;
import java . util . ArrayList ;
import android . app . Activity ;
import android . content . Context ;
import android . os . Bundle ;
import android . view . KeyEvent ;
import android . view . View ;
import android . view . View . OnKeyListener ;
import android . widget . ArrayAdapter ;
import android . widget . EditText ;
import android . widget . ListView ;
public class <unk> extends Activity {
private Iterable < <unk> > scores ;
private ArrayList < <unk> > results ;
private String searchTerm ;
private final String <unk> = " ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
<unk> loader = new <unk> ( getAssets ( ) ) ;
loader . load ( ) ;
scores = loader . <unk> ( ) ;
results = new ArrayList < <unk> > ( ) ;
final ListView result = ( ListView ) findViewById ( R . id . result ) ;
result . setAdapter ( new <unk> ( getApplicationContext ( ) , results ) ) ;
if ( savedInstanceState != null ) {
searchTerm = savedInstanceState . getString ( <unk> ) ;
<unk> ( searchTerm ) ;
}
final EditText <unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
<unk> . setOnKeyListener ( new OnKeyListener ( ) {
public boolean onKey ( View arg0 , int arg1 , KeyEvent arg2 ) {
searchTerm = <unk> . getText ( ) . toString ( ) . toLowerCase ( ) ;
<unk> ( searchTerm ) ;
return false ;
}
} ) ;
}
@Override
public void onSaveInstanceState ( Bundle outState ) {
if ( searchTerm != null && searchTerm != " ) {
outState . putString ( <unk> , searchTerm ) ;
}
}
private void <unk> ( String searchString )
{
results . clear ( ) ;
for ( <unk> score : scores ) {
if ( score . getName ( ) . toLowerCase ( ) . startsWith ( searchString ) ) {
results . add ( score ) ;
}
}
}
package org . <unk> . android ;
public class <unk> {
private String name ;
private String <unk> ;
public <unk> ( String name , String <unk> )
{
this . name = name ;
this . <unk> = <unk> ;
}
public String getName ( ) {
return name ;
}
public String getRating ( ) {
return <unk> ;
}
package <unk> ;
public class <unk> {
private String name ;
private String <unk> ;
public <unk> ( String name , String <unk> )
{
this . name = name ;
this . <unk> = <unk> ;
}
public String getName ( ) {
return name ;
}
public String getRating ( ) {
return <unk> ;
}
}
package org . <unk> . android ;
public final class BuildConfig {
public final static boolean DEBUG = true ;
package <unk> ;
import java . io . FileInputStream ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . io . InputStream ;
public class Parser {
public static void main ( String [ ] args ) throws IOException {
InputStream input ;
String path = " ;
input = new FileInputStream ( path ) ;
<unk> parser = new <unk> ( ) ;
parser . parse ( input ) ;
for ( <unk> score : parser . <unk> ( ) ) {
System . out . print ( score . getName ( ) ) ;
System . out . print ( " ) ;
System . out . println ( score . getRating ( ) ) ;
}
}
}
package org . <unk> . android ;
public final class R {
public static final class attr {
}
public static final class drawable {
public static final int ic_launcher = <num> ;
}
public static final class id {
public static final int name = <num> ;
public static final int result = <num> ;
public static final int score = <num> ;
public static final int <unk> = <num> ;
}
public static final class layout {
public static final int main = <num> ;
public static final int <unk> = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int <unk> = <num> ;
public static final int result = <num> ;
}
}
package org . <unk> . android ;
import java . io . BufferedReader ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . InputStreamReader ;
import java . util . ArrayList ;
import android . content . res . AssetManager ;
public class <unk> {
private ArrayList < <unk> > scores = new ArrayList < <unk> > ( ) ;
private final AssetManager assetManager ;
public <unk> ( AssetManager assetManager ) {
this . assetManager = assetManager ;
}
public void load ( )
{
try {
<unk> ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
}
public Iterable < <unk> > <unk> ( ) {
return scores ;
}
private void <unk> ( ) throws IOException
{
InputStream <unk> = assetManager . open ( " ) ;
BufferedReader reader = new BufferedReader ( new InputStreamReader ( <unk> ) ) ;
for ( ; ; ) {
String line = reader . readLine ( ) ;
if ( line == null ) break ;
int <unk> = line . indexOf ( ;' ) ;
if ( <unk> !=  <num> ) {
String name = line . substring ( <num> , <unk>  <num> ) ;
String rating = line . substring ( <unk> + <num> ) ;
scores . add ( new <unk> ( name , rating ) ) ;
}
}
}
package <unk> ;
import java . util . ArrayList ;
import java . util . Collections ;
import java . util . Comparator ;
import java . util . List ;
import com . <unk> . text . pdf . parser . * ;
public class <unk> implements <unk> {
private final float <unk> ;
private final ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
public <unk> ( float <unk> )
{
this . <unk> = <unk> ;
}
public void clear ( )
{
<unk> . clear ( ) ;
}
public Iterable < List < String >> <unk> ( )
{
ArrayList < List < String >> result = new ArrayList < List < String >> ( ) ;
Collections . sort ( <unk> , new Comparator < <unk> > ( ) {
public int compare ( <unk> first , <unk> second ) {
if ( first . getY ( ) < second . getY ( )  <unk> ) return  <num> ;
if ( first . getY ( ) > second . getY ( ) + <unk> ) return + <num> ;
if ( first . getX ( ) < second . getX ( ) ) return  <num> ;
if ( first . getX ( ) > second . getX ( ) ) return + <num> ;
return <num> ;
}
} ) ;
ArrayList < String > currentLine = new ArrayList < String > ( ) ;
float <unk> = <num> , <unk> ;
String <unk> ;
for ( <unk> <unk> : <unk> ) {
<unk> = <unk> . getY ( ) ;
<unk> = <unk> . getText ( ) ;
if ( currentLine . isEmpty ( ) ) {
currentLine . add ( <unk> ) ;
<unk> = <unk> ;
}
else {
if ( <unk> > <unk> + <unk> ) {
result . add ( currentLine ) ;
currentLine = new ArrayList < String > ( ) ;
currentLine . add ( <unk> ) ;
<unk> = <unk> ;
}
else {
currentLine . add ( <unk> ) ;
}
}
}
if ( ! currentLine . isEmpty ( ) ) {
result . add ( currentLine ) ;
}
return result ;
}
@Override
public void renderText ( <unk> <unk> ) {
String text = <unk> . getText ( ) ;
Vector origin = <unk> . <unk> ( ) . <unk> ( ) ;
<unk> . add ( new <unk> ( text , origin . get ( Vector . <unk> ) , origin . get ( Vector . <unk> ) ) ) ;
}
@Override
public void <unk> ( ) {
}
@Override
public void <unk> ( ) {
}
@Override
public void <unk> ( <unk> arg0 ) {
}
}
package org . <unk> . android ;
import java . util . List ;
import android . content . Context ;
import android . database . DataSetObserver ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . ListAdapter ;
import android . widget . TextView ;
public class <unk> implements ListAdapter {
private Context context ;
private List < <unk> > scores ;
public <unk> ( Context context , List < <unk> > scores ) {
this . context = context ;
this . scores = scores ;
}
public int getCount ( ) {
return scores . size ( ) ;
}
public Object getItem ( int position ) {
return scores . get ( position ) ;
}
public long getItemId ( int position ) {
return position ;
}
public int getItemViewType ( int arg0 ) {
return <num> ;
}
public View getView ( int position , View convertView , ViewGroup parent ) {
View view = convertView ;
if ( view == null ) {
LayoutInflater inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ;
view = inflater . inflate ( R . layout . <unk> , null ) ;
}
TextView name = ( TextView ) view . findViewById ( R . id . name ) ;
TextView score = ( TextView ) view . findViewById ( R . id . score ) ;
<unk> item = scores . get ( position ) ;
name . setText ( item . getName ( ) ) ;
score . setText ( item . getRating ( ) ) ;
return view ;
}
public int getViewTypeCount ( ) {
return <num> ;
}
public boolean hasStableIds ( ) {
return false ;
}
public boolean isEmpty ( ) {
return getCount ( ) == <num> ;
}
public void registerDataSetObserver ( DataSetObserver arg0 ) {
}
public void unregisterDataSetObserver ( DataSetObserver arg0 ) {
}
public boolean areAllItemsEnabled ( ) {
return true ;
}
public boolean isEnabled ( int position ) {
return true ;
}
}
package <unk> ;
public class <unk> {
private final float x ;
private final float y ;
private final String text ;
public <unk> ( String text , float x , float y )
{
this . text = text ;
this . x = x ;
this . y = y ;
}
public String getText ( )
{
return text ;
}
public float getX ( )
{
return x ;
}
public float getY ( )
{
return y ;
}
}
package <unk> ;
import java . io . IOException ;
import java . io . InputStream ;
import java . util . ArrayList ;
import java . util . List ;
import com . <unk> . text . pdf . * ;
import com . <unk> . text . pdf . parser . * ;
public class <unk> {
private ArrayList < <unk> > scores = new ArrayList < <unk> > ( ) ;
public void parse ( InputStream stream ) throws IOException {
scores . clear ( ) ;
<unk> <unk> = null ;
try {
<unk> = new <unk> ( stream ) ;
<unk> <unk> = new <unk> ( <num> ) ;
<unk> <unk> = new <unk> ( <unk> ) ;
int pages = <unk> . <unk> ( ) ;
for ( int page = <num> ; page <= pages ; page ++ ) {
<unk> <unk> = <unk> . <unk> ( page ) ;
<unk> <unk> = <unk> . <unk> ( <unk> . RESOURCES ) ;
byte [ ] pageData = <unk> . <unk> ( <unk> , page ) ;
<unk> . clear ( ) ;
<unk> . <unk> ( pageData , <unk> ) ;
for ( List < String > line : <unk> . <unk> ( ) ) {
<unk> ( line ) ;
}
}
}
finally {
if ( <unk> != null )
{
<unk> . close ( ) ;
}
}
}
public Iterable < <unk> > <unk> ( ) {
return scores ;
}
private void <unk> ( List < String > line ) {
if ( line . size ( ) < <num> ) return ;
String <unk> = line . get ( <num> ) ;
if ( ! <unk> ( <unk> ) ) return ;
String name = line . get ( <num> ) ;
if ( ! <unk> ( name ) ) return ;
if ( line . size ( ) > <num> ) {
String description = line . get ( <num> ) ;
if ( description != null ) {
name = name + " + description ;
}
}
scores . add ( new <unk> ( name , <unk> ) ) ;
}
private static Boolean <unk> ( String text ) {
try {
Float . parseFloat ( text . replace ( ,' , .' ) ) ;
return true ;
}
catch ( NumberFormatException e ) {
return false ;
}
}
private static Boolean <unk> ( String text ) {
return Character . isUpperCase ( text . charAt ( <num> ) ) && Character . isUpperCase ( text . charAt ( <num> ) ) ;
}
package com . <unk> . hadoop . mapreduce ;
import java . io . IOException ;
import org . apache . commons . logging . Log ;
import org . apache . commons . logging . LogFactory ;
import org . apache . hadoop . conf . Configuration ;
import org . apache . hadoop . mapreduce . Mapper ;
import org . apache . hadoop . <unk> . <unk> ;
import org . apache . hadoop . util . StringUtils ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> ;
public class <unk>
extends Mapper < <unk> , <unk> ,
<unk> , <unk> > {
private static final Log LOG = LogFactory . getLog ( <unk> . class ) ;
private <unk> mapper ;
private <unk> link ;
private <unk> task ;
@Override
public void setup ( Context context ) {
try {
Configuration conf = context . getConfiguration ( ) ;
link = <unk> . get ( conf ) ;
<unk> . <unk> ( link ,
conf . get ( <unk> . <unk> ) ) ;
task = new <unk> ( context ) ;
link . evaluate ( " ) ;
link . <unk> ( ) ;
mapper = link . <unk> ( ) ;
link . evaluate ( conf . get ( <unk> . <unk> ) ) ;
link . <unk> ( ) ;
<unk> <unk> = link . <unk> ( ) ;
link . <unk> ( " , <num> ) ;
link . put ( mapper ) ;
link . put ( <unk> ) ;
link . <unk> ( ) ;
link . <unk> ( ) ;
} catch ( <unk> e ) {
LOG . error ( StringUtils . <unk> ( e ) ) ;
throw new RuntimeException ( " ) ;
} catch ( IOException e ) {
LOG . error ( StringUtils . <unk> ( e ) ) ;
throw new RuntimeException ( " ) ;
}
}
@Override
public void map ( <unk> key , <unk> value ,
Context context ) throws IOException , InterruptedException {
task . setContext ( context ) ;
try {
link . <unk> ( " , <num> ) ;
link . <unk> ( task ) ;
link . put ( mapper ) ;
link . put ( key . getValue ( ) ) ;
link . put ( value . getValue ( ) ) ;
link . <unk> ( ) ;
link . <unk> ( ) ;
} catch ( <unk> ex ) {
LOG . error ( StringUtils . <unk> ( ex ) ) ;
}
}
@Override
public void cleanup ( Context context ) {
link . <unk> ( ) ;
link . close ( ) ;
}
}
package com . <unk> . hadoop . dfs ;
import com . <unk> . <unk> . <unk> ;
import org . apache . hadoop . conf . Configuration ;
import org . apache . hadoop . fs . FileSystem ;
import org . apache . hadoop . fs . Path ;
import org . apache . hadoop . io . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import com . <unk> . hadoop . <unk> ;
public class <unk> {
<unk> . Writer writer ;
<unk> key ;
<unk> value ;
public <unk> ( Configuration conf , Path path )
throws Exception {
FileSystem fs = FileSystem . get ( conf ) ;
key = new <unk> ( ) ;
value = new <unk> ( ) ;
writer = <unk> . <unk> ( fs , conf , path , <unk> . class ,
<unk> . class ) ;
}
public void write ( <unk> [ ] [ ] list ) throws Exception {
for ( int i = <num> ; i < list . length ; i ++ ) {
if ( list [ i ] . length != <num> ) {
throw new IllegalArgumentException ( " ) ;
}
key . setValue ( <unk> . <unk> ( list [ i ] [ <num> ] ) ) ;
value . setValue ( <unk> . <unk> ( list [ i ] [ <num> ] ) ) ;
writer . append ( key , value ) ;
}
}
public void close ( ) throws Exception {
writer . close ( ) ;
}
package com . <unk> . hadoop . mapreduce ;
import java . util . ArrayList ;
import java . util . List ;
import org . apache . hadoop . conf . Configuration ;
import org . apache . hadoop . conf . Configured ;
import org . apache . hadoop . fs . Path ;
import org . apache . hadoop . mapreduce . Job ;
import org . apache . hadoop . mapreduce . lib . input . FileInputFormat ;
import org . apache . hadoop . mapreduce . lib . input . <unk> ;
import org . apache . hadoop . mapreduce . lib . output . FileOutputFormat ;
import org . apache . hadoop . mapreduce . lib . output . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> ;
public class <unk> extends Configured {
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
private String <unk> ;
private Job job ;
private <unk> map = null ;
private <unk> reduce = null ;
private List < String > inputs ;
private String output = null ;
public <unk> ( String <unk> ) {
this . <unk> = <unk> ;
inputs = new ArrayList < String > ( ) ;
}
public void <unk> ( <unk> map ) {
this . map = map ;
}
public void <unk> ( <unk> reduce ) {
this . reduce = reduce ;
}
public void addInputPath ( String input ) {
inputs . add ( input ) ;
}
public void setOutputPath ( String output ) {
this . output = output ;
}
public Job launch ( Configuration conf ) throws Exception {
assert inputs . size ( ) != <num> ;
assert output != null ;
assert map != null ;
assert reduce != null ;
conf . set ( <unk> , map . toString ( ) ) ;
conf . set ( <unk> , reduce . toString ( ) ) ;
job = new Job ( conf ) ;
job . <unk> ( <unk> ) ;
job . setJarByClass ( <unk> . class ) ;
for ( String input : inputs ) {
FileInputFormat . addInputPath ( job , new Path ( input ) ) ;
}
FileOutputFormat . setOutputPath ( job , new Path ( output ) ) ;
job . <unk> ( <unk> . class ) ;
job . setMapperClass ( <unk> . class ) ;
job . setReducerClass ( <unk> . class ) ;
job . setOutputKeyClass ( <unk> . class ) ;
job . setOutputValueClass ( <unk> . class ) ;
job . <unk> ( <unk> . class ) ;
job . submit ( ) ;
return job ;
}
}
package com . <unk> . hadoop . dfs ;
import java . util . ArrayList ;
import com . <unk> . <unk> . <unk> ;
import org . apache . hadoop . conf . Configuration ;
import org . apache . hadoop . fs . FileSystem ;
import org . apache . hadoop . fs . Path ;
import org . apache . hadoop . io . <unk> ;
import org . apache . hadoop . io . Writable ;
import org . apache . hadoop . util . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import com . <unk> . hadoop . <unk> ;
public class <unk> {
<unk> . Reader reader ;
Class < ? > keyClass ;
Class < ? > valueClass ;
Writable key ;
Writable value ;
public <unk> ( Configuration conf , Path <unk> )
throws Exception {
FileSystem fs = FileSystem . get ( conf ) ;
reader = new <unk> . Reader ( fs , <unk> , conf ) ;
keyClass = reader . <unk> ( ) ;
valueClass = reader . <unk> ( ) ;
key = ( Writable ) <unk> . newInstance ( keyClass , conf ) ;
value = ( Writable ) <unk> . newInstance ( valueClass , conf ) ;
}
private <unk> <unk> ( Writable w ) {
if ( w instanceof <unk> ) {
return <unk> . <unk> ( ( ( <unk> ) w ) . getValue ( ) ) ;
}
return null ;
}
public <unk> next ( ) throws Exception {
<unk> record ;
if ( reader . next ( key , value ) ) {
record = new <unk> (
<unk> . <unk> ( " ) ,
new <unk> [ ] {
<unk> ( key ) ,
<unk> ( value )
} ) ;
return record ;
} else {
return null ;
}
}
public Object [ ] next ( int <unk> ) throws Exception {
ArrayList < <unk> > records = new ArrayList < <unk> > ( <unk> ) ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
<unk> record = next ( ) ;
if ( record == null ) {
if ( i == <num> ) { return null ; }
break ;
}
records . add ( record ) ;
}
return records . toArray ( ) ;
}
public void close ( ) throws Exception {
reader . close ( ) ;
}
}
package com . <unk> . hadoop . mapreduce ;
import java . io . IOException ;
import java . util . Iterator ;
import org . apache . commons . logging . Log ;
import org . apache . commons . logging . LogFactory ;
import org . apache . hadoop . conf . Configuration ;
import org . apache . hadoop . mapreduce . Reducer ;
import org . apache . hadoop . <unk> . <unk> ;
import org . apache . hadoop . util . StringUtils ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> ;
public class <unk> extends
Reducer < <unk> , <unk> ,
<unk> , <unk> > {
private static final Log LOG = LogFactory . getLog ( <unk> . class ) ;
private <unk> reducer ;
private <unk> link ;
private <unk> task ;
@Override
public void setup ( Context context ) {
try {
Configuration conf = context . getConfiguration ( ) ;
link = <unk> . get ( conf ) ;
<unk> . <unk> ( link ,
conf . get ( <unk> . <unk> ) ) ;
task = new <unk> ( context ) ;
link . evaluate ( " ) ;
link . <unk> ( ) ;
reducer = link . <unk> ( ) ;
link . evaluate ( conf . get ( <unk> . <unk> ) ) ;
link . <unk> ( ) ;
<unk> <unk> = link . <unk> ( ) ;
link . <unk> ( " , <num> ) ;
link . put ( reducer ) ;
link . put ( <unk> ) ;
link . <unk> ( ) ;
link . <unk> ( ) ;
} catch ( <unk> e ) {
LOG . error ( StringUtils . <unk> ( e ) ) ;
throw new RuntimeException ( " ) ;
} catch ( IOException e ) {
LOG . error ( StringUtils . <unk> ( e ) ) ;
throw new RuntimeException ( " ) ;
}
}
@Override
public void reduce ( <unk> key ,
Iterable < <unk> > values ,
Context context ) throws IOException , InterruptedException {
task . setContext ( context ) ;
<unk> iter = new <unk> ( values . iterator ( ) ) ;
try {
link . <unk> ( " , <num> ) ;
link . <unk> ( task ) ;
link . put ( reducer ) ;
link . put ( key . getValue ( ) ) ;
link . <unk> ( iter ) ;
link . <unk> ( ) ;
link . <unk> ( ) ;
} catch ( <unk> ex ) {
LOG . error ( StringUtils . <unk> ( ex ) ) ;
}
}
@Override
public void cleanup ( Context context ) {
link . <unk> ( ) ;
link . close ( ) ;
}
}
class <unk> implements Iterator < Object > {
private Iterator < <unk> > iter ;
<unk> ( Iterator < <unk> > iter ) {
this . iter = iter ;
}
@Override
public boolean hasNext ( ) {
return iter . hasNext ( ) ;
}
@Override
public Object next ( ) {
return ( ( <unk> ) iter . next ( ) ) . getValue ( ) ;
}
@Override
public void remove ( ) { }
}
package com . <unk> . hadoop . mapreduce ;
import java . io . File ;
import java . io . IOException ;
import java . net . URL ;
import java . util . Map ;
import org . apache . commons . logging . Log ;
import org . apache . commons . logging . LogFactory ;
import org . apache . hadoop . conf . Configuration ;
import org . apache . hadoop . util . StringUtils ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> ;
public class <unk> {
static final Log LOG = LogFactory . getLog ( <unk> . class ) ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static <unk> get ( Configuration conf ) throws <unk> , IOException {
String <unk> = <unk> ( ) ;
String <unk> = null ;
if ( <unk> != null ) {
<unk> = " + <unk> + " ;
}
String <unk> = <unk> ( <unk> ) ;
String <unk> = conf . get ( <unk> , <unk> ) ;
if ( <unk> == null ) {
throw new RuntimeException ( " ) ;
}
System . setProperty ( " , <unk> ) ;
String <unk> = conf . get ( <unk> , <unk> ) ;
if ( <unk> == null ) {
throw new RuntimeException ( " ) ;
}
<unk> link = <unk> . <unk> ( <unk> ) ;
link . <unk> ( ) ;
link . <unk> ( ) ;
<unk> ( link , " ) ;
Runtime . getRuntime ( ) . addShutdownHook ( new <unk> ( link ) ) ;
return link ;
}
public static void <unk> ( <unk> link , String packageName ) {
ClassLoader loader = ClassLoader . getSystemClassLoader ( ) ;
URL <unk> = loader . getResource ( packageName ) ;
if ( <unk> == null ) {
LOG . error ( " + packageName ) ;
return ;
}
String <unk> = <unk> . getPath ( ) ;
int n = <unk> . lastIndexOf ( " ) ;
String jarPath = <unk> . substring ( <num> , n ) ;
LOG . info ( " + packageName + " + jarPath ) ;
try {
link . <unk> ( " , <num> ) ;
link . put ( jarPath ) ;
link . <unk> ( " , <num> ) ;
link . put ( " ) ;
link . put ( " ) ;
link . put ( packageName ) ;
link . put ( " ) ;
link . <unk> ( ) ;
link . <unk> ( ) ;
} catch ( <unk> ex ) {
LOG . error ( StringUtils . <unk> ( ex ) ) ;
}
}
public static String <unk> ( ) {
Map < String , String > env = System . getenv ( ) ;
String [ ] paths = ( env . get ( " ) + " ) . split ( " ) ;
for ( String path : paths ) {
if ( path . length ( ) == <num> ) continue ;
File <unk> = new File ( path + File . separator + " ) ;
if ( <unk> . isFile ( ) && <unk> . canExecute ( ) ) {
return <unk> . getAbsolutePath ( ) ;
}
}
return null ;
}
public static String <unk> ( String <unk> ) throws IOException {
if ( <unk> == null ) return null ;
File <unk> = null ;
File <unk> = new File ( <unk> ) . getCanonicalFile ( ) ;
String <unk> = " + File . separator + " + File . separator + " ;
<unk> = new File ( <unk> . getParentFile ( ) . getParentFile ( ) , <unk> ) ;
if ( <unk> . isDirectory ( ) ) {
return <unk> . getCanonicalPath ( ) ;
}
<unk> = new File ( <unk> . getParentFile ( ) . getParentFile ( ) . getParentFile ( ) , <unk> ) ;
if ( <unk> . isDirectory ( ) ) {
return <unk> . getCanonicalPath ( ) ;
}
return null ;
}
public static void main ( String args [ ] ) throws <unk> , IOException {
String <unk> = <unk> ( ) ;
String <unk> = <unk> ( <unk> ) ;
System . out . println ( <unk> ) ;
System . out . println ( <unk> ) ;
}
}
class <unk> extends Thread {
private <unk> link ;
<unk> ( <unk> link ) {
this . link = link ;
}
@Override
public void run ( ) {
link . <unk> ( ) ;
link . close ( ) ;
}
}
package com . <unk> . hadoop ;
import java . math . BigDecimal ;
import java . math . BigInteger ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> ;
import org . apache . hadoop . record . Buffer ;
public class <unk> {
private static final <unk> <unk> = <unk> ( " ) ;
private static final <unk> TRUE = <unk> ( " ) ;
private static final <unk> FALSE = <unk> ( " ) ;
public static <unk> <unk> ( String symbol ) {
return new <unk> ( <unk> . SYMBOL , symbol ) ;
}
@SuppressWarnings("unchecked")
public static <unk> <unk> ( Object obj ) {
<unk> expr = null ;
if ( obj instanceof Buffer ) {
} else if ( obj instanceof Byte ) {
expr = <unk> ( ( Byte ) obj ) ;
} else if ( obj instanceof Boolean ) {
expr = <unk> ( ( Boolean ) obj ) ;
} else if ( obj instanceof Integer ) {
expr = new <unk> ( ( Integer ) obj ) ;
} else if ( obj instanceof Long ) {
expr = new <unk> ( ( Long ) obj ) ;
} else if ( obj instanceof Float ) {
expr = new <unk> ( ( Float ) obj ) ;
} else if ( obj instanceof Double ) {
expr = new <unk> ( ( Double ) obj ) ;
} else if ( obj instanceof String ) {
expr = new <unk> ( ( String ) obj ) ;
} else if ( obj instanceof ArrayList ) {
expr = <unk> ( ( List < Object > ) obj ) ;
} else if ( obj instanceof List ) {
expr = <unk> ( ( List < Object > ) obj ) ;
} else if ( obj instanceof Map ) {
expr = <unk> ( ( Map < Object , Object > ) obj ) ;
} else {
String error = String . format ( " ,
obj . getClass ( ) ) ;
throw new RuntimeException ( error ) ;
}
return expr ;
}
private static <unk> <unk> ( Byte b ) {
return new <unk> ( b ) ;
}
private static <unk> <unk> ( Boolean b ) {
if ( b ) {
return TRUE ;
} else {
return FALSE ;
}
}
private static <unk> <unk> ( List < Object > list ) {
int length = list . size ( ) ;
<unk> [ ] <unk> = new <unk> [ length ] ;
for ( int i = <num> ; i < length ; i ++ ) {
<unk> [ i ] = <unk> ( list . get ( i ) ) ;
}
return new <unk> ( <unk> ( " ) , <unk> ) ;
}
private static <unk> <unk> ( Map < Object , Object > map ) {
int length = map . size ( ) ;
<unk> [ ] rules = new <unk> [ length ] ;
int i = <num> ;
for ( Object key : map . keySet ( ) ) {
<unk> lhs = <unk> ( key ) ;
<unk> rhs = <unk> ( map . get ( key ) ) ;
<unk> rule = new <unk> ( <unk> ( " ) ,
new <unk> [ ] { lhs , rhs } ) ;
rules [ i ] = rule ;
i ++ ;
}
return new <unk> ( <unk> ( " ) , rules ) ;
}
public static Object <unk> ( <unk> expr ) {
Object obj = null ;
try {
if ( <unk> ( expr ) ) {
if ( expr . <unk> ( ) ) {
obj = new Boolean ( true ) ;
} else {
obj = new Boolean ( false ) ;
}
} else if ( expr . <unk> ( ) ) {
BigInteger val = expr . <unk> ( ) ;
long n = val . longValue ( ) ;
if ( n > Integer . MAX_VALUE || n < Integer . MIN_VALUE ) {
obj = new Long ( n ) ;
} else {
obj = new Integer ( ( int ) n ) ;
}
} else if ( expr . <unk> ( ) || expr . <unk> ( ) ) {
BigDecimal val = expr . <unk> ( ) ;
obj = new Double ( val . doubleValue ( ) ) ;
} else if ( expr . <unk> ( ) || expr . <unk> ( ) ) {
obj = expr . asString ( ) ;
} else if ( <unk> ( expr ) ) {
obj = <unk> ( expr ) ;
} else if ( expr . <unk> ( ) ) {
obj = <unk> ( expr ) ;
} else {
String error = String . format ( " ,
expr ) ;
throw new RuntimeException ( error ) ;
}
} catch ( <unk> e ) {
}
return obj ;
}
private static boolean <unk> ( <unk> expr ) throws <unk> {
if ( ! expr . <unk> ( ) ) {
return false ;
}
String name = expr . asString ( ) ;
if ( name . equals ( " ) || name . equals ( " ) ) {
return true ;
}
return false ;
}
private static boolean <unk> ( <unk> expr ) {
if ( ! expr . <unk> ( ) ) {
return false ;
}
int [ ] dimensions = expr . dimensions ( ) ;
int length = dimensions [ <num> ] ;
for ( int i = <num> ; i <= length ; i ++ ) {
<unk> e = expr . part ( i ) ;
if ( ! e . head ( ) . equals ( <unk> ) ) {
return false ;
}
}
return true ;
}
private static Map < Object , Object > <unk> ( <unk> expr ) {
Map < Object , Object > map = new HashMap < Object , Object > ( ) ;
int length = expr . dimensions ( ) [ <num> ] ;
for ( int i = <num> ; i <= length ; i ++ ) {
<unk> rule = expr . part ( i ) ;
<unk> lhs = rule . part ( <num> ) ;
<unk> rhs = rule . part ( <num> ) ;
map . put ( <unk> ( lhs ) , <unk> ( rhs ) ) ;
}
return map ;
}
private static ArrayList < Object > <unk> ( <unk> expr ) {
ArrayList < Object > list = new ArrayList < Object > ( ) ;
int length = expr . dimensions ( ) [ <num> ] ;
for ( int i = <num> ; i <= length ; i ++ ) {
<unk> element = expr . part ( i ) ;
list . add ( <unk> ( element ) ) ;
}
return list ;
}
}
package com . <unk> . hadoop . mapreduce ;
import java . io . IOException ;
import org . apache . commons . logging . Log ;
import org . apache . commons . logging . LogFactory ;
import org . apache . hadoop . mapreduce . Counter ;
import org . apache . hadoop . mapreduce . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> ;
import static com . <unk> . hadoop . <unk> . * ;
public class <unk> {
private static final Log LOG = LogFactory . getLog ( <unk> . class ) ;
private static final String <unk> = " ;
private <unk> < ? , ? , <unk> , <unk> > context ;
private <unk> key ;
private <unk> value ;
public <unk> ( <unk> < ? , ? , <unk> , <unk> > context ) {
this . context = context ;
key = new <unk> ( ) ;
value = new <unk> ( ) ;
}
public void setContext ( <unk> < ? , ? , <unk> , <unk> > context ) {
this . context = context ;
}
public void write ( <unk> k , <unk> v ) throws InterruptedException , IOException {
key . setValue ( <unk> ( k ) ) ;
value . setValue ( <unk> ( v ) ) ;
context . write ( key , value ) ;
}
public void log ( String message ) {
LOG . info ( message ) ;
}
public void <unk> ( String name , long n ) {
<unk> ( <unk> , name , n ) ;
}
public void <unk> ( String group , String name , long n ) {
Counter counter = context . getCounter ( group , name ) ;
counter . increment ( n ) ;
}
package com . <unk> . <unk> . <unk> . nodes ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . Node ;
public class <unk> extends <unk> {
public static final String <unk> = <unk> . class . getCanonicalName ( ) ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public <unk> ( Node n ) {
super ( n ) ;
}
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( node . getProperty ( <unk> ) ) ) ; }
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( node . getProperty ( <unk> ) ) ) ; }
public String <unk> ( ) { return String . valueOf ( node . getProperty ( <unk> ) ) ; }
public String <unk> ( ) { return String . valueOf ( node . getProperty ( <unk> ) ) ; }
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( node . getProperty ( <unk> ) ) ) ; }
public void <unk> ( int value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( int value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( String value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( String value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( int value ) { node . setProperty ( <unk> , value ) ; }
@Override
public int hashCode ( ) {
return super . hashCode ( ) ;
}
@Override
public boolean equals ( Object obj ) {
if ( obj instanceof <unk> ) {
<unk> other = ( <unk> ) obj ;
return this . node . equals ( other . node ) ;
} else {
return false ;
}
}
@Override
public String toString ( ) {
return " ;
}
}
package com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
public static final String NAME = " ;
public <unk> ( <unk> rel ) {
super ( rel ) ;
}
@Override
public String name ( ) {
return NAME ;
}
}
package com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> . model . util . <unk> ;
import com . <unk> . <unk> . <unk> . nodes . <unk> ;
import com . <unk> . <unk> . <unk> . nodes . <unk> ;
import java . util . HashMap ;
import java . util . Map ;
import org . <unk> . <unk> . Node ;
import org . <unk> . <unk> . index . Index ;
public class <unk> extends <unk> {
private static boolean <unk> = false ;
public static String <unk> = " ;
public static String <unk> = " ;
private static String <unk> = " ;
private static String <unk> = " ;
private static String <unk> = " ;
private static String <unk> = " ;
private Index < Node > <unk> = null ;
private Index < Node > <unk> = null ;
private Index < Node > <unk> = null ;
private Index < Node > <unk> = null ;
public <unk> ( String <unk> ) {
super ( <unk> , <unk> ( ) , false ) ;
<unk> ( ) ;
}
public <unk> ( String <unk> , boolean <unk> , boolean <unk> ) {
super ( <unk> , <unk> , <unk> ) ;
<unk> ( ) ;
}
public Index < Node > <unk> ( ) {
return <unk> ;
}
public Index < Node > <unk> ( ) {
return <unk> ;
}
public Index < Node > <unk> ( ) {
return <unk> ;
}
public Index < Node > <unk> ( ) {
return <unk> ;
}
private static synchronized boolean <unk> ( ) {
if ( ! <unk> ) {
<unk> = true ;
return true ;
} else {
return false ;
}
}
private void <unk> ( ) {
Map < String , String > <unk> = new HashMap < String , String > ( ) ;
<unk> . put ( <unk> , <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
<unk> = <unk> . index ( ) . <unk> ( <unk> . <unk> , <unk> ) ;
<unk> = <unk> . index ( ) . <unk> ( <unk> . <unk> , <unk> ) ;
<unk> = <unk> . index ( ) . <unk> ( <unk> , <unk> ) ;
<unk> = <unk> . index ( ) . <unk> ( <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> . nodes ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . Node ;
public class <unk> extends <unk> {
public static final String <unk> = <unk> . class . getCanonicalName ( ) ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public <unk> ( Node n ) {
super ( n ) ;
}
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( node . getProperty ( <unk> ) ) ) ; }
public int getIdentity ( ) { return Integer . parseInt ( String . valueOf ( node . getProperty ( <unk> ) ) ) ; }
public String <unk> ( ) { return String . valueOf ( node . getProperty ( <unk> ) ) ; }
public String <unk> ( ) { return String . valueOf ( node . getProperty ( <unk> ) ) ; }
public String <unk> ( ) { return String . valueOf ( node . getProperty ( <unk> ) ) ; }
public String <unk> ( ) { return String . valueOf ( node . getProperty ( <unk> ) ) ; }
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( node . getProperty ( <unk> ) ) ) ; }
public void <unk> ( int value ) { node . setProperty ( <unk> , value ) ; }
public void setIdentity ( int value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( String value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( String value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( String value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( String value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( int value ) { node . setProperty ( <unk> , value ) ; }
@Override
public int hashCode ( ) {
return super . hashCode ( ) ;
}
@Override
public boolean equals ( Object obj ) {
if ( obj instanceof <unk> ) {
<unk> other = ( <unk> ) obj ;
return this . node . equals ( other . node ) ;
} else {
return false ;
}
}
@Override
public String toString ( ) {
return " ;
}
}
package com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
public static final String NAME = " ;
public <unk> ( <unk> rel ) {
super ( rel ) ;
}
@Override
public String name ( ) {
return NAME ;
}
}
package com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
public static final String NAME = " ;
public <unk> ( <unk> rel ) {
super ( rel ) ;
}
@Override
public String name ( ) {
return NAME ;
}
}
package com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
public static final String NAME = " ;
public <unk> ( <unk> rel ) {
super ( rel ) ;
}
@Override
public String name ( ) {
return NAME ;
}
}
package com . <unk> . <unk> . <unk> . nodes ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . Node ;
public class <unk> extends <unk> {
public static final String <unk> = <unk> . class . getCanonicalName ( ) ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public <unk> ( Node n ) {
super ( n ) ;
}
public String <unk> ( ) { return String . valueOf ( node . getProperty ( <unk> ) ) ; }
public String <unk> ( ) { return String . valueOf ( node . getProperty ( <unk> ) ) ; }
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( node . getProperty ( <unk> ) ) ) ; }
public void <unk> ( String value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( String value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( int value ) { node . setProperty ( <unk> , value ) ; }
@Override
public int hashCode ( ) {
return super . hashCode ( ) ;
}
@Override
public boolean equals ( Object obj ) {
if ( obj instanceof <unk> ) {
<unk> other = ( <unk> ) obj ;
return this . node . equals ( other . node ) ;
} else {
return false ;
}
}
@Override
public String toString ( ) {
return " ;
}
}
package com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
public static final String NAME = " ;
public <unk> ( <unk> rel ) {
super ( rel ) ;
}
@Override
public String name ( ) {
return NAME ;
}
}
package com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
public static final String NAME = " ;
public <unk> ( <unk> rel ) {
super ( rel ) ;
}
@Override
public String name ( ) {
return NAME ;
}
}
package com . <unk> . <unk> . <unk> . nodes ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . Node ;
public class <unk> extends <unk> {
public static final String <unk> = <unk> . class . getCanonicalName ( ) ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public <unk> ( Node n ) {
super ( n ) ;
}
public String getName ( ) { return String . valueOf ( node . getProperty ( <unk> ) ) ; }
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( node . getProperty ( <unk> ) ) ) ; }
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( node . getProperty ( <unk> ) ) ) ; }
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( node . getProperty ( <unk> ) ) ) ; }
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( node . getProperty ( <unk> ) ) ) ; }
public void setName ( String value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( int value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( int value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( int value ) { node . setProperty ( <unk> , value ) ; }
public void <unk> ( int value ) { node . setProperty ( <unk> , value ) ; }
@Override
public int hashCode ( ) {
return super . hashCode ( ) ;
}
@Override
public boolean equals ( Object obj ) {
if ( obj instanceof <unk> ) {
<unk> other = ( <unk> ) obj ;
return this . node . equals ( other . node ) ;
} else {
return false ;
}
}
@Override
public String toString ( ) {
return " + getName ( ) ;
}
}
package com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
public static final String NAME = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public <unk> ( <unk> rel ) {
super ( rel ) ;
}
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( <unk> . getProperty ( <unk> ) ) ) ; }
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( <unk> . getProperty ( <unk> ) ) ) ; }
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( <unk> . getProperty ( <unk> ) ) ) ; }
public int <unk> ( ) { return Integer . parseInt ( String . valueOf ( <unk> . getProperty ( <unk> ) ) ) ; }
public void <unk> ( int value ) { <unk> . setProperty ( <unk> , value ) ; }
public void <unk> ( int value ) { <unk> . setProperty ( <unk> , value ) ; }
public void <unk> ( int value ) { <unk> . setProperty ( <unk> , value ) ; }
public void <unk> ( int value ) { <unk> . setProperty ( <unk> , value ) ; }
@Override
public String name ( ) {
return NAME ;
}
@Override
public String toString ( ) {
return " + <unk> ( ) + "
+ " + <unk> ( ) + "
+ " + <unk> ( ) + "
+ " + <unk> ( ) ;
}
}
package com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
public static final String NAME = " ;
public <unk> ( <unk> rel ) {
super ( rel ) ;
}
@Override
public String name ( ) {
return NAME ;
}
}
package com . <unk> . <unk> . command ;
public class Test extends Command {
}
package com . <unk> . <unk> . command ;
import org . bukkit . entity . Player ;
public class Command {
final String NAME = " ;
public boolean execute ( Player p ) {
return false ;
}
public boolean hasPermission ( Player p ) {
return p . hasPermission ( " + getName ( ) ) ;
}
public String getName ( ) {
return NAME ;
}
}
package com . <unk> . <unk> ;
import org . bukkit . ChatColor ;
import org . bukkit . entity . Arrow ;
import org . bukkit . entity . Player ;
import org . bukkit . event . EventHandler ;
import org . bukkit . event . Listener ;
import org . bukkit . event . entity . EntityDamageByEntityEvent ;
import org . bukkit . event . entity . EntityDamageEvent ;
public class <unk> implements Listener {
final String <unk> = ChatColor . RED + " ;
@EventHandler
public void onEntityDamageByEntity ( EntityDamageByEntityEvent event ) {
if ( event . getEntity ( ) instanceof Player ) {
if ( event . getDamager ( ) instanceof Arrow ) {
Arrow arrow = ( Arrow ) event . getDamager ( ) ;
if ( arrow . getShooter ( ) instanceof Player ) {
Player <unk> = ( Player ) arrow . getShooter ( ) ;
if ( <unk> . <unk> . contains ( <unk> . getName ( ) ) ) {
event . setCancelled ( true ) ;
<unk> . sendMessage ( <unk> ) ;
}
}
} else if ( event . getDamager ( ) instanceof Player ) {
Player attacker = ( Player ) event . getDamager ( ) ;
if ( <unk> . <unk> . contains ( attacker . getName ( ) ) ) {
event . setCancelled ( true ) ;
attacker . sendMessage ( <unk> ) ;
}
}
}
}
@EventHandler
public void onEntityDamage ( EntityDamageEvent event ) {
if ( event . getEntity ( ) instanceof Player ) {
Player victim = ( Player ) event . getEntity ( ) ;
if ( <unk> . <unk> . contains ( victim . getName ( ) ) ) {
event . setCancelled ( true ) ;
}
}
}
}
package com . <unk> . <unk> . command ;
import java . util . LinkedList ;
import org . bukkit . ChatColor ;
import org . bukkit . entity . Player ;
import com . <unk> . <unk> . <unk> ;
public class <unk> extends Command {
final String NAME = " ;
@Override
public boolean execute ( Player p ) {
if ( hasPermission ( p ) ) {
<unk> . <unk> . add ( p . getName ( ) ) ;
} else {
p . sendMessage ( ChatColor . RED + " ) ;
}
return true ;
}
@Override
public boolean hasPermission ( Player p ) {
return p . hasPermission ( " + getName ( ) ) ;
}
@Override
public String getName ( ) {
return NAME ;
}
}
package com . <unk> . <unk> ;
import java . util . LinkedList ;
import org . bukkit . plugin . java . JavaPlugin ;
public class <unk> extends JavaPlugin {
public static LinkedList < String > <unk> ;
public void onEnable ( ) {
System . out . println ( " ) ;
<unk> = new LinkedList < String > ( ) ;
this . getServer ( ) . getPluginManager ( ) . registerEvents ( new <unk> ( ) , this ) ;
}
public boolean onCommand ( ) {
return false ;
}
}
package org . <unk> . <unk> ;
import android . os . Bundle ;
import android . preference . CheckBoxPreference ;
import android . preference . ListPreference ;
import android . preference . PreferenceActivity ;
import android . preference . PreferenceScreen ;
public class Preferences extends PreferenceActivity {
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setPreferenceScreen ( createPreferenceHierarchy ( ) ) ;
}
private PreferenceScreen createPreferenceHierarchy ( ) {
PreferenceScreen root = getPreferenceManager ( ) . createPreferenceScreen ( this ) ;
CheckBoxPreference <unk> = new CheckBoxPreference ( this ) ;
<unk> . setDefaultValue ( true ) ;
<unk> . setKey ( " ) ;
<unk> . setTitle ( R . string . <unk> ) ;
<unk> . setSummary ( R . string . <unk> ) ;
root . addPreference ( <unk> ) ;
CheckBoxPreference <unk> = new CheckBoxPreference ( this ) ;
<unk> . setKey ( " ) ;
<unk> . setTitle ( R . string . <unk> ) ;
<unk> . setSummary ( R . string . <unk> ) ;
root . addPreference ( <unk> ) ;
ListPreference vehicle = new ListPreference ( this ) ;
vehicle . setEntries ( R . array . <unk> ) ;
vehicle . setEntryValues ( R . array . <unk> ) ;
vehicle . <unk> ( R . string . vehicle ) ;
vehicle . setKey ( " ) ;
vehicle . setTitle ( R . string . vehicle ) ;
vehicle . setSummary ( R . string . <unk> ) ;
root . addPreference ( vehicle ) ;
ListPreference <unk> = new ListPreference ( this ) ;
<unk> . setEntries ( R . array . <unk> ) ;
<unk> . setEntryValues ( R . array . <unk> ) ;
<unk> . <unk> ( R . string . tts ) ;
<unk> . setKey ( " ) ;
<unk> . setTitle ( R . string . tts ) ;
<unk> . setSummary ( R . string . <unk> ) ;
root . addPreference ( <unk> ) ;
return root ;
}
package org . <unk> . <unk> ;
import java . io . File ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . ObjectOutputStream ;
import java . lang . reflect . InvocationTargetException ;
import java . lang . reflect . Method ;
import java . util . Locale ;
import javax . microedition . khronos . egl . EGLConfig ;
import javax . microedition . khronos . opengles . GL10 ;
import javax . microedition . khronos . opengles . GL11 ;
import javax . microedition . khronos . opengles . <unk> ;
import android . app . Activity ;
import android . app . AlertDialog ;
import android . app . Dialog ;
import android . app . ProgressDialog ;
import android . content . Context ;
import android . content . DialogInterface ;
import android . content . Intent ;
import android . content . SharedPreferences ;
import android . graphics . Bitmap ;
import android . graphics . BitmapFactory ;
import android . graphics . Canvas ;
import android . graphics . Color ;
import android . graphics . Matrix ;
import android . graphics . Paint ;
import android . graphics . Paint . Style ;
import android . hardware . <unk> ;
import android . hardware . Sensor ;
import android . hardware . SensorEvent ;
import android . hardware . SensorEventListener ;
import android . hardware . SensorManager ;
import android . location . Location ;
import android . location . LocationListener ;
import android . location . LocationManager ;
import android . opengl . GLSurfaceView ;
import android . opengl . GLUtils ;
import android . os . Bundle ;
import android . os . Environment ;
import android . os . SystemClock ;
import android . preference . PreferenceManager ;
import android . speech . tts . TextToSpeech ;
import android . util . AttributeSet ;
import android . util . Log ;
import android . view . Menu ;
import android . view . MenuInflater ;
import android . view . MenuItem ;
import android . view . MotionEvent ;
import android . view . View ;
import android . view . Window ;
import android . widget . ImageView ;
public class MapActivity extends Activity implements TextToSpeech . OnInitListener {
private MapView <unk> ;
private native int <unk> ( String sd , int lat , int lon ) ;
public int <unk> = <num> ;
@Override
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
requestWindowFeature ( Window . FEATURE_NO_TITLE ) ;
requestWindowFeature ( Window . FEATURE_PROGRESS ) ;
if ( ! Environment . MEDIA_MOUNTED . equals ( Environment . getExternalStorageState ( ) ) &&
! Environment . MEDIA_MOUNTED_READ_ONLY . equals ( Environment . getExternalStorageState ( ) ) ) {
Log . d ( " , " + Environment . getExternalStorageState ( ) + " + Environment . MEDIA_MOUNTED + " +
( Environment . getExternalStorageState ( ) != Environment . MEDIA_MOUNTED ) ) ;
showDialog ( <num> ) ;
}
else {
File sd = new File ( Environment . getExternalStorageDirectory ( ) , " ) ;
sd . mkdir ( ) ;
if ( ( <unk> = <unk> ( sd . getAbsolutePath ( ) , <num> , <num> ) ) == <num> ) {
Intent intent = new Intent ( MapActivity . this , Update . class ) ;
startActivity ( intent ) ;
setContentView ( R . layout . <unk> ) ;
}
else if ( false ) {
setContentView ( <unk> ) ;
}
else {
setContentView ( R . layout . map_view ) ;
<unk> = ( MapView ) findViewById ( R . id . mapview ) ;
<unk> . activity = this ;
ImageView . OnTouchListener <unk> = new ImageView . OnTouchListener ( ) {
public boolean onTouch ( View v , MotionEvent m ) {
if ( m . getAction ( ) == MotionEvent . ACTION_DOWN ) {
<unk> . requestRender ( ) ;
<unk> . mRenderer . <unk> = v . getId ( ) ==
R . id . <unk> ? <num> :  <num> ;
<unk> . mRenderer . <unk> = SystemClock . uptimeMillis ( )  <num> ;
}
if ( m . getAction ( ) == MotionEvent . ACTION_UP ) {
long now = SystemClock . uptimeMillis ( ) ;
<unk> . mRenderer . p . zoom = ( int ) ( <unk> . mRenderer . p . zoom * Math . exp ( <unk> . mRenderer . <unk> * ( now  <unk> . mRenderer . <unk> ) ) ) ;
<unk> . mRenderer . <unk> = <num> ;
}
return false ;
}
} ;
ImageView <unk> = ( ImageView ) findViewById ( R . id . <unk> ) ;
<unk> . setOnTouchListener ( <unk> ) ;
ImageView <unk> = ( ImageView ) findViewById ( R . id . <unk> ) ;
<unk> . setOnTouchListener ( <unk> ) ;
ImageView mImageView = ( ImageView ) findViewById ( R . id . <unk> ) ;
mImageView . setOnClickListener ( new ImageView . OnClickListener ( ) {
public void onClick ( View v ) {
<unk> . mRenderer . <unk> = true ;
<unk> . lm . requestLocationUpdates ( LocationManager . GPS_PROVIDER , <num> , <num> , <unk> ) ;
<unk> . mSensorManager . registerListener ( <unk> . <unk> ,
<unk> . mSensorManager . getDefaultSensor ( Sensor . <unk> ) ,
SensorManager . SENSOR_DELAY_NORMAL ) ;
<unk> . mSensorManager . registerListener ( <unk> . <unk> ,
<unk> . mSensorManager . getDefaultSensor ( Sensor . TYPE_ACCELEROMETER ) ,
SensorManager . <unk> ) ;
}
} ) ;
ImageView <unk> = ( ImageView ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( new ImageView . OnClickListener ( ) {
public void onClick ( View v ) {
Intent <unk> = new Intent ( MapActivity . this , Search . class ) ;
startActivity ( <unk> ) ;
}
} ) ;
ImageView <unk> = ( ImageView ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( new ImageView . OnClickListener ( ) {
public void onClick ( View v ) {
Intent intent = new Intent ( MapActivity . this , <unk> . class ) ;
startActivity ( intent ) ;
}
} ) ;
<unk> . mSensorManager = ( SensorManager ) getSystemService ( Context . SENSOR_SERVICE ) ;
<unk> . lm = ( LocationManager ) getSystemService ( LOCATION_SERVICE ) ;
SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( this ) ;
if ( ! prefs . getString ( " , " ) . equals ( " ) ) {
<unk> . mRenderer . mTts = new TextToSpeech ( this , this ) ;
}
}
}
}
@Override
public boolean onCreateOptionsMenu ( Menu menu ) {
MenuInflater inf = getMenuInflater ( ) ;
inf . inflate ( R . menu . map , ( Menu ) menu ) ;
return true ;
}
@Override
public Dialog onCreateDialog ( int id ) {
if ( id == <num> ) {
<unk> . mRenderer . <unk> = new ProgressDialog ( this ) ;
<unk> . mRenderer . <unk> . setTitle ( R . string . <unk> ) ;
<unk> . mRenderer . <unk> . <unk> ( ProgressDialog . <unk> ) ;
<unk> . mRenderer . <unk> . setButton ( getText ( R . string . cancel ) , new DialogInterface . OnClickListener ( ) {
public void onClick ( DialogInterface dialog , int whichButton ) {
<unk> . mRenderer . route = false ;
}
} ) ;
return <unk> . mRenderer . <unk> ;
}
else if ( id == <num> ) {
return new AlertDialog . Builder ( this )
. setTitle ( R . string . about_title )
. setMessage ( R . string . about_msg )
. setPositiveButton ( R . string . ok , null )
. create ( ) ;
}
else if ( id == <num> ) {
return new AlertDialog . Builder ( this )
. setTitle ( R . string . <unk> )
. setMessage ( R . string . <unk> )
. setPositiveButton ( R . string . ok , null )
. create ( ) ;
}
else if ( id == <num> ) {
return new AlertDialog . Builder ( this )
. setTitle ( R . string . <unk> )
. setMessage ( R . string . <unk> )
. setPositiveButton ( R . string . ok , new DialogInterface . OnClickListener ( ) {
public void onClick ( DialogInterface dialog , int whichButton ) {
Intent intent = new Intent ( MapActivity . this , Update . class ) ;
startActivity ( intent ) ;
}
} )
. setNegativeButton ( R . string . cancel , null )
. create ( ) ;
}
else if ( id == <num> ) {
return new AlertDialog . Builder ( this )
. setTitle ( R . string . <unk> )
. setMessage ( R . string . <unk> )
. setPositiveButton ( R . string . ok , null )
. create ( ) ;
}
return null ;
}
@Override
public boolean onOptionsItemSelected ( MenuItem item ) {
if ( item . getItemId ( ) == R . id . <unk> ) {
<unk> . mRenderer . <unk> = true ;
<unk> . requestRender ( ) ;
}
else if ( item . getItemId ( ) == R . id . <unk> ) {
showDialog ( <num> ) ;
<unk> . mRenderer . route = true ;
<unk> . requestRender ( ) ;
}
else if ( item . getItemId ( ) == R . id . preferences ) {
Intent <unk> = new Intent ( MapActivity . this , Preferences . class ) ;
startActivity ( <unk> ) ;
}
else if ( item . getItemId ( ) == R . id . update ) {
Intent <unk> = new Intent ( MapActivity . this , Update . class ) ;
startActivity ( <unk> ) ;
}
else if ( item . getItemId ( ) == R . id . about ) {
showDialog ( <num> ) ;
}
else return false ;
return true ;
}
@Override
public boolean onSearchRequested ( ) {
Intent <unk> = new Intent ( MapActivity . this , Search . class ) ;
startActivity ( <unk> ) ;
return false ;
}
@Override
protected void onPause ( ) {
super . onPause ( ) ;
<unk> g = ( <unk> ) getApplicationContext ( ) ;
try {
FileOutputStream fos = openFileOutput ( " , Context . MODE_PRIVATE ) ;
ObjectOutputStream out = new ObjectOutputStream ( fos ) ;
out . writeObject ( g . s . <unk> ) ;
out . writeObject ( g . s . search ) ;
out . writeObject ( g . s . <unk> ) ;
out . close ( ) ;
} catch ( IOException ex ) { Log . w ( " , " ) ; }
if ( <unk> != null && <unk> . mRenderer . <unk> ) {
<unk> . mRenderer . <unk> = false ;
<unk> . lm . removeUpdates ( <unk> ) ;
<unk> . mSensorManager . unregisterListener ( <unk> . <unk> ) ;
<unk> . mSensorManager . unregisterListener ( <unk> . <unk> ) ;
}
}
@Override
protected void onResume ( )
{
super . onResume ( ) ;
}
@Override
protected void onDestroy ( )
{
if ( <unk> != null && <unk> . mRenderer . mTts != null ) {
<unk> . mRenderer . mTts . stop ( ) ;
<unk> . mRenderer . mTts . shutdown ( ) ;
}
super . onDestroy ( ) ;
}
public void onInit ( int status ) {
if ( status == TextToSpeech . SUCCESS ) {
int result = <unk> . mRenderer . mTts . setLanguage ( Locale . US ) ;
<unk> . mRenderer . tts = result != TextToSpeech . <unk> &&
result != TextToSpeech . <unk> ;
}
}
}
class MapView extends GLSurfaceView implements LocationListener {
public LocationManager lm ;
public SensorManager mSensorManager ;
public MapActivity activity ;
public void onLocationChanged ( Location location ) {
mRenderer . <unk> += location . getLongitude ( ) ;
mRenderer . <unk> += location . getLatitude ( ) ;
mRenderer . <unk> ++ ;
mRenderer . p . lat = location . getLatitude ( ) ;
mRenderer . <unk> =
( int ) ( new <unk> ( ( float ) location . getLatitude ( ) ,
( float ) location . getLongitude ( ) , ( float ) location . getAltitude ( ) ,
<unk> ) ) . <unk> ( ) ;
mRenderer . <unk> = location . <unk> ( ) ;
mRenderer . speed = location . getSpeed ( ) ;
mRenderer . <unk> = true ;
if ( Math . abs ( mRenderer . p . lon  mRenderer . <unk> / mRenderer . <unk> ) * <num> +
Math . abs ( mRenderer . p . lat  mRenderer . <unk> / mRenderer . <unk> )
> <num> / mRenderer . <unk> + <num> ) {
mRenderer . p . lon = mRenderer . <unk> / mRenderer . <unk> ;
mRenderer . p . lat = mRenderer . <unk> / mRenderer . <unk> ;
mRenderer . <unk> = <num> ;
mRenderer . <unk> = <num> ;
mRenderer . <unk> = <num> ;
requestRender ( ) ;
}
}
public void onProviderDisabled ( String provider ) { }
public void onProviderEnabled ( String provider ) { }
public void onStatusChanged ( String provider , int status , Bundle extras ) { }
public MapView ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
mRenderer = new <unk> ( context ) ;
mRenderer . mIcons = ( ( <unk> ) context . getApplicationContext ( ) ) . icons ;
mRenderer . p = ( ( <unk> ) context . getApplicationContext ( ) ) . s . <unk> ;
mRenderer . mapView = this ;
setRenderer ( mRenderer ) ;
setRenderMode ( RENDERMODE_WHEN_DIRTY ) ;
}
private float <unk> , <unk> , <unk> , <unk> ;
@Override public boolean <unk> <unk> {
mRenderer . <unk> += e . getX ( ) * <num> / <num> ;
mRenderer . <unk> += e . getY ( ) * <num> / <num> ;
requestRender ( ) ;
if ( mRenderer . <unk> ) {
mRenderer . <unk> = false ;
lm . removeUpdates ( this ) ;
mSensorManager . unregisterListener ( <unk> ) ;
mSensorManager . unregisterListener ( <unk> ) ;
}
return true ;
}
private static Method getPointerCount , getPointerId , getX , getY ;
static {
try {
getPointerCount = MotionEvent . class . getMethod ( " ,
new Class [ ] { } ) ;
getPointerId = MotionEvent . class . getMethod ( " ,
new Class [ ] { int . class } ) ;
getX = MotionEvent . class . getMethod ( " ,
new Class [ ] { int . class } ) ;
getY = MotionEvent . class . getMethod ( " ,
new Class [ ] { int . class } ) ;
} catch ( NoSuchMethodException nsme ) { }
}
@Override public boolean <unk> <unk> {
if ( true ) {
float x = e . getX ( ) ;
float y = e . getY ( ) ;
switch ( e . getAction ( ) ) {
case MotionEvent . ACTION_MOVE :
mRenderer . <unk> += ( int ) ( x  <unk> ) ;
mRenderer . <unk> += ( int ) ( y  <unk> ) ;
if ( mRenderer . <unk> ) {
mRenderer . <unk> = false ;
lm . removeUpdates ( this ) ;
mSensorManager . unregisterListener ( <unk> ) ;
mSensorManager . unregisterListener ( <unk> ) ;
}
}
<unk> = x ;
<unk> = y ;
}
else {
try {
int <unk> = ( Integer ) getPointerCount . invoke ( e ) ;
float x = ( Float ) getPointerCount . invoke ( e , <num> ) ;
} catch ( InvocationTargetException ite ) { }
catch ( IllegalAccessException ie ) { }
}
requestRender ( ) ;
return true ;
}
private float [ ] <unk> = new float [ <num> ] ;
public SensorEventListener <unk> = new SensorEventListener ( ) {
public void onSensorChanged ( SensorEvent e ) {
System . arraycopy ( e . values , <num> , <unk> , <num> , <num> ) ;
}
public void onAccuracyChanged ( Sensor sensor , int accuracy ) { }
} ;
public final SensorEventListener <unk> = new SensorEventListener ( ) {
public void onSensorChanged ( SensorEvent e ) {
double g = Math . sqrt ( <unk> [ <num> ] * <unk> [ <num> ] + <unk> [ <num> ] * <unk> [ <num> ] +
<unk> [ <num> ] * <unk> [ <num> ] ) ;
if ( g > <num> ) {
float east [ ] = { e . values [ <num> ] * <unk> [ <num> ]  e . values [ <num> ] * <unk> [ <num> ] ,
e . values [ <num> ] * <unk> [ <num> ]  e . values [ <num> ] * <unk> [ <num> ] ,
e . values [ <num> ] * <unk> [ <num> ]  e . values [ <num> ] * <unk> [ <num> ] } ;
mRenderer . <unk> = <unk> [ <num> ] * <num> < g ;
int d = ( int ) ( <num> / Math . PI * ( <unk> [ <num> ] * <num> < g
? Math . atan2 ( east [ <num> ] , ( east [ <num> ] * <unk> [ <num> ]  east [ <num> ] * <unk> [ <num> ] ) / g )
:  Math . atan2 ( ( east [ <num> ] * <unk> [ <num> ]  east [ <num> ] * <unk> [ <num> ] ) / g , east [ <num> ] ) ) )
mRenderer . <unk> ;
mRenderer . <unk> += mRenderer . <unk> < <num> * mRenderer . <unk> ?
( d + <num> ) % <num>  <num> : mRenderer . <unk> > <num> * mRenderer . <unk>
? ( d + <num> ) % <num> + <num> : ( d + <num> ) % <num> ;
mRenderer . <unk> ++ ;
if ( Math . abs ( mRenderer . <unk> / mRenderer . <unk>  mRenderer . p . dir ) >
30 / mRenderer . <unk> + <num> ) {
mRenderer . p . dir = mRenderer . <unk> / mRenderer . <unk> ;
mRenderer . <unk> = <num> ;
mRenderer . <unk> = <num> ;
requestRender ( ) ;
}
}
}
public void onAccuracyChanged ( Sensor s , int accuracy ) { }
} ;
public <unk> mRenderer ;
}
class <unk> implements GLSurfaceView . Renderer {
private int width , height ;
public int <unk> = <num> , <unk> = <num> ;
public int <unk> = <num> , <unk> = <num> ;
public int bitmapWidth , bitmapHeight ;
public int <unk> = <num> , <unk> = <num> , <unk> = <num> ;
public long <unk> = <num> ;
public float <unk> , speed , <unk> ;
public double <unk> = <num> , <unk> = <num> ;
public Bitmap mBitmap , mIcons ;
public Paint <unk> ;
public Place p ;
public MapView mapView ;
public int <unk> , icons ;
public boolean route = false , <unk> = false , <unk> = false ;
public ProgressDialog <unk> ;
public TextToSpeech mTts ;
public boolean tts = false , <unk> = false ;
public Canvas mCanvas ;
public Paint mTextPaint ;
public boolean fast = false , <unk> = false ;
public int <unk> = <num> ;
public void <unk> ( String s , int x , int y , float sin , float cos ) {
if ( ! fast ) {
Matrix m = mCanvas . getMatrix ( ) ;
m . <unk> (  sin , cos , x , y ) ;
mCanvas . setMatrix ( m ) ;
mCanvas . drawText ( s , x , y , mTextPaint ) ;
}
}
public long last = <num> , fps = <num> , frame = <num> ;
public native void render ( double lon , double lat , int dir , int zoom ,
boolean <unk> , boolean <unk> , int width , int height ) ;
public native String navigate ( double lon , double lat , float speed ,
float <unk> ) ;
public native void <unk> ( double lon , double lat ) ;
public native void <unk> ( double lon , double lat , boolean <unk> ,
int vehicle ) ;
public native int <unk> ( ) ;
public <unk> ( Context context ) {
}
public SharedPreferences prefs ;
public void onSurfaceCreated ( GL10 gl , EGLConfig config ) {
mTextPaint = new Paint ( ) ;
mTextPaint . setAntiAlias ( false ) ;
mTextPaint . setTextSize ( <num> ) ;
mTextPaint . setColor ( Color . BLACK ) ;
mTextPaint . setTextAlign ( Paint . Align . CENTER ) ;
gl . glDisable ( GL10 . <unk> ) ;
gl . glClearColor ( <num> , <num> , <num> , <num> ) ;
prefs = PreferenceManager . getDefaultSharedPreferences ( mapView . getContext ( ) ) ;
}
public void onSurfaceChanged ( GL10 gl , int w , int h ) {
width = w ;
height = h ;
gl . glViewport ( <num> , <num> , w , h ) ;
bitmapWidth = w  <num> ;
bitmapWidth |= bitmapWidth >> <num> ;
bitmapWidth |= bitmapWidth >> <num> ;
bitmapWidth |= bitmapWidth >> <num> ;
bitmapWidth |= bitmapWidth >> <num> ;
bitmapWidth ++ ;
bitmapHeight = h  <num> ;
bitmapHeight |= bitmapHeight >> <num> ;
bitmapHeight |= bitmapHeight >> <num> ;
bitmapHeight |= bitmapHeight >> <num> ;
bitmapHeight |= bitmapHeight >> <num> ;
bitmapHeight ++ ;
<unk> = new Paint ( ) ;
<unk> . setARGB ( <num> , <num> , <num> , <num> ) ;
<unk> . setStyle ( Style . FILL ) ;
int [ ] textures = new int [ <num> ] ;
gl . glGenTextures ( <num> , textures , <num> ) ;
<unk> = textures [ <num> ] ;
icons = textures [ <num> ] ;
gl . glBindTexture ( GL10 . GL_TEXTURE_2D , <unk> ) ;
gl . glTexParameterf ( GL10 . GL_TEXTURE_2D , GL10 . GL_TEXTURE_MIN_FILTER ,
GL10 . GL_NEAREST ) ;
gl . glTexParameterf ( GL10 . GL_TEXTURE_2D , GL10 . GL_TEXTURE_MAG_FILTER ,
GL10 . GL_NEAREST ) ;
gl . glTexParameterf ( GL10 . GL_TEXTURE_2D , GL10 . GL_TEXTURE_WRAP_S ,
GL10 . GL_CLAMP_TO_EDGE ) ;
gl . glTexParameterf ( GL10 . GL_TEXTURE_2D , GL10 . GL_TEXTURE_WRAP_T ,
GL10 . GL_CLAMP_TO_EDGE ) ;
gl . glTexEnvf ( GL10 . GL_TEXTURE_ENV , GL10 . GL_TEXTURE_ENV_MODE ,
GL10 . GL_REPLACE ) ;
gl . glBindTexture ( GL10 . GL_TEXTURE_2D , icons ) ;
gl . glTexParameterf ( GL10 . GL_TEXTURE_2D , GL10 . GL_TEXTURE_MIN_FILTER ,
GL10 . GL_NEAREST ) ;
gl . glTexParameterf ( GL10 . GL_TEXTURE_2D , GL10 . GL_TEXTURE_MAG_FILTER ,
GL10 . GL_NEAREST ) ;
gl . glTexParameterf ( GL10 . GL_TEXTURE_2D , GL10 . GL_TEXTURE_WRAP_S ,
GL10 . GL_CLAMP_TO_EDGE ) ;
gl . glTexParameterf ( GL10 . GL_TEXTURE_2D , GL10 . GL_TEXTURE_WRAP_T ,
GL10 . GL_CLAMP_TO_EDGE ) ;
gl . glTexEnvf ( GL10 . GL_TEXTURE_ENV , GL10 . GL_TEXTURE_ENV_MODE ,
GL10 . GL_REPLACE ) ;
GLUtils . texImage2D ( GL10 . GL_TEXTURE_2D , <num> , mIcons , <num> ) ;
mBitmap = Bitmap . createBitmap ( bitmapWidth , bitmapHeight ,
Bitmap . Config . ALPHA_8 ) ;
mCanvas = new Canvas ( mBitmap ) ;
}
public void onDrawFrame ( GL10 gl ) {
if ( <unk> ) {
<unk> ( p . lon , p . lat ) ;
<unk> = false ;
}
if ( route ) {
<unk> ( p . lon , p . lat , prefs . getBoolean ( " , true ) ,
Integer . parseInt ( prefs . getString ( " , " ) ) ) ;
int p ;
while ( ( p = <unk> ( ) ) < <num> && p >= <num> && route ) <unk> . setProgress ( p ) ;
route = false ;
<unk> . dismiss ( ) ;
}
if ( <unk> ) {
<unk> = false ;
String msg = navigate ( p . lon , p . lat , speed , <unk> ) ;
if ( msg != " && tts ) mTts . speak ( msg , TextToSpeech . QUEUE_FLUSH , null ) ;
}
gl . glViewport ( <num> , <num> , width , height ) ;
gl . glMatrixMode ( GL10 . GL_PROJECTION ) ;
gl . glLoadIdentity ( ) ;
gl . glOrthof ( <num> , width , height , <num> ,  <num> , <num> ) ;
gl . glMatrixMode ( GL10 . GL_MODELVIEW ) ;
gl . glLoadIdentity ( ) ;
gl . glClear ( GL10 . GL_COLOR_BUFFER_BIT ) ;
gl . glDisable ( GL10 . GL_DEPTH_TEST ) ;
if ( ! fast ) mBitmap . <unk> ( <num> ) ;
gl . glEnableClientState ( GL10 . GL_VERTEX_ARRAY ) ;
gl . glDisable ( GL10 . GL_TEXTURE_2D ) ;
gl . glBindTexture ( GL10 . GL_TEXTURE_2D , icons ) ;
gl . glShadeModel ( GL10 . <unk> ) ;
if ( <unk> != <num> ) {
long now = SystemClock . uptimeMillis ( ) ;
p . zoom = ( int ) ( p . zoom * Math . exp ( <unk> * ( now  <unk> ) ) ) ;
<unk> = now ;
mapView . requestRender ( ) ;
}
if ( p . zoom < <num> ) p . zoom = <num> ;
else if ( p . zoom > <num> ) p . zoom = <num> ;
double z = <num> / <num> * ( <unk> ? <num> : p . zoom ) / width ;
if ( ! <unk> && prefs . getBoolean ( " , false ) ) p . dir = <num> ;
int diffY = <unk> ? <num> : <unk>  <unk> ;
p . lat += z * ( diffY * Math . cos ( Math . PI / <num> * p . dir ) +
( <unk>  <unk> ) * Math . sin ( Math . PI / <num> * p . dir ) ) ;
p . lon += z * ( ( <unk>  <unk> ) * Math . cos ( Math . PI / <num> * p . dir )
diffY * Math . sin ( Math . PI / <num> * p . dir ) )
/ Math . cos ( Math . PI / <num> * p . lat ) ;
if ( <unk> ) p . dir += <unk>  <unk> ;
<unk> = <unk> ;
<unk> = <unk> ;
render ( p . lon , p . lat , p . dir , <unk> ? <num> : p . zoom , <unk> , <unk> , width , height ) ;
if ( ! fast ) {
gl . glEnable ( GL10 . GL_BLEND ) ;
gl . glEnable ( GL10 . GL_TEXTURE_2D ) ;
gl . glBlendFunc ( GL10 . GL_SRC_ALPHA , GL10 . GL_ONE_MINUS_SRC_ALPHA ) ;
gl . glBindTexture ( GL10 . GL_TEXTURE_2D , icons ) ;
gl . glBindTexture ( GL10 . GL_TEXTURE_2D , <unk> ) ;
GLUtils . texImage2D ( GL10 . GL_TEXTURE_2D , <num> , mBitmap , <num> ) ;
int [ ] crop = { <num> , height  <num> , width  <num> ,  height + <num> } ;
( ( GL11 ) gl ) . <unk> ( GL10 . GL_TEXTURE_2D ,
<unk> . <unk> , crop , <num> ) ;
gl . <unk> ( <num> , <num> , <num> , <num> ) ;
( ( <unk> ) gl ) . <unk> ( ( int ) <num> , ( int ) <num> , <num> ,
( int ) width  <num> , ( int ) height  <num> ) ;
( ( <unk> ) gl ) . <unk> ( ( int )  <num> , ( int )  <num> , <num> ,
( int ) width  <num> , ( int ) height  <num> ) ;
gl . <unk> ( <num> , <num> , <num> , <num> ) ;
( ( <unk> ) gl ) . <unk> ( ( int ) <num> , ( int ) <num> , <num> ,
( int ) width  <num> , ( int ) height  <num> ) ;
}
}
}
package org . <unk> . <unk> ;
import java . io . File ;
import java . io . FileInputStream ;
import java . io . FileNotFoundException ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . ObjectInputStream ;
import java . io . Serializable ;
import java . util . ArrayList ;
import android . app . Application ;
import android . graphics . Bitmap ;
import android . graphics . BitmapFactory ;
import android . os . Environment ;
import android . util . Log ;
import android . widget . Button ;
import android . widget . ProgressBar ;
import android . widget . TextView ;
public class <unk> extends Application {
public Bitmap icons ;
public class Settings implements Serializable {
static final long serialVersionUID = <num> ;
ArrayList < Place > <unk> ;
String search ;
Place <unk> ;
}
public Settings s ;
public int updateProgress =  <num> ;
public String <unk> ;
public boolean <unk> = true ;
public ProgressBar <unk> ;
public TextView <unk> ;
public Button <unk> ;
static {
System . loadLibrary ( " ) ;
}
@Override
public void onCreate ( ) {
File f = new File ( Environment . getExternalStorageDirectory ( ) , " ) ;
InputStream is ;
try {
is = new FileInputStream ( f ) ;
} catch ( FileNotFoundException e ) {
is = getApplicationContext ( ) . getResources ( ) . openRawResource ( R . drawable . <unk> ) ;
}
try {
icons = BitmapFactory . decodeStream ( is ) ;
} finally {
try {
is . close ( ) ;
} catch ( IOException e ) {
Log . w ( " , " ) ;
}
}
try {
FileInputStream fis = openFileInput ( " ) ;
ObjectInputStream in = new ObjectInputStream ( fis ) ;
try {
s = new Settings ( ) ;
s . <unk> = ( ArrayList < Place > ) in . readObject ( ) ;
s . search = ( String ) in . readObject ( ) ;
s . <unk> = ( Place ) in . readObject ( ) ;
}
catch ( ClassNotFoundException ex ) { Log . w ( " , " ) ; }
in . close ( ) ;
} catch ( IOException ex ) { }
finally {
if ( s == null ) {
s = new Settings ( ) ;
s . <unk> = new Place ( ) ;
s . <unk> . lat = <num> ;
s . <unk> . lon = <num> ;
s . <unk> . zoom = <num> ;
s . <unk> . dir = <num> ;
s . <unk> = new ArrayList < Place > ( ) ;
}
}
}
}
package org . <unk> . <unk> ;
import android . app . ListActivity ;
import android . os . Bundle ;
import android . view . View ;
import android . widget . ArrayAdapter ;
import android . widget . ListView ;
public class <unk> extends ListActivity {
protected void onListItemClick ( ListView l , View v , int position , long id )
{
<unk> g = ( <unk> ) getApplicationContext ( ) ;
g . s . <unk> . lat = g . s . <unk> . get ( g . s . <unk> . size ( )  <num>  position ) . lat ;
g . s . <unk> . lon = g . s . <unk> . get ( g . s . <unk> . size ( )  <num>  position ) . lon ;
g . s . <unk> . dir = g . s . <unk> . get ( g . s . <unk> . size ( )  <num>  position ) . dir ;
g . s . <unk> . zoom = g . s . <unk> . get ( g . s . <unk> . size ( )  <num>  position ) . zoom ;
finish ( ) ;
}
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
<unk> g = ( ( <unk> ) getApplicationContext ( ) ) ;
String names [ ] = new String [ g . s . <unk> . size ( ) ] ;
for ( int i = <num> ; i < g . s . <unk> . size ( ) ; i ++ ) {
names [ g . s . <unk> . size ( )  <num>  i ] = g . s . <unk> . get ( i ) . name ;
}
setListAdapter ( new ArrayAdapter < String > ( this ,
android . R . layout . simple_list_item_1 , names ) ) ;
}
}
package org . <unk> . <unk> ;
import java . util . ArrayList ;
import android . app . ListActivity ;
import android . graphics . Bitmap ;
import android . os . Bundle ;
import android . text . Editable ;
import android . text . InputType ;
import android . text . TextWatcher ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . BaseAdapter ;
import android . widget . EditText ;
import android . widget . ImageView ;
import android . widget . ListView ;
import android . widget . TextView ;
public class Search extends ListActivity implements TextWatcher {
public Search ( )
{
super ( ) ;
<unk> = new <unk> ( ) ;
}
private <unk> <unk> ;
private EditText et ;
public void afterTextChanged ( Editable s ) {
<unk> . results . clear ( ) ;
this . search ( et . getText ( ) . toString ( ) ) ;
setListAdapter ( <unk> ) ;
}
public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { }
protected void onListItemClick ( ListView l , View v , int position , long id )
{
<unk> g = ( <unk> ) getApplicationContext ( ) ;
g . s . <unk> . lat = <unk> . results . get ( position ) . lat ;
g . s . <unk> . lon = <unk> . results . get ( position ) . lon ;
g . s . <unk> . zoom = <unk> . results . get ( position ) . zoom ;
g . s . <unk> . dir = <num> ;
g . s . <unk> . name = <unk> . results . get ( position ) . s ;
Place p = new Place ( ) ;
p . lat = g . s . <unk> . lat ;
p . lon = g . s . <unk> . lon ;
p . zoom = g . s . <unk> . zoom ;
p . dir = g . s . <unk> . dir ;
p . name = g . s . <unk> . name ;
g . s . <unk> . add ( p ) ;
if ( g . s . <unk> . size ( ) > <num> ) g . s . <unk> . remove ( <num> ) ;
g . s . search = et . getText ( ) . toString ( ) ;
finish ( ) ;
}
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . search ) ;
<unk> . icons = ( ( <unk> ) getApplicationContext ( ) ) . icons ;
<unk> . mInflater = getLayoutInflater ( ) ;
et = ( EditText ) findViewById ( R . id . <unk> ) ;
et . addTextChangedListener ( this ) ;
et . setText ( ( ( <unk> ) getApplicationContext ( ) ) . s . search ) ;
afterTextChanged ( null ) ;
et . requestFocus ( ) ;
}
public native void search ( String s ) ;
public void <unk> ( int x , int y , int w , int h ,
double dist , int u , int v , String s ,
double lon , double lat , int <unk> ) {
<unk> . results . add ( new ResultData ( ) ) ;
<unk> . results . get ( <unk> . results . size ( )  <num> ) . x = x ;
<unk> . results . get ( <unk> . results . size ( )  <num> ) . y = y ;
<unk> . results . get ( <unk> . results . size ( )  <num> ) . w = w ;
<unk> . results . get ( <unk> . results . size ( )  <num> ) . h = h ;
<unk> . results . get ( <unk> . results . size ( )  <num> ) . dist = dist ;
<unk> . results . get ( <unk> . results . size ( )  <num> ) . s = s ;
<unk> . results . get ( <unk> . results . size ( )  <num> ) . v = v ;
<unk> . results . get ( <unk> . results . size ( )  <num> ) . u = u ;
<unk> . results . get ( <unk> . results . size ( )  <num> ) . lon = lon ;
<unk> . results . get ( <unk> . results . size ( )  <num> ) . lat = lat ;
<unk> . results . get ( <unk> . results . size ( )  <num> ) . zoom = <unk> ;
}
}
class ResultData {
public ResultData ( ) { }
public double dist , lon , lat ;
public String s ;
public int u , v , x , y , w , h , zoom ;
}
class <unk> extends BaseAdapter {
public LayoutInflater mInflater ;
public ArrayList < ResultData > results ;
public Bitmap icons ;
public <unk> ( ) {
results = new ArrayList < ResultData > ( ) ;
}
public int getCount ( ) {
return results . size ( ) ;
}
public Object getItem ( int position ) {
return position ;
}
public long getItemId ( int position ) {
return position ;
}
public View getView ( int position , View convertView , ViewGroup parent ) {
convertView = mInflater . inflate ( R . layout . search_result , null ) ;
TextView t = ( TextView ) convertView . findViewById ( R . id . result_text ) ;
t . setText ( results . get ( position ) . s ) ;
TextView d = ( TextView ) convertView . findViewById ( R . id . distance ) ;
double dist = results . get ( position ) . dist ;
d . setText ( dist >= <num> ? " : dist > <num> ? ( int ) dist + " :
( int ) ( dist * <num> ) + " ) ;
ImageView i = ( ImageView ) convertView . findViewById ( R . id . <unk> ) ;
if ( results . get ( position ) . w > <num> ) i . setImageBitmap ( Bitmap . createBitmap ( icons , results . get ( position ) . x ,
results . get ( position ) . y , results . get ( position ) . w , results . get ( position ) . h ) ) ;
return convertView ;
}
package org . <unk> . <unk> ;
import java . io . Serializable ;
public class Place implements Serializable {
static final long serialVersionUID = <num> ;
double lat , lon ;
int zoom , dir ;
String name ;
}
package org . <unk> . <unk> ;
import java . io . File ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . PipedInputStream ;
import java . io . PipedOutputStream ;
import java . net . MalformedURLException ;
import java . net . URL ;
import java . net . URLConnection ;
import java . util . zip . ZipEntry ;
import java . util . zip . ZipInputStream ;
import android . app . Activity ;
import android . app . Notification ;
import android . app . NotificationManager ;
import android . app . PendingIntent ;
import android . content . Context ;
import android . content . Intent ;
import android . location . Location ;
import android . location . LocationListener ;
import android . location . LocationManager ;
import android . os . AsyncTask ;
import android . os . Bundle ;
import android . os . Environment ;
import android . os . StatFs ;
import android . util . Log ;
import android . view . View ;
import android . view . Window ;
import android . widget . Button ;
import android . widget . ProgressBar ;
import android . widget . RemoteViews ;
import android . widget . TextView ;
public class Update extends Activity implements LocationListener {
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
requestWindowFeature ( Window . FEATURE_PROGRESS ) ;
setContentView ( R . layout . update ) ;
setProgressBarVisibility ( true ) ;
String code = <unk> ( ) ;
if ( ( ( <unk> ) getApplication ( ) ) . updateProgress >= <num> ) {
( ( TextView ) findViewById ( R . id . <unk> ) ) . setText (
( ( <unk> ) getApplication ( ) ) . <unk> ) ;
}
else if ( code . equals ( " ) ) {
( ( <unk> ) getApplication ( ) ) . <unk> = " ;
}
else {
final UpdateTask <unk> ;
<unk> = new UpdateTask ( ) ;
<unk> . <unk> = ( <unk> ) getApplication ( ) ;
<unk> . <unk> . updateProgress = <num> ;
<unk> . <unk> . <unk> = false ;
setProgress ( <num> ) ;
if ( <unk> . <unk> . s . <unk> . lon == <num> && <unk> . <unk> . s . <unk> . lat == <num> ) {
( ( LocationManager ) getSystemService ( LOCATION_SERVICE ) ) . requestLocationUpdates ( LocationManager . NETWORK_PROVIDER , <num> , <num> , this ) ;
}
<unk> . notification = new Notification ( R . drawable . icon , " , System . currentTimeMillis ( ) ) ;
<unk> . notification . flags = <unk> . notification . flags | Notification . FLAG_ONGOING_EVENT ;
<unk> . notification . contentView = new RemoteViews ( getApplicationContext ( ) . getPackageName ( ) , R . layout . <unk> ) ;
<unk> . notification . contentIntent = PendingIntent . getActivity ( this , <num> , new Intent ( this , Update . class ) , <num> ) ;
<unk> . notification . contentView . setTextViewText ( R . id . status_text , " ) ;
<unk> . nm = ( NotificationManager ) getSystemService ( Context . NOTIFICATION_SERVICE ) ;
<unk> . nm . notify ( <num> , <unk> . notification ) ;
<unk> . execute ( code ) ;
}
( ( Button ) findViewById ( R . id . <unk> ) ) . setOnClickListener ( new Button . OnClickListener ( ) {
public void onClick ( View v ) {
( ( <unk> ) getApplication ( ) ) . <unk> = true ;
}
} ) ;
}
public void onLocationChanged ( Location location ) {
( ( LocationManager ) getSystemService ( LOCATION_SERVICE ) ) . removeUpdates ( this ) ;
( ( <unk> ) getApplication ( ) ) . s . <unk> . lon = location . getLongitude ( ) ;
( ( <unk> ) getApplication ( ) ) . s . <unk> . lat = location . getLatitude ( ) ;
( ( <unk> ) getApplication ( ) ) . s . <unk> . zoom = <num> ;
}
public void onProviderDisabled ( String provider ) { }
public void onProviderEnabled ( String provider ) { }
public void onStatusChanged ( String provider , int status , Bundle extras ) { }
protected void onResume ( )
{
super . onResume ( ) ;
ProgressBar pb = ( ProgressBar ) findViewById ( R . id . <unk> ) ;
pb . setProgress ( ( ( <unk> ) getApplication ( ) ) . updateProgress ) ;
( ( <unk> ) getApplication ( ) ) . <unk> = pb ;
( ( <unk> ) getApplication ( ) ) . <unk> = ( ( TextView ) findViewById ( R . id . <unk> ) ) ;
( ( <unk> ) getApplication ( ) ) . <unk> . setText ( ( ( <unk> ) getApplication ( ) ) . <unk> ) ;
( ( <unk> ) getApplication ( ) ) . <unk> = ( ( Button ) findViewById ( R . id . <unk> ) ) ;
if ( ( ( <unk> ) getApplication ( ) ) . <unk> ) ( ( <unk> ) getApplication ( ) ) . <unk> . setEnabled ( false ) ;
}
protected void onDestroy ( )
{
( ( <unk> ) getApplication ( ) ) . <unk> = null ;
( ( <unk> ) getApplication ( ) ) . <unk> = null ;
( ( <unk> ) getApplication ( ) ) . <unk> = null ;
super . onDestroy ( ) ;
}
private native String <unk> ( ) ;
}
class UpdateTask extends AsyncTask < String , Integer , String > {
public <unk> <unk> ;
Notification notification ;
NotificationManager nm ;
protected String doInBackground ( String . . . code ) {
PipedInputStream in = new PipedInputStream ( ) ;
File sd = Environment . getExternalStorageDirectory ( ) ;
final long <unk> = ( new File ( sd , " + code [ <num> ] + " ) ) . lastModified ( ) ;
try {
final String <unk> = " + code [ <num> ] + " ;
final PipedOutputStream out = new PipedOutputStream ( in ) ;
new Thread (
new Runnable ( ) {
public void run ( ) {
for ( int <unk> = <num> , l = <num> , count ; l > <num> && ! <unk> . <unk> ; ) {
try {
URL u = new URL ( <unk> ) ;
URLConnection cx = u . openConnection ( ) ;
cx . setRequestProperty ( " , " + <unk> + " ) ;
cx . setReadTimeout ( <num> ) ;
cx . setConnectTimeout ( <num> ) ;
if ( ( l = cx . getContentLength ( ) ) > <num> ) {
Log . d ( " , " + cx . getLastModified ( ) + " + <unk> ) ;
if ( cx . getLastModified ( ) < <unk> ) {
l = <num> ;
break ;
}
InputStream is = cx . getInputStream ( ) ;
byte [ ] buf = new byte [ <num> ] ;
for ( ; ( count = is . read ( buf , <num> , <num> ) ) !=  <num> ; l -= count ) {
if ( count > <num> ) out . write ( buf , <num> , count ) ;
<unk> += count ;
}
}
else l = <num> ;
} catch ( MalformedURLException mue ) {
<unk> . <unk> = " ;
} catch ( IOException ioe ) {
<unk> . <unk> = " ;
} catch ( SecurityException se ) {
<unk> . <unk> = " ;
}
try {
if ( l > <num> ) Thread . sleep ( <num> ) ;
} catch ( InterruptedException e ) { }
}
Log . d ( " , " + <unk> . <unk> ) ;
try { out . close ( ) ; } catch ( IOException ioe ) { }
}
}
) . start ( ) ;
} catch ( IOException a ) { Log . d ( " , " ) ; }
Log . d ( " , " ) ;
try {
byte [ ] buffer = new byte [ <num> ] ;
ZipInputStream dis = new ZipInputStream ( in ) ;
ZipEntry entry ;
int length , done = <num> ;
Log . d ( " , " ) ;
if ( ( entry = dis . getNextEntry ( ) ) != null ) {
Log . d ( " , " ) ;
StatFs stat = new StatFs ( sd . getPath ( ) ) ;
if ( stat . getAvailableBlocks ( ) * ( long ) stat . getBlockSize ( ) <
entry . getSize ( ) ) {
<unk> . <unk> = " +
( entry . getSize ( ) / <num> / <num> ) + " ;
publishProgress (  <num> ) ;
}
else {
<unk> . <unk> = " + ( int ) ( entry . getSize ( ) / ( <num> * <num> ) ) + " ;
publishProgress (  <num> ) ;
File f = new File ( sd , " ) ;
FileOutputStream fos = new FileOutputStream ( f ) ;
while ( ! <unk> . <unk> && ( length = dis . read ( buffer ) ) !=  <num> ) {
fos . write ( buffer , <num> , length ) ;
if ( ( done >> <num> ) < ( ( done + length ) >> <num> ) ) {
publishProgress ( done / ( int ) ( entry . getSize ( ) / <num> ) ) ;
notification . contentView . setProgressBar ( R . id . <unk> , <num> , done / ( int ) ( entry . getSize ( ) / <num> ) , false ) ;
nm . notify ( <num> , notification ) ;
}
done += length ;
}
fos . close ( ) ;
if ( done == entry . getSize ( ) ) {
File to = new File ( sd , " + code [ <num> ] + " ) ;
f . renameTo ( to ) ;
<unk> . <unk> = " ;
}
else <unk> . <unk> = " ;
Log . d ( " , " ) ;
}
}
else <unk> . <unk> = <unk> . <unk> ? " :
" ;
} catch ( IOException ioe ) {
<unk> . <unk> = " ;
} catch ( SecurityException se ) {
<unk> . <unk> = " ;
}
nm . cancel ( <num> ) ;
<unk> . updateProgress =  <num> ;
return null ;
}
protected void onProgressUpdate ( Integer . . . progress ) {
if ( progress [ <num> ] >= <num> ) {
if ( <unk> . <unk> != null ) <unk> . <unk> . setProgress ( progress [ <num> ] ) ;
<unk> . updateProgress = progress [ <num> ] ;
}
else if ( <unk> . <unk> != null ) {
<unk> . <unk> . setText ( <unk> . <unk> ) ;
}
}
protected void onPostExecute ( String result ) {
Log . d ( " , <unk> . <unk> + ( <unk> . <unk> != null ? " : " ) ) ;
if ( <unk> . <unk> != null ) <unk> . <unk> . setText ( <unk> . <unk> ) ;
if ( <unk> . <unk> != null ) <unk> . <unk> . setEnabled ( false ) ;
<unk> . <unk> = true ;
}
}
package com . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . R ;
import com . <unk> . <unk> . request . Request . ResultCode ;
import com . <unk> . <unk> . request . RequestListener ;
import com . <unk> . <unk> . request . RequestManager ;
import com . <unk> . <unk> . request . <unk> ;
import android . app . AlarmManager ;
import android . app . PendingIntent ;
import android . content . BroadcastReceiver ;
import android . content . Context ;
import android . content . Intent ;
import android . content . SharedPreferences ;
import android . location . Location ;
import android . location . LocationManager ;
import android . os . SystemClock ;
import android . preference . PreferenceManager ;
import android . util . Log ;
public class <unk> extends BroadcastReceiver {
private static Object lock = new Object ( ) ;
@Override
public void onReceive ( final Context context , final Intent intent ) {
if ( intent . getAction ( ) != null && intent . getAction ( ) . equals ( Intent . ACTION_BOOT_COMPLETED ) ) {
<unk> ( context ) ;
} else {
new Thread (
new Runnable ( ) {
public void run ( ) {
synchronized ( lock ) {
final Location location = ( Location ) intent . getExtras ( ) . get ( <unk> . <unk> ) ;
Util . prefs = PreferenceManager . getDefaultSharedPreferences ( context ) ;
Location lastLocation = null ;
if ( Util . prefs . contains ( " ) ) {
float lat = Util . prefs . getFloat ( " , Float . MIN_VALUE ) ;
float lng = Util . prefs . getFloat ( " , Float . MIN_VALUE ) ;
float acc = Util . prefs . getFloat ( " , Float . MIN_VALUE ) ;
long time = Util . prefs . getLong ( " , Long . MIN_VALUE ) ;
String provider = Util . prefs . getString ( " , " ) ;
lastLocation = new Location ( provider ) ;
lastLocation . setLatitude ( lat ) ;
lastLocation . setLongitude ( lng ) ;
lastLocation . setAccuracy ( acc ) ;
lastLocation . setTime ( time ) ;
}
if ( Util . <unk> ( location , lastLocation ) ) {
Util . <unk> ( context . getResources ( ) . openRawResource ( R . raw . <unk> ) ) ;
RequestManager <unk> = new RequestManager ( null ) ;
final <unk> <unk> = new <unk> ( ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> (
new <unk> (
location ,
<unk> ,
new RequestListener < Void > ( ) {
public void onComplete ( Object result ) {
SharedPreferences . Editor editor = Util . prefs . edit ( ) ;
editor . putFloat ( " , ( float ) location . getLatitude ( ) ) ;
editor . putFloat ( " , ( float ) location . getLongitude ( ) ) ;
editor . putFloat ( " , location . getAccuracy ( ) ) ;
editor . putLong ( " , location . getTime ( ) ) ;
editor . putString ( " , location . getProvider ( ) ) ;
editor . commit ( ) ;
<unk> . <unk> ( ) ;
}
public void onError ( ResultCode resultCode ) {
if ( resultCode == ResultCode . <unk> ) {
cancelAlarm ( context ) ;
}
}
public void onCancel ( ) { }
} ,
null ,
<unk>
)
) ;
}
}
}
}
) . start ( ) ;
}
}
public static void <unk> ( Context context ) {
Log . d ( " , " ) ;
AlarmManager mgr = ( AlarmManager ) context . getSystemService ( Context . ALARM_SERVICE ) ;
PendingIntent pendingIntent = PendingIntent . getBroadcast ( context , <num> ,
<unk> ( context ) , <num> ) ;
long interval = <num> / ( <unk> . <unk> / <num> ) ;
mgr . setRepeating (
AlarmManager . ELAPSED_REALTIME_WAKEUP ,
SystemClock . elapsedRealtime ( ) + interval ,
interval ,
pendingIntent
) ;
}
public static void cancelAlarm ( Context context ) {
Log . d ( " , " ) ;
AlarmManager mgr = ( AlarmManager ) context . getSystemService ( Context . ALARM_SERVICE ) ;
mgr . cancel ( PendingIntent . getBroadcast ( context , <num> , <unk> ( context ) , <num> ) ) ;
}
private static Intent <unk> ( Context context ) {
Intent intent = new Intent ( context , <unk> . class ) ;
intent . putExtra (
<unk> . EXTRA_INTENT ,
new Intent ( context , <unk> . class )
. setAction ( " )
) ;
intent . putExtra (
<unk> . <unk> ,
LocationManager . NETWORK_PROVIDER
) ;
return intent ;
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import java . util . Iterator ;
import java . util . List ;
import android . location . Location ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
public class <unk> extends Request {
private <unk> <unk> ;
private Location location ;
private static final int <unk> = <num> ;
public <unk> ( Location location , <unk> <unk> ,
RequestManager manager , RequestListener < List < <unk> >> listener ) {
super ( manager , listener ) ;
this . <unk> = <unk> ;
this . location = location ;
}
@Override
public <unk> < List < <unk> >> execute ( ) {
return <unk> . <unk> ( location ) ;
}
@Override
protected void <unk> ( Deque < Request > <unk> ) { }
@Override
protected void onError ( Deque < Request > <unk> ) {
if ( retries < <unk> ) {
try {
Thread . sleep ( ( long ) ( <num> * Math . pow ( <num> , retries ) ) ) ;
} catch ( InterruptedException e ) { }
retries ++ ;
} else {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
if ( itr . next ( ) == this ) {
itr . remove ( ) ;
break ;
}
}
}
listener . onError ( ResultCode . ERROR ) ;
}
}
@Override
protected void onCancel ( Deque < Request > <unk> ) { }
@Override
public void <unk> ( Deque < Request > <unk> ) {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request instanceof <unk> ) {
( ( <unk> ) request ) . updateLocation ( location ) ;
return ;
}
}
<unk> . addFirst ( this ) ;
}
}
private void updateLocation ( Location location ) {
this . location = location ;
}
}
package com . <unk> . <unk> ;
import com . facebook . android . Facebook ;
import com . google . android . <unk> . <unk> ;
import com . google . android . maps . MapActivity ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . request . <unk> ;
import com . <unk> . <unk> . request . RequestListener ;
import com . <unk> . <unk> . request . RequestManager ;
import com . <unk> . <unk> . request . <unk> ;
import com . <unk> . <unk> . request . <unk> ;
import com . <unk> . <unk> . request . Request . ResultCode ;
import android . content . Intent ;
import android . content . SharedPreferences ;
import android . location . Location ;
import android . os . Bundle ;
import android . os . Handler ;
import android . preference . PreferenceManager ;
import android . util . Log ;
public abstract class <unk> extends MapActivity {
protected Facebook facebook = new Facebook ( " ) ;
protected <unk> <unk> = new <unk> ( ) ;
protected <unk> <unk> = new <unk> ( ) ;
protected <unk> <unk> ;
protected RequestManager <unk> ;
protected <unk> <unk> ;
protected volatile Location currentLocation = null ;
protected <unk> mapView ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
Util . <unk> ( getResources ( ) . openRawResource ( R . raw . <unk> ) ) ;
<unk> = new RequestManager ( this ) ;
<unk> = new <unk> ( ) ;
<unk> = new <unk> ( this ) ;
Util . uiHandler = new Handler ( ) ;
Util . prefs = PreferenceManager . getDefaultSharedPreferences ( this ) ;
<unk> . <unk> ( ) ;
<unk> ( ) ;
}
private void <unk> ( ) {
if ( ! Util . prefs . contains ( " ) ) {
<unk> . register ( this , C2DMReceiver . USERNAME ) ;
} else if ( Util . prefs . contains ( " ) ) {
String <unk> = Util . prefs . getString ( " , null ) ;
if ( <unk> != null ) {
<unk> . <unk> (
new <unk> (
<unk> ,
<unk> ,
new RequestListener < Void > ( ) {
public void onComplete ( Object result ) {
SharedPreferences . Editor editor = Util . prefs . edit ( ) ;
editor . putBoolean ( " , true ) ;
editor . remove ( " ) ;
editor . commit ( ) ;
}
public void onError ( ResultCode resultCode ) { }
public void onCancel ( ) { }
} ,
null ,
<unk>
)
) ;
}
}
}
private void <unk> ( ) {
if ( ! Util . prefs . contains ( " ) ) {
<unk> . <unk> (
new <unk> (
<unk> ,
new RequestListener < User [ ] > ( ) {
public void onComplete ( Object result ) { }
public void onError ( ResultCode resultCode ) { }
public void onCancel ( ) { }
} ,
facebook
)
) ;
}
if ( ! Util . prefs . contains ( " ) ) {
<unk> . <unk> (
new <unk> (
<unk> ,
new RequestListener < Void > ( ) {
public void onComplete ( Object users ) {
<unk> ( ) ;
}
public void onError ( ResultCode resultCode ) { }
public void onCancel ( ) {
Log . d ( " , " ) ;
}
} ,
facebook ,
<unk>
)
) ;
} else {
<unk> ( ) ;
}
}
public void <unk> ( final Location newLocation ) {
currentLocation = newLocation ;
mapView . <unk> ( currentLocation ) ;
}
public void <unk> ( User <unk> ) {
mapView . <unk> ( <unk> ) ;
}
public Location getCurrentLocation ( ) {
return currentLocation ;
}
public RequestManager <unk> ( ) {
return <unk> ;
}
public Facebook <unk> ( ) {
return facebook ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public <unk> <unk> ( ) {
return mapView ;
}
@Override
public void onResume ( ) {
<unk> . <unk> ( ) ;
super . onResume ( ) ;
}
@Override
public void onPause ( ) {
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( this ) ;
super . onPause ( ) ;
}
@Override
public void onDestroy ( ) {
<unk> . <unk> ( ) ;
super . onDestroy ( ) ;
}
@Override
public void onActivityResult ( int requestCode , int resultCode , Intent data ) {
super . onActivityResult ( requestCode , resultCode , data ) ;
facebook . authorizeCallback ( requestCode , resultCode , data ) ;
}
@Override
protected boolean isRouteDisplayed ( ) {
return false ;
}
public static interface <unk> {
public void <unk> ( Location newLocation ) ;
}
public static interface <unk> {
public void onBackPressed ( ) ;
}
}
package com . <unk> . <unk> ;
import java . io . BufferedInputStream ;
import java . io . BufferedReader ;
import java . io . FilterInputStream ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . InputStreamReader ;
import java . net . URL ;
import java . net . URLConnection ;
import java . security . KeyStore ;
import java . text . DecimalFormat ;
import java . util . ArrayList ;
import javax . net . ssl . HttpsURLConnection ;
import javax . net . ssl . SSLContext ;
import javax . net . ssl . SSLSocketFactory ;
import javax . net . ssl . <unk> ;
import com . google . android . maps . GeoPoint ;
import android . content . Context ;
import android . content . SharedPreferences ;
import android . graphics . Bitmap ;
import android . graphics . BitmapFactory ;
import android . graphics . Canvas ;
import android . graphics . Rect ;
import android . location . Location ;
import android . os . Handler ;
import android . util . Pair ;
import android . widget . Toast ;
public class Util {
private static SSLSocketFactory <unk> = null ;
public static Handler uiHandler ;
public static SharedPreferences prefs ;
private static final int <unk> = <num> * <num> * <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
public static void <unk> ( InputStream <unk> ) {
KeyStore keyStore ;
try {
keyStore = KeyStore . getInstance ( KeyStore . <unk> ( ) ) ;
keyStore . load ( <unk> , " . toCharArray ( ) ) ;
<unk> tmf =
<unk> . getInstance ( <unk> . <unk> ( ) ) ;
tmf . init ( keyStore ) ;
SSLContext ctx = SSLContext . getInstance ( " ) ;
ctx . init ( null , tmf . <unk> ( ) , null ) ;
<unk> = ctx . getSocketFactory ( ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public static void showToast ( final CharSequence <unk> , final Context context ) {
Runnable runnable = new Runnable ( ) {
public void run ( ) {
Toast . makeText ( context , <unk> , Toast . LENGTH_LONG ) . show ( ) ;
}
} ;
uiHandler . post ( runnable ) ;
}
public static String getURL ( String url , boolean <unk> ) throws IOException {
HttpsURLConnection conn = ( HttpsURLConnection ) new URL ( url ) . openConnection ( ) ;
if ( <unk> ) {
conn . <unk> ( <unk> ) ;
}
conn . setRequestProperty ( " , System . getProperties ( ) .
getProperty ( " ) + " ) ;
conn . setConnectTimeout ( <unk> * <num> ) ;
conn . setReadTimeout ( <unk> * <num> ) ;
return read ( conn . getInputStream ( ) ) ;
}
public static String read ( InputStream in ) throws IOException {
StringBuilder sb = new StringBuilder ( ) ;
BufferedReader r = new BufferedReader ( new InputStreamReader ( in ) , <num> ) ;
for ( String line = r . readLine ( ) ; line != null ; line = r . readLine ( ) ) {
sb . append ( line ) ;
}
in . close ( ) ;
return sb . toString ( ) ;
}
public static Bitmap getBitmap ( String url ) {
Bitmap bm = null ;
try {
URL <unk> = new URL ( url ) ;
URLConnection conn = <unk> . openConnection ( ) ;
conn . connect ( ) ;
InputStream is = conn . getInputStream ( ) ;
BufferedInputStream bis = new BufferedInputStream ( is ) ;
bm = BitmapFactory . decodeStream ( new FlushedInputStream ( is ) ) ;
bis . close ( ) ;
is . close ( ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return bm ;
}
private static class FlushedInputStream extends FilterInputStream {
public FlushedInputStream ( InputStream inputStream ) {
super ( inputStream ) ;
}
@Override
public long skip ( long n ) throws IOException {
long totalBytesSkipped = <num> ;
while ( totalBytesSkipped < n ) {
long bytesSkipped = in . skip ( n  totalBytesSkipped ) ;
if ( bytesSkipped == <num> ) {
int b = read ( ) ;
if ( b < <num> ) {
break ;
} else {
bytesSkipped = <num> ;
}
}
totalBytesSkipped += bytesSkipped ;
}
return totalBytesSkipped ;
}
}
public static Location <unk> ( double lat , double lng ) {
Location location = new Location ( " ) ;
location . setLatitude ( lat ) ;
location . setLongitude ( lng ) ;
return location ;
}
public static GeoPoint getGeoPoint ( Location location ) {
GeoPoint point = new GeoPoint (
( int ) ( location . getLatitude ( ) * <num> ) ,
( int ) ( location . getLongitude ( ) * <num> )
) ;
return point ;
}
public static boolean <unk> ( Location location , Location <unk> ) {
if ( <unk> == null ) {
return true ;
}
long <unk> = location . getTime ( )  <unk> . getTime ( ) ;
boolean <unk> = <unk> > <unk> ;
boolean <unk> = <unk> <  <unk> ;
boolean <unk> = <unk> > <num> ;
if ( <unk> ) {
return true ;
} else if ( <unk> ) {
return false ;
}
int <unk> = ( int ) ( location . getAccuracy ( )  <unk> . getAccuracy ( ) ) ;
boolean <unk> = <unk> > <num> ;
boolean <unk> = <unk> < <num> ;
boolean <unk> = <unk> > <num> ;
boolean <unk> = <unk> ( location . getProvider ( ) ,
<unk> . getProvider ( ) ) ;
if ( <unk> ) {
return true ;
} else if ( <unk> && ! <unk> ) {
return true ;
} else if ( <unk> && ! <unk> && <unk> ) {
return true ;
}
return false ;
}
private static boolean <unk> ( String <unk> , String <unk> ) {
if ( <unk> == null ) {
return <unk> == null ;
}
return <unk> . equals ( <unk> ) ;
}
public static Location <unk> ( Location [ ] points ) {
ArrayList < Pair < Double , Double >> <unk> = new ArrayList < Pair < Double , Double >> ( points . length ) ;
for ( int i = <num> ; i < points . length ; i ++ ) {
<unk> . add (
new Pair < Double , Double > (
Math . toRadians ( points [ i ] . getLatitude ( ) ) ,
Math . toRadians ( points [ i ] . getLongitude ( ) )
)
) ;
}
double x = <num> , y = <num> , z = <num> ;
for ( Pair < Double , Double > point : <unk> ) {
x += Math . cos ( point . first ) * Math . cos ( point . second ) ;
y += Math . cos ( point . first ) * Math . sin ( point . second ) ;
z += Math . sin ( point . first ) ;
}
x /= points . length ;
y /= points . length ;
z /= points . length ;
double lng = Math . atan2 ( y , x ) ;
double <unk> = Math . sqrt ( x * x + y * y ) ;
double lat = Math . atan2 ( z , <unk> ) ;
lng = Math . toDegrees ( lng ) ;
lat = Math . toDegrees ( lat ) ;
Location location = new Location ( " ) ;
location . setLatitude ( lat ) ;
location . setLongitude ( lng ) ;
return location ;
}
public static String <unk> ( Float distance ) {
distance = ( float ) distance . intValue ( ) ;
if ( distance >= <num> ) {
DecimalFormat formatter = new DecimalFormat ( " ) ;
return formatter . format ( distance / <num> ) + " ;
} else {
return distance + " ;
}
}
public static Bitmap <unk> ( Bitmap source , int <unk> , int <unk> ) {
<unk> = Math . min ( <unk> , source . getWidth ( ) ) ;
<unk> = Math . min ( <unk> , source . getHeight ( ) ) ;
Bitmap <unk> = Bitmap . createBitmap ( <unk> , <unk> , Bitmap . Config . ARGB_8888 ) ;
Canvas canvas = new Canvas ( <unk> ) ;
Rect srcRect = new Rect ( <num> , <num> , source . getWidth ( ) , source . getHeight ( ) ) ;
Rect dstRect = new Rect ( <num> , <num> , <unk> , <unk> ) ;
int dx = ( srcRect . width ( )  dstRect . width ( ) ) / <num> ;
int dy = ( srcRect . height ( )  dstRect . height ( ) ) ;
srcRect . inset ( Math . max ( <num> , dx ) , <num> ) ;
srcRect . bottom = srcRect . bottom  dy ;
dstRect . inset ( Math . max ( <num> ,  dx ) , <num> ) ;
canvas . drawBitmap ( source , srcRect , dstRect , null ) ;
return <unk> ;
}
}
package com . <unk> . <unk> ;
import java . util . Timer ;
import java . util . TimerTask ;
import android . app . Activity ;
import android . content . Intent ;
import android . os . Bundle ;
public class SplashActivity extends Activity {
private static long <unk> = <num> ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . splash ) ;
TimerTask task = new TimerTask ( ) {
@Override
public void run ( ) {
finish ( ) ;
Intent <unk> = new Intent ( ) . setClass ( SplashActivity . this , <unk> . class ) ;
startActivity ( <unk> ) ;
}
} ;
Timer timer = new Timer ( ) ;
timer . schedule ( task , <unk> ) ;
}
@Override
public void onBackPressed ( ) {
}
}
package com . <unk> . <unk> ;
import android . content . Context ;
import android . graphics . Bitmap ;
import android . graphics . Canvas ;
import android . graphics . Color ;
import android . graphics . Paint ;
import android . graphics . Point ;
import android . graphics . drawable . BitmapDrawable ;
import android . graphics . drawable . Drawable ;
import android . location . Location ;
import android . os . Build ;
import android . util . AttributeSet ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . widget . ImageView ;
import android . widget . RelativeLayout ;
import android . widget . TextView ;
import com . google . android . maps . GeoPoint ;
import com . google . android . maps . ItemizedOverlay ;
import com . google . android . maps . MapController ;
import com . google . android . maps . MapView ;
import com . google . android . maps . OverlayItem ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
public abstract class <unk> extends RelativeLayout implements
<unk> , <unk> , OnClickListener ,
<unk> {
protected <unk> activity ;
protected volatile User <unk> = null ;
protected volatile User <unk> = null ;
protected volatile <unk> venue ;
protected <unk> <unk> ;
protected ImageView <unk> = null ;
protected TextView friendName ;
protected TextView lastUpdated ;
protected TextView <unk> ;
protected View <unk> ;
protected ImageView <unk> = null ;
protected TextView <unk> ;
protected TextView <unk> ;
protected MapView mapView ;
protected MapController mapController ;
protected MapOverlay <unk> ;
protected volatile boolean <unk> ;
protected <unk> ( Context context ) {
super ( context ) ;
}
protected <unk> ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
}
protected <unk> ( Context context , AttributeSet attrs , int defStyle ) {
super ( context , attrs , defStyle ) ;
}
@Override
public void onFinishInflate ( ) {
super . onFinishInflate ( ) ;
<unk> = ( ImageView ) findViewById ( R . id . <unk> ) ;
friendName = ( TextView ) findViewById ( R . id . name ) ;
lastUpdated = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . distance ) ;
<unk> = findViewById ( R . id . <unk> ) ;
<unk> = ( ImageView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
mapView = ( MapView ) findViewById ( R . id . <unk> ) ;
if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . HONEYCOMB ) {
mapView . setLayerType ( View . LAYER_TYPE_SOFTWARE , null ) ;
}
mapController = mapView . getController ( ) ;
mapController . setZoom ( <num> ) ;
}
public void setUp ( <unk> activity , <unk> <unk> ) {
this . activity = activity ;
this . <unk> = <unk> ;
<unk> . addListener ( this ) ;
<unk> = new MapOverlay ( ) ;
mapView . getOverlays ( ) . add ( <unk> ) ;
}
protected class MapOverlay extends ItemizedOverlay < OverlayItem > {
protected <unk> [ ] <unk> = new <unk> [ ] { null , null } ;
protected Paint paint = null ;
protected volatile <unk> <unk> = null ;
public MapOverlay ( ) {
super ( null ) ;
if ( paint == null ) {
paint = new Paint ( ) ;
paint . setDither ( true ) ;
paint . setColor ( Color . BLACK ) ;
paint . setStyle ( Paint . Style . FILL_AND_STROKE ) ;
paint . setStrokeJoin ( Paint . Join . ROUND ) ;
paint . setStrokeCap ( Paint . Cap . ROUND ) ;
paint . setStrokeWidth ( <num> ) ;
}
}
public void <unk> ( <unk> venue ) {
<unk> = new <unk> ( venue ) ;
refresh ( ) ;
}
public void <unk> ( ) {
<unk> = null ;
refresh ( ) ;
}
public void <unk> ( Location currentLocation ) {
<unk> [ <num> ] = new <unk> ( <unk> , Util . getGeoPoint ( currentLocation ) , true ) ;
refresh ( ) ;
}
public void <unk> ( User <unk> ) {
<unk> [ <num> ] = new <unk> ( <unk> , Util . getGeoPoint ( <unk> . getLocation ( ) ) , false ) ;
refresh ( ) ;
}
@Override
public void draw ( Canvas canvas , MapView mapView , boolean shadow ) {
if ( <unk> != null ) {
<unk> ( <unk> , canvas ) ;
}
if ( <unk> [ <num> ] != null ) {
<unk> ( <unk> [ <num> ] , canvas ) ;
}
if ( <unk> [ <num> ] != null ) {
<unk> ( <unk> [ <num> ] , canvas ) ;
}
super . draw ( canvas , mapView , false ) ;
}
private void <unk> ( OverlayItem item , Canvas canvas ) {
Point point = new Point ( ) ;
mapView . getProjection ( ) . toPixels ( item . getPoint ( ) , point ) ;
canvas . drawCircle ( point . x , point . y , <num> , paint ) ;
}
public void refresh ( ) {
populate ( ) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
mapView . invalidate ( ) ;
}
}
) ;
}
@Override
protected OverlayItem createItem ( int i ) {
switch ( size ( ) ) {
case <num> :
if ( <unk> [ <num> ] != null ) {
return <unk> [ <num> ] ;
} else if ( <unk> [ <num> ] != null ) {
return <unk> [ <num> ] ;
} else {
return <unk> ;
}
case <num> :
if ( i == <num> ) {
if ( <unk> [ <num> ] != null ) {
return <unk> [ <num> ] ;
} else if ( <unk> [ <num> ] != null ) {
return <unk> [ <num> ] ;
} else {
return <unk> ;
}
} else if ( i == <num> ) {
if ( <unk> [ <num> ] != null ) {
return <unk> [ <num> ] ;
} else {
return <unk> ;
}
}
case <num> :
if ( i <= <num> ) {
return <unk> [ i ] ;
} else {
return <unk> ;
}
}
return null ;
}
@Override
public int size ( ) {
return ( <unk> [ <num> ] != null ? <num> : <num> )
+ ( <unk> [ <num> ] != null ? <num> : <num> )
+ ( <unk> != null ? <num> : <num> ) ;
}
}
protected class <unk> extends OverlayItem {
private BitmapDrawable <unk> = null ;
private boolean <unk> ;
public <unk> ( User user , GeoPoint point , boolean <unk> ) {
super ( point , user . getName ( ) , " ) ;
this . <unk> = <unk> ;
}
@Override
public Drawable <unk> ( int <unk> ) {
if ( <unk> == null ) {
Bitmap image ;
if ( <unk> ) {
image = <unk> . getImage ( <unk> . <unk> ( ) , true ) ;
} else {
image = <unk> . getImage ( <unk> . <unk> ( ) , true ) ;
}
if ( image != null ) {
<unk> = new BitmapDrawable ( activity . getResources ( ) , image ) ;
<unk> . setBounds ( <num> , <num> , image . getWidth ( ) , image . getHeight ( ) ) ;
return <unk> ;
} else {
Bitmap <unk> = Bitmap . createBitmap ( <num> , <num> , Bitmap . Config . ALPHA_8 ) ;
return new BitmapDrawable ( activity . getResources ( ) , <unk> ) ;
}
}
return <unk> ;
}
}
public void <unk> ( final User <unk> ) {
this . <unk> = <unk> ;
if ( activity . getCurrentLocation ( ) != null ) {
<unk> . <unk> ( activity . getCurrentLocation ( ) ) ;
}
}
public abstract void updateUser ( final User user , boolean <unk> ) ;
protected void <unk> ( ) {
final Bitmap bitmap = <unk> . getImage ( <unk> . <unk> ( ) , true ) ;
if ( bitmap != null ) {
<unk> . setImageBitmap ( bitmap ) ;
}
friendName . setText ( <unk> . getName ( ) ) ;
lastUpdated . setText ( <unk> . <unk> ( ) ) ;
if ( <unk> . getDistance ( ) != null ) {
<unk> . setText ( <unk> . <unk> ( ) ) ;
}
<unk> . invalidate ( ) ;
friendName . invalidate ( ) ;
lastUpdated . invalidate ( ) ;
<unk> . invalidate ( ) ;
}
protected void <unk> ( ) {
final Bitmap bitmap = <unk> . getImage ( venue . getIcon ( ) , false ) ;
if ( bitmap != null ) {
<unk> . setImageBitmap ( bitmap ) ;
}
<unk> . setText ( venue . getName ( ) ) ;
if ( venue . getDistance ( ) != null ) {
<unk> . setText ( venue . <unk> ( ) ) ;
}
<unk> . invalidate ( ) ;
<unk> . invalidate ( ) ;
<unk> . invalidate ( ) ;
}
protected class <unk> extends OverlayItem {
protected BitmapDrawable <unk> = null ;
public <unk> ( <unk> venue ) {
super ( Util . getGeoPoint ( venue . getLocation ( ) ) , venue . getName ( ) , " ) ;
}
@Override
public Drawable <unk> ( int <unk> ) {
if ( <unk> == null ) {
Bitmap image = <unk> . getImage ( venue . getIcon ( ) , false ) ;
if ( image != null ) {
<unk> = new BitmapDrawable ( activity . getResources ( ) , image ) ;
<unk> . setBounds ( <num> , <num> , Math . min ( image . getWidth ( ) , <num> ) , Math . min ( image . getHeight ( ) , <num> ) ) ;
return <unk> ;
} else {
Bitmap <unk> = Bitmap . createBitmap ( <num> , <num> , Bitmap . Config . ALPHA_8 ) ;
return new BitmapDrawable ( activity . getResources ( ) , <unk> ) ;
}
}
return <unk> ;
}
}
public void <unk> ( <unk> venue ) {
this . venue = venue ;
<unk> . <unk> ( venue ) ;
mapController . animateTo ( Util . getGeoPoint ( <unk> . this . venue . getLocation ( ) ) ) ;
mapController . zoomToSpan ( <unk> . <unk> ( ) , <unk> . <unk> ( ) ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
<unk> ( ) ;
}
public void <unk> ( Location newLocation ) {
if ( <unk> != null ) {
<unk> . <unk> ( newLocation ) ;
}
}
public void <unk> ( ) {
this . <unk> . refresh ( ) ;
}
public abstract void onClick ( View view ) ;
public abstract void onBackPressed ( ) ;
}
package com . <unk> . <unk> ;
import java . util . List ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . request . <unk> ;
import com . <unk> . <unk> . request . RequestListener ;
import com . <unk> . <unk> . request . <unk> ;
import com . <unk> . <unk> . request . Request . ResultCode ;
import android . app . ProgressDialog ;
import android . content . Intent ;
import android . os . Bundle ;
import android . view . KeyEvent ;
public class <unk> extends <unk> {
private User friend ;
private ProgressDialog progressDialog ;
private volatile boolean <unk> = false ;
private volatile boolean <unk> = false ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
mapView = ( <unk> ) findViewById ( R . id . map_view ) ;
( ( <unk> ) mapView ) . setUp ( this , <unk> ) ;
Intent <unk> = getIntent ( ) ;
final int <unk> = <unk> . getExtras ( ) . getInt ( " ) ;
String <unk> = <unk> . getExtras ( ) . getString ( " ) ;
progressDialog = ProgressDialog . show ( this , " , getText ( R . string . <unk> ) ) ;
<unk> . <unk> (
new <unk> (
<unk> ,
new RequestListener < List < User >> ( ) {
@SuppressWarnings("unchecked")
public void onComplete ( final Object userList ) {
final List < User > users = ( List < User > ) userList ;
int <unk> ;
if ( <unk> == users . get ( <num> ) . getId ( ) ) {
<unk> = users . get ( <num> ) . getId ( ) ;
} else {
<unk> = <unk> ;
}
for ( User user : users ) {
if ( user . getId ( ) == <unk> ) {
friend = user ;
break ;
}
}
if ( currentLocation != null ) {
friend . <unk> ( currentLocation ) ;
}
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
<unk> ( users . get ( <num> ) ) ;
mapView . updateUser ( friend , true ) ;
<unk> = true ;
if ( <unk> ) {
progressDialog . dismiss ( ) ;
}
}
}
) ;
}
public void onError ( ResultCode resultCode ) {
Util . showToast ( getText ( R . string . <unk> ) , <unk> . this ) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
progressDialog . cancel ( ) ;
finish ( ) ;
}
}
) ;
}
public void onCancel ( ) {
Util . showToast ( getText ( R . string . <unk> ) , <unk> . this ) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
progressDialog . cancel ( ) ;
finish ( ) ;
}
}
) ;
}
} ,
facebook ,
<unk>
)
) ;
<unk> . <unk> (
new <unk> (
<unk> ,
<unk> ,
<unk> ,
new RequestListener < <unk> > ( ) {
public void onComplete ( final Object <unk> ) {
final <unk> venue = ( <unk> ) <unk> ;
if ( currentLocation != null ) {
venue . <unk> ( currentLocation ) ;
}
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
mapView . <unk> ( venue ) ;
<unk> = true ;
if ( <unk> ) {
progressDialog . dismiss ( ) ;
}
}
}
) ;
}
public void onError ( ResultCode resultCode ) {
Util . showToast ( getText ( R . string . <unk> ) , <unk> . this ) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
progressDialog . cancel ( ) ;
finish ( ) ;
}
}
) ;
}
public void onCancel ( ) {
Util . showToast ( getText ( R . string . <unk> ) , <unk> . this ) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
progressDialog . cancel ( ) ;
finish ( ) ;
}
}
) ;
}
}
)
) ;
}
@Override
public boolean onKeyUp ( int keyCode , KeyEvent event ) {
if ( keyCode == KeyEvent . KEYCODE_MENU && event . <unk> ( )
&& ! event . isCanceled ( ) ) {
finish ( ) ;
return true ;
}
return super . onKeyUp ( keyCode , event ) ;
}
@Override
public void onBackPressed ( ) {
mapView . onBackPressed ( ) ;
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import java . util . Iterator ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
public class <unk> extends Request {
private <unk> <unk> ;
private String <unk> ;
private static final int <unk> = <num> ;
public <unk> ( String <unk> , <unk> <unk> ,
RequestManager manager , RequestListener < <unk> > listener ) {
super ( manager , listener ) ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
@Override
public <unk> < <unk> > execute ( ) {
return <unk> . <unk> ( <unk> ) ;
}
@Override
protected void <unk> ( Deque < Request > <unk> ) { }
@Override
protected void onError ( Deque < Request > <unk> ) {
if ( retries < <unk> ) {
try {
Thread . sleep ( ( long ) ( <num> * Math . pow ( <num> , retries ) ) ) ;
} catch ( InterruptedException e ) { }
retries ++ ;
} else {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
if ( itr . next ( ) == this ) {
itr . remove ( ) ;
break ;
}
}
}
listener . onError ( ResultCode . ERROR ) ;
}
}
@Override
protected void onCancel ( Deque < Request > <unk> ) { }
@Override
public void <unk> ( Deque < Request > <unk> ) {
synchronized ( <unk> ) {
<unk> . addLast ( this ) ;
}
}
}
package com . <unk> . <unk> . <unk> ;
import java . util . List ;
import com . <unk> . <unk> . Util ;
import android . location . Location ;
public class <unk> {
private String id ;
private String name ;
private Location location ;
private Float distance ;
private String icon ;
public <unk> ( String id , String name , double lat , double lng , String icon ) {
this . id = id ;
this . name = name ;
this . location = Util . <unk> ( lat , lng ) ;
this . distance = null ;
this . icon = icon ;
}
public void <unk> ( Location location ) {
this . distance = location . distanceTo ( this . location ) ;
}
public String getID ( ) {
return id ;
}
public String getName ( ) {
return name ;
}
public Location getLocation ( ) {
return location ;
}
public Float getDistance ( ) {
return distance ;
}
public String <unk> ( ) {
return Util . <unk> ( distance ) ;
}
public String getIcon ( ) {
return icon ;
}
public String toString ( ) {
return " + id + " + name + " + " + location . getLatitude ( ) + " + location . getLongitude ( ) + " + distance + " ;
}
public static void <unk> ( List < <unk> > list , Location currentLocation ) {
for ( <unk> venue : list ) {
if ( venue . getLocation ( ) != null ) {
venue . <unk> ( currentLocation ) ;
}
}
}
}
package com . <unk> . <unk> ;
import android . content . Context ;
import android . location . Location ;
import android . location . LocationListener ;
import android . location . LocationManager ;
import android . os . Bundle ;
public class <unk> {
private final <unk> activity ;
private LocationManager manager ;
private LocationListener listener ;
private Location <unk> = null ;
private long lastUpdate = Long . MIN_VALUE ;
public <unk> ( <unk> <unk> ) {
this . activity = <unk> ;
manager = ( LocationManager ) <unk> . getSystemService ( Context . LOCATION_SERVICE ) ;
listener = new LocationListener ( ) {
public void onLocationChanged ( Location location ) {
if ( Util . <unk> ( location , <unk> ) ) {
<unk> = location ;
if ( lastUpdate + ( <num> / ( <unk> . <unk> / <num> ) )
< System . currentTimeMillis ( ) ) {
lastUpdate = System . currentTimeMillis ( ) ;
<unk> . this . activity . <unk> ( location ) ;
}
}
}
public void onStatusChanged ( String provider , int status , Bundle extras ) { }
public void onProviderEnabled ( String provider ) { }
public void onProviderDisabled ( String provider ) { }
} ;
}
public Location <unk> ( ) {
Location <unk> = manager . getLastKnownLocation ( LocationManager . NETWORK_PROVIDER ) ;
Location gpsLocation = manager . getLastKnownLocation ( LocationManager . GPS_PROVIDER ) ;
if ( gpsLocation != null ) {
return Util . <unk> ( gpsLocation , <unk> ) ? <unk> : gpsLocation ;
} else {
return <unk> ;
}
}
public void <unk> ( ) {
Location lastLocation = <unk> ( ) ;
if ( lastLocation != null ) {
<unk> . this . activity . <unk> ( lastLocation ) ;
}
manager . requestLocationUpdates ( LocationManager . NETWORK_PROVIDER , <num> , <num> , listener ) ;
if ( manager . getProvider ( LocationManager . GPS_PROVIDER ) != null ) {
manager . requestLocationUpdates ( LocationManager . GPS_PROVIDER , <num> , <num> , listener ) ;
}
}
public void <unk> ( ) {
manager . removeUpdates ( listener ) ;
}
}
package com . <unk> . <unk> ;
import com . google . android . maps . GeoPoint ;
import com . <unk> . <unk> . request . Request . ResultCode ;
import com . <unk> . <unk> . request . RequestListener ;
import com . <unk> . <unk> . request . RequestManager ;
import com . <unk> . <unk> . request . <unk> ;
import android . app . ProgressDialog ;
import android . content . Context ;
import android . graphics . Bitmap ;
import android . location . Location ;
import android . util . AttributeSet ;
import android . view . View ;
import android . widget . Button ;
public class <unk> extends <unk> {
private Button acceptButton ;
private Button <unk> ;
private ProgressDialog progressDialog ;
public <unk> ( Context context ) {
super ( context ) ;
}
public <unk> ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
}
public <unk> ( Context context , AttributeSet attrs , int defStyle ) {
super ( context , attrs , defStyle ) ;
}
@Override
public void onFinishInflate ( ) {
super . onFinishInflate ( ) ;
acceptButton = ( Button ) findViewById ( R . id . <unk> ) ;
acceptButton . setOnClickListener ( this ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( this ) ;
}
@Override
public void updateUser ( final User user , boolean <unk> ) {
this . <unk> = user ;
this . <unk> = false ;
this . <unk> . <unk> ( user ) ;
mapController . zoomToSpan ( <unk> . <unk> ( ) , <unk> . <unk> ( ) ) ;
new Thread (
new Runnable ( ) {
public void run ( ) {
if ( activity . getCurrentLocation ( ) != null ) {
<unk> = true ;
final GeoPoint center = Util . getGeoPoint (
Util . <unk> (
new Location [ ] {
activity . getCurrentLocation ( ) ,
<unk> . getLocation ( )
}
)
) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
mapController . animateTo ( center ) ;
}
}
) ;
}
}
}
) . start ( ) ;
<unk> ( ) ;
}
@Override
public void <unk> ( final Location newLocation ) {
super . <unk> ( newLocation ) ;
if ( <unk> != null && ! <unk> ) {
new Thread (
new Runnable ( ) {
public void run ( ) {
<unk> = true ;
final GeoPoint center = Util . getGeoPoint (
Util . <unk> (
new Location [ ] {
newLocation ,
<unk> . getLocation ( )
}
)
) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
mapController . animateTo ( center ) ;
mapController . zoomToSpan ( <unk> . <unk> ( ) , <unk> . <unk> ( ) ) ;
}
}
) ;
}
}
) . start ( ) ;
}
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
if ( <unk> != null ) {
final Bitmap <unk> = <unk> . getImage ( <unk> . <unk> ( ) , true ) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
if ( <unk> != null ) {
<unk> . setImageBitmap ( <unk> ) ;
}
<unk> . invalidate ( ) ;
}
}
) ;
}
if ( venue != null ) {
final Bitmap <unk> = <unk> . getImage ( venue . getIcon ( ) , false ) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
if ( <unk> != null ) {
<unk> . setImageBitmap ( <unk> ) ;
}
<unk> . invalidate ( ) ;
}
}
) ;
}
}
@Override
public void onClick ( View view ) {
if ( view == acceptButton ) {
respond ( true ) ;
} else {
respond ( false ) ;
}
}
private void respond ( boolean response ) {
progressDialog = ProgressDialog . show ( activity , " , activity . getText ( R . string . <unk> ) ) ;
RequestManager <unk> = activity . <unk> ( ) ;
<unk> . <unk> (
new <unk> (
<unk> . getId ( ) ,
response ,
<unk> ,
new RequestListener < Void > ( ) {
@Override
public void onComplete ( Object result ) {
progressDialog . dismiss ( ) ;
activity . finish ( ) ;
}
@Override
public void onError ( ResultCode resultCode ) {
Util . showToast ( activity . getText ( R . string . <unk> ) , activity ) ;
progressDialog . cancel ( ) ;
}
@Override
public void onCancel ( ) {
Util . showToast ( activity . getText ( R . string . <unk> ) , activity ) ;
progressDialog . cancel ( ) ;
}
} ,
activity . <unk> ( ) ,
activity . <unk> ( )
)
) ;
}
@Override
public void onBackPressed ( ) {
respond ( false ) ;
}
}
package com . <unk> . <unk> . <unk> ;
import java . util . LinkedList ;
import java . util . List ;
import org . json . JSONArray ;
import org . json . JSONObject ;
import android . location . Location ;
import android . util . Log ;
import com . <unk> . <unk> . Util ;
import com . <unk> . <unk> . request . Request . <unk> ;
import com . <unk> . <unk> . request . Request . ResultCode ;
public class <unk> {
private static final String <unk> = " ;
private static final String clientSecret = " ;
private static final String lastModified = " ;
private static final String <unk> = " ;
public static final int <unk> = <num> ;
private static final int <unk> = <num> ;
public <unk> < List < <unk> >> <unk> ( Location location ) {
String url = "
+ " + location . getLatitude ( ) + ,' + location . getLongitude ( )
+ " + <unk>
+ " + <unk>
+ " + <unk>
+ " + clientSecret
+ " + lastModified ;
try {
String response = Util . getURL ( url , false ) ;
JSONObject jsonObject = new JSONObject ( response ) ;
JSONArray <unk> = jsonObject . getJSONObject ( " )
. getJSONArray ( " ) . getJSONObject ( <num> ) . getJSONArray ( " ) ;
List < <unk> > <unk> = new LinkedList < <unk> > ( ) ;
for ( int i = <num> ; i < <unk> . length ( ) ; i ++ ) {
JSONObject <unk> = <unk> . getJSONObject ( i ) . getJSONObject ( " ) ;
JSONObject <unk> = <unk> . getJSONObject ( " ) ;
JSONArray <unk> = <unk> . getJSONArray ( " ) ;
<unk> venue = new <unk> (
<unk> . getString ( " ) ,
<unk> . getString ( " ) ,
<unk> . getDouble ( " ) ,
<unk> . getDouble ( " ) ,
( <unk> . length ( ) > <num> ) ? <unk> . getJSONObject ( <num> )
. getJSONObject ( " ) . getString ( " )
+ " : <unk>
) ;
<unk> . add ( venue ) ;
}
Log . d ( " , " ) ;
return new <unk> < List < <unk> >> ( <unk> , ResultCode . SUCCESS ) ;
} catch ( Exception e ) {
Log . d ( " , " ) ;
return new <unk> < List < <unk> >> ( null , ResultCode . ERROR ) ;
}
}
public <unk> < <unk> > <unk> ( String <unk> ) {
String url = " + <unk>
+ " + <unk>
+ " + clientSecret
+ " + lastModified ;
try {
String response = Util . getURL ( url , false ) ;
JSONObject jsonObject = new JSONObject ( response ) ;
JSONObject <unk> = jsonObject . getJSONObject ( " )
. getJSONObject ( " ) ;
JSONObject <unk> = <unk> . getJSONObject ( " ) ;
JSONArray <unk> = <unk> . getJSONArray ( " ) ;
<unk> venue = new <unk> (
<unk> . getString ( " ) ,
<unk> . getString ( " ) ,
<unk> . getDouble ( " ) ,
<unk> . getDouble ( " ) ,
( <unk> . length ( ) > <num> ) ? <unk> . getJSONObject ( <num> )
. getJSONObject ( " ) . getString ( " )
+ " : <unk>
) ;
Log . d ( " , " ) ;
return new <unk> < <unk> > ( venue , ResultCode . SUCCESS ) ;
} catch ( Exception e ) {
Log . d ( " , " ) ;
return new <unk> < <unk> > ( null , ResultCode . ERROR ) ;
}
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import java . util . Iterator ;
import com . facebook . android . Facebook ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . User ;
import com . <unk> . <unk> . Util ;
import android . content . SharedPreferences ;
public class <unk> extends <unk> {
public <unk> ( RequestManager manager ,
RequestListener < Void > listener , Facebook facebook ,
<unk> <unk> ) {
super ( manager , listener , facebook , <unk> ) ;
}
@Override
public <unk> < Void > execute ( ) {
String accessToken = Util . prefs . getString ( " , null ) ;
<unk> < Void > result = <unk> . auth ( accessToken ) ;
if ( result . code == ResultCode . SUCCESS ) {
<unk> . <unk> ( ) ;
}
return result ;
}
@Override
public void <unk> ( Deque < Request > <unk> ) {
if ( manager . getContext ( ) != null ) {
SharedPreferences . Editor editor = Util . prefs . edit ( ) ;
editor . remove ( " ) ;
editor . remove ( " ) ;
editor . commit ( ) ;
<unk> . <unk> ( ) ;
facebook . setAccessToken ( null ) ;
synchronized ( <unk> ) {
<unk> . addFirst (
new <unk> (
manager ,
new RequestListener < User [ ] > ( ) {
public void onComplete ( Object result ) { }
public void onError ( ResultCode resultCode ) { }
public void onCancel ( ) { }
} ,
facebook
)
) ;
}
} else {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request instanceof <unk>
|| request instanceof <unk> ) {
itr . remove ( ) ;
if ( request . listener != null ) {
request . listener . onError ( ResultCode . <unk> ) ;
}
}
}
}
}
}
@Override
public void onError ( Deque < Request > <unk> ) {
if ( retries < <unk> ) {
try {
Thread . sleep ( ( long ) ( <num> * Math . pow ( <num> , retries ) ) ) ;
} catch ( InterruptedException e ) { }
retries ++ ;
} else {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request instanceof <unk> ) {
if ( request . listener != null ) {
request . listener . onError ( ResultCode . ERROR ) ;
}
itr . remove ( ) ;
}
}
}
}
}
@Override
public void onCancel ( Deque < Request > <unk> ) { }
@Override
public void <unk> ( Deque < Request > <unk> ) {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request instanceof <unk> ) {
return ;
}
}
<unk> . addLast ( this ) ;
}
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import java . util . Iterator ;
import android . app . Activity ;
import android . content . SharedPreferences ;
import android . os . Bundle ;
import android . util . Log ;
import com . facebook . android . DialogError ;
import com . facebook . android . Facebook ;
import com . facebook . android . FacebookError ;
import com . facebook . android . Facebook . DialogListener ;
import com . <unk> . <unk> . Util ;
public class <unk> extends Request {
private <unk> < Void > result ;
private Boolean <unk> ;
private Object <unk> = new Object ( ) ;
private static final int <unk> = <num> ;
private Facebook facebook ;
public <unk> ( RequestManager manager , RequestListener < ? > listener ,
Facebook facebook ) {
super ( manager , listener ) ;
this . facebook = facebook ;
}
@Override
public <unk> < Void > execute ( ) {
<unk> = false ;
String <unk> = Util . prefs . getString ( " , null ) ;
long expires = Util . prefs . getLong ( " , <num> ) ;
if ( <unk> != null ) {
facebook . setAccessToken ( <unk> ) ;
}
if ( expires != <num> ) {
facebook . <unk> ( expires ) ;
}
if ( ! facebook . isSessionValid ( ) ) {
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
facebook . authorize (
( Activity ) manager . getContext ( ) ,
new String [ ] { " } ,
new DialogListener ( ) {
public void onComplete ( final Bundle values ) {
Log . d ( " , " ) ;
SharedPreferences . Editor editor = Util . prefs . edit ( ) ;
editor . putString ( " , facebook . getAccessToken ( ) ) ;
editor . putLong ( " , facebook . getAccessExpires ( ) ) ;
editor . commit ( ) ;
result = new <unk> < Void > ( null , ResultCode . SUCCESS ) ;
synchronized ( <unk> ) {
<unk> = true ;
<unk> . notify ( ) ;
}
}
public void onFacebookError ( final FacebookError e ) {
Log . d ( " , " ) ;
result = new <unk> < Void > ( null , ResultCode . ERROR ) ;
synchronized ( <unk> ) {
<unk> = true ;
<unk> . notify ( ) ;
}
}
public void onError ( final DialogError e ) {
Log . d ( " , " ) ;
result = new <unk> < Void > ( null , ResultCode . ERROR ) ;
synchronized ( <unk> ) {
<unk> = true ;
<unk> . notify ( ) ;
}
}
public void onCancel ( ) {
Log . d ( " , " ) ;
result = new <unk> < Void > ( null , ResultCode . <unk> ) ;
synchronized ( <unk> ) {
<unk> = true ;
<unk> . notify ( ) ;
}
}
}
) ;
}
}
) ;
synchronized ( <unk> ) {
if ( ! <unk> ) {
try {
<unk> . wait ( ) ;
} catch ( InterruptedException e1 ) { }
}
}
return result ;
}
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . SUCCESS ) ;
}
@Override
public void <unk> ( Deque < Request > <unk> ) { }
@Override
public void onError ( Deque < Request > <unk> ) {
if ( retries < <unk> ) {
try {
Thread . sleep ( ( long ) ( <num> * Math . pow ( <num> , retries ) ) ) ;
} catch ( InterruptedException e ) { }
retries ++ ;
} else {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request instanceof <unk>
|| request instanceof <unk> ) {
itr . remove ( ) ;
if ( request . listener != null ) {
request . listener . onError ( ResultCode . ERROR ) ;
}
}
}
}
}
}
@Override
public void onCancel ( Deque < Request > <unk> ) {
Log . d ( " , " ) ;
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request instanceof <unk>
|| request instanceof <unk> ) {
itr . remove ( ) ;
if ( request . listener != null ) {
request . listener . onCancel ( ) ;
}
}
}
}
}
@Override
public void <unk> ( Deque < Request > <unk> ) {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request instanceof <unk> ) {
return ;
}
}
<unk> . addLast ( this ) ;
}
}
}
package com . <unk> . <unk> ;
import java . util . List ;
import com . google . android . maps . GeoPoint ;
import com . google . android . maps . MapView ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . request . Request . ResultCode ;
import com . <unk> . <unk> . request . RequestListener ;
import com . <unk> . <unk> . request . RequestManager ;
import com . <unk> . <unk> . request . <unk> ;
import android . app . ProgressDialog ;
import android . content . Context ;
import android . graphics . Bitmap ;
import android . graphics . Canvas ;
import android . graphics . Paint ;
import android . graphics . Point ;
import android . location . Location ;
import android . util . AttributeSet ;
import android . view . View ;
import android . widget . Button ;
import android . widget . ViewFlipper ;
public class <unk> extends <unk> implements <unk> {
private Button <unk> ;
private Button <unk> ;
private volatile Location <unk> = null ;
private volatile GeoPoint center = null ;
private ProgressDialog progressDialog = null ;
public <unk> ( Context context ) {
super ( context ) ;
}
public <unk> ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
}
public <unk> ( Context context , AttributeSet attrs , int defStyle ) {
super ( context , attrs , defStyle ) ;
}
@Override
public void onFinishInflate ( ) {
super . onFinishInflate ( ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( this ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( this ) ;
<unk> . setVisibility ( View . GONE ) ;
}
public void setUp ( <unk> activity , <unk> <unk> ) {
this . activity = activity ;
this . <unk> = <unk> ;
<unk> . addListener ( this ) ;
<unk> = new <unk> ( ) ;
mapView . getOverlays ( ) . add ( <unk> ) ;
}
private class <unk> extends <unk> . MapOverlay {
@Override
public void draw ( Canvas canvas , MapView mapView , boolean shadow ) {
Point <unk> = null ;
if ( <unk> [ <num> ] != null ) {
<unk> = new Point ( ) ;
mapView . getProjection ( ) . toPixels ( <unk> [ <num> ] . getPoint ( ) , <unk> ) ;
}
Point <unk> = null ;
if ( <unk> [ <num> ] != null ) {
<unk> = new Point ( ) ;
mapView . getProjection ( ) . toPixels ( <unk> [ <num> ] . getPoint ( ) , <unk> ) ;
}
if ( center != null ) {
<unk> ( <unk> , <unk> , canvas , paint ) ;
}
super . draw ( canvas , mapView , shadow ) ;
}
private void <unk> ( Point <unk> , Point <unk> , Canvas canvas , Paint paint ) {
Point <unk> = new Point ( ) ;
mapView . getProjection ( ) . toPixels ( center , <unk> ) ;
paint . setStyle ( Paint . Style . STROKE ) ;
float <unk> = ( float ) ( mapView . getProjection ( ) . <unk> ( <unk> . <unk> )
* ( <num> / Math . cos ( Math . toRadians ( <unk> . getLatitude ( ) ) ) ) ) ;
canvas . drawCircle ( <unk> . x , <unk> . y , <unk> , paint ) ;
paint . setStyle ( Paint . Style . FILL_AND_STROKE ) ;
}
}
@Override
public void updateUser ( final User user , boolean <unk> ) {
this . <unk> = user ;
if ( <unk> ) {
this . <unk> = false ;
this . <unk> = null ;
this . center = null ;
}
this . <unk> . <unk> ( user ) ;
<unk> ( ) ;
if ( ( ( <unk> ) activity ) . <unk> ( ) == <unk> . <unk> ) {
<unk> ( ) ;
}
new Thread (
new Runnable ( ) {
@Override
public void run ( ) {
if ( activity . getCurrentLocation ( ) != null ) {
<unk> = Util . <unk> (
new Location [ ] {
activity . getCurrentLocation ( ) ,
user . getLocation ( )
}
) ;
center = Util . getGeoPoint ( <unk> ) ;
}
if ( ! <unk> ) {
final GeoPoint <unk> ;
if ( center != null ) {
<unk> = center ;
<unk> = true ;
} else {
<unk> = Util . getGeoPoint ( user . getLocation ( ) ) ;
mapController . setZoom ( <num> ) ;
}
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
mapController . animateTo ( <unk> ) ;
if ( <unk> ) {
mapController . zoomToSpan ( <unk> . <unk> ( ) , <unk> . <unk> ( ) ) ;
}
}
}
) ;
}
}
}
) . start ( ) ;
}
@Override
public void <unk> ( <unk> venue ) {
super . <unk> ( venue ) ;
<unk> . setVisibility ( View . GONE ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
}
public Location <unk> ( ) {
return <unk> ;
}
public User getFriend ( ) {
return <unk> ;
}
public void <unk> ( Location newLocation ) {
super . <unk> ( newLocation ) ;
if ( <unk> != null ) {
this . <unk> = Util . <unk> (
new Location [ ] {
newLocation ,
<unk> . getLocation ( )
}
) ;
this . center = Util . getGeoPoint ( this . <unk> ) ;
if ( ! <unk> ) {
<unk> = true ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
mapController . animateTo ( center ) ;
mapController . zoomToSpan ( <unk> . <unk> ( ) , <unk> . <unk> ( ) ) ;
}
}
) ;
}
}
}
public void <unk> ( List < User > friends ) {
if ( <unk> != null ) {
Util . uiHandler . post (
new Runnable ( ) {
@Override
public void run ( ) {
updateUser ( <unk> , false ) ;
}
}
) ;
}
}
@Override
public void <unk> ( ) {
super . <unk> ( ) ;
if ( ( ( <unk> ) activity ) . <unk> ( ) == <unk> . <unk> ) {
final Bitmap <unk> = <unk> . getImage ( <unk> . <unk> ( ) , true ) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
if ( <unk> != null ) {
<unk> . setImageBitmap ( <unk> ) ;
}
<unk> . invalidate ( ) ;
}
}
) ;
} else if ( ( ( <unk> ) activity ) . <unk> ( ) == <unk> . <unk> ) {
final Bitmap <unk> = <unk> . getImage ( venue . getIcon ( ) , false ) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
if ( <unk> != null ) {
<unk> . setImageBitmap ( <unk> ) ;
}
<unk> . invalidate ( ) ;
}
}
) ;
}
}
@Override
public void onClick ( View view ) {
if ( ! ( ( <unk> ) activity ) . <unk> ( ) . <unk> ( ) ) {
if ( view == <unk> ) {
( ( <unk> ) activity ) . <unk> ( center ) ;
} else if ( view == <unk> ) {
<unk> ( ) ;
} else {
onBackPressed ( ) ;
}
}
}
private void <unk> ( ) {
if ( Util . prefs . contains ( " ) ) {
progressDialog = ProgressDialog . show ( getContext ( ) , " , getContext ( ) . getText ( R . string . <unk> ) ) ;
RequestManager <unk> = activity . <unk> ( ) ;
<unk> . <unk> (
new <unk> (
<unk> . getId ( ) ,
venue . getID ( ) ,
<unk> ,
new RequestListener < Void > ( ) {
public void onComplete ( Object result ) {
Util . showToast ( getContext ( ) . getText ( R . string . <unk> ) , getContext ( ) ) ;
progressDialog . dismiss ( ) ;
Util . uiHandler . post (
new Runnable ( ) {
@Override
public void run ( ) {
<unk> ( ) ;
( ( <unk> ) activity ) . <unk> ( <unk> . <unk> ) ;
activity . setTitle ( R . string . <unk> ) ;
ViewFlipper flipper = ( ( <unk> ) activity ) . <unk> ( ) ;
flipper . setDisplayedChild ( <unk> . <unk> ) ;
}
}
) ;
}
public void onError ( ResultCode resultCode ) {
Util . showToast ( getContext ( ) . getText ( R . string . <unk> ) , getContext ( ) ) ;
progressDialog . dismiss ( ) ;
}
public void onCancel ( ) { }
} ,
( ( <unk> ) activity ) . <unk> ( ) ,
( ( <unk> ) activity ) . <unk> ( )
)
) ;
} else {
Util . showToast ( getResources ( ) . getText ( R . string . <unk> ) , getContext ( ) ) ;
}
}
private void <unk> ( ) {
venue = null ;
<unk> . <unk> ( ) ;
<unk> . setVisibility ( View . GONE ) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
<unk> . setVisibility ( View . VISIBLE ) ;
<unk> . setVisibility ( View . GONE ) ;
}
}
) ;
}
@Override
public void onBackPressed ( ) {
<unk> <unk> = ( <unk> ) activity ;
if ( ! <unk> . <unk> ( ) . <unk> ( ) ) {
if ( <unk> . <unk> ( ) == <unk> . <unk> ) {
<unk> . <unk> ( <unk> . <unk> ) ;
<unk> . setTitle ( R . string . <unk> ) ;
<unk> . <unk> ( ) . setDisplayedChild ( <unk> . <unk> ) ;
} else {
<unk> . <unk> ( <unk> . <unk> ) ;
<unk> . setTitle ( R . string . <unk> ) ;
<unk> ( ) ;
<unk> . <unk> ( ) . setDisplayedChild ( <unk> . <unk> ) ;
}
}
}
}
package com . <unk> . <unk> ;
import java . io . IOException ;
import com . google . android . <unk> . <unk> ;
import com . <unk> . <unk> . request . RequestListener ;
import com . <unk> . <unk> . request . RequestManager ;
import com . <unk> . <unk> . request . Request . ResultCode ;
import com . <unk> . <unk> . request . <unk> ;
import android . app . Notification ;
import android . app . NotificationManager ;
import android . app . PendingIntent ;
import android . content . Context ;
import android . content . Intent ;
import android . content . SharedPreferences ;
import android . os . Bundle ;
import android . preference . PreferenceManager ;
import android . util . Log ;
public class C2DMReceiver extends <unk> {
public static final String USERNAME = " ;
private static final int <unk> = R . string . <unk> ;
private static final int <unk> = R . string . <unk> ;
private NotificationManager notificationManager ;
private boolean <unk> = true ;
private <unk> <unk> ;
public C2DMReceiver ( ) {
super ( USERNAME ) ;
}
@Override
public void onCreate ( ) {
super . onCreate ( ) ;
notificationManager = ( NotificationManager ) getSystemService ( NOTIFICATION_SERVICE ) ;
try {
<unk> = new <unk> ( this ) ;
<unk> . setSmallIcon ( R . drawable . ic_launcher ) ;
<unk> . setAutoCancel ( true ) ;
<unk> . setDefaults ( Notification . DEFAULT_ALL ) ;
} catch ( Exception e ) {
<unk> = false ;
}
}
@Override
public void onRegistered ( Context context , String registrationId ) throws IOException {
Util . prefs = PreferenceManager . getDefaultSharedPreferences ( context ) ;
Util . <unk> ( context . getResources ( ) . openRawResource ( R . raw . <unk> ) ) ;
RequestManager <unk> = new RequestManager ( null ) ;
final <unk> <unk> = new <unk> ( ) ;
<unk> . <unk> ( ) ;
final SharedPreferences . Editor editor = Util . prefs . edit ( ) ;
editor . putString ( " , registrationId ) ;
editor . commit ( ) ;
<unk> . <unk> (
new <unk> (
registrationId ,
<unk> ,
new RequestListener < Void > ( ) {
public void onComplete ( Object result ) {
editor . putBoolean ( " , true ) ;
editor . remove ( " ) ;
editor . commit ( ) ;
}
public void onError ( ResultCode resultCode ) { }
public void onCancel ( ) { }
} ,
null ,
<unk>
)
) ;
}
@Override
protected void onMessage ( Context context , Intent intent ) {
Log . d ( " , " ) ;
Log . d ( " , intent . getExtras ( ) . getString ( " ) ) ;
Bundle extras = intent . getExtras ( ) ;
if ( extras != null ) {
String payload = ( String ) extras . get ( " ) ;
String [ ] split = payload . split ( " ) ;
String action = split [ <num> ] ;
if ( action . equals ( " ) ) {
int <unk> = Integer . valueOf ( split [ <num> ] ) ;
String <unk> = split [ <num> ] ;
Intent launchIntent = new Intent ( context , <unk> . class ) ;
launchIntent . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK | Intent . <unk> ) ;
launchIntent . putExtra ( " , <unk> ) ;
launchIntent . putExtra ( " , <unk> ) ;
PendingIntent pendingIntent = PendingIntent . getActivity (
this , <num> , launchIntent , <num> ) ;
Notification notification = buildNotification (
getText ( R . string . <unk> ) ,
getText ( R . string . <unk> ) ,
pendingIntent
) ;
notificationManager . notify ( <unk> , notification ) ;
} else {
boolean response = split [ <num> ] . equals ( " ) ;
PendingIntent pendingIntent = PendingIntent . getActivity (
this , <num> , new Intent ( ) , <num> ) ;
Notification notification = buildNotification (
getText ( R . string . <unk> ) ,
getText ( response ? R . string . <unk> : R . string . <unk> ) ,
pendingIntent
) ;
notificationManager . notify ( <unk> , notification ) ;
}
}
}
private Notification buildNotification ( CharSequence title , CharSequence text , PendingIntent contentIntent ) {
if ( <unk> ) {
<unk> . setTicker ( title ) ;
<unk> . setContentTitle ( title ) ;
<unk> . setContentText ( text ) ;
<unk> . setContentIntent ( contentIntent ) ;
return ( Notification ) <unk> . getNotification ( ) ;
}
Notification notification = new Notification ( R . drawable . ic_launcher ,
title , System . currentTimeMillis ( ) ) ;
notification . setLatestEventInfo ( this , title , text , contentIntent ) ;
notification . defaults = Notification . DEFAULT_ALL ;
notification . flags = Notification . FLAG_AUTO_CANCEL ;
return notification ;
}
@Override
public void onError ( Context context , String errorId ) {
Log . d ( " , " ) ;
}
}
package com . <unk> . <unk> . request ;
import com . <unk> . <unk> . request . Request . ResultCode ;
public interface RequestListener < ReturnType > {
public void onComplete ( final Object result ) ;
public void onError ( final ResultCode resultCode ) ;
public void onCancel ( ) ;
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import java . util . Iterator ;
import com . facebook . android . Facebook ;
import com . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
private String <unk> ;
public <unk> ( String <unk> , RequestManager manager ,
RequestListener < Void > listener , Facebook facebook ,
<unk> <unk> ) {
super ( manager , listener , facebook , <unk> ) ;
this . <unk> = <unk> ;
}
@Override
public <unk> < Void > execute ( ) {
return <unk> . <unk> ( <unk> ) ;
}
@Override
public void <unk> ( Deque < Request > <unk> ) {
<unk> ( <unk> ) ;
}
@Override
public void onError ( Deque < Request > <unk> ) {
if ( retries < <unk> ) {
try {
Thread . sleep ( ( long ) ( <num> * Math . pow ( <num> , retries ) ) ) ;
} catch ( InterruptedException e ) { }
retries ++ ;
} else {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request == this ) {
itr . remove ( ) ;
} else if ( request instanceof <unk> ) {
itr . remove ( ) ;
request . listener . onError ( ResultCode . ERROR ) ;
}
}
}
listener . onError ( ResultCode . ERROR ) ;
}
}
@Override
public void onCancel ( Deque < Request > <unk> ) { }
@Override
public void <unk> ( Deque < Request > <unk> ) {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request instanceof <unk> ) {
return ;
}
}
<unk> . addLast ( this ) ;
}
}
}
package com . <unk> . <unk> ;
import java . lang . reflect . Constructor ;
import java . lang . reflect . Method ;
import android . app . PendingIntent ;
import android . content . Context ;
public class <unk> {
private Class < ? > <unk> ;
private Object <unk> ;
public <unk> ( Context context ) throws Exception {
<unk> = Class . forName ( " ) ;
Constructor < ? > constructor = <unk> . getConstructor ( new Class [ ] { Context . class } ) ;
<unk> = constructor . newInstance ( context ) ;
}
public Object setSmallIcon ( int icon ) {
try {
Method method = <unk> . getMethod ( " , new Class [ ] { Integer . TYPE } ) ;
return method . invoke ( <unk> , new Integer ( icon ) ) ;
} catch ( Exception e ) {
return null ;
}
}
public Object setAutoCancel ( boolean autoCancel ) {
try {
Method method = <unk> . getMethod ( " , new Class [ ] { Boolean . TYPE } ) ;
return method . invoke ( <unk> , new Boolean ( autoCancel ) ) ;
} catch ( Exception e ) {
return null ;
}
}
public Object setDefaults ( int defaults ) {
try {
Method method = <unk> . getMethod ( " , new Class [ ] { Integer . TYPE } ) ;
return method . invoke ( <unk> , new Integer ( defaults ) ) ;
} catch ( Exception e ) {
return null ;
}
}
public Object setTicker ( CharSequence tickerText ) {
try {
Method method = <unk> . getMethod ( " , new Class [ ] { CharSequence . class } ) ;
return method . invoke ( <unk> , tickerText ) ;
} catch ( Exception e ) {
return null ;
}
}
public Object setContentTitle ( CharSequence title ) {
try {
Method method = <unk> . getMethod ( " , new Class [ ] { CharSequence . class } ) ;
return method . invoke ( <unk> , title ) ;
} catch ( Exception e ) {
return null ;
}
}
public Object setContentText ( CharSequence text ) {
try {
Method method = <unk> . getMethod ( " , new Class [ ] { CharSequence . class } ) ;
return method . invoke ( <unk> , text ) ;
} catch ( Exception e ) {
return null ;
}
}
public Object setContentIntent ( PendingIntent intent ) {
try {
Method method = <unk> . getMethod ( " , new Class [ ] { PendingIntent . class } ) ;
return method . invoke ( <unk> , intent ) ;
} catch ( Exception e ) {
return null ;
}
}
public Object getNotification ( ) {
try {
Method method = <unk> . getMethod ( " ) ;
return method . invoke ( <unk> ) ;
} catch ( Exception e ) {
return null ;
}
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import java . util . Iterator ;
import com . facebook . android . Facebook ;
import com . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
private int <unk> ;
private String <unk> ;
public <unk> ( int <unk> , String <unk> , RequestManager manager ,
RequestListener < Void > listener , Facebook facebook ,
<unk> <unk> ) {
super ( manager , listener , facebook , <unk> ) ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
@Override
public <unk> < Void > execute ( ) {
return <unk> . <unk> ( <unk> , <unk> ) ;
}
@Override
protected void <unk> ( Deque < Request > <unk> ) {
<unk> ( <unk> ) ;
}
@Override
protected void onError ( Deque < Request > <unk> ) {
if ( retries < <unk> ) {
try {
Thread . sleep ( ( long ) ( <num> * Math . pow ( <num> , retries ) ) ) ;
} catch ( InterruptedException e ) { }
retries ++ ;
} else {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
if ( itr . next ( ) == this ) {
itr . remove ( ) ;
break ;
}
}
}
listener . onError ( ResultCode . ERROR ) ;
}
}
@Override
protected void onCancel ( Deque < Request > <unk> ) { }
@Override
public void <unk> ( Deque < Request > <unk> ) {
synchronized ( <unk> ) {
<unk> . addLast ( this ) ;
}
}
}
package com . <unk> . <unk> ;
import java . util . List ;
import android . content . Context ;
import android . location . Location ;
import android . util . AttributeSet ;
import android . view . View ;
import android . widget . AdapterView ;
import android . widget . AdapterView . OnItemClickListener ;
import com . <unk> . widget . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . request . <unk> ;
import com . <unk> . <unk> . request . Request . ResultCode ;
import com . <unk> . <unk> . request . RequestListener ;
import com . <unk> . <unk> . request . RequestManager ;
public class <unk> extends <unk> implements OnItemClickListener ,
<unk> , <unk> , <unk> {
private <unk> <unk> ;
private <unk> adapter ;
private View <unk> ;
public <unk> ( Context context ) {
super ( context ) ;
}
public <unk> ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
}
public <unk> ( Context context , AttributeSet attrs , int defStyle ) {
super ( context , attrs , defStyle ) ;
}
public void setUp ( final <unk> <unk> , <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> . findViewById ( R . id . <unk> ) ;
adapter = new <unk> ( <unk> , <unk> ) ;
setAdapter ( adapter ) ;
<unk> ( <unk> . getLayoutInflater ( ) . inflate ( R . layout . <unk> , null ) ) ;
<unk> ( <unk> . findViewById ( R . id . <unk> ) ) ;
<unk> ( ) ;
setOnItemClickListener ( this ) ;
}
public void <unk> ( ) {
doUpdate ( ) ;
}
public void <unk> ( Location <unk> ) {
if ( <unk> . <unk> ( ) == <unk> . <unk> ) {
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
if ( <unk> != null ) {
<unk> . setVisibility ( View . GONE ) ;
}
}
}
) ;
doUpdate ( ) ;
}
}
public void <unk> ( List < User > friends ) {
if ( <unk> . <unk> ( ) == <unk> . <unk> ) {
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
if ( <unk> != null ) {
<unk> . setVisibility ( View . GONE ) ;
}
}
}
) ;
doUpdate ( ) ;
}
}
private void doUpdate ( ) {
RequestManager <unk> = <unk> . <unk> ( ) ;
Location center = <unk> . <unk> ( ) . <unk> ( ) ;
if ( center != null ) {
<unk> . <unk> (
new <unk> (
center ,
<unk> . <unk> ( ) ,
<unk> ,
new RequestListener < List < <unk> >> ( ) {
@SuppressWarnings("unchecked")
public void onComplete ( Object result ) {
List < <unk> > <unk> = ( List < <unk> > ) result ;
if ( <unk> . getCurrentLocation ( ) != null ) {
<unk> . <unk> ( <unk> , <unk> . getCurrentLocation ( ) ) ;
}
adapter . <unk> ( <unk> ) ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
<unk> ( ) ;
}
}
) ;
}
public void onError ( ResultCode resultCode ) {
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
<unk> ( ) ;
if ( <unk> != null ) {
<unk> . setVisibility ( View . VISIBLE ) ;
}
}
}
) ;
}
public void onCancel ( ) { }
}
)
) ;
}
}
public void onItemClick ( AdapterView < ? > adapterView , View view , int position , long id ) {
if ( view != <unk> ( ) && ! <unk> . <unk> ( ) . <unk> ( ) ) {
<unk> venue = ( <unk> ) getItemAtPosition ( position ) ;
<unk> . <unk> ( ) . <unk> ( venue ) ;
<unk> . <unk> ( <unk> . <unk> ) ;
<unk> . setTitle ( " + venue . getName ( ) ) ;
<unk> . <unk> ( ) . setDisplayedChild ( <unk> . <unk> ) ;
}
}
public void onBackPressed ( ) {
if ( ! <unk> . <unk> ( ) . <unk> ( ) ) {
<unk> . <unk> ( <unk> . <unk> ) ;
adapter . clear ( ) ;
<unk> ( ) ;
<unk> . setVisibility ( View . GONE ) ;
<unk> . setTitle ( "
+ <unk> . <unk> ( ) . getFriend ( ) . getName ( ) ) ;
<unk> . <unk> ( ) . setDisplayedChild ( <unk> . <unk> ) ;
}
}
}
package com . <unk> . <unk> ;
import java . net . <unk> ;
import java . net . <unk> ;
import java . net . <unk> ;
import java . net . <unk> ;
import java . net . URI ;
import java . net . URISyntaxException ;
import java . util . ArrayList ;
import java . util . List ;
import org . json . JSONArray ;
import org . json . JSONObject ;
import android . content . SharedPreferences ;
import android . location . Location ;
import android . util . Log ;
import com . <unk> . <unk> . request . Request . <unk> ;
import com . <unk> . <unk> . request . Request . ResultCode ;
public class <unk> {
private static final String <unk> = " ;
public static final int <unk> = <num> ;
public <unk> ( ) {
<unk> manager = new <unk> ( ) ;
manager . <unk> ( <unk> . <unk> ) ;
<unk> . setDefault ( manager ) ;
}
public <unk> < Void > auth ( String accessToken ) {
String url = <unk> + "
+ " + accessToken ;
try {
String response = Util . getURL ( url , true ) ;
JSONObject jsonObject = new JSONObject ( response ) ;
if ( jsonObject . getInt ( " ) == <num> ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . <unk> ) ;
} else {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . SUCCESS ) ;
}
} catch ( Exception e ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . ERROR ) ;
}
}
public <unk> < List < User >> <unk> ( ) {
String url = <unk> + " ;
try {
String response = Util . getURL ( url , true ) ;
JSONObject jsonObject = new JSONObject ( response ) ;
if ( jsonObject . getInt ( " ) == <num> ) {
Log . d ( " , " ) ;
return new <unk> < List < User >> ( null , ResultCode . <unk> ) ;
} else {
JSONObject <unk> = jsonObject . getJSONObject ( " ) ;
JSONArray friends = jsonObject . getJSONArray ( " ) ;
List < User > toReturn = new ArrayList < User > ( friends . length ( ) + <num> ) ;
toReturn . add (
new User (
<unk> . getInt ( " ) ,
<unk> . getString ( " ) ,
<unk> . getString ( " )
)
) ;
for ( int i = <num> ; i < friends . length ( ) ; i ++ ) {
JSONObject friend = friends . getJSONObject ( i ) ;
toReturn . add (
new User (
friend . getInt ( " ) ,
friend . getDouble ( " ) ,
friend . getDouble ( " ) ,
friend . getLong ( " ) ,
friend . getString ( " ) ,
friend . getString ( " )
)
) ;
}
Log . d ( " , " ) ;
return new <unk> < List < User >> ( toReturn , ResultCode . SUCCESS ) ;
}
} catch ( Exception e ) {
Log . d ( " , " ) ;
return new <unk> < List < User >> ( null , ResultCode . ERROR ) ;
}
}
public <unk> < List < User >> fetch ( ) {
String url = <unk> + " ;
try {
String response = Util . getURL ( url , true ) ;
JSONObject jsonObject = new JSONObject ( response ) ;
if ( jsonObject . getInt ( " ) == <num> ) {
Log . d ( " , " ) ;
return new <unk> < List < User >> ( null , ResultCode . <unk> ) ;
} else {
JSONArray friends = jsonObject . getJSONArray ( " ) ;
List < User > toReturn = new ArrayList < User > ( friends . length ( ) ) ;
for ( int i = <num> ; i < friends . length ( ) ; i ++ ) {
JSONObject friend = friends . getJSONObject ( i ) ;
toReturn . add (
new User (
friend . getInt ( " ) ,
friend . getDouble ( " ) ,
friend . getDouble ( " ) ,
friend . getLong ( " )
)
) ;
}
Log . d ( " , " ) ;
return new <unk> < List < User >> ( toReturn , ResultCode . SUCCESS ) ;
}
} catch ( Exception e ) {
Log . d ( " , " ) ;
return new <unk> < List < User >> ( null , ResultCode . ERROR ) ;
}
}
public <unk> < Void > updateLocation ( Location location ) {
String url = <unk> + " + "
+ location . getLatitude ( ) + " + location . getLongitude ( ) ;
try {
String response = Util . getURL ( url , true ) ;
JSONObject jsonObject = new JSONObject ( response ) ;
if ( jsonObject . getInt ( " ) == <num> ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . <unk> ) ;
} else {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . SUCCESS ) ;
}
} catch ( Exception e ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . ERROR ) ;
}
}
public <unk> < Void > <unk> ( String <unk> ) {
String url = <unk> + "
+ " + <unk> ;
try {
String response = Util . getURL ( url , true ) ;
JSONObject jsonObject = new JSONObject ( response ) ;
if ( jsonObject . getInt ( " ) == <num> ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . <unk> ) ;
} else {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . SUCCESS ) ;
}
} catch ( Exception e ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . ERROR ) ;
}
}
public <unk> < Void > <unk> ( int <unk> , String <unk> ) {
String url = <unk> + "
+ " + <unk> + " + <unk> ;
try {
String response = Util . getURL ( url , true ) ;
JSONObject jsonObject = new JSONObject ( response ) ;
if ( jsonObject . getInt ( " ) == <num> ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . <unk> ) ;
} else if ( jsonObject . getInt ( " ) == <num> ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . ERROR ) ;
} else {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . SUCCESS ) ;
}
} catch ( Exception e ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . ERROR ) ;
}
}
public <unk> < Void > respond ( int <unk> , boolean response ) {
String url = <unk> + "
+ " + <unk> + " + ( response ? <num> : <num> ) ;
try {
String <unk> = Util . getURL ( url , true ) ;
JSONObject jsonObject = new JSONObject ( <unk> ) ;
if ( jsonObject . getInt ( " ) == <num> ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . <unk> ) ;
} else if ( jsonObject . getInt ( " ) == <num> ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . ERROR ) ;
} else {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . SUCCESS ) ;
}
} catch ( Exception e ) {
Log . d ( " , " ) ;
return new <unk> < Void > ( null , ResultCode . ERROR ) ;
}
}
public void <unk> ( ) {
<unk> mgr = ( <unk> ) <unk> . getDefault ( ) ;
List < <unk> > <unk> = null ;
try {
<unk> = mgr . getCookieStore ( ) . get ( new URI ( <unk> ) ) ;
} catch ( URISyntaxException e ) { }
if ( <unk> . size ( ) == <num> ) {
return ;
}
<unk> cookie = <unk> . get ( <num> ) ;
SharedPreferences . Editor editor = Util . prefs . edit ( ) ;
editor . putString ( " , cookie . getName ( ) ) ;
editor . putString ( " , cookie . getValue ( ) ) ;
editor . putString ( " , cookie . getDomain ( ) ) ;
editor . putString ( " , cookie . getPath ( ) ) ;
editor . putLong ( " , cookie . getMaxAge ( ) ) ;
editor . putInt ( " , cookie . getVersion ( ) ) ;
editor . commit ( ) ;
}
public void <unk> ( ) {
if ( Util . prefs . contains ( " ) ) {
<unk> cookie = new <unk> (
Util . prefs . getString ( " , " ) ,
Util . prefs . getString ( " , " )
) ;
cookie . setDomain ( Util . prefs . getString ( " , " ) ) ;
cookie . setPath ( Util . prefs . getString ( " , " ) ) ;
cookie . <unk> ( Util . prefs . getLong ( " , <num> ) ) ;
cookie . setVersion ( Util . prefs . getInt ( " , <num> ) ) ;
<unk> mgr = ( <unk> ) <unk> . getDefault ( ) ;
try {
mgr . getCookieStore ( ) . add ( new URI ( <unk> ) , cookie ) ;
} catch ( URISyntaxException e ) { }
}
}
public void <unk> ( ) {
SharedPreferences . Editor editor = Util . prefs . edit ( ) ;
editor . remove ( " ) ;
editor . remove ( " ) ;
editor . remove ( " ) ;
editor . remove ( " ) ;
editor . remove ( " ) ;
editor . remove ( " ) ;
editor . commit ( ) ;
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import com . facebook . android . Facebook ;
import com . <unk> . <unk> . <unk> ;
public abstract class <unk> extends Request {
protected static final int <unk> = <num> ;
protected Facebook facebook ;
protected <unk> <unk> ;
protected <unk> ( RequestManager manager ,
RequestListener < ? > listener , Facebook facebook ,
<unk> <unk> ) {
super ( manager , listener ) ;
this . facebook = facebook ;
this . <unk> = <unk> ;
}
protected void <unk> ( Deque < Request > <unk> ) {
synchronized ( <unk> ) {
<unk> . addFirst (
new <unk> (
manager ,
new RequestListener < Void > ( ) {
public void onComplete ( Object users ) { }
public void onError ( ResultCode resultCode ) { }
public void onCancel ( ) { }
} ,
facebook ,
<unk>
)
) ;
}
}
}
package com . <unk> . <unk> ;
import java . util . HashMap ;
import java . util . HashSet ;
import java . util . LinkedList ;
import java . util . List ;
import java . util . Queue ;
import android . graphics . Bitmap ;
import android . os . AsyncTask ;
public class <unk> {
private HashMap < String , Bitmap > images = new HashMap < String , Bitmap > ( ) ;
private HashSet < String > <unk> = new HashSet < String > ( ) ;
private Queue < <unk> > queue = new LinkedList < <unk> > ( ) ;
private List < <unk> > listeners = new LinkedList < <unk> > ( ) ;
private int <unk> = <num> ;
private final static int <unk> = <num> ;
public void addListener ( <unk> listener ) {
listeners . add ( listener ) ;
}
public void reset ( ) {
images . clear ( ) ;
<unk> . clear ( ) ;
queue . clear ( ) ;
listeners . clear ( ) ;
<unk> = <num> ;
}
public Bitmap getImage ( String url , boolean crop ) {
Bitmap image = images . get ( url ) ;
if ( image != null ) {
return image ;
}
if ( ! <unk> . contains ( url ) ) {
<unk> . add ( url ) ;
if ( <unk> >= <unk> ) {
queue . add ( new <unk> ( url , crop ) ) ;
} else {
<unk> ++ ;
new <unk> ( ) . execute ( url , crop ) ;
}
}
return null ;
}
public void <unk> ( ) {
if ( ! queue . isEmpty ( ) ) {
<unk> item = queue . remove ( ) ;
new <unk> ( ) . execute ( item . url , item . crop ) ;
}
}
private class <unk> extends AsyncTask < Object , Void , Bitmap > {
private String url ;
private boolean crop ;
@Override
protected Bitmap doInBackground ( Object . . . params ) {
this . url = ( String ) params [ <num> ] ;
this . crop = ( Boolean ) params [ <num> ] ;
Bitmap image = Util . getBitmap ( this . url ) ;
if ( image != null ) {
if ( this . crop ) {
image = Util . <unk> ( image , <num> , <num> ) ;
}
}
return image ;
}
@Override
protected void onPostExecute ( Bitmap result ) {
<unk>  ;
if ( result != null ) {
images . put ( url , result ) ;
for ( <unk> listener : listeners ) {
listener . <unk> ( ) ;
}
<unk> ( ) ;
}
}
}
private static class <unk> {
public String url ;
public boolean crop ;
public <unk> ( String url , boolean crop ) {
this . url = url ;
this . crop = crop ;
}
}
public static interface <unk> {
public void <unk> ( ) ;
}
}
package com . <unk> . <unk> ;
import java . util . Date ;
import java . util . List ;
import java . util . Timer ;
import java . util . TimerTask ;
import com . google . android . maps . GeoPoint ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . request . RequestListener ;
import com . <unk> . <unk> . request . <unk> ;
import com . <unk> . <unk> . request . <unk> ;
import com . <unk> . <unk> . request . Request . ResultCode ;
import android . accounts . Account ;
import android . accounts . AccountManager ;
import android . location . Location ;
import android . os . Bundle ;
import android . widget . ViewFlipper ;
public class <unk> extends <unk> {
private ViewFlipper viewFlipper ;
private <unk> friendList ;
private <unk> <unk> ;
private volatile Timer <unk> = null ;
private volatile <unk> <unk> = <unk> . <unk> ;
public enum <unk> {
<unk> ,
<unk> ,
<unk> ,
<unk>
} ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
private static final int <unk> = <num> ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
<unk> . cancelAlarm ( this ) ;
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
setTitle ( R . string . <unk> ) ;
<unk> ( ) ;
viewFlipper = ( ViewFlipper ) findViewById ( R . id . flipper ) ;
friendList = ( <unk> ) findViewById ( R . id . <unk> ) ;
friendList . setUp ( this , <unk> ) ;
mapView = ( <unk> ) findViewById ( R . id . map_view ) ;
( ( <unk> ) mapView ) . setUp ( this , <unk> ) ;
<unk> = ( <unk> ) findViewById ( R . id . <unk> ) ;
<unk> . setUp ( this , <unk> ) ;
}
private void <unk> ( ) {
Account [ ] accounts = AccountManager . get ( this ) . getAccountsByType ( " ) ;
if ( accounts . length == <num> ) {
Util . showToast ( getText ( R . string . <unk> ) , this ) ;
finish ( ) ;
}
}
public void <unk> ( ) {
if ( <unk> == null ) {
<unk> = new Timer ( ) ;
TimerTask task = new TimerTask ( ) {
@Override
public void run ( ) {
if ( friendList . <unk> ( ) ) {
<unk> . <unk> (
new <unk> (
<unk> ,
new RequestListener < List < User >> ( ) {
@SuppressWarnings("unchecked")
public void onComplete ( Object result ) {
final List < User > friends = ( List < User > ) result ;
new Thread (
new Runnable ( ) {
public void run ( ) {
friendList . <unk> ( friends ) ;
( ( <unk> ) mapView ) . <unk> ( friends ) ;
<unk> . <unk> ( friends ) ;
}
}
) . start ( ) ;
}
public void onError ( ResultCode resultCode ) {
<unk> ( ) ;
}
public void onCancel ( ) {
<unk> ( ) ;
}
} ,
facebook ,
<unk>
)
) ;
}
}
} ;
<unk> . scheduleAtFixedRate ( task , new Date ( ) , <num> / <unk> ) ;
}
}
public void <unk> ( ) {
if ( <unk> != null ) {
<unk> . cancel ( ) ;
<unk> = null ;
}
}
@Override
public void <unk> ( final Location newLocation ) {
currentLocation = newLocation ;
friendList . <unk> ( currentLocation ) ;
mapView . <unk> ( currentLocation ) ;
<unk> . <unk> ( currentLocation ) ;
<unk> . <unk> (
new <unk> (
currentLocation ,
<unk> ,
new RequestListener < Void > ( ) {
public void onComplete ( Object result ) { }
public void onError ( ResultCode resultCode ) { }
public void onCancel ( ) { }
} ,
facebook ,
<unk>
)
) ;
}
public void <unk> ( User user ) {
<unk> = <unk> . <unk> ;
setTitle ( " + user . getName ( ) ) ;
mapView . updateUser ( user , true ) ;
viewFlipper . setDisplayedChild ( <unk> ) ;
}
@Override
public void onBackPressed ( ) {
switch ( <unk> ) {
case <unk> :
friendList . onBackPressed ( ) ;
break ;
case <unk> :
mapView . onBackPressed ( ) ;
break ;
case <unk> :
<unk> . onBackPressed ( ) ;
break ;
case <unk> :
mapView . onBackPressed ( ) ;
}
}
public void <unk> ( GeoPoint center ) {
<unk> = <unk> . <unk> ;
setTitle ( R . string . <unk> ) ;
<unk> . <unk> ( ) ;
viewFlipper . setDisplayedChild ( <unk> ) ;
}
public ViewFlipper <unk> ( ) {
return viewFlipper ;
}
public <unk> <unk> ( ) {
return ( <unk> ) mapView ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( <unk> <unk> ) {
<unk> = <unk> ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
@Override
public void onResume ( ) {
<unk> . cancelAlarm ( this ) ;
if ( friendList . <unk> ( ) ) {
<unk> ( ) ;
}
super . onResume ( ) ;
}
@Override
public void onPause ( ) {
<unk> ( ) ;
super . onPause ( ) ;
}
public static interface <unk> {
public void <unk> ( List < User > friends ) ;
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import java . util . LinkedList ;
import android . content . Context ;
import android . util . Log ;
import com . <unk> . <unk> . request . Request . <unk> ;
public class RequestManager implements Runnable {
private Deque < Request > queue ;
private boolean running = false ;
private Object <unk> = new Object ( ) ;
private volatile boolean abort = false ;
private volatile Context context ;
public RequestManager ( Context context ) {
this . queue = new LinkedList < Request > ( ) ;
this . context = context ;
}
public void <unk> ( Request toAdd ) {
<unk> ( toAdd ) ;
<unk> ( ) ;
}
public void <unk> ( Request toAdd ) {
toAdd . <unk> ( queue ) ;
}
public void <unk> ( ) {
synchronized ( <unk> ) {
if ( ! running ) {
running = true ;
new Thread ( this ) . start ( ) ;
}
}
}
public void run ( ) {
Request request ;
while ( true ) {
if ( abort ) {
Log . d ( " , " ) ;
return ;
}
synchronized ( queue ) {
request = queue . peek ( ) ;
}
if ( request != null ) {
Log . d ( " , " + request . getClass ( ) . getSimpleName ( ) ) ;
<unk> < ? > result = request . execute ( ) ;
if ( abort ) {
Log . d ( " , " + request . getClass ( ) . getSimpleName ( ) ) ;
return ;
}
switch ( result . code ) {
case SUCCESS :
synchronized ( queue ) {
if ( queue . peek ( ) == request ) {
queue . poll ( ) ;
}
}
request . listener . onComplete ( result . result ) ;
break ;
case <unk> :
request . <unk> ( queue ) ;
break ;
case ERROR :
request . onError ( queue ) ;
break ;
case <unk> :
request . onCancel ( queue ) ;
}
} else {
break ;
}
}
synchronized ( <unk> ) {
boolean empty ;
synchronized ( queue ) {
empty = queue . isEmpty ( ) ;
}
if ( ! empty ) {
new Thread ( this ) . start ( ) ;
} else {
running = false ;
}
}
}
public void <unk> ( ) {
abort = true ;
synchronized ( queue ) {
queue . clear ( ) ;
}
}
public Context getContext ( ) {
return context ;
}
public void updateContext ( Context newContext ) {
this . context = newContext ;
}
}
package com . <unk> . <unk> ;
import java . util . List ;
import android . content . Context ;
import android . graphics . Bitmap ;
import android . location . Location ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . ImageView ;
import android . widget . TextView ;
import com . <unk> . widget . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> implements <unk> {
private volatile List < <unk> > <unk> = null ;
private Object <unk> = new Object ( ) ;
private <unk> <unk> ;
private LayoutInflater mInflater ;
public <unk> ( Context context , <unk> <unk> ) {
this . <unk> = <unk> ;
<unk> . addListener ( this ) ;
mInflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ;
}
public boolean isEmpty ( ) {
if ( <unk> == null ) {
return false ;
}
return getCount ( ) == <num> ;
}
public int getCount ( ) {
if ( <unk> == null ) {
return <num> ;
}
return <unk> . size ( ) ;
}
public void clear ( ) {
synchronized ( <unk> ) {
<unk> = null ;
}
}
public Object getItem ( int position ) {
synchronized ( <unk> ) {
return <unk> . get ( position ) ;
}
}
public long getItemId ( int position ) {
return position ;
}
public void <unk> ( List < <unk> > <unk> ) {
this . <unk> = <unk> ;
Util . uiHandler . post (
new Runnable ( ) {
public void run ( ) {
notifyDataSetChanged ( ) ;
}
}
) ;
}
public void <unk> ( final Location currentLocation ) {
if ( <unk> != null ) {
new Thread (
new Runnable ( ) {
public void run ( ) {
synchronized ( <unk> ) {
<unk> . <unk> ( <unk> , currentLocation ) ;
Util . uiHandler . post ( new Runnable ( ) {
public void run ( ) {
notifyDataSetChanged ( ) ;
}
} ) ;
}
}
}
) . start ( ) ;
}
}
@Override
protected void <unk> ( int page ) { }
@Override
protected void <unk> ( View view , int position ,
boolean <unk> ) { }
@Override
public View <unk> ( int position , View convertView , ViewGroup parent ) {
ViewHolder holder = null ;
if ( convertView == null ) {
convertView = mInflater . inflate ( R . layout . <unk> , null ) ;
holder = new ViewHolder ( ) ;
holder . pic = ( ImageView ) convertView . findViewById ( R . id . <unk> ) ;
holder . name = ( TextView ) convertView . findViewById ( R . id . <unk> ) ;
holder . distance = ( TextView ) convertView . findViewById ( R . id . <unk> ) ;
convertView . setTag ( holder ) ;
}
holder = ( ViewHolder ) convertView . getTag ( ) ;
<unk> venue ;
synchronized ( <unk> ) {
venue = <unk> . get ( position ) ;
}
Bitmap image = <unk> . getImage ( venue . getIcon ( ) , false ) ;
if ( image != null ) {
holder . pic . setImageBitmap ( image ) ;
}
holder . name . setText ( venue . getName ( ) ) ;
if ( venue . getDistance ( ) != null ) {
holder . distance . setText ( venue . <unk> ( ) ) ;
}
return convertView ;
}
@Override
public void <unk> ( View header , int position , int alpha ) { }
@Override
public int getPositionForSection ( int section ) {
return <num> ;
}
@Override
public int getSectionForPosition ( int position ) {
return <num> ;
}
@Override
public Object [ ] getSections ( ) {
return null ;
}
public void <unk> ( ) {
Util . uiHandler . post ( new Runnable ( ) {
public void run ( ) {
notifyDataSetChanged ( ) ;
}
} ) ;
}
private static class ViewHolder {
public ImageView pic ;
public TextView name ;
public TextView distance ;
}
}
package com . <unk> . <unk> ;
import java . util . List ;
import android . content . Context ;
import android . location . Location ;
import android . util . AttributeSet ;
import android . util . Log ;
import android . view . View ;
import android . widget . AdapterView ;
import android . widget . AdapterView . OnItemClickListener ;
import com . <unk> . widget . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . request . RequestListener ;
import com . <unk> . <unk> . request . RequestManager ;
import com . <unk> . <unk> . request . <unk> ;
import com . <unk> . <unk> . request . Request . ResultCode ;
public class <unk> extends <unk> implements OnItemClickListener ,
<unk> , <unk> , <unk> {
private <unk> <unk> ;
private volatile boolean <unk> = false ;
private <unk> adapter ;
public <unk> ( Context context ) {
super ( context ) ;
}
public <unk> ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
}
public <unk> ( Context context , AttributeSet attrs , int defStyle ) {
super ( context , attrs , defStyle ) ;
}
public void setUp ( final <unk> <unk> , <unk> <unk> ) {
this . <unk> = <unk> ;
adapter = new <unk> ( <unk> , <unk> ) ;
setAdapter ( adapter ) ;
<unk> ( <unk> . getLayoutInflater ( ) . inflate ( R . layout . <unk> , null ) ) ;
<unk> ( <unk> . getLayoutInflater ( ) . inflate ( R . layout . <unk> , this , false ) ) ;
<unk> ( ) ;
<unk> ( <unk> . findViewById ( R . id . <unk> ) ) ;
setOnItemClickListener ( this ) ;
RequestManager <unk> = <unk> . <unk> ( ) ;
<unk> . <unk> (
new <unk> (
<unk> ,
new RequestListener < List < User >> ( ) {
public void onComplete ( final Object userList ) {
@SuppressWarnings("unchecked")
final List < User > users = ( List < User > ) userList ;
Util . uiHandler . post ( new Runnable ( ) {
public void run ( ) {
<unk> = true ;
<unk> . <unk> ( users . get ( <num> ) ) ;
adapter . <unk> ( users ) ;
if ( <unk> . getCurrentLocation ( ) != null ) {
adapter . <unk> ( <unk> . getCurrentLocation ( ) ) ;
} else {
adapter . notifyDataSetChanged ( ) ;
}
<unk> ( ) ;
<unk> . <unk> ( ) ;
}
} ) ;
}
public void onError ( ResultCode resultCode ) {
Util . uiHandler . post ( new Runnable ( ) {
public void run ( ) {
<unk> ( ) ;
<unk> . findViewById ( R . id . <unk> ) . setVisibility ( View . VISIBLE ) ;
<unk> . <unk> ( ) . <unk> ( ) ;
}
} ) ;
}
public void onCancel ( ) {
Log . d ( " , " ) ;
Util . uiHandler . post ( new Runnable ( ) {
public void run ( ) {
<unk> ( ) ;
<unk> . findViewById ( R . id . <unk> ) . setVisibility ( View . VISIBLE ) ;
<unk> . <unk> ( ) . <unk> ( ) ;
}
} ) ;
}
} ,
<unk> . <unk> ( ) ,
<unk> . <unk> ( )
)
) ;
}
public void <unk> ( Location newLocation ) {
adapter . <unk> ( newLocation ) ;
}
public void <unk> ( List < User > friends ) {
adapter . <unk> ( friends ) ;
if ( <unk> . getCurrentLocation ( ) != null ) {
adapter . <unk> ( <unk> . getCurrentLocation ( ) ) ;
}
}
public boolean <unk> ( ) {
return <unk> ;
}
public void onItemClick ( AdapterView < ? > adapterView , View view , int position , long id ) {
if ( view != <unk> ( ) && ! <unk> . <unk> ( ) . <unk> ( ) ) {
<unk> . <unk> ( ( User ) getItemAtPosition ( position ) ) ;
}
}
public void onBackPressed ( ) {
<unk> . finish ( ) ;
}
}
package com . <unk> . <unk> ;
import java . util . Collections ;
import java . util . Comparator ;
import java . util . Date ;
import java . util . List ;
import com . <unk> . pretty . time . <unk> ;
import android . location . Location ;
public class User {
private int id ;
private Location location ;
private Float distance ;
private Date lastUpdated ;
private String name ;
private String pic ;
public User ( int id , double lat , double lng , long lastUpdated , String name , String pic ) {
this ( id , lat , lng , lastUpdated ) ;
this . name = name ;
this . pic = pic ;
}
public User ( int id , String name , String pic ) {
this . id = id ;
this . location = null ;
this . distance = null ;
this . name = name ;
this . pic = pic ;
}
public User ( int id , double lat , double lng , long lastUpdated ) {
this . id = id ;
this . location = Util . <unk> ( lat , lng ) ;
this . distance = null ;
this . lastUpdated = new Date ( Math . min ( System . currentTimeMillis ( ) , lastUpdated * <num> ) ) ;
}
public void <unk> ( User <unk> ) {
this . location = <unk> . location ;
this . lastUpdated = <unk> . lastUpdated ;
}
public int getId ( ) {
return id ;
}
public Location getLocation ( ) {
return location ;
}
public Date <unk> ( ) {
return lastUpdated ;
}
public String <unk> ( ) {
<unk> p = new <unk> ( ) ;
return p . format ( lastUpdated ) ;
}
public Float getDistance ( ) {
return distance ;
}
public String <unk> ( ) {
return Util . <unk> ( distance ) ;
}
public void <unk> ( Location location ) {
this . distance = location . distanceTo ( this . location ) ;
}
public String getName ( ) {
return name ;
}
public String <unk> ( ) {
return pic ;
}
public static void <unk> ( List < User > list , Location currentLocation ) {
for ( User user : list ) {
if ( user . getLocation ( ) != null ) {
user . <unk> ( currentLocation ) ;
}
}
}
public static void <unk> ( List < User > list ) {
Collections . sort ( list , new Comparator < User > ( ) {
public int compare ( User lhs , User rhs ) {
if ( lhs . getDistance ( ) == rhs . getDistance ( ) ) {
return <num> ;
}
return lhs . getDistance ( ) < rhs . getDistance ( ) ?  <num> : <num> ;
}
} ) ;
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import java . util . Iterator ;
import com . facebook . android . Facebook ;
import com . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
private int <unk> ;
private boolean response ;
public <unk> ( int <unk> , boolean response , RequestManager manager ,
RequestListener < Void > listener , Facebook facebook ,
<unk> <unk> ) {
super ( manager , listener , facebook , <unk> ) ;
this . <unk> = <unk> ;
this . response = response ;
}
@Override
public <unk> < Void > execute ( ) {
return <unk> . respond ( <unk> , response ) ;
}
@Override
protected void <unk> ( Deque < Request > <unk> ) {
<unk> ( <unk> ) ;
}
@Override
protected void onError ( Deque < Request > <unk> ) {
if ( retries < <unk> ) {
try {
Thread . sleep ( ( long ) ( <num> * Math . pow ( <num> , retries ) ) ) ;
} catch ( InterruptedException e ) { }
retries ++ ;
} else {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
if ( itr . next ( ) == this ) {
itr . remove ( ) ;
break ;
}
}
}
listener . onError ( ResultCode . ERROR ) ;
}
}
@Override
protected void onCancel ( Deque < Request > <unk> ) { }
@Override
public void <unk> ( Deque < Request > <unk> ) {
synchronized ( <unk> ) {
<unk> . addLast ( this ) ;
}
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import java . util . Iterator ;
import android . location . Location ;
import com . facebook . android . Facebook ;
import com . <unk> . <unk> . <unk> ;
public class <unk> extends <unk> {
private Location location ;
public <unk> ( Location location , RequestManager manager ,
RequestListener < Void > listener , Facebook facebook ,
<unk> <unk> ) {
super ( manager , listener , facebook , <unk> ) ;
this . location = location ;
}
@Override
public <unk> < Void > execute ( ) {
return <unk> . updateLocation ( location ) ;
}
@Override
public void <unk> ( Deque < Request > <unk> ) {
<unk> ( <unk> ) ;
}
@Override
public void onError ( Deque < Request > <unk> ) {
if ( retries < <unk> ) {
try {
Thread . sleep ( ( long ) ( <num> * Math . pow ( <num> , retries ) ) ) ;
} catch ( InterruptedException e ) { }
retries ++ ;
} else {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
if ( itr . next ( ) == this ) {
itr . remove ( ) ;
break ;
}
}
}
listener . onError ( ResultCode . ERROR ) ;
}
}
@Override
public void onCancel ( Deque < Request > <unk> ) { }
@Override
public void <unk> ( Deque < Request > <unk> ) {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request instanceof <unk> ) {
( ( <unk> ) request ) . updateLocation ( location ) ;
return ;
}
}
<unk> . addLast ( this ) ;
}
}
private void updateLocation ( Location location ) {
this . location = location ;
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import java . util . Iterator ;
import java . util . List ;
import com . facebook . android . Facebook ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . User ;
public class <unk> extends <unk> {
public <unk> ( RequestManager manager ,
RequestListener < List < User >> listener , Facebook facebook ,
<unk> <unk> ) {
super ( manager , listener , facebook , <unk> ) ;
}
@Override
public <unk> < List < User >> execute ( ) {
return <unk> . <unk> ( ) ;
}
@Override
public void <unk> ( Deque < Request > <unk> ) {
<unk> ( <unk> ) ;
}
@Override
public void onError ( Deque < Request > <unk> ) {
if ( retries < <unk> ) {
try {
Thread . sleep ( ( long ) ( <num> * Math . pow ( <num> , retries ) ) ) ;
} catch ( InterruptedException e ) { }
retries ++ ;
} else {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
if ( itr . next ( ) == this ) {
itr . remove ( ) ;
break ;
}
}
}
listener . onError ( ResultCode . ERROR ) ;
}
}
@Override
public void onCancel ( Deque < Request > <unk> ) { }
@Override
public void <unk> ( Deque < Request > <unk> ) {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request instanceof <unk> ) {
return ;
}
}
<unk> . addLast ( this ) ;
}
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
import java . util . Iterator ;
import java . util . List ;
import com . facebook . android . Facebook ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . User ;
public class <unk> extends <unk> {
public <unk> ( RequestManager manager ,
RequestListener < List < User >> listener , Facebook facebook ,
<unk> <unk> ) {
super ( manager , listener , facebook , <unk> ) ;
}
@Override
public <unk> < List < User >> execute ( ) {
return <unk> . fetch ( ) ;
}
@Override
protected void <unk> ( Deque < Request > <unk> ) {
<unk> ( <unk> ) ;
}
@Override
protected void onError ( Deque < Request > <unk> ) {
if ( retries < <unk> ) {
try {
Thread . sleep ( ( long ) ( <num> * Math . pow ( <num> , retries ) ) ) ;
} catch ( InterruptedException e ) { }
retries ++ ;
} else {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
if ( itr . next ( ) == this ) {
itr . remove ( ) ;
break ;
}
}
}
listener . onError ( ResultCode . ERROR ) ;
}
}
@Override
protected void onCancel ( Deque < Request > <unk> ) { }
@Override
public void <unk> ( Deque < Request > <unk> ) {
synchronized ( <unk> ) {
Iterator < Request > itr = <unk> . iterator ( ) ;
while ( itr . hasNext ( ) ) {
Request request = itr . next ( ) ;
if ( request instanceof <unk> ) {
return ;
}
}
<unk> . addLast ( this ) ;
}
}
}
package com . <unk> . <unk> . request ;
import java . util . Deque ;
public abstract class Request {
protected RequestListener < ? > listener ;
protected int retries = <num> ;
protected RequestManager manager ;
protected Request ( RequestManager manager , RequestListener < ? > listener ) {
this . manager = manager ;
this . listener = listener ;
}
public abstract <unk> < ? > execute ( ) ;
protected abstract void <unk> ( Deque < Request > <unk> ) ;
protected abstract void onError ( Deque < Request > <unk> ) ;
protected abstract void onCancel ( Deque < Request > <unk> ) ;
public abstract void <unk> ( Deque < Request > <unk> ) ;
public static class <unk> < Type > {
public final Type result ;
public final ResultCode code ;
public <unk> ( Type result , ResultCode code ) {
this . result = result ;
this . code = code ;
}
}
public static enum ResultCode { SUCCESS , <unk> , ERROR , <unk> } ;
}
package com . <unk> . <unk> ;
import java . util . ArrayList ;
import java . util . Iterator ;
import java . util . List ;
import com . <unk> . widget . <unk> ;
import com . <unk> . <unk> . <unk> . <unk> ;
import android . content . Context ;
import android . graphics . Bitmap ;
import android . location . Location ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . ImageView ;
import android . widget . TextView ;
public class <unk> extends <unk> implements <unk> {
private volatile List < User > friends = null ;
private Object <unk> = new Object ( ) ;
private <unk> <unk> ;
private LayoutInflater mInflater ;
private CharSequence [ ] <unk> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private int <unk> = <num> ;
private int <unk> = <num> ;
private int <unk> = <num> ;
private int <unk> = <num> ;
private static final int <unk> = <num> ;
public <unk> ( Context context , <unk> <unk> ) {
this . <unk> = <unk> ;
<unk> . addListener ( this ) ;
mInflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ;
<unk> = new CharSequence [ ] {
context . getText ( R . string . <unk> ) ,
context . getText ( R . string . <unk> ) ,
context . getText ( R . string . <unk> ) ,
context . getText ( R . string . <unk> ) ,
} ;
}
public boolean isEmpty ( ) {
if ( friends == null ) {
return false ;
}
return getCount ( ) == <num> ;
}
public int getCount ( ) {
if ( friends == null ) {
return <num> ;
}
return friends . size ( ) ;
}
public Object getItem ( int position ) {
synchronized ( <unk> ) {
return friends . get ( position ) ;
}
}
public long getItemId ( int position ) {
return position ;
}
public void <unk> ( ) {
notifyDataSetChanged ( ) ;
}
public void <unk> ( List < User > users ) {
if ( friends == null ) {
this . friends = users ;
} else {
synchronized ( <unk> ) {
List < User > <unk> = new ArrayList < User > ( friends . size ( ) ) ;
<unk> . add ( friends . get ( <num> ) ) ;
for ( User updateUser : users ) {
Iterator < User > itr = friends . iterator ( ) ;
while ( itr . hasNext ( ) ) {
User <unk> = itr . next ( ) ;
if ( <unk> . getId ( ) == updateUser . getId ( ) ) {
<unk> . <unk> ( updateUser ) ;
<unk> . add ( <unk> ) ;
itr . remove ( ) ;
break ;
}
}
}
friends = <unk> ;
}
}
}
public void <unk> ( final Location currentLocation ) {
if ( friends != null ) {
new Thread (
new Runnable ( ) {
public void run ( ) {
synchronized ( <unk> ) {
User . <unk> ( friends , currentLocation ) ;
User . <unk> ( friends . subList ( <num> , friends . size ( ) ) ) ;
<unk> ( ) ;
Util . uiHandler . post ( new Runnable ( ) {
public void run ( ) {
notifyDataSetChanged ( ) ;
}
} ) ;
}
}
}
) . start ( ) ;
}
}
@Override
protected void <unk> ( int page ) {
return ;
}
@Override
protected void <unk> ( View view , int position ,
boolean <unk> ) {
if ( <unk> ) {
view . findViewById ( R . id . <unk> ) . setVisibility ( View . VISIBLE ) ;
TextView <unk> = ( TextView ) view . findViewById ( R . id . <unk> ) ;
<unk> . setText ( ( CharSequence ) getSections ( ) [ getSectionForPosition ( position ) ] ) ;
} else {
view . findViewById ( R . id . <unk> ) . setVisibility ( View . GONE ) ;
}
}
@Override
public View <unk> ( int position , View convertView , ViewGroup parent ) {
ViewHolder holder = null ;
if ( convertView == null ) {
convertView = mInflater . inflate ( R . layout . <unk> , null ) ;
holder = new ViewHolder ( ) ;
holder . pic = ( ImageView ) convertView . findViewById ( R . id . <unk> ) ;
holder . name = ( TextView ) convertView . findViewById ( R . id . name ) ;
holder . distance = ( TextView ) convertView . findViewById ( R . id . distance ) ;
holder . lastUpdated = ( TextView ) convertView . findViewById ( R . id . <unk> ) ;
holder . <unk> = convertView . findViewById ( R . id . <unk> ) ;
convertView . setTag ( holder ) ;
}
holder = ( ViewHolder ) convertView . getTag ( ) ;
User friend ;
synchronized ( <unk> ) {
friend = friends . get ( position ) ;
}
Bitmap image = <unk> . getImage ( friend . <unk> ( ) , true ) ;
if ( image != null ) {
holder . pic . setImageBitmap ( image ) ;
}
holder . name . setText ( friend . getName ( ) ) ;
if ( position == <num> ) {
convertView . setClickable ( false ) ;
holder . lastUpdated . setText ( " ) ;
} else {
holder . lastUpdated . setText ( friend . <unk> ( ) ) ;
}
if ( friend . getDistance ( ) != null ) {
holder . distance . setText ( friend . <unk> ( ) ) ;
} else {
holder . distance . setText ( " ) ;
}
holder . <unk>
. setVisibility ( <unk> ( position ) ? View . VISIBLE : View . GONE ) ;
return convertView ;
}
private boolean <unk> ( int position ) {
if ( getCount ( ) == <num> ) {
return false ;
}
if ( position == <num> ) {
return true ;
}
if ( ! <unk> ( ) ) {
return false ;
}
if ( position == <unk>  <num> ) {
return true ;
}
return false ;
}
private void <unk> ( ) {
<unk> = <num> ;
synchronized ( <unk> ) {
for ( int i = <num> ; i < friends . size ( ) ; i ++ ) {
if ( friends . get ( i ) . getDistance ( ) > <unk> ) {
<unk> = i ;
break ;
}
}
}
}
@Override
public void <unk> ( View header , int position , int alpha ) {
TextView <unk> = ( TextView ) header . findViewById ( R . id . <unk> ) ;
<unk> . setText ( ( CharSequence ) getSections ( ) [ getSectionForPosition ( position ) ] ) ;
}
@Override
public int getPositionForSection ( int section ) {
if ( section == <unk> ) {
return <unk> ;
} else if ( section == <unk> ) {
return <unk> ;
} else if ( section == <unk> ) {
return <unk> ;
} else {
return <unk> ;
}
}
private boolean <unk> ( ) {
if ( friends == null ) {
return true ;
}
synchronized ( <unk> ) {
if ( friends . get ( <num> ) == null ) {
return true ;
}
return friends . get ( <num> ) . getDistance ( ) != null ;
}
}
@Override
public int getSectionForPosition ( int position ) {
if ( position == <num> ) {
return <unk> ;
}
if ( ! <unk> ( ) ) {
return <unk> ;
}
if ( position >= <unk> && <unk> != <num> ) {
return <unk> ;
} else {
return <unk> ;
}
}
@Override
public Object [ ] getSections ( ) {
return <unk> ;
}
@Override
public boolean areAllItemsEnabled ( ) {
return false ;
}
@Override
public boolean isEnabled ( int position ) {
return position != <num> ;
}
private static class ViewHolder {
public ImageView pic ;
public TextView name ;
public TextView distance ;
public TextView lastUpdated ;
public View <unk> ;
}
}
package <unk> . <unk> . <unk> ;
import java . util . List ;
import org . apache . commons . lang . StringUtils ;
import org . apache . commons . lang . builder . EqualsBuilder ;
import org . apache . commons . lang . builder . HashCodeBuilder ;
public class <unk> {
private String email ;
private <unk> <unk> ;
public static <unk> create ( List < String > lines ) {
String <unk> = <unk> ( lines ) ;
if ( <unk> == null ) {
return null ;
}
return new <unk> ( <unk> , getEmail ( lines ) ) ;
}
private static String <unk> ( List < String > lines ) {
for ( String line : lines ) {
if ( <unk> . <unk> ( line ) ) {
return line . trim ( ) ;
}
}
return null ;
}
private static String getEmail ( List < String > lines ) {
for ( String line : lines ) {
if ( <unk> ( line ) ) {
return line . trim ( ) ;
}
}
return null ;
}
private static boolean <unk> ( String line ) {
return line . contains ( " ) ;
}
public <unk> ( String <unk> , String email ) {
this . <unk> = new <unk> ( <unk> ) ;
this . email = email ;
}
public String <unk> ( ) {
return <unk> . getFormatted ( ) ;
}
public String <unk> ( ) {
return <unk> . <unk> ( ) ;
}
public String getEmail ( ) {
return email ;
}
public boolean <unk> ( ) {
return email != null ;
}
@Override
public String toString ( ) {
StringBuilder result = new StringBuilder ( ) ;
result . append ( <unk> ( ) ) ;
result . append ( " ) ;
result . append ( StringUtils . <unk> ( <unk> ( ) , <num> ,  ' ) ) ;
result . append ( " ) ;
result . append ( getEmail ( ) ) ;
return result . toString ( ) ;
}
@Override
public boolean equals ( Object obj ) {
return EqualsBuilder . reflectionEquals ( this , obj ) ;
}
@Override
public int hashCode ( ) {
return HashCodeBuilder . reflectionHashCode ( this ) ;
}
}
package <unk> . <unk> . <unk> ;
import java . util . Map ;
import java . util . Map . Entry ;
public class <unk> {
public static String <unk> ( String string , Map < String , String > <unk> ) {
String result = string ;
for ( Entry < String , String > entry : <unk> . entrySet ( ) ) {
result = result . replaceAll ( " + entry . getKey ( ) + " , entry . getValue ( ) ) ;
}
return result ;
}
}
package <unk> . <unk> . <unk> ;
import static junit . framework . Assert . assertEquals ;
import java . util . HashMap ;
import java . util . Map ;
import org . junit . Test ;
public class <unk> {
@Test
public void <unk> ( ) {
Map < String , String > <unk> = new HashMap < String , String > ( ) ;
<unk> . put ( " , " ) ;
<unk> . put ( " , " ) ;
assertEquals ( " ,
<unk> . <unk> ( " , <unk> ) ) ;
}
}
package <unk> . <unk> . <unk> ;
import static junit . framework . Assert . assertEquals ;
import static junit . framework . Assert . assertFalse ;
import static junit . framework . Assert . assertTrue ;
import org . junit . Test ;
public class <unk> {
@Test
public void <unk> ( ) {
assertTrue ( <unk> . <unk> ( " ) ) ;
assertTrue ( <unk> . <unk> ( " ) ) ;
assertTrue ( <unk> . <unk> ( " ) ) ;
assertTrue ( <unk> . <unk> ( " ) ) ;
assertTrue ( <unk> . <unk> ( " ) ) ;
assertTrue ( <unk> . <unk> ( " ) ) ;
assertTrue ( <unk> . <unk> ( " ) ) ;
assertTrue ( <unk> . <unk> ( " ) ) ;
assertTrue ( <unk> . <unk> ( " ) ) ;
assertTrue ( <unk> . <unk> ( " ) ) ;
}
@Test
public void <unk> ( ) {
assertFalse ( <unk> . <unk> ( " ) ) ;
assertFalse ( <unk> . <unk> ( " ) ) ;
assertFalse ( <unk> . <unk> ( " ) ) ;
assertFalse ( <unk> . <unk> ( " ) ) ;
}
@Test
public void <unk> ( ) {
<unk> <unk> = new <unk> ( " ) ;
assertEquals ( " , <unk> . getFormatted ( ) ) ;
}
@Test
public void <unk> ( ) {
<unk> <unk> = new <unk> ( " ) ;
assertEquals ( " , <unk> . <unk> ( ) ) ;
}
@Test
public void <unk> ( ) {
<unk> <unk> = new <unk> ( " ) ;
assertEquals ( " , <unk> . <unk> ( ) ) ;
}
}
package <unk> . <unk> . <unk> ;
import java . io . File ;
import java . io . IOException ;
import java . util . ArrayList ;
import java . util . Iterator ;
import java . util . List ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . lang . StringUtils ;
public class <unk> {
private Iterator < String > <unk> ;
@SuppressWarnings("unchecked")
public <unk> ( File file ) {
try {
this . <unk> = FileUtils . readLines ( file , " ) . iterator ( ) ;
} catch ( IOException exception ) {
throw new RuntimeException ( ) ;
}
}
public <unk> <unk> ( ) {
if ( ! <unk> . hasNext ( ) ) {
return null ;
}
<unk> result = <unk> . create ( <unk> ( ) ) ;
if ( result == null ) {
return <unk> ( ) ;
}
return result ;
}
private List < String > <unk> ( ) {
List < String > lines = new ArrayList < String > ( ) ;
while ( <unk> . hasNext ( ) ) {
String line = <unk> . next ( ) ;
if ( StringUtils . isBlank ( line ) ) {
return lines ;
}
lines . add ( line ) ;
}
return lines ;
}
}
package <unk> . <unk> . <unk> ;
import java . util . regex . Pattern ;
import org . apache . commons . lang . StringUtils ;
import org . apache . commons . lang . builder . EqualsBuilder ;
import org . apache . commons . lang . builder . HashCodeBuilder ;
public class <unk> {
private static final Pattern <unk> = Pattern . compile ( " ) ;
public static boolean <unk> ( String <unk> ) {
return <unk> . matcher ( <unk> ) . matches ( ) ;
}
private String <unk> ;
public <unk> ( String <unk> ) {
this . <unk> = StringUtils . remove ( <unk> ,  ' ) ;
}
public String getFormatted ( ) {
return <unk> ;
}
public String <unk> ( ) {
StringBuilder result = new StringBuilder ( ) ;
result . append ( " ) ;
result . append ( <unk> ( ) ) ;
result . append ( " ) ;
result . append ( StringUtils . <unk> ( <unk> ( ) , <num> , <num>  ) ) ;
return result . toString ( ) ;
}
private String <unk> ( ) {
return <unk> . substring ( <num> , <unk> ( ) ) ;
}
private String <unk> ( ) {
return <unk> . substring ( <unk> ( ) + <num> ) ;
}
private int <unk> ( ) {
return <unk> . indexOf ( -' ) ;
}
@Override
public boolean equals ( Object obj ) {
return EqualsBuilder . reflectionEquals ( this , obj ) ;
}
@Override
public int hashCode ( ) {
return HashCodeBuilder . reflectionHashCode ( this ) ;
}
}
package <unk> . <unk> . <unk> ;
import static junit . framework . Assert . assertEquals ;
import static junit . framework . Assert . assertNull ;
import java . util . Arrays ;
import org . junit . Test ;
public class <unk> {
@Test
public void <unk> ( ) {
<unk> <unk> = <unk> . create ( Arrays . asList ( " ,
" ,
" ,
" ,
" ,
" ,
" ) ) ;
assertEquals ( " , <unk> . <unk> ( ) ) ;
assertEquals ( " , <unk> . <unk> ( ) ) ;
assertEquals ( " , <unk> . getEmail ( ) ) ;
}
@Test
public void <unk> ( ) {
<unk> <unk> = <unk> . create ( Arrays . asList ( " ,
" ,
" ,
" ) ) ;
assertEquals ( " , <unk> . <unk> ( ) ) ;
assertEquals ( " , <unk> . <unk> ( ) ) ;
assertEquals ( " , <unk> . getEmail ( ) ) ;
}
@Test
public void <unk> ( ) {
<unk> <unk> = <unk> . create ( Arrays . asList ( " ,
" ,
" ,
" ) ) ;
assertEquals ( " , <unk> . <unk> ( ) ) ;
assertEquals ( " , <unk> . <unk> ( ) ) ;
assertNull ( <unk> . getEmail ( ) ) ;
}
@Test
public void <unk> ( ) {
assertNull ( <unk> . create ( Arrays . asList ( " ) ) ) ;
}
}
package <unk> . <unk> . <unk> ;
import java . io . File ;
import java . io . IOException ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . HashSet ;
import java . util . List ;
import java . util . Map ;
import java . util . Set ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . mail . Email ;
import org . apache . commons . mail . <unk> ;
import org . apache . commons . mail . <unk> ;
public class MailSender {
private static final File BASE_DIR = new File ( " ) ;
private static final File <unk> = new File ( BASE_DIR , " ) ;
private static final File <unk> = new File ( BASE_DIR , " ) ;
private static final String <unk> = " ;
private static final String <unk> = " ;
private static final String SUBJECT = " ;
public static void main ( String [ ] args ) throws <unk> {
Set < <unk> > <unk> = <unk> ( ) ;
System . out . println ( " + <unk> . size ( ) ) ;
for ( <unk> <unk> : <unk> ) {
sendMail ( <unk> ) ;
}
}
private static void sendMail ( <unk> <unk> ) throws <unk> {
System . out . println ( " + <unk> . toString ( ) ) ;
<unk> ( <unk> ) . send ( ) ;
}
private static Email <unk> ( <unk> <unk> ) throws <unk> {
Email email = new <unk> ( ) ;
email . setHostName ( " ) ;
email . <unk> ( <num> ) ;
email . setFrom ( <unk> , <unk> ) ;
email . addTo ( " ) ;
email . setSubject ( SUBJECT ) ;
email . setMsg ( buildMessage ( <unk> ) ) ;
return email ;
}
static String buildMessage ( <unk> <unk> ) {
Map < String , String > <unk> = new HashMap < String , String > ( ) ;
<unk> . put ( " , <unk> . <unk> ( ) ) ;
<unk> . put ( " , <unk> . <unk> ( ) ) ;
return <unk> . <unk> ( <unk> ( ) , <unk> ) ;
}
private static String <unk> ( ) {
try {
return FileUtils . readFileToString ( <unk> ) ;
} catch ( IOException exception ) {
throw new RuntimeException ( exception ) ;
}
}
public static Set < <unk> > <unk> ( ) {
Set < <unk> > result = new HashSet < <unk> > ( ) ;
for ( <unk> <unk> : <unk> ( ) ) {
if ( <unk> . <unk> ( ) ) {
result . add ( <unk> ) ;
}
}
return result ;
}
public static List < <unk> > <unk> ( ) {
<unk> <unk> = new <unk> ( <unk> ) ;
List < <unk> > result = new ArrayList < <unk> > ( ) ;
<unk> <unk> = <unk> . <unk> ( ) ;
while ( <unk> != null ) {
result . add ( <unk> ) ;
<unk> = <unk> . <unk> ( ) ;
}
return result ;
}
}
package org . <unk> . hadoop . hive ;
import java . io . IOException ;
import java . util . ArrayList ;
import java . util . Arrays ;
import java . util . HashMap ;
import java . util . LinkedList ;
import java . util . List ;
import java . util . Map ;
import java . util . Properties ;
import java . util . logging . Level ;
import java . util . logging . Logger ;
import org . apache . commons . logging . Log ;
import org . apache . commons . logging . LogFactory ;
import org . apache . hadoop . conf . Configuration ;
import org . apache . hadoop . hive . serde . * ;
import org . apache . hadoop . hive . serde2 . SerDe ;
import org . apache . hadoop . hive . serde2 . SerDeException ;
import org . apache . hadoop . hive . serde2 . io . <unk> ;
import org . apache . hadoop . hive . serde2 . io . <unk> ;
import org . apache . hadoop . hive . serde2 . objectinspector . * ;
import org . apache . hadoop . hive . serde2 . objectinspector . primitive . * ;
import org . apache . hadoop . hive . serde2 . typeinfo . * ;
import org . apache . hadoop . io . * ;
import org . <unk> . Event ;
import org . <unk> . <unk> ;
import org . <unk> . <unk> ;
import org . <unk> . hadoop . <unk> ;
public class <unk> implements SerDe {
public static final Log LOG = LogFactory . getLog ( <unk> . class . getName ( ) ) ;
List < String > columnNames ;
List < TypeInfo > columnTypes ;
TypeInfo rowTypeInfo ;
ObjectInspector rowObjectInspector ;
boolean [ ] columnSortOrderIsDesc ;
ArrayList < Object > row ;
Map < String , List < <unk> >> <unk> =
new HashMap < String , List < <unk> >> ( ) ;
String <unk> ;
@Override
public void initialize ( Configuration conf , Properties tbl )
throws SerDeException {
LOG . debug ( " + <unk> . class . getName ( ) ) ;
String columnNameProperty = tbl . getProperty ( " ) ;
String columnTypeProperty = tbl . getProperty ( " ) ;
if ( columnNameProperty . length ( ) == <num> ) {
columnNames = new ArrayList < String > ( ) ;
} else {
columnNames = Arrays . asList ( columnNameProperty . split ( " ) ) ;
}
if ( columnTypeProperty . length ( ) == <num> ) {
columnTypes = new ArrayList < TypeInfo > ( ) ;
} else {
columnTypes = TypeInfoUtils . getTypeInfosFromTypeString ( columnTypeProperty ) ;
}
assert ( columnNames . size ( ) == columnTypes . size ( ) ) ;
for ( String s : tbl . stringPropertyNames ( ) ) {
LOG . debug ( " + s + " + tbl . getProperty ( s ) ) ;
}
if ( tbl . containsKey ( " ) ) {
<unk> = tbl . getProperty ( " ) ;
}
rowTypeInfo = TypeInfoFactory . getStructTypeInfo ( columnNames , columnTypes ) ;
rowObjectInspector = ( StructObjectInspector ) TypeInfoUtils . <unk> ( rowTypeInfo ) ;
row = new ArrayList < Object > ( columnNames . size ( ) ) ;
for ( int i = <num> ; i < columnNames . size ( ) ; i ++ ) {
row . add ( null ) ;
}
String columnSortOrder = tbl . getProperty ( Constants . SERIALIZATION_SORT_ORDER ) ;
columnSortOrderIsDesc = new boolean [ columnNames . size ( ) ] ;
for ( int i = <num> ; i < columnSortOrderIsDesc . length ; i ++ ) {
columnSortOrderIsDesc [ i ] = ( columnSortOrder != null && columnSortOrder . charAt ( i ) == -' ) ;
}
int <unk> = <num> ;
for ( String columnName : columnNames ) {
String fieldName ;
String <unk> ;
if ( ! tbl . containsKey ( columnName ) && <unk> == null ) {
LOG . warn ( " + columnName
+ " ) ;
continue ;
} else if ( <unk> != null ) {
<unk> = <unk> ;
fieldName = columnName ;
} else {
String <unk> = tbl . getProperty ( columnName ) ;
String [ ] parts = <unk> . split ( " ) ;
if ( parts . length < <num> || ( parts . length == <num> && <unk> != null ) ) {
LOG . warn ( " + <unk> ) ;
continue ;
} else if ( parts . length == <num> && <unk> != null ) {
fieldName = parts [ <num> ] ;
<unk> = <unk> ;
} else {
fieldName = parts [ parts . length  <num> ] ;
<unk> = <unk> . substring ( <num> , <unk> . length ( )  <num>  fieldName . length ( ) ) ;
}
LOG . debug ( " + columnName + " + <unk>
+ " + fieldName ) ;
}
if ( ! <unk> . containsKey ( <unk> ) ) {
<unk> . put ( <unk> , new LinkedList < <unk> > ( ) ) ;
}
<unk> . get ( <unk> ) . add ( new <unk> ( fieldName , <unk> ) ) ;
<unk> ++ ;
}
}
@Override
public Object deserialize ( Writable w ) throws SerDeException {
byte [ ] bytes = null ;
LOG . debug ( " ) ;
Event ev = null ;
try {
if ( w instanceof <unk> ) {
<unk> b = ( <unk> ) w ;
ev = new Event ( b . getBytes ( ) , false , null ) ;
} else if ( w instanceof <unk> ) {
<unk> ew = ( <unk> ) w ;
ev = ew . getEvent ( ) ;
} else {
throw new SerDeException ( getClass ( ) . toString ( )
+ " ) ;
}
LOG . debug ( " + bytes ) ;
} catch ( <unk> ex ) {
throw new SerDeException ( ex ) ;
}
if ( this . <unk> . containsKey ( ev . <unk> ( ) ) ) {
for ( <unk> fp : <unk> . get ( ev . <unk> ( ) ) ) {
TypeInfo type = columnTypes . get ( fp . getPosition ( ) ) ;
LOG . debug ( " + columnNames . get ( fp . getPosition ( ) ) ) ;
try {
row . set ( fp . getPosition ( ) ,
<unk> ( ev , type , fp ,
row . get ( fp . getPosition ( ) ) ) ) ;
} catch ( IOException ex ) {
row . set ( fp . getPosition ( ) , null ) ;
Logger . getLogger ( <unk> . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ;
continue ;
}
}
}
return row ;
}
static Object <unk> ( Event ev , TypeInfo type ,
<unk> fp , Object <unk> ) throws IOException {
LOG . debug ( " + fp . getField ( ) ) ;
String fieldName = fp . getField ( ) ;
if ( ! ev . isSet ( fieldName ) ) {
return null ;
}
try {
switch ( type . getCategory ( ) ) {
case PRIMITIVE : {
PrimitiveTypeInfo <unk> = ( PrimitiveTypeInfo ) type ;
switch ( <unk> . getPrimitiveCategory ( ) ) {
case VOID : {
return null ;
}
case BOOLEAN : {
<unk> r = <unk> == null ? new <unk> ( ) : ( <unk> ) <unk> ;
r . set ( ev . getBoolean ( fieldName ) ) ;
return r ;
}
case BYTE : {
throw new IOException ( " ) ;
}
case SHORT : {
<unk> r = <unk> == null ? new <unk> ( ) : ( <unk> ) <unk> ;
r . set ( ev . getInt16 ( fieldName ) ) ;
return r ;
}
case INT : {
<unk> r = <unk> == null ? new <unk> ( ) : ( <unk> ) <unk> ;
r . set ( ev . getInt32 ( fieldName ) ) ;
return r ;
}
case LONG : {
LongWritable r = <unk> == null ? new LongWritable ( ) : ( LongWritable ) <unk> ;
r . set ( ev . getInt64 ( fieldName ) ) ;
return r ;
}
case FLOAT : {
<unk> r = <unk> == null ? new <unk> ( ) : ( <unk> ) <unk> ;
r . set ( Float . parseFloat ( ev . getString ( fieldName ) ) ) ;
return r ;
}
case DOUBLE : {
<unk> r = <unk> == null ? new <unk> ( ) : ( <unk> ) <unk> ;
r . set ( Double . parseDouble ( ev . getString ( fieldName ) ) ) ;
return r ;
}
case STRING : {
Text r = <unk> == null ? new Text ( ) : ( Text ) <unk> ;
r . set ( ev . get ( fieldName ) . toString ( ) ) ;
return r ;
}
default : {
throw new RuntimeException ( " + <unk> . getPrimitiveCategory ( ) ) ;
}
}
}
case LIST :
case MAP :
case STRUCT : {
throw new IOException ( " ) ;
}
default : {
throw new RuntimeException ( " + type . getCategory ( ) ) ;
}
}
} catch ( <unk> ex ) {
throw new IOException ( ex ) ;
}
}
@Override
public ObjectInspector getObjectInspector ( ) throws SerDeException {
LOG . debug ( " ) ;
return rowObjectInspector ;
}
@Override
public Class < ? extends Writable > getSerializedClass ( ) {
LOG . debug ( " ) ;
return <unk> . class ;
}
<unk> serialized = new <unk> ( ) ;
Event <unk> = null ;
@Override
public Writable serialize ( Object obj , ObjectInspector <unk> ) throws SerDeException {
LOG . debug ( " + obj . getClass ( ) . getCanonicalName ( ) ) ;
try {
if ( <unk> == null )
<unk> = new Event ( <unk> , false , null ) ;
} catch ( <unk> ex ) {
LOG . debug ( " , ex ) ;
throw new SerDeException ( " , ex ) ;
}
StructObjectInspector soi = ( StructObjectInspector ) <unk> ;
List < ? extends StructField > fields = soi . getAllStructFieldRefs ( ) ;
for ( int i = <num> ; i < fields . size ( ) ; i ++ ) {
String fieldName = fields . get ( i ) . getFieldName ( ) ;
try {
<unk> ( <unk> ,
columnNames . get ( i ) ,
soi . getStructFieldData ( obj , fields . get ( i ) ) ,
fields . get ( i ) . getFieldObjectInspector ( ) ) ;
} catch ( <unk> ex ) {
LOG . debug ( " + fieldName , ex ) ;
throw new SerDeException ( " + fieldName
+ " , ex ) ;
}
}
serialized . <unk> ( <unk> ) ;
return serialized ;
}
private void <unk> ( Event ev , String f , Object o , ObjectInspector oi )
throws <unk> {
LOG . debug ( " + f ) ;
if ( o == null ) {
return ;
}
switch ( oi . getCategory ( ) ) {
case PRIMITIVE : {
PrimitiveObjectInspector poi = ( PrimitiveObjectInspector ) oi ;
switch ( poi . getPrimitiveCategory ( ) ) {
case VOID : {
return ;
}
case BOOLEAN : {
BooleanObjectInspector <unk> = ( BooleanObjectInspector ) poi ;
boolean v = ( ( BooleanObjectInspector ) poi ) . get ( o ) ;
ev . setBoolean ( f , v ) ;
return ;
}
case BYTE : {
<unk> <unk> = ( <unk> ) poi ;
byte v = <unk> . get ( o ) ;
ev . <unk> ( f , v ) ;
return ;
}
case SHORT : {
ShortObjectInspector <unk> = ( ShortObjectInspector ) poi ;
short v = <unk> . get ( o ) ;
ev . <unk> ( f , v ) ;
return ;
}
case INT : {
IntObjectInspector <unk> = ( IntObjectInspector ) poi ;
int v = <unk> . get ( o ) ;
ev . <unk> ( f , v ) ;
return ;
}
case LONG : {
LongObjectInspector loi = ( LongObjectInspector ) poi ;
long v = loi . get ( o ) ;
ev . <unk> ( f , v ) ;
return ;
}
case FLOAT : {
FloatObjectInspector <unk> = ( FloatObjectInspector ) poi ;
float v = <unk> . get ( o ) ;
ev . setString ( f , Float . toString ( v ) ) ;
return ;
}
case DOUBLE : {
DoubleObjectInspector <unk> = ( DoubleObjectInspector ) poi ;
double v = <unk> . get ( o ) ;
ev . setString ( f , Double . toString ( v ) ) ;
return ;
}
case STRING : {
StringObjectInspector soi = ( StringObjectInspector ) poi ;
Text t = soi . getPrimitiveWritableObject ( o ) ;
ev . setString ( f , ( t != null ? t . toString ( ) : null ) ) ;
return ;
}
default : {
throw new RuntimeException ( " + poi . getPrimitiveCategory ( ) ) ;
}
}
}
case LIST :
case MAP :
case STRUCT : {
throw new RuntimeException ( " + oi . getCategory ( ) ) ;
}
default : {
throw new RuntimeException ( " + oi . getCategory ( ) ) ;
}
}
}
public static class <unk> {
String field ;
int position ;
public <unk> ( String f , int p ) {
field = f ;
position = p ;
}
public String getField ( ) {
return field ;
}
public void <unk> ( String field ) {
this . field = field ;
}
public int getPosition ( ) {
return position ;
}
public void setPosition ( int position ) {
this . position = position ;
}
@Override
public String toString ( ) {
return " + field + " + position + " ;
}
}
}
package org . <unk> . hadoop . io ;
import java . io . IOException ;
import java . util . Properties ;
import org . apache . hadoop . fs . FSDataOutputStream ;
import org . apache . hadoop . fs . FileSystem ;
import org . apache . hadoop . fs . Path ;
import org . apache . hadoop . hive . <unk> . exec . <unk> ;
import org . apache . hadoop . hive . <unk> . exec . Utilities ;
import org . apache . hadoop . hive . <unk> . io . <unk> ;
import org . apache . hadoop . hive . serde . Constants ;
import org . apache . hadoop . io . <unk> ;
import org . apache . hadoop . io . LongWritable ;
import org . apache . hadoop . io . Text ;
import org . apache . hadoop . io . Writable ;
import org . apache . hadoop . io . compress . <unk> ;
import org . apache . hadoop . io . compress . <unk> ;
import org . apache . hadoop . <unk> . FileOutputFormat ;
import org . apache . hadoop . <unk> . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import org . apache . hadoop . util . <unk> ;
import org . apache . hadoop . util . <unk> ;
import org . <unk> . hadoop . <unk> ;
public class <unk> extends FileOutputFormat < LongWritable , <unk> >
implements <unk> {
<unk> conf ;
@Override
public <unk> < LongWritable , <unk> > <unk> ( FileSystem fs ,
<unk> job , String name , <unk> progress ) throws IOException {
Path outputPath = <unk> ( job ) ;
if ( ! fs . exists ( outputPath ) ) {
fs . mkdirs ( outputPath ) ;
}
Path file = new Path ( outputPath , name ) ;
<unk> codec = null ;
if ( <unk> ( job ) ) {
Class < ? > <unk> = <unk> ( job , <unk> . class ) ;
codec = ( <unk> ) <unk> . newInstance ( <unk> , job ) ;
}
final FSDataOutputStream outFile = fs . create ( file ) ;
final <unk> out ;
if ( codec != null ) {
out = new <unk> ( codec . createOutputStream ( outFile ) ) ;
} else {
out = new <unk> ( outFile ) ;
}
return new <unk> < LongWritable , <unk> > ( ) {
@Override
public void close ( <unk> <unk> ) throws IOException {
out . close ( ) ;
}
@Override
public void write ( LongWritable key , <unk> value )
throws IOException {
out . write ( value . getEvent ( ) . serialize ( ) ) ;
}
} ;
}
@Override
public <unk> . <unk> <unk> ( <unk> job ,
Path path , Class type , boolean <unk> , Properties properties ,
<unk> p ) throws IOException {
FileSystem fs = path . getFileSystem ( job ) ;
final <unk> outStream = new <unk> ( Utilities . <unk> ( job ,
fs . create ( path ) , <unk> ) ) ;
int <unk> = <num> ;
String <unk> = properties . getProperty (
Constants . <unk> , " ) ;
try {
<unk> = Byte . parseByte ( <unk> ) ;
} catch ( NumberFormatException e ) {
<unk> = <unk> . charAt ( <num> ) ;
}
final int <unk> = <unk> ;
return new <unk> . <unk> ( ) {
@Override
public void write ( Writable r ) throws IOException {
if ( r instanceof Text ) {
Text tr = ( Text ) r ;
outStream . write ( tr . getBytes ( ) , <num> , tr . getLength ( ) ) ;
outStream . write ( <unk> ) ;
} else if ( r instanceof <unk> ) {
<unk> ew = ( <unk> ) r ;
outStream . <unk> ( ew . getEvent ( ) ) ;
} else {
<unk> bw = ( <unk> ) r ;
outStream . write ( bw . get ( ) , <num> , bw . getSize ( ) ) ;
outStream . write ( \n' ) ;
}
}
@Override
public void close ( boolean abort ) throws IOException {
outStream . close ( ) ;
}
} ;
}
}
package org . <unk> . hadoop . io ;
import java . io . DataInputStream ;
import java . io . EOFException ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . StreamCorruptedException ;
import java . text . SimpleDateFormat ;
import java . util . Date ;
import org . <unk> . serializer . <unk> ;
import org . <unk> . serializer . Deserializer ;
import org . <unk> . Event ;
import org . <unk> . <unk> ;
import org . <unk> . util . IPAddress ;
public class <unk> extends DataInputStream
{
static int <unk> = <num> ;
SimpleDateFormat dateFormatter = new SimpleDateFormat ( ) ;
private <unk> ef = null ;
private boolean <unk> = false ;
public void <unk> ( <unk> <unk> )
{ this . ef = <unk> ; }
public <unk> <unk> ( )
{ return ef ; }
public void <unk> ( boolean <unk> )
{ this . <unk> = <unk> ; }
public boolean <unk> ( )
{ return <unk> ; }
public <unk> ( InputStream is )
throws IOException , StreamCorruptedException
{
super ( is ) ;
}
public Event <unk> ( )
{
Event event = null ;
if ( ef == null )
{
ef = new <unk> ( ) ;
}
try {
<unk> myState = new <unk> ( ) ;
byte [ ] header = new byte [ <unk> ] ;
readFully ( header , <num> , <unk> ) ;
int length = ( int ) ( Deserializer . <unk> ( myState , header ) ) ;
long time = Deserializer . <unk> ( myState , header ) ;
IPAddress <unk> =
new IPAddress ( Deserializer . <unk> ( myState , header ) ) ;
int <unk> =
( int ) ( Deserializer . <unk> ( myState , header ) ) ;
int <unk> =
( int ) ( Deserializer . <unk> ( myState , header ) ) ;
byte [ ] bytes = new byte [ length ] ;
readFully ( bytes , <num> , length ) ;
if ( <unk> ( ) )
{
event = ef . <unk> ( bytes ) ;
}
else
{
event = new Event ( bytes , false , null ) ;
}
event . <unk> ( " , time ) ;
event . <unk> ( " , <unk> ) ;
event . <unk> ( " , <unk> ) ;
event . <unk> ( " , <unk> ) ;
} catch ( EOFException e ) {
event = null ;
} catch ( Exception e ) {
System . err . println ( " + e ) ;
e . printStackTrace ( ) ;
event = null ;
}
return event ;
}
public byte [ ] <unk> ( )
{
byte [ ] bytes = null ;
try {
<unk> myState = new <unk> ( ) ;
byte [ ] header = new byte [ <unk> ] ;
readFully ( header , <num> , <unk> ) ;
int length = ( int ) ( Deserializer . <unk> ( myState , header ) ) ;
long time = Deserializer . <unk> ( myState , header ) ;
IPAddress <unk> =
new IPAddress ( Deserializer . <unk> ( myState , header ) ) ;
int <unk> =
( int ) ( Deserializer . <unk> ( myState , header ) ) ;
int <unk> =
( int ) ( Deserializer . <unk> ( myState , header ) ) ;
bytes = new byte [ length ] ;
readFully ( bytes , <num> , length ) ;
} catch ( EOFException e ) {
} catch ( Exception e ) {
System . err . println ( " + e ) ;
}
return bytes ;
}
public String <unk> ( )
{
StringBuffer sb = new StringBuffer ( ) ;
int total =  <num> ;
try {
<unk> myState = new <unk> ( ) ;
byte [ ] header = new byte [ <unk> ] ;
total = read ( header , <num> , <unk> ) ;
if ( total !=  <num> )
{
int length = ( int ) ( Deserializer . <unk> ( myState , header ) ) ;
long time = Deserializer . <unk> ( myState , header ) ;
IPAddress <unk> =
new IPAddress ( Deserializer . <unk> ( myState , header ) ) ;
int <unk> =
( int ) ( Deserializer . <unk> ( myState , header ) ) ;
int <unk> =
( int ) ( Deserializer . <unk> ( myState , header ) ) ;
dateFormatter . applyPattern ( " ) ;
Date date = new Date ( time ) ;
sb . append ( dateFormatter . format ( date ) ) ;
byte [ ] bytes = new byte [ length ] ;
total = read ( bytes , <num> , length ) ;
}
} catch ( Exception e ) {
System . err . println ( " + e ) ;
e . printStackTrace ( ) ;
}
if ( total ==  <num> ) return null ;
return sb . toString ( ) ;
}
}
package org . <unk> . hadoop ;
import java . io . DataInput ;
import java . io . DataOutput ;
import java . io . IOException ;
import java . util . Enumeration ;
import java . util . Iterator ;
import java . util . Set ;
import java . util . TreeSet ;
import org . apache . hadoop . io . WritableComparable ;
import org . <unk> . Event ;
import org . <unk> . <unk> ;
import org . <unk> . <unk> ;
public class <unk> implements WritableComparable < <unk> > {
private Event event ;
public <unk> ( ) {
}
public <unk> ( Event event ) {
<unk> ( event ) ;
}
public Event getEvent ( ) {
return event ;
}
public void <unk> ( Event event ) {
this . event = event ;
}
@Override
public void readFields ( DataInput in ) throws IOException {
final int length = in . readInt ( ) ;
final byte [ ] bytes = new byte [ length ] ;
in . readFully ( bytes ) ;
try {
<unk> ( new Event ( bytes , false , null ) ) ;
} catch ( <unk> ex ) {
throw new IOException ( " , ex ) ;
}
}
@Override
public void write ( DataOutput out ) throws IOException {
final byte [ ] bytes = event . serialize ( ) ;
out . writeInt ( bytes . length ) ;
out . write ( bytes ) ;
}
@Override
public int compareTo ( <unk> o ) {
Thread . <unk> ( ) ;
return compare ( getEvent ( ) , o . getEvent ( ) ) ;
}
@SuppressWarnings("unchecked")
private static int compare ( Event a , Event b ) {
int comp = a . <unk> ( ) . compareTo ( b . <unk> ( ) ) ;
if ( comp != <num> ) return comp ;
comp = a . size ( )  b . size ( ) ;
if ( comp != <num> ) return comp ;
final Set < String > <unk> = getAttributeNames ( a ) , <unk> = getAttributeNames ( b ) ;
for ( Iterator < String > ai = <unk> . iterator ( ) , bi = <unk> . iterator ( ) ; ai . hasNext ( )
|| bi . hasNext ( ) ; ) {
final String aa = ( ai . hasNext ( ) ? ai . next ( ) : " ) , ba = ( bi . hasNext ( ) ? bi . next ( ) : " ) ;
comp = aa . compareTo ( ba ) ;
if ( comp != <num> ) return comp ;
}
for ( String name : <unk> ) {
try {
final Object av = a . get ( name ) , bv = b . get ( name ) ;
if ( av == null && bv == null ) continue ;
if ( av == null ) return  <num> ;
if ( bv == null ) return <num> ;
if ( ( av instanceof Comparable ) && ( bv instanceof Comparable ) ) {
comp = ( ( Comparable ) av ) . compareTo ( bv ) ;
if ( comp != <num> ) return comp ;
} else {
throw new IllegalArgumentException ( " + name + " + a + " + b ) ;
}
} catch ( <unk> e ) {
throw new IllegalArgumentException ( " + name + " + a + " + b ) ;
}
}
return <num> ;
}
@SuppressWarnings("unchecked")
private static Set < String > getAttributeNames ( Event event ) {
final TreeSet < String > names = new TreeSet < String > ( ) ;
for ( Enumeration < String > e = event . <unk> ( ) ; e . hasMoreElements ( ) ; )
names . add ( e . nextElement ( ) ) ;
return names ;
}
@Override
public String toString ( ) {
return event == null ? " : event . toString ( ) ;
}
package org . <unk> . hadoop . io ;
import java . io . DataOutputStream ;
import java . io . IOException ;
import java . io . OutputStream ;
import java . net . DatagramPacket ;
import java . net . InetAddress ;
import java . nio . ByteBuffer ;
import org . <unk> . Event ;
import org . <unk> . <unk> ;
import org . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . util . <unk> ;
import org . <unk> . serializer . Serializer ;
import org . <unk> . util . IPAddress ;
class <unk> extends DataOutputStream {
static int <unk> = <num> ;
static IPAddress <unk> = new IPAddress ( ) ;
public <unk> ( OutputStream os )
throws IOException {
super ( os ) ;
}
public void <unk> ( DatagramPacket <unk> , long <unk> ,
int <unk> ) {
try {
int length = <unk> . getLength ( ) ;
byte [ ] bytes = <unk> . getData ( ) ;
byte [ ] header = new byte [ <unk> ] ;
int offset = <num> ;
offset += Serializer . <unk> ( length , header , offset ) ;
offset +=
Serializer . <unk> ( <unk> , header , offset ) ;
offset +=
Serializer . <unk> ( <unk> . getAddress ( ) , header , offset ) ;
offset += Serializer . <unk> ( <unk> . getPort ( ) , header , offset ) ;
offset += Serializer . <unk> ( <unk> , header , offset ) ;
offset += Serializer . <unk> ( <num> , header , offset ) ;
write ( header , <num> , <unk> ) ;
write ( bytes , <num> , length ) ;
} catch ( Exception e ) {
System . err . println ( " + e ) ;
}
}
public void <unk> ( Event event ) throws IOException {
byte [ ] packet = event . serialize ( ) ;
long <unk> = <num> ;
InetAddress <unk> = InetAddress . getByAddress ( new byte [ ] { <num> , <num> , <num> , <num> } ) ;
int senderPort = <num> ;
int <unk> = <num> ;
try {
if ( event != null && event . isSet ( " ) ) {
<unk> = event . getInt64 ( " ) ;
<unk> = InetAddress . getByAddress ( event . <unk> ( " ) ) ;
senderPort = event . <unk> ( " ) ;
<unk> = event . <unk> ( " ) ;
}
} catch ( <unk> ex ) {
}
ByteBuffer b = ByteBuffer . allocate ( <unk> . <unk> ) ;
<unk> . writeHeader ( packet . length ,
<unk> ,
<unk> ,
senderPort ,
<unk> , b ) ;
out . write ( b . array ( ) , <num> , <unk> . <unk> ) ;
out . write ( packet ) ;
out . flush ( ) ;
}
}
package org . <unk> . hadoop . io ;
import java . io . IOException ;
import java . io . InputStream ;
import org . apache . commons . logging . Log ;
import org . apache . commons . logging . LogFactory ;
import org . apache . hadoop . conf . Configuration ;
import org . apache . hadoop . fs . * ;
import org . apache . hadoop . fs . Path ;
import org . apache . hadoop . io . LongWritable ;
import org . apache . hadoop . io . compress . <unk> ;
import org . apache . hadoop . io . compress . <unk> ;
import org . apache . hadoop . <unk> . FileInputFormat ;
import org . apache . hadoop . <unk> . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import org . apache . hadoop . <unk> . <unk> ;
import org . <unk> . Event ;
import org . <unk> . hadoop . <unk> ;
public class <unk> extends FileInputFormat < LongWritable , <unk> >
implements <unk> {
<unk> conf ;
@Override
public void configure ( <unk> conf ) {
this . conf = conf ;
}
@Override
protected boolean <unk> ( FileSystem fs , Path file ) {
return false ;
}
@Override
public <unk> < LongWritable , <unk> > <unk> (
<unk> <unk> , <unk> job ,
<unk> <unk> )
throws IOException {
<unk> . setStatus ( <unk> . toString ( ) ) ;
return new <unk> ( job , ( <unk> ) <unk> ) ;
}
public static class <unk> implements <unk> < LongWritable , <unk> > {
private static final Log LOG = LogFactory . getLog ( <unk> . class . getName ( ) ) ;
private <unk> <unk> = null ;
private long start ;
private long pos ;
private long end ;
int <unk> ;
private final <unk> in ;
public <unk> ( Configuration job ,
<unk> split ) throws IOException {
this . <unk> = job . getInt ( " ,
Integer . MAX_VALUE ) ;
start = split . getStart ( ) ;
end = start + split . getLength ( ) ;
final Path file = split . getPath ( ) ;
LOG . debug ( " + file . toString ( ) ) ;
<unk> = new <unk> ( job ) ;
final <unk> codec = <unk> . <unk> ( file ) ;
FileSystem fs = file . getFileSystem ( job ) ;
FSDataInputStream fileIn = fs . open ( split . getPath ( ) ) ;
if ( codec != null ) {
in = new <unk> ( codec . createInputStream ( fileIn ) ) ;
} else {
in = new <unk> ( fileIn ) ;
}
}
@Override
public LongWritable createKey ( ) {
return new LongWritable ( ) ;
}
@Override
public <unk> <unk> ( ) {
return new <unk> ( ) ;
}
@Override
public synchronized boolean next ( LongWritable key , <unk> value )
throws IOException {
Event ev = in . <unk> ( ) ;
if ( ev != null ) {
value . <unk> ( ev ) ;
pos += ev . serialize ( ) . length ;
key . set ( pos ) ;
return true ;
} else {
return false ;
}
}
@Override
public float getProgress ( ) {
if ( start == end ) {
return <num> ;
} else {
return Math . min ( <num> , ( pos  start ) / ( float ) ( end  start ) ) ;
}
}
@Override
public synchronized long getPos ( ) throws IOException {
return pos ;
}
@Override
public synchronized void close ( ) throws IOException {
if ( in != null ) {
in . close ( ) ;
}
}
}
}
package org . openx . data . hive . <unk> ;
import junit . framework . Test ;
import junit . framework . TestCase ;
import junit . framework . TestSuite ;
public class AppTest
extends TestCase
{
public AppTest ( String testName )
{
super ( testName ) ;
}
public static Test suite ( )
{
return new TestSuite ( AppTest . class ) ;
}
public void testApp ( )
{
assertTrue ( true ) ;
}
}
import java . io . * ;
import java . util . * ;
public class <unk>
{
static int <unk> ( File file ) throws IOException
{
LineNumberReader read = new LineNumberReader ( new FileReader ( file ) ) ;
int <unk> = <num> ;
while ( read . readLine ( ) != null )
{
<unk> ++ ;
}
return <unk> ;
}
static void displayHelp ( )
{
System . out . println ( ) ;
System . out . println ( " ) ;
System . out . println ( " ) ;
System . out . println ( "
+ "
+ "
+ "
+ "
+ "
+ "
+ "
+ "
+ " ) ;
System . out . println ( "
+ " ) ;
}
static void <unk> ( File file ) throws IOException
{
HashMap < String , Integer > <unk> = new HashMap < String , Integer > ( ) ;
int wordCount = getCount ( file , <unk> ) ;
int charCount = ( int ) file . length ( ) ;
int <unk> = <unk> . size ( ) ;
int lineCount = <unk> ( file ) ;
String [ ] charArray = new String [ <unk> . size ( ) ] ;
Integer [ ] valueArray = new Integer [ <unk> . size ( ) ] ;
<unk> . keySet ( ) . toArray ( charArray ) ;
<unk> . values ( ) . toArray ( valueArray ) ;
<unk> ( charArray , valueArray ) ;
System . out . println ( " + charCount ) ;
System . out . println ( "
+ <unk> ) ;
System . out . println ( " + wordCount ) ;
System . out . println ( " + lineCount ) ;
System . out . println ( "
+ " ) ;
System . out . println ( ) ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ )
{
System . out . println ( charArray [ i ] + " + valueArray [ i ] ) ;
}
}
static String <unk> ( String <unk> )
{
if ( <unk> . equals ( " ) )
{
<unk> = " ;
}
if ( <unk> . equals ( " ) )
{
<unk> = " ;
}
if ( <unk> . equals ( " ) )
{
<unk> = " ;
}
if ( <unk> . equals ( " ) )
{
<unk> = " ;
}
if ( <unk> . equals ( " ) )
{
<unk> = " ;
}
if ( <unk> . length ( ) == <num> )
{
<unk> = ( " + <unk> ) ;
}
return <unk> ;
}
static int getCount ( File <unk> , HashMap < String , Integer > <unk> )
throws IOException
{
FileReader readFile = new FileReader ( <unk> ) ;
char <unk> ;
char lastChar =  ' ;
String <unk> ;
int tempValue ;
int <unk> = <num> ;
do
{
<unk> = ( ( char ) readFile . read ( ) ) ;
<unk> = ( " + <unk> ) ;
<unk> = <unk> ( <unk> ) ;
if ( <unk> . get ( <unk> ) == null )
{
<unk> . put ( <unk> , <num> ) ;
}
else
{
tempValue = ( <unk> . get ( <unk> ) ) ;
<unk> . put ( <unk> , tempValue + <num> ) ;
}
if ( Character . isWhitespace ( lastChar )
&& ! Character . isWhitespace ( <unk> ) )
{
<unk> ++ ;
}
lastChar = <unk> ;
} while ( readFile . ready ( ) ) ;
return <unk> ;
}
static void <unk> ( String [ ] characters , Integer [ ] characterCount )
{
int counter ;
boolean <unk> = true ;
String <unk> ;
int <unk> ;
while ( <unk> )
{
<unk> = false ;
for ( counter = <num> ; counter < characterCount . length  <num> ; counter ++ )
{
if ( ( characterCount [ counter ] ) > ( characterCount [ counter + <num> ] ) )
{
<unk> = characterCount [ counter ] ;
<unk> = characters [ counter ] ;
characterCount [ counter ] = characterCount [ counter + <num> ] ;
characters [ counter ] = characters [ counter + <num> ] ;
characterCount [ counter + <num> ] = <unk> ;
characters [ counter + <num> ] = <unk> ;
<unk> = true ;
}
}
}
}
public static void main ( String [ ] args ) throws IOException
{
if ( args . length == <num> )
{
displayHelp ( ) ;
System . exit ( <num> ) ;
}
for ( int i = <num> ; i < args . length ; i ++ )
{
System . out . println ( " ) ;
System . out . println ( " + args [ i ] ) ;
System . out . println ( ) ;
File <unk> = new File ( args [ i ] ) ;
if ( ! <unk> . exists ( ) )
{
System . out . println ( " + <unk> + "
+ " ) ;
continue ;
}
else
{
<unk> ( <unk> ) ;
}
}
System . out . println ( " ) ;
}
package me . <unk> . <unk> . gui ;
import me . <unk> . <unk> . <unk> ;
import org . getspout . spoutapi . <unk> ;
import org . getspout . spoutapi . gui . Color ;
import org . getspout . spoutapi . gui . <unk> ;
import org . getspout . spoutapi . gui . GenericContainer ;
import org . getspout . spoutapi . gui . GenericLabel ;
import org . getspout . spoutapi . gui . GenericPopup ;
import org . getspout . spoutapi . gui . <unk> ;
import org . getspout . spoutapi . gui . <unk> ;
import org . getspout . spoutapi . player . SpoutPlayer ;
public class GUI extends GenericPopup {
private <unk> plugin ;
private <unk> <unk> ;
private int x ;
private int y ;
private static String backgroundImage = " ;
private static String <unk> = " ;
private static final int WIDTH = <num> ;
private static final int HEIGHT = <num> ;
public GUI ( final <unk> <unk> , final SpoutPlayer player ) {
plugin = <unk> ;
int screenWidth = player . getMainScreen ( ) . getWidth ( ) ;
int screenHeight = player . getMainScreen ( ) . getHeight ( ) ;
x = ( screenWidth / <num> )  ( WIDTH / <num> ) ;
y = ( screenHeight / <num> )  ( HEIGHT / <num> ) ;
String <unk> = plugin . getConfig ( ) . getString ( " ) ;
if ( <unk> != null && <unk> != backgroundImage ) {
backgroundImage = <unk> ;
<unk> . getFileManager ( ) . <unk> ( <unk> , <unk> ) ;
}
String <unk> = plugin . getConfig ( ) . getString ( " ) ;
if ( <unk> != null && <unk> != <unk> ) {
<unk> = <unk> ;
<unk> . getFileManager ( ) . <unk> ( <unk> , <unk> ) ;
}
GenericContainer buttons = new GenericContainer ( ) ;
GenericLabel title = new GenericLabel ( ) ;
<unk> body = new <unk> ( ) ;
GenericLabel copyright = new GenericLabel ( ) ;
<unk> general = new <unk> ( this , " ) ;
<unk> rules = new <unk> ( this , " ) ;
<unk> commands = new <unk> ( this , " ) ;
<unk> ranks = new <unk> ( this , " ) ;
<unk> exit = new <unk> ( this ) ;
<unk> icons = new <unk> ( ) ;
<unk> background = new <unk> ( ) ;
icons . setX ( x + <num> ) . setY ( y + <num> ) ;
icons . setWidth ( <num> ) . setHeight ( <num> ) ;
icons . setUrl ( <unk> ) ;
icons . setPriority ( <unk> . Normal ) ;
general . <unk> ( <num> ) . <unk> ( true ) ;
rules . <unk> ( <num> ) . <unk> ( true ) ;
commands . <unk> ( <num> ) . <unk> ( true ) ;
ranks . <unk> ( true ) ;
exit . <unk> ( <num> ) . <unk> ( true ) ;
buttons . addChildren ( general , rules , commands , ranks , exit ) ;
buttons . setX ( x + <num> ) . setY ( y + <num> ) ;
buttons . setWidth ( <num> ) . setHeight ( <num> ) ;
buttons . setLayout ( <unk> . HORIZONTAL ) ;
buttons . <unk> ( false ) ;
buttons . setPriority ( <unk> . High ) ;
title . setTextColor ( new Color ( " ) ) ;
title . <unk> ( false ) ;
title . setText ( plugin . getConfig ( ) . getString ( " , " ) ) ;
title . setX ( x + <num> ) . setY ( y + <num> ) ;
title . setWidth ( <num> ) . setHeight ( <num> ) ;
title . <unk> ( false ) ;
title . setPriority ( <unk> . High ) ;
body . setX ( x + <num> ) . setY ( y + <num> ) ;
body . setWidth ( <num> ) . setHeight ( <num> ) ;
body . setText ( general . <unk> ( ) ) ;
body . setDirty ( true ) ;
body . setPriority ( <unk> . High ) ;
copyright . setTextColor ( new Color ( " ) ) ;
copyright . <unk> ( false ) ;
copyright . setText ( " ) ;
copyright . setWidth ( <num> ) . setHeight ( <num> ) ;
copyright . setX ( body . getX ( ) + body . getWidth ( )  GenericLabel . <unk> ( copyright . getText ( ) ) ) . setY ( y + <num> ) ;
copyright . <unk> ( false ) ;
copyright . setPriority ( <unk> . High ) ;
background . setX ( x ) . setY ( y ) ;
background . setWidth ( WIDTH ) . setHeight ( HEIGHT ) ;
background . <unk> ( false ) ;
background . setUrl ( backgroundImage ) ;
background . setPriority ( <unk> . Highest ) ;
<unk> ( true ) ;
attachWidget ( plugin , background ) ;
attachWidget ( plugin , title ) ;
attachWidget ( plugin , body ) ;
attachWidget ( plugin , copyright ) ;
attachWidget ( plugin , buttons ) ;
attachWidget ( plugin , icons ) ;
<unk> = body ;
}
@Override
public final <unk> getPlugin ( ) {
return plugin ;
}
public final <unk> getBody ( ) {
return <unk> ;
}
public void refresh ( ) {
}
}
package me . <unk> . <unk> . gui ;
import org . bukkit . ChatColor ;
import org . getspout . spoutapi . gui . GenericLabel ;
import org . getspout . spoutapi . gui . Label ;
public class <unk> extends GenericLabel {
private static final String ERROR_MESSAGE = ChatColor . RED + " ;
@Override
public final Label setText ( String text ) {
if ( text != null && ! getText ( ) . equals ( text ) ) {
if ( GenericLabel . <unk> ( text , scale ) >= width ) {
if ( text . contains ( " ) ) {
String [ ] lines = text . split ( " ) ;
String result = " ;
for ( String line : lines ) {
result += <unk> ( line ) + " ;
}
super . setText ( result ) ;
} else {
super . setText ( <unk> ( text ) ) ;
}
} else {
super . setText ( text ) ;
}
}
return this ;
}
private String <unk> ( String text ) {
int <unk> = GenericLabel . <unk> ( " ) ;
int <unk> = getWidth ( ) ;
int <unk> = <unk> ;
String [ ] words = text . split ( " ) ;
String result = " ;
for ( int i = <num> ; i < words . length ; i ++ ) {
int <unk> = GenericLabel . <unk> ( words [ i ] ) ;
if ( ! result . isEmpty ( ) && <unk> > <unk> ) {
result += " ;
<unk> = <unk> ;
}
result += words [ i ] ;
<unk> -= <unk> ;
if ( <unk> > <unk> ) {
result += " ;
<unk> = <unk> ;
} else {
result += " ;
<unk> -= <unk> ;
}
}
return result ;
}
public static String getErrorMessage ( ) {
return ERROR_MESSAGE ;
}
package me . <unk> . <unk> . gui ;
import org . bukkit . ChatColor ;
import org . getspout . spoutapi . event . screen . ButtonClickEvent ;
import org . getspout . spoutapi . gui . Widget ;
public class <unk> extends GUIButton {
private String <unk> ;
public <unk> ( GUI gui , String <unk> ) {
super ( gui , gui . getPlugin ( ) . getConfig ( ) . getString ( " + <unk> + " ) ) ;
<unk> = " + <unk> ;
}
@Override
public final void onButtonClick ( ButtonClickEvent event ) {
<unk> ( ) . getBody ( ) . setText ( <unk> ( ) ) ;
}
public final String <unk> ( ) {
String <unk> = <unk> ( ) . getPlugin ( ) . getConfig ( ) . getString ( <unk> + " , <unk> . getErrorMessage ( ) ) ;
return ChatColor . <unk> ( &' , <unk> ) ;
}
@Override
public final Widget <unk> ( String tooltip ) {
this . tooltip = tooltip ;
<unk> ( ) . getPlugin ( ) . getConfig ( ) . set ( <unk> + " , tooltip ) ;
<unk> ( ) . getPlugin ( ) . saveConfig ( ) ;
return this ;
}
}
package me . <unk> . <unk> ;
import java . io . IOException ;
import java . util . logging . Logger ;
import org . bukkit . plugin . PluginDescriptionFile ;
import org . bukkit . plugin . java . JavaPlugin ;
import org . getspout . spoutapi . <unk> ;
import org . mcstats . <unk> ;
public class <unk> extends JavaPlugin {
public PluginDescriptionFile pdFile ;
public Logger log ;
@Override
public void onEnable ( ) {
pdFile = getDescription ( ) ;
log = getLogger ( ) ;
saveDefaultConfig ( ) ;
<unk> cmdExecutor = new <unk> ( this ) ;
getCommand ( " ) . setExecutor ( cmdExecutor ) ;
<unk> . getFileManager ( ) . <unk> ( this , " ) ;
<unk> . getFileManager ( ) . <unk> ( this , " ) ;
try {
<unk> metrics = new <unk> ( this ) ;
metrics . start ( ) ;
} catch ( IOException e ) {
}
log . info ( " + pdFile . getVersion ( ) + " ) ;
}
@Override
public void onDisable ( ) {
log . info ( " + pdFile . getVersion ( ) + " ) ;
}
}
package me . <unk> . <unk> ;
import me . <unk> . <unk> . gui . GUI ;
import org . bukkit . ChatColor ;
import org . bukkit . command . Command ;
import org . bukkit . command . CommandExecutor ;
import org . bukkit . command . CommandSender ;
import org . bukkit . command . defaults . <unk> ;
import org . getspout . spoutapi . player . SpoutPlayer ;
public class <unk> implements CommandExecutor {
private <unk> plugin ;
private static final String PREFIX = ChatColor . BLUE + " + ChatColor . WHITE ;
public <unk> ( <unk> instance ) {
plugin = instance ;
}
@Override
public final boolean onCommand ( CommandSender sender ,
Command cmd ,
String label ,
String [ ] args ) {
if ( ( sender instanceof SpoutPlayer ) ) {
SpoutPlayer player = ( SpoutPlayer ) sender ;
if ( player . isSpoutCraftEnabled ( ) ) {
GUI <unk> = new GUI ( plugin , player ) ;
player . getMainScreen ( ) . attachPopupScreen ( <unk> ) ;
return true ;
} else {
player . sendMessage ( PREFIX + " ) ;
<unk> command = new <unk> ( ) ;
return command . execute ( sender , label , args ) ;
}
} else {
<unk> <unk> = new <unk> ( ) ;
return <unk> . execute ( sender , label , args ) ;
}
}
}
package me . <unk> . <unk> . gui ;
import org . getspout . spoutapi . gui . GenericButton ;
public class GUIButton extends GenericButton {
private static final int WIDTH = <num> ;
private static final int HEIGHT = <num> ;
private GUI gui ;
public GUIButton ( GUI gui , String tooltip ) {
super ( " ) ;
<unk> ( gui ) ;
<unk> ( tooltip ) ;
setWidth ( WIDTH ) . setHeight ( HEIGHT ) ;
}
public GUI <unk> ( ) {
return gui ;
}
public void <unk> ( GUI gui ) {
this . gui = gui ;
}
}
package me . <unk> . <unk> . gui ;
import org . getspout . spoutapi . event . screen . ButtonClickEvent ;
public class <unk> extends GUIButton {
public <unk> ( GUI gui ) {
super ( gui , " ) ;
}
@Override
public final void onButtonClick ( ButtonClickEvent event ) {
<unk> ( ) . close ( ) ;
}
}
package <unk> ;
import java . io . IOException ;
import java . io . PrintWriter ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
public void doGet ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
package org . apache . jsp ;
import javax . servlet . * ;
import javax . servlet . http . * ;
import javax . servlet . jsp . * ;
public final class <unk> extends org . apache . <unk> . runtime . <unk>
implements org . apache . <unk> . runtime . <unk> {
private static final <unk> <unk> = <unk> . <unk> ( ) ;
private static java . util . List <unk> ;
private javax . el . <unk> <unk> ;
private org . apache . <unk> <unk> ;
public Object <unk> ( ) {
return <unk> ;
}
public void <unk> ( ) {
<unk> = <unk> . <unk> ( <unk> ( ) . getServletContext ( ) ) . <unk> ( ) ;
<unk> = ( org . apache . <unk> ) <unk> ( ) . getServletContext ( ) . getAttribute ( org . apache . <unk> . class . getName ( ) ) ;
}
public void <unk> ( ) {
}
public void <unk> ( HttpServletRequest request , HttpServletResponse response )
throws java . io . IOException , ServletException {
PageContext pageContext = null ;
HttpSession session = null ;
ServletContext application = null ;
ServletConfig config = null ;
JspWriter out = null ;
Object page = this ;
JspWriter <unk> = null ;
PageContext <unk> = null ;
try {
response . setContentType ( " ) ;
pageContext = <unk> . <unk> ( this , request , response ,
null , true , <num> , true ) ;
<unk> = pageContext ;
application = pageContext . getServletContext ( ) ;
config = pageContext . <unk> ( ) ;
session = pageContext . getSession ( ) ;
out = pageContext . getOut ( ) ;
<unk> = out ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
String message = " ;
out . println ( message ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
} catch ( Throwable t ) {
if ( ! ( t instanceof <unk> ) ) {
out = <unk> ;
if ( out != null && out . getBufferSize ( ) != <num> )
try { out . <unk> ( ) ; } catch ( java . io . IOException e ) { }
if ( <unk> != null ) <unk> . <unk> ( t ) ;
}
} finally {
<unk> . <unk> ( <unk> ) ;
}
}
}
package <unk> ;
import java . io . * ;
import javax . servlet . * ;
import javax . servlet . http . * ;
import javax . servlet . Filter ;
import javax . servlet . FilterChain ;
public class <unk> implements Filter {
public void doFilter ( ServletRequest req , ServletResponse resp ,
FilterChain chain ) {
try {
String target = ( ( HttpServletRequest ) req ) . getRequestURI ( ) ;
HttpSession session = ( ( HttpServletRequest ) req ) . getSession ( ) ;
if ( session == null ) {
session = ( ( HttpServletRequest ) req ) . getSession ( true ) ;
session . setAttribute ( " , target ) ;
( ( HttpServletResponse ) resp ) . sendRedirect ( " ) ;
} else {
Object <unk> = session . getAttribute ( " ) ;
if ( <unk> == null ) {
session . setAttribute ( " , target ) ;
( ( HttpServletResponse ) resp ) . sendRedirect ( " ) ;
}
}
chain . doFilter ( req , resp ) ;
} catch ( ServletException se ) {
} catch ( IOException e ) {
}
}
public void init ( FilterConfig filterConfig ) throws ServletException {
}
public void destroy ( ) {
}
package <unk> ;
import java . io . IOException ;
import java . io . PrintWriter ;
import java . sql . Connection ;
import java . sql . DriverManager ;
import java . sql . PreparedStatement ;
import java . sql . SQLException ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
public void doGet ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
public void doPost ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
Connection con = null ;
PreparedStatement stmt = null ;
req . setCharacterEncoding ( " ) ;
int id ;
String [ ] <unk> = null ;
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
try {
Class . forName ( " ) ;
String url = " ;
con = DriverManager . getConnection ( url , " , " ) ;
<unk> = req . getParameterValues ( " ) ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
id = Integer . parseInt ( <unk> [ i ] ) ;
writer . println ( " + id + " ) ;
stmt = con . prepareStatement ( "
+ id ) ;
stmt . execute ( ) ;
}
} catch ( SQLException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} catch ( ClassNotFoundException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} catch ( NullPointerException e ) {
writer . println ( " ) ;
}
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
}
package org . apache . jsp ;
import javax . servlet . * ;
import javax . servlet . http . * ;
import javax . servlet . jsp . * ;
import java . io . * ;
import java . sql . * ;
import javax . servlet . * ;
import java . util . Date ;
public final class <unk> extends org . apache . <unk> . runtime . <unk>
implements org . apache . <unk> . runtime . <unk> {
Connection con = null ;
PreparedStatement stmt = null ;
ResultSet rs = null ;
int id ;
String author ;
String title ;
String publisher ;
int price ;
String isbn ;
private static final <unk> <unk> = <unk> . <unk> ( ) ;
private static java . util . List <unk> ;
private javax . el . <unk> <unk> ;
private org . apache . <unk> <unk> ;
public Object <unk> ( ) {
return <unk> ;
}
public void <unk> ( ) {
<unk> = <unk> . <unk> ( <unk> ( ) . getServletContext ( ) ) . <unk> ( ) ;
<unk> = ( org . apache . <unk> ) <unk> ( ) . getServletContext ( ) . getAttribute ( org . apache . <unk> . class . getName ( ) ) ;
}
public void <unk> ( ) {
}
public void <unk> ( HttpServletRequest request , HttpServletResponse response )
throws java . io . IOException , ServletException {
PageContext pageContext = null ;
HttpSession session = null ;
ServletContext application = null ;
ServletConfig config = null ;
JspWriter out = null ;
Object page = this ;
JspWriter <unk> = null ;
PageContext <unk> = null ;
try {
response . setContentType ( " ) ;
pageContext = <unk> . <unk> ( this , request , response ,
null , true , <num> , true ) ;
<unk> = pageContext ;
application = pageContext . getServletContext ( ) ;
config = pageContext . <unk> ( ) ;
session = pageContext . getSession ( ) ;
out = pageContext . getOut ( ) ;
<unk> = out ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
Date date = new Date ( ) ;
session . setAttribute ( " , date ) ;
out . write ( " ) ;
out . write ( " ) ;
out . print ( date ) ;
out . write ( " ) ;
out . write ( " ) ;
out . print ( session . getAttribute ( " ) ) ;
out . write ( " ) ;
out . write ( " ) ;
response . setContentType ( " ) ;
PrintWriter writer = response . getWriter ( ) ;
Class . forName ( " ) ;
String url = " ;
con = DriverManager . getConnection ( url , " , " ) ;
stmt = con . prepareStatement ( " ) ;
stmt . execute ( ) ;
rs = stmt . getResultSet ( ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
} catch ( Throwable t ) {
if ( ! ( t instanceof <unk> ) ) {
out = <unk> ;
if ( out != null && out . getBufferSize ( ) != <num> )
try { out . <unk> ( ) ; } catch ( java . io . IOException e ) { }
if ( <unk> != null ) <unk> . <unk> ( t ) ;
}
} finally {
<unk> . <unk> ( <unk> ) ;
}
}
}
package <unk> ;
import java . io . IOException ;
import java . io . PrintWriter ;
import java . util . Date ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
public void doGet ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
Date currentDate = new Date ( ) ;
String <unk> = currentDate . toString ( ) ;
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " + <unk> + " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
package <unk> ;
import java . io . * ;
import javax . servlet . * ;
import javax . servlet . http . * ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
public void doGet ( HttpServletRequest req , HttpServletResponse resp )
throws IOException , ServletException {
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
HttpSession session = req . getSession ( true ) ;
Object status = session . getAttribute ( " ) ;
if ( status != null ) {
writer . println ( " ) ;
writer . println ( " ) ;
session . setAttribute ( " , null ) ;
}
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
package org . apache . jsp ;
import javax . servlet . * ;
import javax . servlet . http . * ;
import javax . servlet . jsp . * ;
public final class <unk> extends org . apache . <unk> . runtime . <unk>
implements org . apache . <unk> . runtime . <unk> {
private static final <unk> <unk> = <unk> . <unk> ( ) ;
private static java . util . List <unk> ;
private javax . el . <unk> <unk> ;
private org . apache . <unk> <unk> ;
public Object <unk> ( ) {
return <unk> ;
}
public void <unk> ( ) {
<unk> = <unk> . <unk> ( <unk> ( ) . getServletContext ( ) ) . <unk> ( ) ;
<unk> = ( org . apache . <unk> ) <unk> ( ) . getServletContext ( ) . getAttribute ( org . apache . <unk> . class . getName ( ) ) ;
}
public void <unk> ( ) {
}
public void <unk> ( HttpServletRequest request , HttpServletResponse response )
throws java . io . IOException , ServletException {
PageContext pageContext = null ;
HttpSession session = null ;
ServletContext application = null ;
ServletConfig config = null ;
JspWriter out = null ;
Object page = this ;
JspWriter <unk> = null ;
PageContext <unk> = null ;
try {
response . setContentType ( " ) ;
pageContext = <unk> . <unk> ( this , request , response ,
null , true , <num> , true ) ;
<unk> = pageContext ;
application = pageContext . getServletContext ( ) ;
config = pageContext . <unk> ( ) ;
session = pageContext . getSession ( ) ;
out = pageContext . getOut ( ) ;
<unk> = out ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . print ( response . encodeURL ( " ) ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
} catch ( Throwable t ) {
if ( ! ( t instanceof <unk> ) ) {
out = <unk> ;
if ( out != null && out . getBufferSize ( ) != <num> )
try { out . <unk> ( ) ; } catch ( java . io . IOException e ) { }
if ( <unk> != null ) <unk> . <unk> ( t ) ;
}
} finally {
<unk> . <unk> ( <unk> ) ;
}
}
}
package <unk> ;
import java . io . IOException ;
import java . io . PrintWriter ;
import java . sql . Connection ;
import java . sql . DriverManager ;
import java . sql . PreparedStatement ;
import java . sql . ResultSet ;
import java . sql . SQLException ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
public void doGet ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
public void doPost ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
Connection con = null ;
PreparedStatement stmt = null ;
ResultSet rs = null ;
req . setCharacterEncoding ( " ) ;
int id = <num> ;
String [ ] <unk> = null ;
String author ;
String title ;
String publisher ;
int price ;
String isbn ;
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
try {
Class . forName ( " ) ;
String url = " ;
con = DriverManager . getConnection ( url , " , " ) ;
<unk> = req . getParameterValues ( " ) ;
writer . println ( "
+ "
+ "
+ "
+ "
+ "
+ " + " ) ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
id = Integer . parseInt ( <unk> [ i ] ) ;
stmt = con
. prepareStatement ( "
+ id ) ;
stmt . execute ( ) ;
rs = stmt . getResultSet ( ) ;
rs . next ( ) ;
id = rs . getInt ( " ) ;
author = rs . getString ( " ) ;
title = rs . getString ( " ) ;
publisher = rs . getString ( " ) ;
price = rs . getInt ( " ) ;
isbn = rs . getString ( " ) ;
writer . println ( "
+ id + " ) ;
writer . println ( "
+ author + " ) ;
writer . println ( "
+ title + " ) ;
writer . println ( "
+ publisher + " ) ;
writer . println ( "
+ price + " ) ;
writer . println ( "
+ isbn + " ) ;
}
writer . println ( " ) ;
writer . println ( " ) ;
} catch ( SQLException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} catch ( ClassNotFoundException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} catch ( NullPointerException e ) {
writer . println ( " ) ;
e . printStackTrace ( ) ;
}
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
}
package <unk> ;
import java . io . IOException ;
import javax . servlet . ServletException ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
import javax . servlet . http . HttpSession ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
public void doGet ( HttpServletRequest req , HttpServletResponse resp )
throws IOException , ServletException {
resp . setContentType ( " ) ;
HttpSession session = req . getSession ( true ) ;
session . invalidate ( ) ;
resp . sendRedirect ( " ) ;
}
package <unk> ;
import java . io . IOException ;
import java . io . PrintWriter ;
import java . sql . Connection ;
import java . sql . DriverManager ;
import java . sql . PreparedStatement ;
import java . sql . SQLException ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
public void doGet ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
public void doPost ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
Connection con = null ;
PreparedStatement stmt = null ;
req . setCharacterEncoding ( " ) ;
int id = <num> ;
String [ ] <unk> = null ;
String author ;
String title ;
String publisher ;
int price ;
String isbn ;
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
try {
Class . forName ( " ) ;
String url = " ;
con = DriverManager . getConnection ( url , " , " ) ;
} catch ( ClassNotFoundException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} catch ( SQLException e ) {
e . printStackTrace ( ) ;
}
writer . println ( "
+ "
+ "
+ "
+ " ) ;
try {
<unk> = req . getParameterValues ( " ) ;
writer . println ( " + <unk> . length + " ) ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
<unk> = req . getParameterValues ( " ) ;
id = Integer . parseInt ( <unk> [ i ] ) ;
<unk> = req . getParameterValues ( " ) ;
title = <unk> [ i ] ;
<unk> = req . getParameterValues ( " ) ;
author = <unk> [ i ] ;
<unk> = req . getParameterValues ( " ) ;
publisher = <unk> [ i ] ;
<unk> = req . getParameterValues ( " ) ;
price = Integer . parseInt ( <unk> [ i ] ) ;
<unk> = req . getParameterValues ( " ) ;
isbn = <unk> [ i ] ;
stmt = con
. prepareStatement ( " ) ;
stmt . setString ( <num> , title ) ;
stmt . setString ( <num> , author ) ;
stmt . setString ( <num> , publisher ) ;
stmt . setInt ( <num> , price ) ;
stmt . setString ( <num> , isbn ) ;
stmt . setInt ( <num> , id ) ;
stmt . execute ( ) ;
writer . println ( " ) ;
writer . println ( " + id + " ) ;
writer . println ( " + title + " ) ;
writer . println ( " + author + " ) ;
writer . println ( " + publisher + " ) ;
writer . println ( " + price + " ) ;
writer . println ( " + isbn + " ) ;
}
} catch ( SQLException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} catch ( NullPointerException e ) {
writer . println ( " ) ;
}
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
}
package <unk> ;
import java . io . IOException ;
import java . sql . Connection ;
import java . sql . DriverManager ;
import java . sql . PreparedStatement ;
import java . sql . ResultSet ;
import java . sql . SQLException ;
import javax . servlet . ServletException ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
import javax . servlet . http . HttpSession ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
protected Connection con = null ;
public void init ( ) throws ServletException {
String url = " ;
String user = " ;
String password = " ;
try {
Class . forName ( " ) . newInstance ( ) ;
con = DriverManager . getConnection ( url , user , password ) ;
} catch ( ClassNotFoundException e ) {
log ( " + e . getMessage ( ) ) ;
} catch ( SQLException e ) {
log ( " + e . getMessage ( ) ) ;
} catch ( Exception e ) {
log ( " + e . getMessage ( ) ) ;
}
}
public void <unk> ( ) {
try {
if ( con != null ) {
con . close ( ) ;
}
} catch ( SQLException e ) {
log ( " + e . getMessage ( ) ) ;
}
}
public void doPost ( HttpServletRequest req , HttpServletResponse resp )
throws IOException , ServletException {
resp . setContentType ( " ) ;
String user = req . getParameter ( " ) ;
String pass = req . getParameter ( " ) ;
HttpSession session = req . getSession ( true ) ;
boolean check = <unk> ( user , pass ) ;
System . out . println ( " + check + "
+ session . getAttribute ( " ) ) ;
String target = ( String ) session . getAttribute ( " ) ;
if ( check ) {
session . setAttribute ( " , " ) ;
resp . sendRedirect ( target ) ;
} else {
session . setAttribute ( " , " ) ;
resp . sendRedirect ( " ) ;
}
}
protected boolean <unk> ( String user , String pass ) {
if ( user == null || user . length ( ) == <num> || pass == null
|| pass . length ( ) == <num> ) {
return false ;
}
try {
String sql = " ;
PreparedStatement stmt = con . prepareStatement ( sql ) ;
stmt . setString ( <num> , user ) ;
stmt . setString ( <num> , pass ) ;
ResultSet rs = stmt . executeQuery ( ) ;
if ( rs . next ( ) ) {
return true ;
} else {
return false ;
}
} catch ( SQLException e ) {
log ( " + e . getMessage ( ) ) ;
return false ;
}
}
package <unk> ;
import java . io . IOException ;
import java . io . PrintWriter ;
import java . sql . Connection ;
import java . sql . DriverManager ;
import java . sql . PreparedStatement ;
import java . sql . ResultSet ;
import java . sql . SQLException ;
import java . util . Arrays ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
public void doPost ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
Connection con = null ;
PreparedStatement stmt = null ;
ResultSet rs = null ;
int count = <num> ;
int id ;
String author ;
String title ;
String publisher ;
int price ;
String isbn ;
req . setCharacterEncoding ( " ) ;
resp . setContentType ( " ) ;
String <unk> = req . getParameter ( " ) ;
String [ ] <unk> = req . getParameterValues ( " ) ;
String <unk> = req . getParameter ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
try {
Class . forName ( " ) ;
String url = " ;
con = DriverManager . getConnection ( url , " , " ) ;
stmt = con
. prepareStatement ( " ) ;
if ( <unk> == null ) {
writer . println ( " ) ;
stmt . setString ( <num> , " ) ;
stmt . setString ( <num> , " ) ;
stmt . setString ( <num> , " ) ;
stmt . setString ( <num> , " ) ;
} else if ( <unk> . length == <num> ) {
stmt . setString ( <num> , " + <unk> + " ) ;
stmt . setString ( <num> , " + <unk> + " ) ;
stmt . setString ( <num> , " + <unk> + " ) ;
stmt . setString ( <num> , " + <unk> + " ) ;
} else {
Arrays . sort ( <unk> ) ;
if ( Arrays . binarySearch ( <unk> , " ) >= <num> ) {
stmt . setString ( <num> , " + <unk> + " ) ;
} else {
stmt . setString ( <num> , " ) ;
}
if ( Arrays . binarySearch ( <unk> , " ) >= <num> ) {
stmt . setString ( <num> , " + <unk> + " ) ;
} else {
stmt . setString ( <num> , " ) ;
}
if ( Arrays . binarySearch ( <unk> , " ) >= <num> ) {
stmt . setString ( <num> , " + <unk> + " ) ;
} else {
stmt . setString ( <num> , " ) ;
}
if ( Arrays . binarySearch ( <unk> , " ) >= <num> ) {
stmt . setString ( <num> , " + <unk> + " ) ;
} else {
stmt . setString ( <num> , " ) ;
}
}
if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
} else if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
} else if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
} else if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
} else if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
} else if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
} else if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
} else if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
} else if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
} else if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
} else if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
} else if ( <unk> . equals ( " ) ) {
stmt . setInt ( <num> , <num> ) ;
stmt . setInt ( <num> , <num> ) ;
}
stmt . execute ( ) ;
rs = stmt . getResultSet ( ) ;
writer . println ( "
+ "
+ "
+ "
+ "
+ "
+ " + " ) ;
while ( rs . next ( ) ) {
id = rs . getInt ( " ) ;
author = rs . getString ( " ) ;
title = rs . getString ( " ) ;
publisher = rs . getString ( " ) ;
price = rs . getInt ( " ) ;
isbn = rs . getString ( " ) ;
writer . println ( " + id + " + " + author
+ " + " + title + " + "
+ publisher + " + " + price + "
+ " + isbn + " ) ;
count ++ ;
}
writer . println ( " ) ;
} catch ( SQLException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} catch ( ClassNotFoundException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} catch ( NullPointerException e ) {
writer . println ( " ) ;
e . printStackTrace ( ) ;
} finally {
try {
if ( stmt != null ) {
stmt . close ( ) ;
}
if ( con != null ) {
con . close ( ) ;
}
} catch ( SQLException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
}
}
writer . println ( " + count + " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
}
package <unk> ;
import java . io . IOException ;
import java . io . PrintWriter ;
import java . sql . Connection ;
import java . sql . DriverManager ;
import java . sql . PreparedStatement ;
import java . sql . ResultSet ;
import java . sql . SQLException ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
public void doGet ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
Connection con = null ;
PreparedStatement stmt = null ;
ResultSet rs = null ;
int id ;
String author ;
String title ;
String publisher ;
int price ;
String isbn ;
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
try {
Class . forName ( " ) ;
String url = " ;
con = DriverManager . getConnection ( url , " , " ) ;
stmt = con . prepareStatement ( "
+ " ) ;
stmt . setString ( <num> , " ) ;
stmt . setInt ( <num> , <num> ) ;
stmt . execute ( ) ;
rs = stmt . getResultSet ( ) ;
writer . println ( " + "
+ " + "
+ " + "
+ " + "
+ "
+ " + "
+ " ) ;
while ( rs . next ( ) ) {
id = rs . getInt ( " ) ;
author = rs . getString ( " ) ;
title = rs . getString ( " ) ;
publisher = rs . getString ( " ) ;
price = rs . getInt ( " ) ;
isbn = rs . getString ( " ) ;
writer . println ( " + id + " + " + author
+ " + " + title + " + "
+ publisher + " + " + price + "
+ " + isbn + " ) ;
}
writer . println ( " ) ;
} catch ( SQLException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} catch ( ClassNotFoundException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} finally {
try {
if ( stmt != null ) {
stmt . close ( ) ;
}
if ( con != null ) {
con . close ( ) ;
}
} catch ( SQLException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
}
}
writer . println ( " ) ;
writer . println ( " ) ;
}
package <unk> ;
import java . io . IOException ;
import java . io . PrintWriter ;
import java . sql . Connection ;
import java . sql . DriverManager ;
import java . sql . PreparedStatement ;
import java . sql . ResultSet ;
import java . sql . SQLException ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
public void doGet ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
public void doPost ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
Connection con = null ;
PreparedStatement stmt = null ;
ResultSet rs = null ;
req . setCharacterEncoding ( " ) ;
String <unk> ;
int id ;
String author ;
String title ;
String publisher ;
int price ;
String isbn ;
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
try {
Class . forName ( " ) ;
String url = " ;
con = DriverManager . getConnection ( url , " , " ) ;
stmt = con
. prepareStatement ( " ) ;
author = req . getParameter ( " ) ;
title = req . getParameter ( " ) ;
publisher = req . getParameter ( " ) ;
isbn = req . getParameter ( " ) ;
<unk> = req . getParameter ( " ) ;
id = Integer . parseInt ( <unk> ) ;
System . out . println ( id ) ;
<unk> = req . getParameter ( " ) ;
price = Integer . parseInt ( <unk> ) ;
stmt . setInt ( <num> , id ) ;
stmt . setString ( <num> , author ) ;
stmt . setString ( <num> , title ) ;
stmt . setString ( <num> , publisher ) ;
stmt . setInt ( <num> , price ) ;
stmt . setString ( <num> , isbn ) ;
stmt . execute ( ) ;
stmt = con . prepareStatement ( "
+ id ) ;
stmt . execute ( ) ;
rs = stmt . getResultSet ( ) ;
writer . println ( " ) ;
writer . println ( "
+ "
+ "
+ "
+ "
+ "
+ " + " ) ;
while ( rs . next ( ) ) {
id = rs . getInt ( " ) ;
author = rs . getString ( " ) ;
title = rs . getString ( " ) ;
publisher = rs . getString ( " ) ;
price = rs . getInt ( " ) ;
isbn = rs . getString ( " ) ;
writer . println ( " + " + id + " + " + author
+ " + " + title + " + "
+ publisher + " + " + price + "
+ " + isbn + " + " ) ;
}
writer . println ( " ) ;
} catch ( SQLException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} catch ( ClassNotFoundException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
} finally {
try {
if ( stmt != null ) {
stmt . close ( ) ;
}
if ( con != null ) {
con . close ( ) ;
}
} catch ( SQLException e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
}
}
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
}
package org . apache . jsp ;
import javax . servlet . * ;
import javax . servlet . http . * ;
import javax . servlet . jsp . * ;
import java . util . Date ;
public final class <unk> extends org . apache . <unk> . runtime . <unk>
implements org . apache . <unk> . runtime . <unk> {
private static final <unk> <unk> = <unk> . <unk> ( ) ;
private static java . util . List <unk> ;
private javax . el . <unk> <unk> ;
private org . apache . <unk> <unk> ;
public Object <unk> ( ) {
return <unk> ;
}
public void <unk> ( ) {
<unk> = <unk> . <unk> ( <unk> ( ) . getServletContext ( ) ) . <unk> ( ) ;
<unk> = ( org . apache . <unk> ) <unk> ( ) . getServletContext ( ) . getAttribute ( org . apache . <unk> . class . getName ( ) ) ;
}
public void <unk> ( ) {
}
public void <unk> ( HttpServletRequest request , HttpServletResponse response )
throws java . io . IOException , ServletException {
PageContext pageContext = null ;
HttpSession session = null ;
ServletContext application = null ;
ServletConfig config = null ;
JspWriter out = null ;
Object page = this ;
JspWriter <unk> = null ;
PageContext <unk> = null ;
try {
response . setContentType ( " ) ;
pageContext = <unk> . <unk> ( this , request , response ,
null , true , <num> , true ) ;
<unk> = pageContext ;
application = pageContext . getServletContext ( ) ;
config = pageContext . <unk> ( ) ;
session = pageContext . getSession ( ) ;
out = pageContext . getOut ( ) ;
<unk> = out ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
Date currentDate = new Date ( ) ;
String <unk> = currentDate . toString ( ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( <unk> ) ;
out . print ( <unk> ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
} catch ( Throwable t ) {
if ( ! ( t instanceof <unk> ) ) {
out = <unk> ;
if ( out != null && out . getBufferSize ( ) != <num> )
try { out . <unk> ( ) ; } catch ( java . io . IOException e ) { }
if ( <unk> != null ) <unk> . <unk> ( t ) ;
}
} finally {
<unk> . <unk> ( <unk> ) ;
}
}
}
package org . apache . jsp ;
import javax . servlet . * ;
import javax . servlet . http . * ;
import javax . servlet . jsp . * ;
import java . io . * ;
import java . sql . * ;
import javax . servlet . * ;
public final class <unk> extends org . apache . <unk> . runtime . <unk>
implements org . apache . <unk> . runtime . <unk> {
Connection con = null ;
PreparedStatement stmt = null ;
ResultSet rs = null ;
int id ;
String author ;
String title ;
String publisher ;
int price ;
String isbn ;
private static final <unk> <unk> = <unk> . <unk> ( ) ;
private static java . util . List <unk> ;
private javax . el . <unk> <unk> ;
private org . apache . <unk> <unk> ;
public Object <unk> ( ) {
return <unk> ;
}
public void <unk> ( ) {
<unk> = <unk> . <unk> ( <unk> ( ) . getServletContext ( ) ) . <unk> ( ) ;
<unk> = ( org . apache . <unk> ) <unk> ( ) . getServletContext ( ) . getAttribute ( org . apache . <unk> . class . getName ( ) ) ;
}
public void <unk> ( ) {
}
public void <unk> ( HttpServletRequest request , HttpServletResponse response )
throws java . io . IOException , ServletException {
PageContext pageContext = null ;
HttpSession session = null ;
ServletContext application = null ;
ServletConfig config = null ;
JspWriter out = null ;
Object page = this ;
JspWriter <unk> = null ;
PageContext <unk> = null ;
try {
response . setContentType ( " ) ;
pageContext = <unk> . <unk> ( this , request , response ,
null , true , <num> , true ) ;
<unk> = pageContext ;
application = pageContext . getServletContext ( ) ;
config = pageContext . <unk> ( ) ;
session = pageContext . getSession ( ) ;
out = pageContext . getOut ( ) ;
<unk> = out ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( \n' ) ;
out . write ( <unk> ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
response . setContentType ( " ) ;
PrintWriter writer = response . getWriter ( ) ;
Class . forName ( " ) ;
String url = " ;
con = DriverManager . getConnection ( url , " , " ) ;
stmt = con . prepareStatement ( " ) ;
stmt . execute ( ) ;
rs = stmt . getResultSet ( ) ;
while ( rs . next ( ) ) {
id = rs . getInt ( " ) ;
author = rs . getString ( " ) ;
title = rs . getString ( " ) ;
publisher = rs . getString ( " ) ;
price = rs . getInt ( " ) ;
isbn = rs . getString ( " ) ;
out . println ( "
+ id + " ) ;
out . println ( " + id + " ) ;
out . println ( " + author + " ) ;
out . println ( " + title + " ) ;
out . println ( " + publisher + " ) ;
out . println ( " + price + " ) ;
out . println ( " + isbn + " ) ;
}
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
out . write ( " ) ;
} catch ( Throwable t ) {
if ( ! ( t instanceof <unk> ) ) {
out = <unk> ;
if ( out != null && out . getBufferSize ( ) != <num> )
try { out . <unk> ( ) ; } catch ( java . io . IOException e ) { }
if ( <unk> != null ) <unk> . <unk> ( t ) ;
}
} finally {
<unk> . <unk> ( <unk> ) ;
}
}
}
package <unk> ;
import java . io . IOException ;
import java . io . PrintWriter ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
public void doGet ( HttpServletRequest req , HttpServletResponse resp ) throws IOException {
String text = req . getParameter ( " ) ;
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " + text + " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
public void doPost ( HttpServletRequest req , HttpServletResponse resp )
throws IOException {
req . setCharacterEncoding ( " ) ;
String text = req . getParameter ( " ) ;
resp . setContentType ( " ) ;
PrintWriter writer = resp . getWriter ( ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
writer . println ( " + text + " ) ;
writer . println ( " ) ;
writer . println ( " ) ;
}
package pl . <unk> . <unk> ;
import android . app . Activity ;
import android . os . Bundle ;
import android . os . Handler ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . widget . Button ;
import android . widget . EditText ;
import android . widget . TextView ;
import java . io . BufferedReader ;
import java . io . IOException ;
import java . io . InputStreamReader ;
public class <unk> extends Activity {
private TextView outputView ;
private EditText <unk> ;
private Handler handler = new Handler ( ) ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
outputView = ( TextView ) findViewById ( R . id . outputView ) ;
<unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( <unk> ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( <unk> ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( <unk> ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( <unk> ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( <unk> ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( <unk> ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( <unk> ) ;
Button clearButton = ( Button ) findViewById ( R . id . clearButton ) ;
clearButton . setOnClickListener ( <unk> ) ;
}
private OnClickListener <unk> = new OnClickListener ( ) {
public void onClick ( View v ) {
String output = exec ( <unk> . getText ( ) . toString ( ) ) ;
output ( output ) ;
}
} ;
private OnClickListener <unk> = new OnClickListener ( ) {
public void onClick ( View v ) {
String swap = <unk> . getText ( ) . toString ( ) ;
swap = swap + " ;
<unk> . setText ( swap ) ;
}
} ;
private OnClickListener <unk> = new OnClickListener ( ) {
public void onClick ( View v ) {
String swap = <unk> . getText ( ) . toString ( ) ;
swap = swap + " ;
<unk> . setText ( swap ) ;
}
} ;
private OnClickListener <unk> = new OnClickListener ( ) {
public void onClick ( View v ) {
String swap = <unk> . getText ( ) . toString ( ) ;
swap = swap + " ;
<unk> . setText ( swap ) ;
}
} ;
private OnClickListener <unk> = new OnClickListener ( ) {
public void onClick ( View v ) {
String swap = <unk> . getText ( ) . toString ( ) ;
swap = swap + " ;
<unk> . setText ( swap ) ;
}
} ;
private OnClickListener <unk> = new OnClickListener ( ) {
public void onClick ( View v ) {
String swap = <unk> . getText ( ) . toString ( ) ;
swap = swap + " ;
<unk> . setText ( swap ) ;
}
} ;
private OnClickListener <unk> = new OnClickListener ( ) {
public void onClick ( View v ) {
String swap = <unk> . getText ( ) . toString ( ) ;
swap = swap + " ;
<unk> . setText ( swap ) ;
}
} ;
private OnClickListener <unk> = new OnClickListener ( ) {
public void onClick ( View v ) {
<unk> . setText ( " ) ;
}
} ;
private String exec ( String command ) {
try {
Process process = Runtime . getRuntime ( ) . exec ( command ) ;
BufferedReader reader = new BufferedReader ( new InputStreamReader (
process . getInputStream ( ) ) ) ;
int read ;
char [ ] buffer = new char [ <num> ] ;
StringBuilder output = new StringBuilder ( ) ;
while ( ( read = reader . read ( buffer ) ) > <num> ) {
output . append ( buffer , <num> , read ) ;
}
reader . close ( ) ;
process . waitFor ( ) ;
return output . toString ( ) ;
} catch ( IOException e ) {
throw new RuntimeException ( e ) ;
} catch ( InterruptedException e ) {
throw new RuntimeException ( e ) ;
}
}
private void output ( final String str ) {
Runnable proc = new Runnable ( ) {
public void run ( ) {
outputView . setText ( str ) ;
}
} ;
handler . post ( proc ) ;
}
package jp . <unk> . app . <unk> ;
import android . app . Activity ;
import android . os . Bundle ;
public class <unk> extends Activity {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
}
package jp . <unk> . app . <unk> ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . OutputStream ;
import java . util . UUID ;
import android . bluetooth . BluetoothAdapter ;
import android . bluetooth . BluetoothDevice ;
import android . bluetooth . <unk> ;
import android . bluetooth . BluetoothSocket ;
import android . content . Context ;
import android . os . Handler ;
import android . util . Log ;
public class <unk> {
private static final String TAG = " ;
private static final boolean D = true ;
private static final UUID MY_UUID = UUID . fromString ( " ) ;
private static final String NAME = " ;
public static final int STATE_NONE = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int STATE_CONNECTED = <num> ;
private static final int <unk> = <num> ;
private final BluetoothAdapter btAdapter ;
private final Handler <unk> ;
private int <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
public <unk> ( Context context , Handler handler ) {
btAdapter = BluetoothAdapter . getDefaultAdapter ( ) ;
<unk> = handler ;
<unk> = STATE_NONE ;
<unk> = null ;
<unk> = null ;
<unk> = null ;
}
private synchronized void setState ( int state ) {
<unk> = state ;
<unk> . obtainMessage ( <unk> . <unk> , state ,  <num> ) ;
}
public synchronized int getState ( ) {
return <unk> ;
}
public synchronized void start ( ) {
if ( <unk> != null ) {
<unk> . cancel ( ) ;
<unk> = null ;
}
if ( <unk> != null ) {
<unk> . cancel ( ) ;
<unk> = null ;
}
if ( <unk> == null ) {
<unk> = new <unk> ( ) ;
}
<unk> . run ( ) ;
setState ( <unk> ) ;
}
public synchronized void connect ( BluetoothDevice device ) {
if ( D ) Log . d ( TAG , " + device ) ;
if ( <unk> == <unk> ) {
if ( <unk> != null ) {
<unk> . cancel ( ) ;
<unk> = null ;
}
}
if ( <unk> != null ) {
<unk> . cancel ( ) ;
<unk> = null ;
}
<unk> = new <unk> ( device ) ;
<unk> . start ( ) ;
setState ( <unk> ) ;
}
public synchronized void <unk> ( ) {
if ( <unk> == STATE_CONNECTED && <unk> != null ) {
<unk> . cancel ( ) ;
setState ( STATE_NONE ) ;
}
}
public synchronized void <unk> ( BluetoothSocket socket , BluetoothDevice device ) {
if ( D ) Log . d ( TAG , " ) ;
if ( <unk> != null ) {
<unk> . cancel ( ) ;
<unk> = null ;
}
if ( <unk> != null ) {
<unk> . cancel ( ) ;
<unk> = null ;
}
if ( <unk> != null ) {
<unk> . cancel ( ) ;
<unk> = null ;
}
<unk> = new <unk> ( socket ) ;
<unk> . start ( ) ;
setState ( STATE_CONNECTED ) ;
}
public synchronized void stop ( ) {
if ( D ) Log . d ( TAG , " ) ;
if ( <unk> != null ) {
<unk> . cancel ( ) ;
<unk> = null ;
}
if ( <unk> != null ) {
<unk> . cancel ( ) ;
<unk> = null ;
}
if ( <unk> != null ) {
<unk> . cancel ( ) ;
<unk> = null ;
}
setState ( STATE_NONE ) ;
}
public void write ( byte [ ] out ) {
<unk> r ;
synchronized ( this ) {
if ( <unk> != STATE_CONNECTED ) return ;
r = <unk> ;
}
r . write ( out ) ;
}
private void <unk> ( ) {
setState ( <unk> ) ;
}
private void <unk> ( ) {
setState ( <unk> ) ;
}
private class <unk> extends Thread {
private final <unk> <unk> ;
public <unk> ( ) {
<unk> tmp = null ;
try {
tmp = btAdapter . <unk> ( NAME , MY_UUID ) ;
} catch ( IOException e ) {
Log . e ( TAG , " , e ) ;
}
<unk> = tmp ;
}
public void run ( ) {
if ( D ) Log . d ( TAG , " + this ) ;
setName ( " ) ;
BluetoothSocket socket = null ;
while ( <unk> != STATE_CONNECTED ) {
try {
socket = <unk> . accept ( ) ;
} catch ( IOException e ) {
Log . e ( TAG , " , e ) ;
break ;
}
if ( socket != null ) {
synchronized ( <unk> . this ) {
switch ( <unk> ) {
case <unk> :
case <unk> :
break ;
case STATE_NONE :
case STATE_CONNECTED :
try {
socket . close ( ) ;
} catch ( IOException e ) {
Log . e ( TAG , " , e ) ;
}
break ;
}
}
}
}
if ( D ) Log . i ( TAG , " ) ;
}
public void cancel ( ) {
if ( D ) Log . d ( TAG , " + this ) ;
try {
<unk> . close ( ) ;
} catch ( IOException e ) {
Log . e ( TAG , " , e ) ;
}
}
}
private class <unk> extends Thread {
private final BluetoothSocket <unk> ;
private final BluetoothDevice <unk> ;
public <unk> ( BluetoothDevice device ) {
<unk> = device ;
BluetoothSocket tmp = null ;
try {
tmp = device . createRfcommSocketToServiceRecord ( MY_UUID ) ;
} catch ( IOException e ) {
Log . e ( TAG , " , e ) ;
}
<unk> = tmp ;
}
public void run ( ) {
Log . i ( TAG , " ) ;
setName ( " ) ;
btAdapter . cancelDiscovery ( ) ;
try {
<unk> . connect ( ) ;
} catch ( IOException e ) {
<unk> ( ) ;
try {
<unk> . close ( ) ;
} catch ( IOException e1 ) {
Log . e ( TAG , " , e1 ) ;
}
<unk> . this . start ( ) ;
return ;
}
synchronized ( <unk> . this ) {
<unk> = null ;
}
<unk> ( <unk> , <unk> ) ;
}
public void cancel ( ) {
try {
<unk> . close ( ) ;
} catch ( IOException e ) {
Log . e ( TAG , " , e ) ;
}
}
}
private class <unk> extends Thread {
private final BluetoothSocket <unk> ;
private final InputStream inStream ;
private final OutputStream outStream ;
public <unk> ( BluetoothSocket socket ) {
Log . d ( TAG , " ) ;
<unk> = socket ;
InputStream <unk> = null ;
OutputStream <unk> = null ;
try {
<unk> = socket . getInputStream ( ) ;
<unk> = socket . getOutputStream ( ) ;
} catch ( IOException e ) {
Log . e ( TAG , " , e ) ;
}
inStream = <unk> ;
outStream = <unk> ;
}
public void run ( ) {
Log . i ( TAG , " ) ;
byte [ ] buffer = new byte [ <unk> ] ;
int <unk> ;
while ( true ) {
try {
<unk> = inStream . read ( buffer ) ;
<unk> . obtainMessage ( <unk> . <unk> , <unk> ,  <num> , buffer ) . sendToTarget ( ) ;
} catch ( IOException e ) {
Log . e ( TAG , " , e ) ;
<unk> ( ) ;
break ;
}
}
}
public void write ( byte [ ] buffer ) {
try {
outStream . write ( buffer ) ;
<unk> . obtainMessage ( <unk> . <unk> ,  <num> ,  <num> , buffer ) ;
} catch ( IOException e ) {
Log . e ( TAG , " , e ) ;
}
}
public void cancel ( ) {
try {
<unk> . close ( ) ;
} catch ( IOException e ) {
Log . e ( TAG , " , e ) ;
}
}
}
}
package jp . <unk> . app . <unk> ;
public final class R {
public static final class attr {
}
public static final class drawable {
public static final int icon = <num> ;
}
public static final class layout {
public static final int main = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int hello = <num> ;
}
}
package griffon . plugins . <unk> . impl ;
public interface Named {
String getName ( ) ;
void setName ( String name ) ;
}
package griffon . plugins . <unk> . impl ;
import <unk> . data . Table ;
import <unk> . data . Tree ;
public class <unk> extends Tree implements Named {
private String name ;
public <unk> ( ) {
}
public <unk> ( Table table , Table <unk> ) {
super ( table , <unk> ) ;
}
public <unk> ( Table table , Table <unk> , String s , String s1 ) {
super ( table , <unk> , s , s1 ) ;
}
public <unk> ( Table table , Table <unk> , String s , String s1 , String s2 ) {
super ( table , <unk> , s , s1 , s2 ) ;
}
public String getName ( ) {
return name ;
}
public void setName ( String name ) {
this . name = name ;
}
}
package griffon . plugins . <unk> . impl ;
import <unk> . data . Table ;
public class <unk> extends Table implements Named {
private String name ;
public <unk> ( ) {
}
public <unk> ( int i , int i1 ) {
super ( i , i1 ) ;
}
public <unk> ( int i , int i1 , Class aClass ) {
super ( i , i1 , aClass ) ;
}
public String getName ( ) {
return name ;
}
public void setName ( String name ) {
this . name = name ;
}
}
package griffon . plugins . <unk> . impl ;
import <unk> . data . Graph ;
import <unk> . data . Table ;
public class <unk> extends Graph implements Named {
private String name ;
public <unk> ( ) {
}
public <unk> ( boolean b ) {
super ( b ) ;
}
public <unk> ( Table table , boolean b ) {
super ( table , b ) ;
}
public <unk> ( Table table , boolean b , String s , String s1 , String s2 ) {
super ( table , b , s , s1 , s2 ) ;
}
public <unk> ( Table table , Table <unk> , boolean b ) {
super ( table , <unk> , b ) ;
}
public <unk> ( Table table , Table <unk> , boolean b , String s , String s1 ) {
super ( table , <unk> , b , s , s1 ) ;
}
public <unk> ( Table table , Table <unk> , boolean b , String s , String s1 , String s2 ) {
super ( table , <unk> , b , s , s1 , s2 ) ;
}
public String getName ( ) {
return name ;
}
public void setName ( String name ) {
this . name = name ;
}
}
package br . com . <unk> . <unk> . conf ;
import java . lang . reflect . <unk> ;
import java . util . Collections ;
import java . util . HashMap ;
import java . util . Map ;
import org . hibernate . annotations . common . reflection . <unk> ;
import org . hibernate . annotations . common . reflection . <unk> ;
import org . hibernate . annotations . common . reflection . java . <unk> ;
public class <unk> implements <unk> {
private Map < <unk> , <unk> > cache = new HashMap < <unk> , <unk> > ( <num> ) ;
private <unk> delegate = new <unk> ( ) ;
@Override
public Map < Object , Object > getDefaults ( ) {
return Collections . emptyMap ( ) ;
}
@Override
public <unk> <unk> (
<unk> <unk> ) {
<unk> <unk> = cache . get ( <unk> ) ;
if ( <unk> != null )
return <unk> ;
else
return delegate . <unk> ( <unk> ) ;
}
public void <unk> (
<unk> <unk> , <unk> <unk> ) {
if ( ! cache . containsKey ( <unk> ) )
cache . put ( <unk> , <unk> ) ;
}
}
package br . com . <unk> . <unk> . utilities ;
import java . lang . annotation . Annotation ;
import java . lang . reflect . <unk> ;
import java . lang . reflect . Field ;
import java . lang . reflect . Method ;
import java . util . ArrayList ;
import java . util . List ;
import javax . persistence . Entity ;
import javax . persistence . EntityManager ;
import javax . persistence . <unk> ;
import org . hibernate . annotations . common . reflection . java . <unk> ;
import org . hibernate . cfg . Configuration ;
import org . hibernate . ejb . <unk> ;
import br . com . <unk> . <unk> . conf . <unk> ;
import br . com . <unk> . <unk> . conf . <unk> ;
import br . com . <unk> . <unk> . conf . <unk> ;
import br . com . <unk> . <unk> . conf . <unk> ;
public class <unk> {
private boolean <unk> ;
private String <unk> = " ;
private <unk> <unk> ;
private static <unk> <unk> = new <unk> ( ) ;
public <unk> ( ) {
super ( ) ;
}
public <unk> ( boolean <unk> ) {
this . <unk> = <unk> ;
}
@SuppressWarnings("unchecked")
public EntityManager <unk> ( ) {
<unk> <unk> = <unk> . <unk> ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . <unk> ( Entity . class ) ;
List < Class < ? extends Object >> result = <unk> . <unk> ( " ) ;
<unk> = new <unk> ( ) ;
for ( Class < ? extends Object > klass : result ) {
<unk> . <unk> ( klass ) ;
}
<unk> ( result ) ;
try {
Field field = <unk> . class . getDeclaredField ( " ) ;
field . setAccessible ( true ) ;
Configuration conf = ( Configuration ) field . get ( <unk> ) ;
( ( <unk> ) conf . <unk> ( ) ) . <unk> ( <unk> ) ;
} catch ( SecurityException e ) {
e . printStackTrace ( ) ;
} catch ( NoSuchFieldException e ) {
e . printStackTrace ( ) ;
} catch ( IllegalArgumentException e ) {
e . printStackTrace ( ) ;
} catch ( IllegalAccessException e ) {
e . printStackTrace ( ) ;
}
<unk> <unk> = <unk> . <unk> ( <unk> ) ;
EntityManager entityManager = <unk> . <unk> ( ) ;
<unk> . <unk> ( entityManager ) ;
return entityManager ;
}
private void <unk> ( List < Class < ? extends Object >> result ) {
List < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
for ( Class < ? extends Object > klass : result ) {
if ( <unk> ( klass ) )
<unk> . add ( klass ) ;
Field [ ] fields = klass . getDeclaredFields ( ) ;
for ( int i = <num> ; i < fields . length ; i ++ ) {
if ( <unk> ( fields [ i ] ) )
<unk> . add ( fields [ i ] ) ;
}
Method [ ] methods = klass . getDeclaredMethods ( ) ;
for ( int i = <num> ; i < methods . length ; i ++ ) {
if ( <unk> ( methods [ i ] ) )
<unk> . add ( methods [ i ] ) ;
}
}
for ( <unk> ae : <unk> ) {
<unk> <unk> = new <unk> ( ae ) ;
if ( <unk> ) {
<unk> . <unk> ( new <unk> ( ) ) ;
}
<unk> . <unk> ( ae , <unk> ) ;
}
}
public boolean <unk> ( <unk> ae ) {
Annotation [ ] annotations = ae . <unk> ( ) ;
for ( Annotation annotation : annotations ) {
if ( <unk>
. equals ( annotation . <unk> ( ) . getPackage ( ) . getName ( ) ) )
return true ;
}
return false ;
}
public boolean <unk> ( ) {
return <unk> ;
}
public void <unk> ( boolean <unk> ) {
this . <unk> = <unk> ;
}
}
package br . com . <unk> . <unk> . utilities ;
import javax . persistence . EntityManager ;
public final class <unk> {
private static ThreadLocal < EntityManager > em = new ThreadLocal < EntityManager > ( ) ; ;
public static void <unk> ( EntityManager entityManager ) {
em . set ( entityManager ) ;
}
public static EntityManager getEntityManager ( ) {
return em . get ( ) ;
}
package br . com . <unk> . <unk> . handlers ;
import java . lang . reflect . InvocationHandler ;
import java . lang . reflect . Method ;
import javax . persistence . EntityManager ;
import br . com . <unk> . <unk> . utilities . <unk> ;
public class <unk> implements InvocationHandler {
public Object obj ;
public <unk> ( Object obj ) {
super ( ) ;
this . obj = obj ;
}
@Override
public Object invoke ( Object proxy , Method method , Object [ ] args )
throws Throwable {
Object result = null ;
EntityManager entityManager = <unk> . getEntityManager ( ) ;
boolean <unk> = false ;
try {
if ( ! entityManager . getTransaction ( ) . isActive ( ) )
entityManager . getTransaction ( ) . begin ( ) ;
result = method . invoke ( obj , args ) ;
if ( entityManager . getTransaction ( ) . isActive ( ) )
entityManager . getTransaction ( ) . commit ( ) ;
} catch ( Exception e ) {
<unk> = true ;
e . printStackTrace ( ) ;
} finally {
if ( <unk> && entityManager != null
&& entityManager . getTransaction ( ) . isActive ( ) )
entityManager . getTransaction ( ) . rollback ( ) ;
}
return result ;
}
}
package br . com . <unk> . <unk> . utilities ;
import java . lang . annotation . Annotation ;
import java . util . ArrayList ;
import java . util . List ;
import java . util . Set ;
import org . slf4j . Logger ;
import org . slf4j . LoggerFactory ;
import org . springframework . beans . factory . annotation . <unk> ;
import org . springframework . beans . factory . config . BeanDefinition ;
import org . springframework . context . annotation . <unk> ;
import org . springframework . core . type . filter . <unk> ;
import org . springframework . core . type . filter . <unk> ;
public class <unk> {
private Logger logger = LoggerFactory . getLogger ( <unk> . class ) ;
private <unk> <unk> ;
public <unk> ( ) {
super ( ) ;
<unk> = <unk> ( ) ;
}
public void <unk> ( Class < ? extends Annotation > . . . <unk> ) {
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
<unk> . <unk> ( new <unk> ( <unk> [ i ] ) ) ;
}
}
public void <unk> ( Class < ? extends Object > . . . <unk> ) {
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
<unk> . <unk> ( new <unk> ( <unk> [ i ] ) ) ;
}
}
public List < Class < ? extends Object >> <unk> ( String <unk> ) {
List < Class < ? extends Object >> result = new ArrayList < Class < ? extends Object >> ( ) ;
Set < BeanDefinition > candidates = <unk>
. <unk> ( <unk> ) ;
for ( BeanDefinition <unk> : candidates ) {
try {
result . add ( Class . forName ( <unk> . <unk> ( ) ) ) ;
} catch ( ClassNotFoundException e ) {
logger . error ( e . getMessage ( ) ) ;
continue ;
}
}
return result ;
}
public void <unk> ( ) {
<unk> . <unk> ( false ) ;
}
private <unk> <unk> ( ) {
return new <unk> ( false ) {
@Override
protected boolean <unk> ( <unk> <unk> ) {
return ! <unk> . getMetadata ( ) . isInterface ( ) ;
}
} ;
}
}
package br . com . <unk> . <unk> . conf ;
import java . lang . annotation . Annotation ;
import java . util . Arrays ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
import javax . persistence . <unk> ;
import javax . persistence . Column ;
import javax . persistence . <unk> ;
import javax . persistence . <unk> ;
import javax . persistence . <unk> ;
import javax . persistence . <unk> ;
import javax . persistence . <unk> ;
import javax . persistence . <unk> ;
import javax . persistence . Table ;
import javax . persistence . <unk> ;
import javax . persistence . <unk> ;
public class <unk> implements <unk> {
private Map < Class < ? extends Annotation > , List < String > > constraints ;
{
constraints = new HashMap < Class < ? extends Annotation > , List < String >> ( ) ;
constraints . put ( Column . class , Arrays . asList ( " , " , " ) ) ;
constraints . put ( <unk> . class , Arrays . asList ( " ) ) ;
constraints . put ( <unk> . class , Arrays . asList ( " ) ) ;
constraints . put ( <unk> . class , Arrays . asList ( " , " ) ) ;
constraints . put ( <unk> . class , Arrays . asList ( " ) ) ;
constraints . put ( <unk> . class , Arrays . asList ( " ) ) ;
constraints . put ( <unk> . class , Arrays . asList ( " ) ) ;
constraints . put ( <unk> . class , Arrays . asList ( " ) ) ;
constraints . put ( Table . class , Arrays . asList ( " ) ) ;
constraints . put ( <unk> . class , Arrays . asList ( " ) ) ;
constraints . put ( <unk> . class , null ) ;
}
@Override
public Map < String , Object > setParameters ( Class < ? extends Annotation > type , Map < String , Object > params ) {
if ( constraints . containsKey ( type ) ) {
List < String > <unk> = constraints . get ( type ) ;
if ( <unk> == null )
return null ;
else
for ( String name : <unk> ) {
params . remove ( name ) ;
}
}
return params ;
}
}
package br . com . <unk> . <unk> . utilities ;
import java . sql . Connection ;
import java . sql . SQLException ;
import java . sql . Statement ;
import java . util . ArrayList ;
import java . util . Arrays ;
import java . util . List ;
import java . util . regex . Matcher ;
import java . util . regex . Pattern ;
import javax . persistence . Entity ;
import javax . persistence . <unk> ;
import javax . persistence . <unk> ;
import javax . persistence . Table ;
import org . hibernate . Session ;
import org . hibernate . jdbc . <unk> ;
import org . slf4j . Logger ;
import org . slf4j . LoggerFactory ;
public class <unk> {
private Logger logger = LoggerFactory . getLogger ( <unk> . class ) ;
List < String > tables = new ArrayList < String > ( ) ;
String <unk> ;
public void <unk> ( ) {
<unk> ( ) ;
<unk> work = new <unk> ( ) ;
( ( Session ) <unk> . getEntityManager ( ) . getDelegate ( ) ) . doWork ( work ) ;
}
private void <unk> ( ) {
<unk> <unk> = new <unk> ( ) ;
List < Class < ? extends Object >> classes = new ArrayList < Class < ? extends Object >> ( ) ;
<unk> . <unk> ( Entity . class ) ;
classes = <unk> . <unk> ( " ) ;
for ( Class < ? extends Object > klass : classes ) {
if ( ! <unk> ( klass ) ) {
String tableName = klass . getSimpleName ( ) . toLowerCase ( ) ;
if ( klass . isAnnotationPresent ( Table . class ) ) {
tableName = ! klass . getAnnotation ( Table . class ) . name ( )
. isEmpty ( ) ? klass . getAnnotation ( Table . class )
. name ( ) . toLowerCase ( ) : tableName ;
}
tables . add ( tableName ) ;
}
}
}
public boolean <unk> ( Class < ? extends Object > klass ) {
Class < ? > <unk> = klass . getSuperclass ( ) ;
if ( <unk> != null && <unk> . isAnnotationPresent ( Entity . class )
&& <unk> . isAnnotationPresent ( <unk> . class ) ) {
<unk> inheritance = <unk> . getAnnotation ( <unk> . class ) ;
if ( <unk> . <unk> . equals ( inheritance . strategy ( ) ) )
return true ;
else
<unk> ( <unk> ) ;
}
return false ;
}
class <unk> implements <unk> {
@Override
public void execute ( Connection connection ) throws SQLException {
try {
Statement stmt = connection . createStatement ( ) ;
String command = String . format ( " , Arrays . toString ( tables . toArray ( ) )
. replace ( " , " ) . replace ( " , " ) ,
<unk> == null ? " : " + <unk> ) ;
logger . info ( String . format ( " ,
command ) ) ;
stmt . execute ( command ) ;
stmt . close ( ) ;
} catch ( Exception e ) {
String message = e . getMessage ( ) ;
e . printStackTrace ( ) ;
Pattern pattern = Pattern
. compile ( " ) ;
Matcher matcher = pattern . matcher ( message ) ;
if ( matcher . find ( ) ) {
tables . add ( matcher . group ( <num> ) ) ;
<unk> ( ) ;
}
}
}
}
}
package br . com . <unk> . <unk> . exceptions ;
public class <unk> extends Exception {
private static final long serialVersionUID = <num> ;
private String <unk> ;
public <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
@Override
public String getMessage ( ) {
return " + " + <unk> ;
}
}
package br . com . <unk> . <unk> . conf ;
import java . lang . annotation . Annotation ;
import java . lang . reflect . <unk> ;
import java . lang . reflect . InvocationTargetException ;
import java . lang . reflect . Method ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . Iterator ;
import java . util . List ;
import java . util . Map ;
import org . hibernate . annotations . common . <unk> . <unk> ;
import org . hibernate . annotations . common . <unk> . <unk> ;
import org . hibernate . annotations . common . reflection . <unk> ;
public class <unk> implements <unk> {
protected final <unk> element ;
private List < <unk> > <unk> ;
private Map < String , Object > params ;
private <unk> <unk> ;
public <unk> ( <unk> el ) {
this . element = el ;
<unk> = new ArrayList < <unk> > ( ) ;
}
@Override
public < T extends Annotation > T getAnnotation ( Class < T > <unk> ) {
T annotation = element . getAnnotation ( <unk> ) ;
if ( annotation != null ) {
<unk> ( annotation ) ;
<unk> = new <unk> ( <unk> ) ;
Iterator < <unk> > iterator = <unk> . iterator ( ) ;
while ( iterator . hasNext ( ) ) {
params = iterator . next ( ) . setParameters ( <unk> . type ( ) , params ) ;
if ( params == null )
return null ;
}
<unk> ( ) ;
return <unk> . create ( <unk> ) ;
}
return null ;
}
private void <unk> ( ) {
Iterator < String > iterator = params . keySet ( ) . iterator ( ) ;
while ( iterator . hasNext ( ) ) {
String name = iterator . next ( ) ;
<unk> . setValue ( name , params . get ( name ) ) ;
}
}
private Map < String , Object > <unk> ( Annotation annotation ) {
params = new HashMap < String , Object > ( ) ;
for ( Method method : annotation . <unk> ( ) . getDeclaredMethods ( ) ) {
try {
params . put ( method . getName ( ) , method . invoke ( annotation ) ) ;
} catch ( IllegalArgumentException e ) {
e . printStackTrace ( ) ;
} catch ( IllegalAccessException e ) {
e . printStackTrace ( ) ;
} catch ( InvocationTargetException e ) {
e . printStackTrace ( ) ;
}
}
return params ;
}
@Override
public < T extends Annotation > boolean isAnnotationPresent (
Class < T > <unk> ) {
return element . isAnnotationPresent ( <unk> ) ;
}
@Override
public Annotation [ ] <unk> ( ) {
return element . <unk> ( ) ;
}
public void <unk> ( <unk> <unk> ) {
this . <unk> . add ( <unk> ) ;
}
}
package br . com . <unk> . <unk> . conf ;
import java . io . IOException ;
import java . net . URL ;
import java . util . Properties ;
import javax . persistence . <unk> ;
import javax . persistence . <unk> ;
import org . hibernate . ejb . <unk> ;
import br . com . <unk> . <unk> . utilities . <unk> ;
@SuppressWarnings("deprecation")
public class <unk> {
private final static String <unk> = " ;
public <unk> <unk> ( <unk> configuration ) {
return configuration . <unk> ( ) ;
}
public static void <unk> ( ) {
<unk> transaction = <unk> . getEntityManager ( ) . getTransaction ( ) ;
if ( ! transaction . isActive ( ) )
transaction . begin ( ) ;
}
public <unk> <unk> ( ) {
<unk> <unk> = new <unk> ( ) ;
Properties properties = new Properties ( ) ;
try {
URL fileUrl = ClassLoader . getSystemClassLoader ( ) . getResource ( <unk> ) ;
if ( fileUrl != null )
properties . load ( fileUrl . openStream ( ) ) ;
else
properties = <unk> ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
<unk> . <unk> ( properties ) ;
return <unk> ;
}
public Properties <unk> ( ) {
Properties properties = new Properties ( ) ;
properties . put ( " , " ) ;
properties . put ( " , " ) ;
properties . put ( " , " ) ;
properties . put ( " , " ) ;
return properties ;
}
}
package br . com . <unk> . <unk> . conf ;
import java . lang . annotation . Annotation ;
import java . util . Map ;
public interface <unk> {
public Map < String , Object > setParameters ( Class < ? extends Annotation > type , Map < String , Object > params ) ;
}
package <unk> ;
import java . util . ArrayList ;
import java . util . List ;
public class <unk> {
private List < Long > <unk> ;
public <unk> ( ) {
this . <unk> = new ArrayList < Long > ( <num> ) ;
this . <unk> . add ( <num> ) ;
}
public long <unk> ( int order ) {
long <unk> = <num> ;
while ( order != this . <unk> . size ( )  <num> ) {
boolean isPrime = true ;
for ( long number : this . <unk> ) {
if ( number > Math . sqrt ( <unk> ) ) break ;
if ( <unk> % number == <num> ) {
isPrime = false ;
break ;
}
}
if ( isPrime ) {
this . <unk> . add ( <unk> ) ;
}
<unk> += <num> ;
}
return this . <unk> . get ( order  <num> ) ;
}
public static void main ( String [ ] args ) {
System . out . println ( new <unk> ( ) . <unk> ( <num> ) ) ;
}
}
package com . middleware . model ;
import java . util . HashMap ;
public class <unk> {
private HashMap < String , <unk> > <unk> = null ;
public <unk> ( )
{
<unk> = new HashMap < String , <unk> > ( ) ;
}
public HashMap < String , <unk> > <unk> ( )
{
return <unk> ;
}
public synchronized void addNode ( String id , <unk> <unk> )
{
<unk> . put ( id , <unk> ) ;
}
public synchronized void <unk> ( String id )
{
<unk> . remove ( id ) ;
}
@Override
public String toString ( ) {
return " + <unk> + " ;
}
}
package com . middleware . model ;
public class <unk> {
private byte [ ] header ;
private byte [ ] data ;
private byte [ ] <unk> ;
public <unk> ( )
{
header = null ;
data = null ;
<unk> = null ;
}
public void <unk> ( byte [ ] header , byte [ ] data )
{
this . header = header ;
this . data = data ;
<unk> = new byte [ header . length + data . length ] ;
System . arraycopy ( this . header , <num> , <unk> , <num> , header . length ) ;
System . arraycopy ( this . data , <num> , <unk> , this . header . length , data . length ) ;
}
public byte [ ] getHeader ( )
{
return this . header ;
}
public byte [ ] <unk> ( )
{
return this . data ;
}
public byte [ ] <unk> ( )
{
return this . <unk> ;
}
}
package com . middleware . listeners ;
import java . net . InetAddress ;
public interface <unk> {
public abstract void <unk> ( boolean success , InetAddress address , int port , int number ) ;
}
package com . middleware . model ;
public class Constants {
public static final char <unk> = A' ;
public static final char <unk> = B' ;
public static final char <unk> = C' ;
public static final char <unk> = E' ;
public static final char <unk> = F' ;
public static final char <unk> = G' ;
public static final char <unk> = H' ;
public static final char DISCONNECTED = I' ;
public static final char <unk> = J' ;
public static final char DATA = D' ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final float <unk> = <num> ;
public static final float <unk> = <num> ;
public static final float <unk> = <num> ;
public static final long <unk> = <num> l ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final long <unk> = <num> ;
}
package com . middleware . model ;
public interface <unk> {
public abstract void <unk> ( byte [ ] data ) ;
}
package com . middleware . model ;
public class <unk> {
private <unk> <unk> = null ;
public <unk> ( <unk> <unk> )
{
this . <unk> = <unk> ;
}
public String evaluate ( )
{
Object keys [ ] = <unk> . <unk> ( ) . keySet ( ) . toArray ( ) ;
return ( String ) keys [ <num> ] ;
}
}
package com . middleware . model ;
import java . io . IOException ;
import java . net . DatagramPacket ;
import java . net . DatagramSocket ;
import java . net . InetAddress ;
import java . net . SocketException ;
import com . middleware . listeners . <unk> ;
import com . middleware . listeners . <unk> ;
import com . middleware . listeners . <unk> ;
public class Node {
private InetAddress address ;
private int port = <num> ;
protected int number = <num> ;
protected <unk> <unk> ;
protected DatagramSocket datagramSocket ;
protected DatagramPacket <unk> , <unk> ;
protected byte [ ] buffer ;
protected byte [ ] result ;
protected <unk> dataReceived ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
protected Thread receiver ;
boolean connected = false ;
public Node ( int port ) throws SocketException
{
this . port = port ;
<unk> ( ) ;
}
public Node ( int port , InetAddress address )
{
this . port = port ;
this . address = address ;
}
public Node ( <unk> <unk> , int port ) throws SocketException
{
this . port = port ;
this . <unk> = <unk> ;
<unk> ( ) ;
}
private void <unk> ( ) throws SocketException
{
connected = true ;
datagramSocket = new DatagramSocket ( port ) ;
receiver = new Thread ( new Runnable ( ) {
@Override
public void run ( ) {
try
{
do
{
buffer = new byte [ <num> ] ;
<unk> = new DatagramPacket ( buffer , buffer . length ) ;
datagramSocket . receive ( <unk> ) ;
result = new byte [ <unk> . getLength ( ) ] ;
System . arraycopy ( <unk> . getData ( ) , <num> , result , <num> , <unk> . getLength ( ) ) ;
byte [ ] header = new byte [ <num> ] ;
header [ <num> ] = result [ <num> ] ;
String <unk> = new String ( header ) ;
if ( <unk> . equals ( String . valueOf ( Constants . <unk> ) ) )
{
<unk> . <unk> ( result , <unk> . getAddress ( ) , <unk> . getPort ( ) ) ;
}
if ( <unk> . equals ( String . valueOf ( Constants . <unk> ) ) )
{
<unk> . <unk> ( result , <unk> . getAddress ( ) , <unk> . getPort ( ) ) ;
}
else if ( <unk> . equals ( String . valueOf ( Constants . <unk> ) ) )
{
<unk> . <unk> ( true , address , port , number ) ;
}
else if ( <unk> . equals ( String . valueOf ( Constants . <unk> ) ) )
{
<unk> . <unk> ( result , <unk> . getAddress ( ) , <unk> . getPort ( ) ) ;
}
else if ( <unk> . equals ( String . valueOf ( Constants . <unk> ) ) )
{
byte body [ ] = new byte [ result . length  <num> ] ;
for ( int i = <num> ; i < result . length  <num> ; i ++ )
{
body [ i ] = result [ i + <num> ] ;
}
String <unk> = new String ( body ) ;
String [ ] cred = <unk> . split ( " ) ;
String username = cred [ <num> ] ;
String password = cred [ <num> ] ;
<unk> . <unk> ( true , username , password ) ;
}
else if ( <unk> . equals ( String . valueOf ( Constants . <unk> ) ) )
{
<unk> . <unk> ( result , <unk> . getAddress ( ) , <unk> . getPort ( ) ) ;
}
dataReceived . <unk> ( result ) ;
}
while ( connected ) ;
}
catch ( IOException ioEx )
{
ioEx . printStackTrace ( ) ;
connected = false ;
datagramSocket . close ( ) ;
}
}
} ) ;
}
public void <unk> ( <unk> dataReceived )
{
this . dataReceived = dataReceived ;
}
public void <unk> ( <unk> <unk> )
{
this . <unk> = <unk> ;
}
public void <unk> ( <unk> <unk> )
{
this . <unk> = <unk> ;
}
public void <unk> ( <unk> <unk> )
{
this . <unk> = <unk> ;
}
public void <unk> ( )
{
receiver . start ( ) ;
}
public void stop ( )
{
datagramSocket . close ( ) ;
}
public void sendData ( <unk> packet , Node node ) throws IOException
{
if ( connected )
{
<unk> = new DatagramPacket ( packet . <unk> ( ) , packet . <unk> ( ) . length , node . getAddress ( ) , node . getPort ( ) ) ;
datagramSocket . send ( <unk> ) ;
}
}
public void sendData ( <unk> packet , InetAddress host , int port ) throws IOException
{
if ( connected )
{
<unk> = new DatagramPacket ( packet . <unk> ( ) , packet . <unk> ( ) . length , host , port ) ;
datagramSocket . send ( <unk> ) ;
}
}
public void <unk> ( <unk> <unk> )
{
this . <unk> = <unk> ;
}
public void setAddress ( InetAddress address )
{
this . address = address ;
}
public <unk> <unk> ( )
{
return this . <unk> ;
}
public InetAddress getAddress ( )
{
return this . address ;
}
public int getPort ( )
{
return this . port ;
}
@Override
public String toString ( ) {
return " + address + " + port + "
+ <unk> + " + connected + " ;
}
}
package com . middleware . listeners ;
public interface <unk> {
public abstract void <unk> ( boolean success , String username , String password ) ;
}
package com . middleware . model ;
public class <unk> {
private String memory = null ;
private String <unk> = null ;
private String processor = null ;
private boolean status = false ;
private boolean canCreate = false ;
public <unk> ( String memory , String processor )
{
this . memory = memory ;
this . processor = processor ;
}
public <unk> ( String memory , String processor , String <unk> )
{
this . memory = memory ;
this . processor = processor ;
this . <unk> = <unk> ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public String <unk> ( )
{
return this . <unk> ;
}
public String getMemory ( )
{
return this . memory ;
}
public String getProcessor ( )
{
return this . processor ;
}
public void setStatus ( boolean status )
{
this . status = status ;
}
public boolean getStatus ( )
{
return this . status ;
}
public void <unk> ( boolean canCreate )
{
this . canCreate = canCreate ;
}
public boolean canCreate ( )
{
return this . canCreate ;
}
@Override
public String toString ( )
{
Boolean y = this . status ;
Boolean <unk> = this . canCreate ;
return this . memory + " + this . <unk> + " + this . processor + " + y . toString ( ) + " + <unk> . toString ( ) ;
}
}
package com . middleware . listeners ;
import com . middleware . model . Node ;
public interface <unk> {
public abstract void <unk> ( Node node ) ;
public abstract void <unk> ( Node node ) ;
}
package com . middleware . listeners ;
public interface <unk> {
public abstract void <unk> ( boolean success , String cred ) ;
}
package com . middleware . listeners ;
import java . net . InetAddress ;
public interface <unk> {
public abstract void <unk> ( byte [ ] data , InetAddress address , int port ) ;
}
package com . middleware . model ;
import java . net . InetAddress ;
import java . net . SocketException ;
import java . util . HashMap ;
import java . util . Iterator ;
import java . util . Set ;
import com . middleware . listeners . <unk> ;
import com . middleware . listeners . <unk> ;
import com . middleware . listeners . <unk> ;
import com . middleware . listeners . <unk> ;
public class <unk> extends Node implements <unk> {
private boolean monitor = true ;
private <unk> table = null ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
public <unk> ( <unk> state , int port ) throws SocketException {
super ( state , port ) ;
this . <unk> ( this ) ;
table = new <unk> ( ) ;
new Thread ( new Runnable ( ) {
@Override
public void run ( ) {
while ( monitor )
{
try
{
<unk> ( ) ;
Thread . sleep ( Constants . <unk> ) ;
}
catch ( Exception e )
{
e . printStackTrace ( ) ;
}
}
}
} ) . start ( ) ;
}
private void <unk> ( String id , <unk> <unk> )
{
this . table . addNode ( id , <unk> ) ;
}
private void <unk> ( String id )
{
this . table . <unk> ( id ) ;
}
public void <unk> ( <unk> <unk> )
{
this . <unk> = <unk> ;
}
public void <unk> ( <unk> <unk> )
{
this . <unk> = <unk> ;
}
public void <unk> ( <unk> <unk> )
{
this . <unk> = <unk> ;
}
public boolean <unk> ( ) throws Exception
{
boolean change = false ;
Set < String > nodes = table . <unk> ( ) . keySet ( ) ;
Iterator < String > iter = nodes . iterator ( ) ;
double max =  <num> ;
double compare ;
String node ;
String [ ] <unk> = null ;
double battery ;
double processor ;
double memory ;
while ( iter . hasNext ( ) )
{
node = iter . next ( ) ;
<unk> <unk> = table . <unk> ( ) . get ( node ) ;
if ( <unk> . canCreate ( ) )
{
battery = Double . parseDouble ( <unk> . <unk> ( ) ) ;
processor = Double . parseDouble ( <unk> . getProcessor ( ) ) ;
memory = Double . parseDouble ( <unk> . getMemory ( ) ) ;
compare = <unk> ( battery , processor , memory ) ;
if ( compare > max )
{
max = compare ;
<unk> = node . split ( " ) ;
}
}
}
battery = Double . parseDouble ( this . <unk> . <unk> ( ) ) ;
processor = Double . parseDouble ( this . <unk> . getProcessor ( ) ) ;
memory = Double . parseDouble ( this . <unk> . getMemory ( ) ) ;
compare = <unk> ( battery , processor , memory ) ;
if ( compare > max )
{
change = false ;
}
else
{
change = true ;
<unk> packet = new <unk> ( ) ;
byte [ ] header = { ( byte ) Constants . <unk> } ;
packet . <unk> ( header , " . getBytes ( ) ) ;
this . sendData ( packet , InetAddress . getByName ( <unk> [ <num> ] ) , Integer . parseInt ( <unk> [ <num> ] ) ) ;
}
return change ;
}
private void <unk> ( )
{
Set < String > nodes = table . <unk> ( ) . keySet ( ) ;
if ( ! nodes . isEmpty ( ) )
{
try
{
Iterator < String > iter = nodes . iterator ( ) ;
boolean <unk> ;
InetAddress <unk> = null ;
String address [ ] = null ;
String <unk> = " ;
int count = <num> ;
while ( iter . hasNext ( ) )
{
address = iter . next ( ) . split ( " ) ;
<unk> = InetAddress . getByName ( address [ <num> ] ) ;
<unk> = <unk> . isReachable ( Constants . <unk> ) ;
if ( ! <unk> )
{
String remove = address [ <num> ] + " + String . valueOf ( address [ <num> ] ) ;
this . <unk> ( remove ) ;
<unk> += ( remove + " ) ;
count ++ ;
}
}
if ( count != <num> )
{
<unk> packet = new <unk> ( ) ;
byte [ ] header = { ( byte ) Constants . DISCONNECTED } ;
packet . <unk> ( header , <unk> . getBytes ( ) ) ;
<unk> ( packet ) ;
}
}
catch ( Exception e )
{
e . printStackTrace ( ) ;
}
}
}
private double <unk> ( double battery , double processor , double memory )
{
battery = ( battery  Constants . <unk> ) / ( Constants . <unk>  Constants . <unk> ) ;
processor = ( processor  Constants . <unk> ) / ( Constants . <unk>  Constants . <unk> ) ;
memory = ( memory  Constants . <unk> ) / ( Constants . <unk>  Constants . <unk> ) ;
return <num> * battery + <num> * processor + <num> * memory ;
}
private void <unk> ( <unk> packet )
{
Set < String > nodes = table . <unk> ( ) . keySet ( ) ;
Iterator < String > iter = nodes . iterator ( ) ;
String address [ ] = null ;
InetAddress <unk> = null ;
while ( iter . hasNext ( ) )
{
try
{
address = iter . next ( ) . split ( " ) ;
<unk> = InetAddress . getByName ( address [ <num> ] ) ;
this . sendData ( packet , <unk> , new Integer ( address [ <num> ] ) ) ;
}
catch ( Exception e )
{
e . printStackTrace ( ) ;
}
}
}
@Override
public void <unk> ( byte [ ] data , final InetAddress address , int port ) {
byte [ ] header = new byte [ <num> ] ;
header [ <num> ] = data [ <num> ] ;
byte body [ ] = new byte [ data . length  <num> ] ;
for ( int i = <num> ; i < data . length  <num> ; i ++ )
{
body [ i ] = result [ i + <num> ] ;
}
String <unk> = new String ( header ) ;
final String <unk> = new String ( body ) ;
if ( <unk> . equals ( String . valueOf ( Constants . <unk> ) ) )
{
String [ ] <unk> = <unk> . split ( " ) ;
<unk> <unk> = new <unk> ( <unk> [ <num> ] , <unk> [ <num> ] , <unk> [ <num> ] ) ;
<unk> . setStatus ( Boolean . valueOf ( <unk> [ <num> ] ) ) ;
<unk> . <unk> ( Boolean . valueOf ( <unk> [ <num> ] ) ) ;
String <unk> = address . toString ( ) . substring ( <num> , address . toString ( ) . length ( ) ) ;
Node node = new Node ( port , address ) ;
String key = <unk> + " + String . valueOf ( port ) ;
this . <unk> ( key , <unk> ) ;
this . <unk> . <unk> ( node ) ;
<unk> packet = new <unk> ( ) ;
byte [ ] <unk> = { ( byte ) Constants . <unk> } ;
packet . <unk> ( <unk> , key . getBytes ( ) ) ;
<unk> ( packet ) ;
this . number ++ ;
}
else if ( <unk> . equals ( String . valueOf ( Constants . <unk> ) ) )
{
String key = address . toString ( ) . replace ( " , " ) + " + String . valueOf ( port ) ;
this . <unk> ( key ) ;
<unk> packet = new <unk> ( ) ;
byte [ ] <unk> = { ( byte ) Constants . DISCONNECTED } ;
packet . <unk> ( <unk> , key . getBytes ( ) ) ;
<unk> ( packet ) ;
}
else if ( <unk> . equals ( String . valueOf ( Constants . <unk> ) ) )
{
this . <unk> . <unk> ( true , address , port , number ) ;
}
else if ( <unk> . equals ( String . valueOf ( Constants . <unk> ) ) )
{
if ( this . table . <unk> ( ) . size ( ) >= <num> )
{
<unk> packet = new <unk> ( ) ;
byte [ ] <unk> = { ( byte ) Constants . <unk> } ;
HashMap < String , <unk> > temp = this . table . <unk> ( ) ;
String id = address . toString ( ) . replace ( " , " ) ;
id = id + " + new Integer ( port ) . toString ( ) ;
temp . remove ( id ) ;
packet . <unk> ( <unk> , temp . keySet ( ) . toString ( ) . getBytes ( ) ) ;
try
{
sendData ( packet , address , port ) ;
}
catch ( Exception e )
{
e . printStackTrace ( ) ;
}
}
}
else if ( <unk> . equals ( String . valueOf ( Constants . <unk> ) ) )
{
try { Thread . sleep ( <num> ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; }
Set < String > nodes = table . <unk> ( ) . keySet ( ) ;
Iterator < String > iter = nodes . iterator ( ) ;
try
{
while ( iter . hasNext ( ) )
{
String node = iter . next ( ) ;
String [ ] <unk> = node . split ( " ) ;
<unk> packet = new <unk> ( ) ;
byte [ ] <unk> = { ( byte ) Constants . <unk> } ;
packet . <unk> ( <unk> , <unk> . getBytes ( ) ) ;
if ( ! ( address . equals ( InetAddress . getByName ( <unk> [ <num> ] ) ) ) )
{
InetAddress host = InetAddress . getByName ( <unk> [ <num> ] ) ;
int <unk> = Integer . parseInt ( <unk> [ <num> ] ) ;
sendData ( packet , host , <unk> ) ;
Thread . sleep ( <num> ) ;
}
}
<unk> . <unk> ( true , <unk> ) ;
}
catch ( Exception e )
{
e . printStackTrace ( ) ;
}
}
}
public void setMonitor ( boolean monitor )
{
this . monitor = monitor ;
}
public boolean getMonitor ( )
{
return this . monitor ;
}
public <unk> <unk> ( )
{
return this . table ;
}
@Override
public String toString ( ) {
return " + table + " + <unk> + " ;
}
}
import java . util . Random ;
public class <unk> {
<unk> <unk> ;
Random rand = new Random ( ) ;
public <unk> ( <unk> <unk> ) {
this . <unk> = <unk> ;
}
private final String <unk> = " ;
private final String <unk> = " ;
private final String <unk> = " ;
private final String <unk> = " ;
public boolean <unk> ( Player player , String type ) {
int lvl = <unk> . getLevel ( player . getName ( ) , type ) ;
long xp = <unk> . getXP ( player . getName ( ) , type ) ;
String t = tf ( type ) ;
long <unk> = <unk> . <unk> ( type , ( lvl + <num> ) )  xp ;
if ( <unk> < <num> ) {
<unk> = <num> ;
}
player . sendMessage ( String . format ( <unk> , t , String . valueOf ( lvl ) , String . valueOf ( xp ) ) ) ;
player . sendMessage ( String . format ( <unk> , String . valueOf ( <unk> ) ) ) ;
return true ;
}
public boolean <unk> ( Player player ) {
int <unk> = <unk> . <unk> ( player . getName ( ) ) ;
long <unk> = <unk> . <unk> ( player . getName ( ) ) ;
player . sendMessage ( String . format ( <unk> , String . valueOf ( <unk> ) ) ) ;
player . sendMessage ( String . format ( <unk> , String . valueOf ( <unk> ) ) ) ;
return true ;
}
public boolean <unk> ( Player player ) {
String [ ] <unk> = new String [ ] { " , " , " , " , " , " , " } ;
for ( String type : <unk> ) {
String t = tf ( type ) ;
int lvl = <unk> . getLevel ( player . getName ( ) , type ) ;
long xp = <unk> . getXP ( player . getName ( ) , type ) ;
player . sendMessage ( String . format ( <unk> , t , String . valueOf ( lvl ) , String . valueOf ( xp ) ) ) ;
}
return true ;
}
public String tf ( String type ) {
if ( type . equals ( " ) ) {
return " ;
}
else if ( type . equals ( " ) ) {
return " ;
}
else if ( type . equals ( " ) ) {
return " ;
}
else if ( type . equals ( " ) ) {
return " ;
}
else if ( type . equals ( " ) ) {
return " ;
}
else if ( type . equals ( " ) ) {
return " ;
}
else if ( type . equals ( " ) ) {
return " ;
}
return " ;
}
public boolean Build ( Player player , int id ) {
int exp = <unk> . <unk> ( id ) ;
<unk> . <unk> ( " , player , exp ) ;
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
<unk> . <unk> ( " , player , exp ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
player . <unk> ( <num> , <num> ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
player . <unk> ( <num> , <num> ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
int add = player . <unk> ( ) . getAmount ( ) + <num> ;
player . <unk> ( ) . setAmount ( add ) ;
player . getInventory ( ) . update ( ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
}
return false ;
}
public boolean <unk> ( Player attack , Player <unk> , int damage ) {
int <unk> = rand . nextInt ( <num> ) + <num> ;
int d1 = rand . nextInt ( <num> ) + <num> ;
int d2 = rand . nextInt ( <num> ) + <num> ;
int <unk> = rand . nextInt ( <num> ) + <num> ;
int <unk> = rand . nextInt ( <num> ) + <num> ;
int dh = <unk> . getHealth ( ) ;
int ed = <num> ;
if ( <unk> . <unk> ( <unk> . getName ( ) , " ) ) {
return true ;
}
if ( <unk> . <unk> ( <unk> . getName ( ) , " ) ) {
ed -= <unk> ;
}
if ( <unk> . <unk> ( attack . getName ( ) , " ) ) {
if ( ! <unk> . <unk> ( <unk> . getName ( ) , " ) ) {
ed += d1 ;
}
}
if ( <unk> . <unk> ( attack . getName ( ) , " ) ) {
if ( ! <unk> . <unk> ( <unk> . getName ( ) , " ) ) {
ed += d2 ;
}
}
if ( <unk> . <unk> ( attack . getName ( ) , " ) ) {
}
if ( ed > <num> ) {
if ( dh  ed < <num> ) {
ed = <num> ;
}
else {
ed -= dh ;
}
}
if ( ed < <num> ) {
ed *=  <num> ;
}
<unk> . setHealth ( ed ) ;
if ( <unk> . getHealth ( )  damage <= <num> ) {
int exp = <unk> . <unk> ( " ) ;
<unk> . <unk> ( " , attack , exp ) ;
if ( <unk> . <unk> ( attack . getName ( ) , " ) ) {
<unk> . getWorld ( ) . dropItem ( <unk> . getLocation ( ) , <num> , <unk> ) ;
<unk> . getWorld ( ) . dropItem ( <unk> . getLocation ( ) , <num> , <unk> , <num> ) ;
}
if ( <unk> . <unk> ( attack . getName ( ) , " ) ) {
<unk> . <unk> ( " , attack , exp ) ;
}
}
return false ;
}
public boolean <unk> ( Player player , Mob mob , int damage ) {
int d1 = rand . nextInt ( <num> ) + <num> ;
int d2 = rand . nextInt ( <num> ) + <num> ;
int <unk> = rand . nextInt ( <num> ) + <num> ;
int <unk> = rand . nextInt ( <num> ) + <num> ;
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
if ( mob . getHealth ( )  d1 < <num> ) {
mob . setHealth ( <num> ) ;
}
else {
mob . setHealth ( mob . getHealth ( )  d1 ) ;
}
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
if ( mob . getHealth ( )  d2 < <num> ) {
mob . setHealth ( <num> ) ;
}
else {
mob . setHealth ( mob . getHealth ( )  d2 ) ;
}
}
if ( mob . getHealth ( )  damage <= <num> ) {
if ( <unk> . <unk> ( mob . getName ( ) ) ) {
int exp = <unk> . <unk> ( mob . getName ( ) ) ;
<unk> . <unk> ( " , player , exp ) ;
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
mob . getWorld ( ) . dropItem ( mob . getLocation ( ) , <num> , <unk> ) ;
mob . getWorld ( ) . dropItem ( mob . getLocation ( ) , <num> , <unk> ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
<unk> . <unk> ( " , player , exp ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
mob . dropLoot ( ) ;
}
}
}
return false ;
}
public boolean <unk> ( Player player , Mob mob , int damage ) {
int mh = mob . getHealth ( ) ;
int ph = player . getHealth ( ) ;
int res = ( int ) Math . ceil ( damage * <num> ) ;
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
return true ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
ph += res ;
player . setHealth ( ph ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
mh -= res ;
mob . setHealth ( mh ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
ph += res ;
player . setHealth ( ph ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
mh -= res ;
mob . setHealth ( mh ) ;
}
if ( mh < <num> ) {
mob . dropLoot ( ) ;
}
return false ;
}
public boolean <unk> ( Player player , Mob Animal , int damage ) {
boolean <unk> = false , <unk> = false , <unk> = false ;
int d1 = rand . nextInt ( <num> ) + <num> ;
int d2 = rand . nextInt ( <num> ) + <num> ;
int <unk> = rand . nextInt ( <num> ) + <num> ;
int <unk> = rand . nextInt ( <num> ) + <num> ;
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
<unk> = true ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
<unk> = true ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
if ( Animal . getHealth ( )  d1 < <num> ) {
Animal . setHealth ( <num> ) ;
}
else {
Animal . setHealth ( Animal . getHealth ( )  d1 ) ;
}
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
if ( Animal . getHealth ( )  d2 < <num> ) {
Animal . setHealth ( <num> ) ;
}
else {
Animal . setHealth ( Animal . getHealth ( )  d2 ) ;
}
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
<unk> = true ;
}
if ( Animal . getHealth ( )  damage <= <num> ) {
if ( <unk> . <unk> ( Animal . getName ( ) ) ) {
int exp = <unk> . <unk> ( Animal . getName ( ) ) ;
<unk> . <unk> ( " , player , exp ) ;
if ( <unk> ) {
Animal . getWorld ( ) . dropItem ( Animal . getLocation ( ) , <num> , <unk> ) ;
Animal . getWorld ( ) . dropItem ( Animal . getLocation ( ) , <num> , <unk> ) ;
}
if ( <unk> ) {
Animal . dropLoot ( ) ;
}
if ( <unk> ) {
<unk> . <unk> ( " , player , exp ) ;
}
}
}
return false ;
}
public boolean <unk> ( Player player , Block block ) {
if ( <unk> ( block . getType ( ) ) ) {
if ( ! <unk> ( player . getItemInHand ( ) , block . getType ( ) ) ) {
return false ;
}
}
int exp = <unk> . <unk> ( block . getType ( ) ) ;
<unk> . <unk> ( " , player , exp ) ;
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
if ( <unk> ( block . getType ( ) ) ) {
double <unk> = Math . random ( ) ;
if ( <unk> <= <num> ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , <num> , <num> , block . getData ( ) ) ;
}
else if ( <unk> > <num> && <unk> <= <num> ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , <num> , <num> , block . getData ( ) ) ;
}
else if ( <unk> > <num> && <unk> <= <num> ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , <num> , <num> , block . getData ( ) ) ;
}
else if ( <unk> > <num> && <unk> <= <num> ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , <num> , <num> , block . getData ( ) ) ;
}
else if ( <unk> > <num> && <unk> <= <num> ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , <num> , <num> , block . getData ( ) ) ;
}
else if ( <unk> > <num> && <unk> <= <num> ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , <num> , <num> , block . getData ( ) ) ;
}
else if ( <unk> > <num> ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , <num> , <num> , block . getData ( ) ) ;
}
}
else {
<unk> . <unk> ( " , player , exp ) ;
}
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
if ( <unk> ( player . getItemInHand ( ) , block . getType ( ) ) ) {
int <unk> = player . <unk> ( ) . getDamage ( ) ;
player . <unk> ( ) . setDamage ( <unk>  <num> ) ;
}
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
<unk> . <unk> ( " , player , exp ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , block . getType ( ) , <num> , block . getData ( ) ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , block . getType ( ) , <num> , block . getData ( ) ) ;
}
return false ;
}
public boolean <unk> ( Player player , int ID ) {
int exp = <unk> . <unk> ( ID ) ;
<unk> . <unk> ( " , player , exp ) ;
return false ;
}
public boolean mine ( Player player , Block block ) {
int <unk> = block . getType ( ) ;
if ( <unk> ( block . getType ( ) ) ) {
if ( ! <unk> ( player . getItemInHand ( ) , block . getType ( ) ) ) {
return false ;
}
}
if ( <unk> == <num> ) {
<unk> = <num> ;
}
if ( ( <unk> == <num> ) || ( <unk> == <num> ) ) {
<unk> = <num> ;
}
if ( <unk> == <num> ) {
<unk> = <num> ;
}
if ( <unk> == <num> ) {
<unk> = <num> ;
}
int exp = <unk> . <unk> ( block . getType ( ) ) ;
<unk> . <unk> ( " , player , exp ) ;
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
if ( <unk> ( player . getItemInHand ( ) , block . getType ( ) ) ) {
int <unk> = player . <unk> ( ) . getDamage ( ) ;
player . <unk> ( ) . setDamage ( <unk>  <num> ) ;
}
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
<unk> . <unk> ( " , player , exp ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , <unk> , <num> , block . getData ( ) ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , block . getType ( ) , <num> , block . getData ( ) ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , <unk> , <num> , block . getData ( ) ) ;
}
return false ;
}
public boolean <unk> ( Player player , int ID ) {
int exp = <unk> . <unk> ( ID ) ;
<unk> . <unk> ( " , player , exp ) ;
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
<unk> . <unk> ( " , player , exp ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
player . <unk> ( <num> , <num> ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
player . <unk> ( <num> , <num> ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
player . getInventory ( ) . <unk> ( player . getItemInHand ( ) , player . <unk> ( ) . getAmount ( ) + <num> , player . <unk> ( ) . getDamage ( ) , player . <unk> ( ) . <unk> ( ) ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
<unk> . <unk> ( " , player , exp ) ;
}
return false ;
}
public boolean <unk> ( Player player , Block block ) {
if ( <unk> ( block . getType ( ) ) ) {
if ( ! <unk> ( player . getItemInHand ( ) , block . getType ( ) ) ) {
return false ;
}
}
int exp = <unk> . <unk> ( block . getType ( ) ) ;
<unk> . <unk> ( " , player , exp ) ;
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
if ( <unk> ( player . getItemInHand ( ) , block . getType ( ) ) ) {
int <unk> = player . <unk> ( ) . getDamage ( ) ;
player . <unk> ( ) . setDamage ( <unk>  <num> ) ;
}
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
<unk> . <unk> ( " , player , exp ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , block . getType ( ) , <num> , block . getData ( ) ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , block . getType ( ) , <num> , block . getData ( ) ) ;
}
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
block . getWorld ( ) . dropItem ( block . getX ( ) , block . getY ( ) , block . getZ ( ) , block . getType ( ) , <num> , block . getData ( ) ) ;
}
return false ;
}
public boolean <unk> ( int id ) {
if ( ( <unk> . RA ( id ) ) || ( <unk> . <unk> ( id ) ) || ( <unk> . <unk> ( id ) ) ) {
return true ;
}
return false ;
}
public boolean <unk> ( int Tool , int ID ) {
if ( <unk> . RA ( ID ) ) {
return <unk> ( Tool ) ;
}
else if ( <unk> . <unk> ( ID ) ) {
return <unk> ( Tool ) ;
}
else if ( <unk> . <unk> ( ID ) ) {
return <unk> ( Tool ) ;
}
return false ;
}
public boolean <unk> ( int ID ) {
switch ( ID ) {
case <num> :
case <num> :
case <num> :
case <num> :
return true ;
default : return false ;
}
}
public boolean <unk> ( int Tool ) {
switch ( Tool ) {
case <num> :
case <num> :
case <num> :
case <num> :
case <num> :
return true ;
default : return false ;
}
}
public boolean <unk> ( int Tool ) {
switch ( Tool ) {
case <num> :
case <num> :
case <num> :
case <num> :
case <num> :
return true ;
default : return false ;
}
}
public boolean <unk> ( int Tool ) {
switch ( Tool ) {
case <num> :
case <num> :
case <num> :
case <num> :
case <num> :
return true ;
default : return false ;
}
}
}
public class <unk> {
private String <unk> ;
private int <unk> = <num> ,
<unk> = <num> ,
<unk> = <num> ,
<unk> = <num> ,
<unk> = <num> ,
<unk> = <num> ,
<unk> = <num> ;
private long <unk> = <num> ,
<unk> = <num> ,
<unk> = <num> ,
<unk> = <num> ,
<unk> = <num> ,
<unk> = <num> ,
<unk> = <num> ;
public <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
public String getPlayerName ( ) {
return <unk> ;
}
public void <unk> ( int gain ) { <unk> += gain ; }
public void <unk> ( long gain ) { <unk> += gain ; }
public int <unk> ( ) { return <unk> ; }
public long <unk> ( ) { return <unk> ; }
public void <unk> ( int gain ) { <unk> += gain ; }
public void <unk> ( long gain ) { <unk> += gain ; }
public int <unk> ( ) { return <unk> ; }
public long <unk> ( ) { return <unk> ; }
public void <unk> ( int gain ) { <unk> += gain ; }
public void <unk> ( long gain ) { <unk> += gain ; }
public int <unk> ( ) { return <unk> ; }
public long <unk> ( ) { return <unk> ; }
public void <unk> ( int gain ) { <unk> += gain ; }
public void <unk> ( long gain ) { <unk> += gain ; }
public int <unk> ( ) { return <unk> ; }
public long <unk> ( ) { return <unk> ; }
public void <unk> ( int gain ) { <unk> += gain ; }
public void <unk> ( long gain ) { <unk> += gain ; }
public int <unk> ( ) { return <unk> ; }
public long <unk> ( ) { return <unk> ; }
public void <unk> ( int gain ) { <unk> += gain ; }
public void <unk> ( long gain ) { <unk> += gain ; }
public int <unk> ( ) { return <unk> ; }
public long <unk> ( ) { return <unk> ; }
public void <unk> ( int gain ) { <unk> += gain ; }
public void <unk> ( long gain ) { <unk> += gain ; }
public int <unk> ( ) { return <unk> ; }
public long <unk> ( ) { return <unk> ; }
}
import java . io . BufferedReader ;
import java . io . InputStreamReader ;
import java . net . URL ;
import java . util . logging . Logger ;
public class <unk> extends Plugin {
Logger log = Logger . getLogger ( " ) ;
<unk> <unk> ;
<unk> <unk> ;
<unk> <unk> ;
public final String version = " ;
public String <unk> = " ;
public void disable ( ) {
<unk> . <unk> ( ) ;
log . info ( " + version + " ) ;
}
public void enable ( ) {
log . info ( " + version + " ) ;
if ( ! <unk> ( ) ) {
log . info ( " + <unk> ) ;
}
}
public void initialize ( ) {
<unk> = new <unk> ( this ) ;
<unk> = new <unk> ( <unk> ) ;
<unk> = new <unk> ( this , <unk> , <unk> ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . LOGIN , <unk> , this , PluginListener . Priority . LOW ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . DISCONNECT , <unk> , this , PluginListener . Priority . LOW ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . COMMAND , <unk> , this , PluginListener . Priority . LOW ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . SERVERCOMMAND , <unk> , this , PluginListener . Priority . MEDIUM ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . <unk> , <unk> , this , PluginListener . Priority . LOW ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . <unk> , <unk> , this , PluginListener . Priority . LOW ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . <unk> , <unk> , this , PluginListener . Priority . LOW ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . <unk> , <unk> , this , PluginListener . Priority . LOW ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . DAMAGE , <unk> , this , PluginListener . Priority . LOW ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . <unk> , <unk> , this , PluginListener . Priority . LOW ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . <unk> , <unk> , this , PluginListener . Priority . LOW ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . <unk> , <unk> , this , PluginListener . Priority . LOW ) ;
<unk> . <unk> ( ) ;
log . info ( " + version + " ) ;
}
public boolean <unk> ( ) {
try {
URL url = new URL ( " ) ;
BufferedReader in = new BufferedReader ( new InputStreamReader ( url . openStream ( ) ) ) ;
String inputLine ;
if ( ( inputLine = in . readLine ( ) ) != null ) {
<unk> = inputLine ;
}
in . close ( ) ;
} catch ( Exception E ) {
return true ;
}
return ( version . equals ( <unk> ) ) ;
}
}
import java . util . ArrayList ;
import java . util . Random ;
public class <unk> extends PluginListener {
private <unk> CR ;
private <unk> <unk> ;
private <unk> <unk> ;
protected ArrayList < Block > <unk> ;
private final PluginLoader loader = etc . getLoader ( ) ;
public <unk> ( <unk> CR , <unk> <unk> , <unk> <unk> ) {
this . CR = CR ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
<unk> = new ArrayList < Block > ( ) ;
}
public void onLogin ( Player player ) {
if ( <unk> . keyExists ( player . getName ( ) ) ) {
<unk> . <unk> ( player . getName ( ) ) ;
}
else if ( player . canUseCommand ( " ) ) {
<unk> . <unk> ( player . getName ( ) ) ;
}
}
public void onDisconnect ( Player player ) {
if ( player . canUseCommand ( " ) ) {
<unk> . <unk> ( player . getName ( ) ) ;
}
}
public boolean onCommand ( Player player , String [ ] cmd ) {
if ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) {
if ( player . canUseCommand ( " ) ) {
if ( cmd . length > <num> ) {
if ( ( cmd [ <num> ] . equalsIgnoreCase ( " ) || ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) ) ) {
return <unk> . <unk> ( player , " ) ;
}
else if ( ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) || ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) ) {
return <unk> . <unk> ( player , " ) ;
}
else if ( ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) || ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) ) {
return <unk> . <unk> ( player , " ) ;
}
else if ( ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) || ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) ) {
return <unk> . <unk> ( player , " ) ;
}
else if ( ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) || ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) ) {
return <unk> . <unk> ( player , " ) ;
}
else if ( ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) || ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) ) {
return <unk> . <unk> ( player , " ) ;
}
else if ( ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) || ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) ) {
return <unk> . <unk> ( player , " ) ;
}
else if ( ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) || ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) ) {
return <unk> . <unk> ( player ) ;
}
else if ( ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) || ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) ) {
return <unk> . <unk> ( player ) ;
}
}
else {
player . sendMessage ( " + CR . version + " ) ;
if ( player . isAdmin ( ) && ! CR . <unk> ( ) ) {
player . sendMessage ( " + CR . <unk> + " ) ;
}
player . sendMessage ( " ) ;
player . sendMessage ( " ) ;
player . sendMessage ( " ) ;
player . sendMessage ( " ) ;
player . sendMessage ( " ) ;
player . sendMessage ( " ) ;
player . sendMessage ( " ) ;
player . sendMessage ( " ) ;
player . sendMessage ( " ) ;
player . sendMessage ( " ) ;
return true ;
}
}
}
else if ( ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) || ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) ) {
if ( player . isOp ( ) ) {
<unk> . <unk> ( ) ;
}
}
return false ;
}
public boolean onConsoleCommand ( String [ ] cmd ) {
if ( ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) || ( cmd [ <num> ] . equalsIgnoreCase ( " ) ) ) {
<unk> . <unk> ( ) ;
}
return false ;
}
public boolean onBlockPlace ( Player player , Block bp , Block bc , Item <unk> ) {
if ( ! player . getMode ( ) ) {
if ( ! isProtected ( player , bc , " ) ) {
if ( bp != null && bp . getType ( ) != <num> ) {
if ( player . canUseCommand ( " ) ) {
<unk> . add ( bp ) ;
if ( <unk> . <unk> ( bp . getType ( ) ) ) {
return <unk> . Build ( player , bp . getType ( ) ) ;
}
else if ( <unk> . <unk> ( bp . getType ( ) ) ) {
return <unk> . <unk> ( player , bp . getType ( ) ) ;
}
else if ( <unk> . <unk> ( bp . getType ( ) ) ) {
return <unk> . <unk> ( player , bp . getType ( ) ) ;
}
}
}
}
}
return false ;
}
public boolean <unk> ( Player player , Block bp , Block bc , Item <unk> ) {
if ( player . getCreativeMode ( ) == <num> ) {
int id = <num> ;
if ( <unk> != null ) {
id = <unk> . getItemId ( ) ;
}
if ( ! <unk> ( id ) ) { return false ; }
if ( ! isProtected ( player , bc , " ) ) {
if ( player . canUseCommand ( " ) ) {
if ( <unk> . getItemId ( ) == <num> ) {
bp . setType ( <num> ) ;
}
if ( bp == null || bp . getType ( ) == <num> ) {
if ( <unk> != null ) {
bp . setType ( <unk> ( <unk> . getItemId ( ) ) ) ;
}
}
<unk> . add ( bp ) ;
if ( <unk> . <unk> ( bp . getType ( ) ) ) {
return <unk> . Build ( player , bp . getType ( ) ) ;
}
else if ( <unk> . <unk> ( bp . getType ( ) ) ) {
return <unk> . <unk> ( player , bp . getType ( ) ) ;
}
else if ( <unk> . <unk> ( bp . getType ( ) ) ) {
return <unk> . <unk> ( player , bp . getType ( ) ) ;
}
}
}
}
return false ;
}
public boolean <unk> ( Player player , Block block ) {
if ( ! player . getMode ( ) ) {
if ( player . canUseCommand ( " ) ) {
if ( ! isProtected ( player , block , " ) ) {
int id = block . getType ( ) ;
if ( ( id == <num> ) && ( block . getData ( ) == <num> ) && <unk> . <unk> ( <num> ) ) {
return <unk> . <unk> ( player , block . getType ( ) ) ;
}
else if ( block . getStatus ( ) == <num> ) {
if ( ! ( <unk> ( block ) ) ) {
if ( <unk> . <unk> ( id ) ) {
return <unk> . <unk> ( player , block ) ;
}
else if ( <unk> . <unk> ( id ) ) {
return <unk> . mine ( player , block ) ;
}
else if ( <unk> . <unk> ( id ) ) {
return <unk> . <unk> ( player , id ) ;
}
else if ( <unk> . <unk> ( id ) ) {
return <unk> . <unk> ( player , block ) ;
}
}
else {
<unk> . remove ( block ) ;
}
}
else {
switch ( block . getType ( ) ) {
case <num> :
case <num> :
case <num> :
case <num> :
case <num> :
if ( ! <unk> ( block ) ) {
if ( <unk> . <unk> ( id ) ) {
return <unk> . <unk> ( player , id ) ;
}
}
case <num> :
if ( <unk> . <unk> ( id ) ) {
if ( ! <unk> ( block ) ) {
Block <unk> = player . getWorld ( ) . getBlockAt ( block . getX ( ) , block . getY ( ) + <num> , block . getZ ( ) ) ;
if ( <unk> != null ) {
for ( int y = ( block . getY ( ) + <num> ) ; y < ( block . getY ( ) + <num> ) ; y ++ ) {
<unk> = player . getWorld ( ) . getBlockAt ( block . getX ( ) , y , block . getZ ( ) ) ;
if ( <unk> != null ) {
if ( ! <unk> ( block ) ) {
if ( <unk> . getType ( ) == <num> ) {
<unk> . <unk> ( player , id ) ;
}
}
}
}
}
}
else {
for ( int y = block . getY ( ) ; y < ( block . getY ( ) + <num> ) ; y ++ ) {
Block <unk> = player . getWorld ( ) . getBlockAt ( block . getX ( ) , y , block . getZ ( ) ) ;
if ( <unk> != null ) {
if ( ! <unk> ( block ) ) {
if ( <unk> . getType ( ) == <num> ) {
<unk> . <unk> ( player , id ) ;
}
}
}
}
}
}
}
}
}
}
}
return false ;
}
public boolean onDamage ( PluginLoader . DamageType type , BaseEntity attacker , BaseEntity defender , int amount ) {
if ( type . equals ( PluginLoader . DamageType . ENTITY ) ) {
if ( attacker . isPlayer ( ) ) {
Player player = attacker . getPlayer ( ) ;
if ( ( ! player . getMode ( ) ) && ( ! player . <unk> ( ) ) && player . canUseCommand ( " ) ) {
if ( defender . isPlayer ( ) ) {
Player <unk> = defender . getPlayer ( ) ;
if ( ! <unk> ( player ) ) {
if ( <unk> . <unk> ( " ) ) {
if ( ! <unk> . getMode ( ) && ! <unk> . <unk> ( ) ) {
return <unk> . <unk> ( player , <unk> , amount ) ;
}
}
}
}
else if ( defender . isMob ( ) ) {
Mob mob = new Mob ( ( <unk> ) defender . getEntity ( ) ) ;
if ( <unk> . <unk> ( mob . getName ( ) ) ) {
if ( <unk> . <unk> ( mob . getName ( ) ) ) {
return <unk> . <unk> ( player , mob , amount ) ;
}
}
}
else if ( defender . <unk> ( ) ) {
Mob <unk> = new Mob ( ( <unk> ) defender . getEntity ( ) ) ;
if ( <unk> . <unk> ( <unk> . getName ( ) ) ) {
return <unk> . <unk> ( player , <unk> , amount ) ;
}
}
}
}
else if ( defender . isPlayer ( ) && attacker . isMob ( ) ) {
Player player = defender . getPlayer ( ) ;
Mob mob = new Mob ( ( <unk> ) attacker . getEntity ( ) ) ;
if ( ! player . getMode ( ) && ! player . <unk> ( ) && player . canUseCommand ( " ) && <unk> . <unk> ( mob . getName ( ) ) ) {
return <unk> . <unk> ( player , mob , amount ) ;
}
}
}
return false ;
}
public PluginLoader . <unk> <unk> ( Player player , BaseEntity entity , Item item ) {
try {
if ( entity != null && entity . <unk> ( ) ) {
Block block = player . getWorld ( ) . getBlockAt ( ( int ) entity . getX ( ) , ( int ) entity . getY ( ) , ( int ) entity . getZ ( ) ) ;
if ( ! isProtected ( player , block , " ) ) {
Mob mob = new Mob ( ( <unk> ) entity . getEntity ( ) ) ;
if ( item . getType ( ) == Item . Type . <unk> ) {
<unk> . <unk> ( " , player , <num> ) ;
}
else if ( item . getType ( ) == Item . Type . Bucket ) {
if ( mob . getName ( ) . equals ( " ) ) {
<unk> . <unk> ( " , player , <num> ) ;
}
}
}
}
}
catch ( Exception e ) { }
return PluginLoader . <unk> . <unk> ;
}
public int onFoodLevelChange ( Player player , int oldFoodLevel , int newFoodLevel ) {
if ( player . canUseCommand ( " ) ) {
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
return oldFoodLevel ;
}
}
return newFoodLevel ;
}
public boolean <unk> ( Player player , Item item ) {
if ( <unk> ( item . getType ( ) ) ) {
if ( <unk> . <unk> ( player . getName ( ) , " ) ) {
Random random = new Random ( ) ;
int <unk> = player . getFoodLevel ( ) + ( random . nextInt ( <num> ) + <num> ) ;
player . setFoodLevel ( <unk> ) ;
}
}
return false ;
}
private boolean isProtected ( Player player , Block block , String type ) {
if ( block == null ) {
block = player . getWorld ( ) . getBlockAt ( ( int ) player . getX ( ) , ( int ) player . getY ( ) , ( int ) player . getZ ( ) ) ;
}
boolean protect = false ;
Plugin <unk> = loader . getPlugin ( " ) ;
Plugin <unk> = loader . getPlugin ( " ) ;
Plugin <unk> = loader . getPlugin ( " ) ;
if ( <unk> != null && <unk> . isEnabled ( ) ) {
if ( ! ( Boolean ) etc . getLoader ( ) . callCustomHook ( " , new Object [ ] { type , player , block } ) ) {
protect = true ;
}
}
if ( <unk> != null && <unk> . isEnabled ( ) ) {
if ( ! ( Boolean ) etc . getLoader ( ) . callCustomHook ( " , new Object [ ] { " , player . getName ( ) , block } ) ) {
protect = true ;
}
}
if ( <unk> != null && <unk> . isEnabled ( ) ) {
if ( ! ( Boolean ) etc . getLoader ( ) . callCustomHook ( " , new Object [ ] { player , block } ) ) {
protect = true ;
}
}
return protect ;
}
private boolean <unk> ( Player player ) {
boolean <unk> = false ;
PluginLoader loader = etc . getLoader ( ) ;
Plugin <unk> = loader . getPlugin ( " ) ;
Plugin <unk> = loader . getPlugin ( " ) ;
Plugin <unk> = loader . getPlugin ( " ) ;
if ( <unk> != null && <unk> . isEnabled ( ) ) {
if ( ! ( Boolean ) etc . getLoader ( ) . callCustomHook ( " , new Object [ ] { " , player } ) ) {
<unk> = true ;
}
}
if ( <unk> != null && <unk> . isEnabled ( ) && ! <unk> ) {
String area = ( String ) etc . getLoader ( ) . callCustomHook ( " , new Object [ ] { " , player . getName ( ) } ) ;
if ( area != null ) {
if ( ! ( Boolean ) etc . getLoader ( ) . callCustomHook ( " , new Object [ ] { " , area , player . getWorld ( ) , " } ) ) {
<unk> = true ;
}
}
}
if ( <unk> != null && <unk> . isEnabled ( ) && ! <unk> ) {
if ( ! ( Boolean ) etc . getLoader ( ) . callCustomHook ( " , new Object [ ] { player . getName ( ) } ) ) {
<unk> = true ;
}
}
return <unk> ;
}
private int <unk> ( int id ) {
switch ( id ) {
case <num> : return <num> ;
case <num> : return <num> ;
case <num> : return <num> ;
case <num> : return <num> ;
default : return <num> ;
}
}
private boolean <unk> ( int id ) {
switch ( id ) {
case <num> :
case <num> :
case <num> :
case <num> :
case <num> :
case <num> :
case <num> :
case <num> :
case <num> :
case <num> :
return true ;
default : return false ;
}
}
private boolean <unk> ( Block block ) {
return <unk> . contains ( block ) ;
}
private boolean <unk> ( Item . Type type ) {
switch ( type ) {
case <unk> :
case Cookie :
case <unk> :
case <unk> :
case <unk> :
case <unk> :
case <unk> :
case <unk> :
case <unk> :
case <unk> :
case <unk> :
case <unk> :
case Apple :
case <unk> :
case <unk> :
return true ;
default :
return false ;
}
}
}
import java . io . BufferedReader ;
import java . io . BufferedWriter ;
import java . io . File ;
import java . io . FileReader ;
import java . io . FileWriter ;
import java . io . IOException ;
import java . io . InputStream ;
import java . sql . Connection ;
import java . sql . DriverManager ;
import java . sql . PreparedStatement ;
import java . sql . ResultSet ;
import java . sql . SQLException ;
import java . sql . Statement ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . Scanner ;
import java . util . logging . Level ;
import java . util . logging . Logger ;
public class <unk> {
private <unk> CR ;
private Logger log = Logger . getLogger ( " ) ;
private HashMap < String , <unk> > <unk> ;
private HashMap < Integer , Integer > <unk> ;
private HashMap < String , Integer > <unk> ;
private ArrayList < Integer > <unk> ;
private ArrayList < Integer > <unk> ;
private ArrayList < Integer > <unk> ;
private ArrayList < Integer > <unk> ;
private ArrayList < Integer > <unk> ;
private ArrayList < Integer > <unk> ;
private ArrayList < String > <unk> ;
private ArrayList < Block > <unk> ;
private ArrayList < Integer > <unk> ;
private ArrayList < Integer > <unk> ;
private ArrayList < Integer > <unk> ;
private final String <unk> = " ;
private final String <unk> = <unk> + " ;
private final String Set = " ;
private final String EL = " ;
private final String <unk> = " ;
private final String <unk> = " ;
private final String <unk> = " ;
private final String <unk> = " ;
private String UserName = " ;
private String <unk> = " ;
private String <unk> = " ;
private String Driver = " ;
private PropertiesFile Settings ;
private PropertiesFile <unk> ;
private PropertiesFile <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private long [ ] building , combat , <unk> , <unk> , <unk> , <unk> , <unk> ;
int <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> ;
double <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> ;
boolean <unk> = false , MySQL = false ;
public <unk> ( <unk> CR ) {
this . CR = CR ;
<unk> = new HashMap < String , <unk> > ( ) ;
<unk> = new HashMap < Integer , Integer > ( ) ;
<unk> = new HashMap < String , Integer > ( ) ;
<unk> = new ArrayList < Integer > ( ) ;
<unk> = new ArrayList < Integer > ( ) ;
<unk> = new ArrayList < Integer > ( ) ;
<unk> = new ArrayList < Integer > ( ) ;
<unk> = new ArrayList < Integer > ( ) ;
<unk> = new ArrayList < Integer > ( ) ;
<unk> = new ArrayList < String > ( ) ;
<unk> = new ArrayList < Block > ( ) ;
<unk> = new ArrayList < Integer > ( ) ;
<unk> = new ArrayList < Integer > ( ) ;
<unk> = new ArrayList < Integer > ( ) ;
<unk> = new <unk> ( ) ;
loadSettings ( ) ;
}
private void loadSettings ( ) {
<unk> ( ) ;
setSettings ( ) ;
<unk> = new PropertiesFile ( ( <unk> + EL ) ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
}
private void <unk> ( ) {
File <unk> = new File ( <unk> ) ;
File <unk> = new File ( <unk> ) ;
File <unk> = new File ( <unk> + EL ) ;
File <unk> = new File ( <unk> + <unk> ) ;
File <unk> = new File ( <unk> + <unk> ) ;
if ( ! <unk> . exists ( ) ) {
<unk> . mkdirs ( ) ;
}
if ( ! <unk> . exists ( ) ) {
<unk> . mkdir ( ) ;
}
if ( ! <unk> . exists ( ) ) {
<unk> ( ) ;
}
if ( ! <unk> . exists ( ) ) {
<unk> ( <unk> + <unk> , " ) ;
}
if ( ! <unk> . exists ( ) ) {
<unk> ( <unk> + <unk> , " ) ;
}
}
private void <unk> ( ) {
try {
long xp = <num> , i ;
BufferedWriter out = new BufferedWriter ( new FileWriter ( <unk> + EL ) ) ;
out . write ( " ) ; out . newLine ( ) ;
out . write ( " ) ; out . newLine ( ) ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
xp = ( i * <num> ) ;
out . write ( " + String . valueOf ( i ) + " + String . valueOf ( xp ) ) ; out . newLine ( ) ;
}
out . write ( " ) ; out . newLine ( ) ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
xp = ( i * <num> ) ;
out . write ( " + String . valueOf ( i ) + " + String . valueOf ( xp ) ) ; out . newLine ( ) ;
}
out . write ( " ) ; out . newLine ( ) ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
xp = ( i * <num> ) ;
out . write ( " + String . valueOf ( i ) + " + String . valueOf ( xp ) ) ; out . newLine ( ) ;
}
out . write ( " ) ; out . newLine ( ) ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
xp = ( i * <num> ) ;
out . write ( " + String . valueOf ( i ) + " + String . valueOf ( xp ) ) ; out . newLine ( ) ;
}
out . write ( " ) ; out . newLine ( ) ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
xp = ( i * <num> ) ;
out . write ( " + String . valueOf ( i ) + " + String . valueOf ( xp ) ) ; out . newLine ( ) ;
}
out . write ( " ) ; out . newLine ( ) ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
xp = ( i * <num> ) ;
out . write ( " + String . valueOf ( i ) + " + String . valueOf ( xp ) ) ; out . newLine ( ) ;
}
out . write ( " ) ; out . newLine ( ) ;
for ( i = <num> ; i <= <unk> ; i ++ ) {
xp = ( i * <num> ) ;
out . write ( " + String . valueOf ( i ) + " + String . valueOf ( xp ) ) ; out . newLine ( ) ;
}
out . close ( ) ;
} catch ( IOException e ) {
log . severe ( " ) ;
}
}
private void <unk> ( String to , String from ) {
try {
File targetFile = new File ( to ) ;
InputStream inFile = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( from ) ;
FileWriter outFile = new FileWriter ( targetFile ) ;
int c ;
while ( ( c = inFile . read ( ) ) !=  <num> ) {
outFile . write ( c ) ;
}
inFile . close ( ) ;
outFile . close ( ) ;
} catch ( IOException e ) {
log . severe ( " + to + " ) ;
}
}
private void <unk> ( ) {
long xp ;
long check =  <num> ;
for ( int i = <num> ; i <= <unk> ; i ++ ) {
if ( <unk> . containsKey ( " + i ) ) { check = <unk> . getLong ( " + i ) ; }
xp = <unk> ( " , i , check ) ;
building [ i ] = xp ; check =  <num> ;
if ( <unk> . containsKey ( " + i ) ) { check = <unk> . getLong ( " + i ) ; }
xp = <unk> ( " , i , check ) ;
combat [ i ] = xp ; check =  <num> ;
if ( <unk> . containsKey ( " + i ) ) { check = <unk> . getLong ( " + i ) ; }
xp = <unk> ( " , i , check ) ;
<unk> [ i ] = xp ; check =  <num> ;
if ( <unk> . containsKey ( " + i ) ) { check = <unk> . getLong ( " + i ) ; }
xp = <unk> ( " , i , check ) ;
<unk> [ i ] = xp ; check =  <num> ;
if ( <unk> . containsKey ( " + i ) ) { check = <unk> . getLong ( " + i ) ; }
xp = <unk> ( " , i , check ) ;
<unk> [ i ] = xp ; check =  <num> ;
if ( <unk> . containsKey ( " + i ) ) { check = <unk> . getLong ( " + i ) ; }
xp = <unk> ( " , i , check ) ;
<unk> [ i ] = xp ; check =  <num> ;
if ( <unk> . containsKey ( " + i ) ) { check = <unk> . getLong ( " + i ) ; }
xp = <unk> ( " , i , check ) ;
<unk> [ i ] = xp ; check =  <num> ;
}
}
private long <unk> ( String <unk> , int lvl , long xp ) {
long <unk> = xp ;
int <unk> = lvl  <num> ;
if ( xp <= <num> ) {
log . warning ( " + <unk> + lvl ) ;
log . warning ( " + <unk> ) ;
if ( <unk> . equals ( " ) ) {
<unk> = building [ <unk> ] ;
}
else if ( <unk> . equals ( " ) ) {
<unk> = combat [ <unk> ] ;
}
else if ( <unk> . equals ( " ) ) {
<unk> = <unk> [ <unk> ] ;
}
else if ( <unk> . equals ( " ) ) {
<unk> = <unk> [ <unk> ] ;
}
else if ( <unk> . equals ( " ) ) {
<unk> = <unk> [ <unk> ] ;
}
else if ( <unk> . equals ( " ) ) {
<unk> = <unk> [ <unk> ] ;
}
else if ( <unk> . equals ( " ) ) {
<unk> = <unk> [ <unk> ] ;
}
<unk> += <num> ;
}
return <unk> ;
}
private void <unk> ( ) {
String build = Settings . getString ( " ) ;
String [ ] <unk> = build . split ( " ) ;
int block ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
try {
block = Integer . parseInt ( <unk> [ i ] ) ;
} catch ( NumberFormatException nfe ) {
log . severe ( " + <unk> [ i ] + " + i + " ) ;
continue ;
}
<unk> . add ( block ) ;
}
}
private void <unk> ( ) {
String exc = Settings . getString ( " ) ;
String [ ] <unk> = exc . split ( " ) ;
int block ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
try {
block = Integer . parseInt ( <unk> [ i ] ) ;
} catch ( NumberFormatException nfe ) {
log . severe ( " + <unk> [ i ] + " + i + " ) ;
continue ;
}
<unk> . add ( block ) ;
}
}
private void <unk> ( ) {
String <unk> = Settings . getString ( " ) ;
String [ ] <unk> = <unk> . split ( " ) ;
int block ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
try {
block = Integer . parseInt ( <unk> [ i ] ) ;
} catch ( NumberFormatException nfe ) {
log . severe ( " + <unk> [ i ] + " + i + " ) ;
continue ;
}
<unk> . add ( block ) ;
}
}
private void <unk> ( ) {
String mine = Settings . getString ( " ) ;
String [ ] <unk> = mine . split ( " ) ;
int block ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
try {
block = Integer . parseInt ( <unk> [ i ] ) ;
} catch ( NumberFormatException nfe ) {
log . severe ( " + <unk> [ i ] + " + i + " ) ;
continue ;
}
<unk> . add ( block ) ;
}
}
private void <unk> ( ) {
String <unk> = Settings . getString ( " ) ;
String [ ] <unk> = <unk> . split ( " ) ;
int block ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
try {
block = Integer . parseInt ( <unk> [ i ] ) ;
} catch ( NumberFormatException nfe ) {
log . severe ( " + <unk> [ i ] + " + i + " ) ;
continue ;
}
<unk> . add ( block ) ;
}
}
private void <unk> ( ) {
String wood = Settings . getString ( " ) ;
String [ ] <unk> = wood . split ( " ) ;
int block ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
try {
block = Integer . parseInt ( <unk> [ i ] ) ;
} catch ( NumberFormatException nfe ) {
log . severe ( " + <unk> [ i ] + " + i + " ) ;
continue ;
}
<unk> . add ( block ) ;
}
}
private void <unk> ( ) {
String <unk> = Settings . getString ( " ) ;
String [ ] <unk> = <unk> . split ( " ) ;
int block ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
try {
block = Integer . parseInt ( <unk> [ i ] ) ;
} catch ( NumberFormatException nfe ) {
log . severe ( " + <unk> [ i ] + " + i + " ) ;
continue ;
}
<unk> . add ( block ) ;
}
}
private void <unk> ( ) {
String A = Settings . getString ( " ) ;
String [ ] <unk> = A . split ( " ) ;
int block ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
try {
block = Integer . parseInt ( <unk> [ i ] ) ;
} catch ( NumberFormatException nfe ) {
log . severe ( " + <unk> [ i ] + " + i + " ) ;
continue ;
}
<unk> . add ( block ) ;
}
}
private void <unk> ( ) {
String S = Settings . getString ( " ) ;
String [ ] <unk> = S . split ( " ) ;
int block ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
try {
block = Integer . parseInt ( <unk> [ i ] ) ;
} catch ( NumberFormatException nfe ) {
log . severe ( " + <unk> [ i ] + " + i + " ) ;
continue ;
}
<unk> . add ( block ) ;
}
}
private void <unk> ( ) {
if ( MySQL ) {
Connection conn = <unk> ( ) ;
PreparedStatement ps = null ;
try {
ps = conn . prepareStatement ( " ) ;
ResultSet rs = ps . executeQuery ( ) ;
while ( rs . next ( ) ) {
String [ ] <unk> = rs . getString ( " ) . split ( " ) ;
World world = etc . getServer ( ) . getWorld ( Integer . valueOf ( <unk> [ <num> ] ) ) ;
Block block = new Block ( ) ;
block . setType ( Integer . valueOf ( <unk> [ <num> ] ) ) ;
block . setX ( Integer . valueOf ( <unk> [ <num> ] ) ) ;
block . setY ( Integer . valueOf ( <unk> [ <num> ] ) ) ;
block . setZ ( Integer . valueOf ( <unk> [ <num> ] ) ) ;
block . <unk> ( world ) ;
<unk> . add ( block ) ;
}
} catch ( SQLException ex ) {
log . severe ( " ) ;
} finally {
try {
if ( conn != null ) {
conn . close ( ) ;
}
} catch ( SQLException sqle ) {
log . severe ( " ) ;
}
}
}
else {
try {
Scanner scanner = new Scanner ( new File ( <unk> + <unk> ) ) ;
while ( scanner . hasNextLine ( ) ) {
String line = scanner . nextLine ( ) ;
if ( ! line . contains ( " ) ) {
String [ ] <unk> = line . split ( " ) ;
World world = etc . getServer ( ) . getWorld ( Integer . valueOf ( <unk> [ <num> ] ) ) ;
Block block = new Block ( ) ;
block . setType ( Integer . valueOf ( <unk> [ <num> ] ) ) ;
block . setX ( Integer . valueOf ( <unk> [ <num> ] ) ) ;
block . setY ( Integer . valueOf ( <unk> [ <num> ] ) ) ;
block . setZ ( Integer . valueOf ( <unk> [ <num> ] ) ) ;
block . <unk> ( world ) ;
<unk> . add ( block ) ;
}
}
scanner . close ( ) ;
} catch ( Exception e ) {
log . severe ( " ) ;
}
}
}
private void setSettings ( ) {
File <unk> = new File ( <unk> + Set ) ;
if ( ! <unk> . exists ( ) ) {
<unk> ( <unk> + Set , " ) ;
}
Settings = new PropertiesFile ( <unk> + Set ) ;
try {
<unk> = Settings . getInt ( " ) ;
} catch ( Exception e ) {
<unk> = <num> ;
}
if ( <unk> <= <num> ) {
log . warning ( " ) ;
<unk> = <num> ;
}
UserName = Settings . getString ( " ) ;
<unk> = Settings . getString ( " ) ;
<unk> = Settings . getString ( " ) ;
Driver = Settings . getString ( " ) ;
MySQL = Settings . getBoolean ( " ) ;
<unk> = Settings . getBoolean ( " ) ;
<unk> = Settings . getInt ( " ) ;
<unk> = Settings . getInt ( " ) ;
<unk> = Settings . getInt ( " ) ;
<unk> = Settings . getInt ( " ) ;
<unk> = Settings . getInt ( " ) ;
<unk> = Settings . getInt ( " ) ;
<unk> = Settings . getInt ( " ) ;
<unk> = Settings . getDouble ( " ) ;
<unk> = Settings . getDouble ( " ) ;
<unk> = Settings . getDouble ( " ) ;
<unk> = Settings . getDouble ( " ) ;
<unk> = Settings . getDouble ( " ) ;
<unk> = Settings . getDouble ( " ) ;
<unk> = Settings . getDouble ( " ) ;
<unk> = Settings . getDouble ( " ) ;
<unk> = Settings . getDouble ( " ) ;
<unk> = Settings . getDouble ( " ) ;
building = new long [ ( <unk> + <num> ) ] ;
combat = new long [ ( <unk> + <num> ) ] ;
<unk> = new long [ ( <unk> + <num> ) ] ;
<unk> = new long [ ( <unk> + <num> ) ] ;
<unk> = new long [ ( <unk> + <num> ) ] ;
<unk> = new long [ ( <unk> + <num> ) ] ;
<unk> = new long [ ( <unk> + <num> ) ] ;
building [ <num> ] = <num> ;
combat [ <num> ] = <num> ;
<unk> [ <num> ] = <num> ;
<unk> [ <num> ] = <num> ;
<unk> [ <num> ] = <num> ;
<unk> [ <num> ] = <num> ;
<unk> [ <num> ] = <num> ;
if ( MySQL && ! <unk> ) {
try {
Class . forName ( Driver ) ;
} catch ( ClassNotFoundException cnfe ) {
log . severe ( " + Driver ) ;
log . severe ( " ) ;
MySQL = false ;
}
}
if ( MySQL ) {
<unk> ( ) ;
}
<unk> . start ( ) ;
}
private void <unk> ( ) {
try {
int i = <num> ;
BufferedReader in = new BufferedReader ( new FileReader ( <unk> + <unk> ) ) ;
String line ;
while ( ( line = in . readLine ( ) ) != null ) {
if ( ! line . contains ( " ) ) {
String [ ] IE = line . split ( " ) ;
int ID = <num> , <unk> = <num> ;
try {
ID = Integer . parseInt ( IE [ <num> ] ) ;
<unk> = Integer . parseInt ( IE [ <num> ] ) ;
} catch ( NumberFormatException nfe ) {
log . info ( " + String . valueOf ( i ) ) ;
i ++ ;
continue ;
}
<unk> . put ( ID , <unk> ) ;
}
else {
i ++ ;
}
}
in . close ( ) ;
} catch ( IOException e ) {
log . severe ( " ) ;
}
}
private void <unk> ( ) {
try {
int i = <num> ;
BufferedReader in = new BufferedReader ( new FileReader ( <unk> + <unk> ) ) ;
String line ;
while ( ( line = in . readLine ( ) ) != null ) {
if ( ! line . contains ( " ) ) {
String [ ] <unk> = line . split ( " ) ;
int <unk> = <num> ;
try {
<unk> = Integer . parseInt ( <unk> [ <num> ] ) ;
} catch ( NumberFormatException nfe ) {
log . info ( " + String . valueOf ( i ) ) ;
continue ;
}
<unk> . put ( <unk> [ <num> ] , <unk> ) ;
}
else {
i ++ ;
}
}
in . close ( ) ;
} catch ( IOException e ) {
log . severe ( " ) ;
}
}
private void <unk> ( ) {
String <unk> = Settings . getString ( " ) ;
String [ ] <unk> = <unk> . split ( " ) ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
<unk> . add ( <unk> [ i ] ) ;
}
}
private void <unk> ( ) {
String T1 = ( " ) ;
String T2 = ( " ) ;
Connection conn = <unk> ( ) ;
Statement st = null ;
try {
st = conn . createStatement ( ) ;
st . addBatch ( T1 ) ;
st . addBatch ( T2 ) ;
st . executeBatch ( ) ;
} catch ( SQLException sqle ) {
log . log ( Level . SEVERE , " , sqle ) ;
}
finally {
try {
if ( st != null && ! st . isClosed ( ) ) {
st . close ( ) ;
}
if ( conn != null && ! conn . isClosed ( ) ) {
conn . close ( ) ;
}
} catch ( SQLException <unk> ) {
}
}
}
public boolean <unk> ( int ID ) {
return <unk> . contains ( ID ) ;
}
public boolean <unk> ( int ID ) {
return <unk> . contains ( ID ) ;
}
public boolean <unk> ( int ID ) {
return <unk> . contains ( ID ) ;
}
public boolean <unk> ( int ID ) {
return <unk> . contains ( ID ) ;
}
public boolean <unk> ( int ID ) {
return <unk> . contains ( ID ) ;
}
public boolean <unk> ( int ID ) {
return <unk> . contains ( ID ) ;
}
public boolean <unk> ( String name ) {
return <unk> . contains ( name ) ;
}
public boolean <unk> ( int ID ) {
return <unk> . contains ( ID ) ;
}
public boolean RA ( int ID ) {
return <unk> . contains ( ID ) ;
}
public boolean <unk> ( int ID ) {
return <unk> . contains ( ID ) ;
}
public boolean <unk> ( Block block ) {
return <unk> . contains ( block ) ;
}
public void <unk> ( Block block ) {
<unk> . add ( block ) ;
}
public void <unk> ( Block block ) {
<unk> . remove ( block ) ;
}
public int <unk> ( int ID ) {
if ( <unk> . containsKey ( ID ) ) {
return <unk> . get ( ID ) ;
}
return <num> ;
}
public int <unk> ( String <unk> ) {
if ( <unk> . containsKey ( <unk> ) ) {
return <unk> . get ( <unk> ) ;
}
return <num> ;
}
public long <unk> ( String type , int L ) {
long xp = <num> ;
if ( L > <unk> ) {
L = <unk> ;
}
if ( type . equals ( " ) ) {
xp = building [ L ] ;
}
else if ( type . equals ( " ) ) {
xp = combat [ L ] ;
}
else if ( type . equals ( " ) ) {
xp = <unk> [ L ] ;
}
else if ( type . equals ( " ) ) {
xp = <unk> [ L ] ;
}
else if ( type . equals ( " ) ) {
xp = <unk> [ L ] ;
}
else if ( type . equals ( " ) ) {
xp = <unk> [ L ] ;
}
else if ( type . equals ( " ) ) {
xp = <unk> [ L ] ;
}
if ( xp <= <num> ) {
log . warning ( " + type + " + L ) ;
}
return xp ;
}
private <unk> <unk> ( String name ) {
if ( ! keyExists ( name ) ) {
<unk> ( name ) ;
}
else if ( ! <unk> . containsKey ( name ) ) {
<unk> ( name ) ;
}
return <unk> . get ( name ) ;
}
public void <unk> ( String Type , Player player , long <unk> ) {
int lvl , <unk> ;
long exp , <unk> ;
<unk> <unk> = <unk> ( player . getName ( ) ) ;
if ( Type . equals ( " ) ) {
lvl = getLevel ( player . getName ( ) , Type ) ;
exp = getXP ( player . getName ( ) , Type ) + <unk> ;
<unk> = lvl + <num> ;
<unk> = <unk> ( Type , <unk> ) ;
if ( ( exp >= <unk> ) && ( lvl < <unk> ) ) {
String level = String . valueOf ( <unk> ) ;
player . sendMessage ( " + level ) ;
<unk> . <unk> ( <num> ) ;
}
<unk> . <unk> ( <unk> ) ;
}
else if ( Type . equals ( " ) ) {
lvl = getLevel ( player . getName ( ) , Type ) ;
exp = getXP ( player . getName ( ) , Type ) + <unk> ;
<unk> = lvl + <num> ;
<unk> = <unk> ( Type , <unk> ) ;
if ( ( exp >= <unk> ) && ( lvl < <unk> ) ) {
String level = String . valueOf ( <unk> ) ;
player . sendMessage ( " + level ) ;
<unk> . <unk> ( <num> ) ;
}
<unk> . <unk> ( <unk> ) ;
}
else if ( Type . equals ( " ) ) {
lvl = getLevel ( player . getName ( ) , Type ) ;
exp = getXP ( player . getName ( ) , Type ) + <unk> ;
<unk> = lvl + <num> ;
<unk> = <unk> ( Type , <unk> ) ;
if ( ( exp >= <unk> ) && ( lvl < <unk> ) ) {
String level = String . valueOf ( <unk> ) ;
player . sendMessage ( " + level ) ;
<unk> . <unk> ( <num> ) ;
}
<unk> . <unk> ( <unk> ) ;
}
else if ( Type . equals ( " ) ) {
lvl = getLevel ( player . getName ( ) , Type ) ;
exp = getXP ( player . getName ( ) , Type ) + <unk> ;
<unk> = lvl + <num> ;
<unk> = <unk> ( Type , <unk> ) ;
if ( ( exp >= <unk> ) && ( lvl < <unk> ) ) {
String level = String . valueOf ( <unk> ) ;
player . sendMessage ( " + level ) ;
<unk> . <unk> ( <num> ) ;
}
<unk> . <unk> ( <unk> ) ;
}
else if ( Type . equals ( " ) ) {
lvl = getLevel ( player . getName ( ) , Type ) ;
exp = getXP ( player . getName ( ) , Type ) + <unk> ;
<unk> = lvl + <num> ;
<unk> = <unk> ( Type , <unk> ) ;
if ( ( exp >= <unk> ) && ( lvl < <unk> ) ) {
String level = String . valueOf ( <unk> ) ;
player . sendMessage ( " + level ) ;
<unk> . <unk> ( <num> ) ;
}
<unk> . <unk> ( <unk> ) ;
}
else if ( Type . equals ( " ) ) {
lvl = getLevel ( player . getName ( ) , Type ) ;
exp = getXP ( player . getName ( ) , Type ) + <unk> ;
<unk> = lvl + <num> ;
<unk> = <unk> ( Type , <unk> ) ;
if ( ( exp >= <unk> ) && ( lvl < <unk> ) ) {
String level = String . valueOf ( <unk> ) ;
player . sendMessage ( " + level ) ;
<unk> . <unk> ( <num> ) ;
}
<unk> . <unk> ( <unk> ) ;
}
else if ( Type . equals ( " ) ) {
lvl = getLevel ( player . getName ( ) , Type ) ;
exp = getXP ( player . getName ( ) , Type ) + <unk> ;
<unk> = lvl + <num> ;
<unk> = <unk> ( Type , <unk> ) ;
if ( ( exp >= <unk> ) && ( lvl < <unk> ) ) {
String level = String . valueOf ( <unk> ) ;
player . sendMessage ( " + level ) ;
<unk> . <unk> ( <num> ) ;
}
<unk> . <unk> ( <unk> ) ;
}
<unk> . put ( player . getName ( ) , <unk> ) ;
}
public boolean <unk> ( String player , String Type ) {
if ( Type . equals ( " ) ) {
return getLevel ( player , Type ) >= <unk> ;
}
else if ( Type . equals ( " ) ) {
return getLevel ( player , Type ) >= <unk> ;
}
else if ( Type . equals ( " ) ) {
return getLevel ( player , Type ) >= <unk> ;
}
else if ( Type . equals ( " ) ) {
return getLevel ( player , Type ) >= <unk> ;
}
else if ( Type . equals ( " ) ) {
return getLevel ( player , Type ) >= <unk> ;
}
else if ( Type . equals ( " ) ) {
return getLevel ( player , Type ) >= <unk> ;
}
else if ( Type . equals ( " ) ) {
return getLevel ( player , Type ) >= <unk> ;
}
return false ;
}
public int getLevel ( String player , String Type ) {
int <unk> = <num> ;
<unk> <unk> = <unk> ( player ) ;
if ( Type . equals ( " ) ) {
<unk> = <unk> ( <unk> . <unk> ( ) , " ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> ( <unk> . <unk> ( ) , " ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> ( <unk> . <unk> ( ) , " ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> ( <unk> . <unk> ( ) , " ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> ( <unk> . <unk> ( ) , " ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> ( <unk> . <unk> ( ) , " ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> ( <unk> . <unk> ( ) , " ) ;
}
return <unk> ;
}
public long getXP ( String player , String Type ) {
long <unk> = <num> ;
<unk> <unk> = <unk> ( player ) ;
if ( Type . equals ( " ) ) {
<unk> = <unk> . <unk> ( ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> . <unk> ( ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> . <unk> ( ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> . <unk> ( ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> . <unk> ( ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> . <unk> ( ) ;
}
else if ( Type . equals ( " ) ) {
<unk> = <unk> . <unk> ( ) ;
}
return <unk> ;
}
public int <unk> ( String name ) {
int total = <num> ;
total += getLevel ( name , " ) ;
total += getLevel ( name , " ) ;
total += getLevel ( name , " ) ;
total += getLevel ( name , " ) ;
total += getLevel ( name , " ) ;
total += getLevel ( name , " ) ;
total += getLevel ( name , " ) ;
return total ;
}
public long <unk> ( String name ) {
long total = <num> ;
total += getXP ( name , " ) ;
total += getXP ( name , " ) ;
total += getXP ( name , " ) ;
total += getXP ( name , " ) ;
total += getXP ( name , " ) ;
total += getXP ( name , " ) ;
total += getXP ( name , " ) ;
return total ;
}
public boolean <unk> ( String player , String Type ) {
double <unk> = Math . random ( ) ;
int <unk> = getLevel ( player , Type ) ;
if ( <unk> > <unk> ) {
int <unk> = <num> ;
while ( <unk> > <unk> ) {
<unk> ++ ;
<unk> -= <unk> ;
}
double percent = <unk> ;
while ( <unk> > <num> ) {
percent += <unk> ;
<unk>  ;
}
if ( percent > <unk> ) {
return true ;
}
}
return false ;
}
public boolean <unk> ( String player , String Type ) {
double <unk> = Math . random ( ) ;
int <unk> = getLevel ( player , Type ) ;
if ( <unk> > <unk> ) {
int <unk> = <num> ;
while ( <unk> > <unk> ) {
<unk> ++ ;
<unk> -= <unk> ;
}
double percent = <unk> ;
while ( <unk> > <num> ) {
percent += <unk> ;
<unk>  ;
}
if ( percent > <unk> ) {
return true ;
}
}
return false ;
}
public boolean <unk> ( String player , String Type ) {
double <unk> = Math . random ( ) ;
int <unk> = getLevel ( player , Type ) ;
if ( <unk> > <unk> ) {
int <unk> = <num> ;
while ( <unk> > <unk> ) {
<unk> ++ ;
<unk> -= <unk> ;
}
double percent = <unk> ;
while ( <unk> > <num> ) {
percent += <unk> ;
<unk>  ;
}
if ( percent > <unk> ) {
return true ;
}
}
return false ;
}
public boolean <unk> ( String player , String Type ) {
double <unk> = Math . random ( ) ;
int <unk> = getLevel ( player , Type ) ;
if ( <unk> > <unk> ) {
int <unk> = <num> ;
while ( <unk> > <unk> ) {
<unk> ++ ;
<unk> -= <unk> ;
}
double percent = <unk> ;
while ( <unk> > <num> ) {
percent += <unk> ;
<unk>  ;
}
if ( percent > <unk> ) {
return true ;
}
}
return false ;
}
public boolean <unk> ( String player , String Type ) {
double <unk> = Math . random ( ) ;
int <unk> = getLevel ( player , Type ) ;
if ( <unk> > <unk> ) {
int <unk> = <num> ;
while ( <unk> > <unk> ) {
<unk> ++ ;
<unk> -= <unk> ;
}
double percent = <unk> ;
while ( <unk> > <num> ) {
percent += <unk> ;
<unk>  ;
}
if ( percent > <unk> ) {
return true ;
}
}
return false ;
}
private int <unk> ( long xp , String skill ) {
int <unk> = <num> ;
long <unk> = <unk> ( skill , ( <unk> + <num> ) ) ;
while ( ( xp >= <unk> ) && ( <unk> < <unk> ) ) {
<unk> ++ ;
<unk> = <unk> ( skill , ( <unk> + <num> ) ) ;
}
return <unk> ;
}
private Connection <unk> ( ) {
Connection conn = null ;
if ( <unk> ) {
conn = etc . <unk> ( ) ;
}
else {
try {
conn = DriverManager . getConnection ( <unk> , UserName , <unk> ) ;
} catch ( SQLException e ) {
log . severe ( " ) ;
}
}
return conn ;
}
public boolean keyExists ( String name ) {
if ( MySQL ) {
boolean exists = false ;
Connection conn = <unk> ( ) ;
try {
PreparedStatement ps = conn . prepareStatement ( " ) ;
ps . setString ( <num> , name ) ;
ResultSet rs = ps . executeQuery ( ) ;
if ( rs . next ( ) ) {
exists = true ;
}
} catch ( SQLException ex ) {
log . severe ( " + name + " ) ;
} finally {
try {
if ( conn != null && ! conn . isClosed ( ) ) {
conn . close ( ) ;
}
} catch ( SQLException sqle ) {
log . severe ( " ) ;
}
}
return exists ;
} else {
File <unk> = new File ( <unk> + name + <unk> ) ;
return <unk> . exists ( ) ;
}
}
public void <unk> ( String name ) {
if ( MySQL ) {
Connection conn = <unk> ( ) ;
if ( conn != null ) {
try {
PreparedStatement ps = conn . prepareStatement ( " ) ;
ps . setString ( <num> , name ) ;
ps . setInt ( <num> , <num> ) ;
ps . setLong ( <num> , <num> ) ;
ps . setInt ( <num> , <num> ) ;
ps . setLong ( <num> , <num> ) ;
ps . setInt ( <num> , <num> ) ;
ps . setLong ( <num> , <num> ) ;
ps . setInt ( <num> , <num> ) ;
ps . setLong ( <num> , <num> ) ;
ps . setInt ( <num> , <num> ) ;
ps . setLong ( <num> , <num> ) ;
ps . setInt ( <num> , <num> ) ;
ps . setLong ( <num> , <num> ) ;
ps . setInt ( <num> , <num> ) ;
ps . setLong ( <num> , <num> ) ;
ps . executeUpdate ( ) ;
} catch ( SQLException ex ) {
log . severe ( " + name + " ) ;
} finally {
try {
if ( conn != null && ! conn . isClosed ( ) ) {
conn . close ( ) ;
}
} catch ( SQLException sqle ) {
log . severe ( " ) ;
}
}
}
}
else {
<unk> = new PropertiesFile ( <unk> + name + <unk> ) ;
<unk> . setInt ( " , <num> ) ; <unk> . setLong ( " , <num> ) ;
<unk> . setInt ( " , <num> ) ; <unk> . setLong ( " , <num> ) ;
<unk> . setInt ( " , <num> ) ; <unk> . setLong ( " , <num> ) ;
<unk> . setInt ( " , <num> ) ; <unk> . setLong ( " , <num> ) ;
<unk> . setInt ( " , <num> ) ; <unk> . setLong ( " , <num> ) ;
<unk> . setInt ( " , <num> ) ; <unk> . setLong ( " , <num> ) ;
<unk> . setInt ( " , <num> ) ; <unk> . setLong ( " , <num> ) ;
<unk> . save ( ) ;
}
<unk> <unk> = new <unk> ( name ) ;
<unk> . put ( name , <unk> ) ;
}
public void <unk> ( ) {
ArrayList < Player > <unk> = new ArrayList < Player > ( ) ;
<unk> . addAll ( etc . getServer ( ) . getPlayerList ( ) ) ;
for ( Player player : <unk> ) {
if ( player . canUseCommand ( " ) ) {
if ( keyExists ( player . getName ( ) ) ) {
<unk> ( player . getName ( ) ) ;
}
else {
<unk> ( player . getName ( ) ) ;
}
}
}
}
public void <unk> ( String name ) {
<unk> <unk> ;
int <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> ;
long <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> ;
if ( MySQL ) {
Connection conn = <unk> ( ) ;
if ( conn != null ) {
try {
PreparedStatement ps = conn . prepareStatement ( " ) ;
ps . setString ( <num> , name ) ;
ResultSet rs = ps . executeQuery ( ) ;
if ( rs . next ( ) ) {
<unk> = rs . getInt ( " ) ;
<unk> = rs . getLong ( " ) ;
<unk> = rs . getInt ( " ) ;
<unk> = rs . getLong ( " ) ;
<unk> = rs . getInt ( " ) ;
<unk> = rs . getLong ( " ) ;
<unk> = rs . getInt ( " ) ;
<unk> = rs . getLong ( " ) ;
<unk> = rs . getInt ( " ) ;
<unk> = rs . getLong ( " ) ;
<unk> = rs . getInt ( " ) ;
<unk> = rs . getLong ( " ) ;
<unk> = rs . getInt ( " ) ;
<unk> = rs . getLong ( " ) ;
}
} catch ( SQLException ex ) {
log . severe ( " + name ) ;
} finally {
try {
if ( conn != null ) {
conn . close ( ) ;
}
} catch ( SQLException sqle ) {
log . severe ( " ) ;
}
}
}
}
else {
<unk> = new PropertiesFile ( <unk> + name + <unk> ) ;
try {
<unk> . load ( ) ;
<unk> = <unk> . getInt ( " ) ; <unk> = <unk> . getLong ( " ) ;
<unk> = <unk> . getInt ( " ) ; <unk> = <unk> . getLong ( " ) ;
<unk> = <unk> . getInt ( " ) ; <unk> = <unk> . getLong ( " ) ;
<unk> = <unk> . getInt ( " ) ; <unk> = <unk> . getLong ( " ) ;
<unk> = <unk> . getInt ( " ) ; <unk> = <unk> . getLong ( " ) ;
<unk> = <unk> . getInt ( " ) ; <unk> = <unk> . getLong ( " ) ;
<unk> = <unk> . getInt ( " ) ; <unk> = <unk> . getLong ( " ) ;
} catch ( IOException e ) {
log . severe ( " ) ;
e . printStackTrace ( ) ;
}
}
<unk> = new <unk> ( name ) ;
<unk> . <unk> ( <unk> ) ; <unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> ) ; <unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> ) ; <unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> ) ; <unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> ) ; <unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> ) ; <unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> ) ; <unk> . <unk> ( <unk> ) ;
<unk> . put ( name , <unk> ) ;
}
public void <unk> ( String player ) {
<unk> <unk> = <unk> ( player ) ;
<unk> . remove ( player ) ;
int <unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ;
long <unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ,
<unk> = <unk> . <unk> ( ) ;
if ( MySQL ) {
Connection conn = <unk> ( ) ;
PreparedStatement ps = null ;
if ( conn != null ) {
try {
ps = conn . prepareStatement ( " ) ;
ps . setInt ( <num> , <unk> ) ;
ps . setLong ( <num> , <unk> ) ;
ps . setInt ( <num> , <unk> ) ;
ps . setLong ( <num> , <unk> ) ;
ps . setInt ( <num> , <unk> ) ;
ps . setLong ( <num> , <unk> ) ;
ps . setInt ( <num> , <unk> ) ;
ps . setLong ( <num> , <unk> ) ;
ps . setInt ( <num> , <unk> ) ;
ps . setLong ( <num> , <unk> ) ;
ps . setInt ( <num> , <unk> ) ;
ps . setLong ( <num> , <unk> ) ;
ps . setInt ( <num> , <unk> ) ;
ps . setLong ( <num> , <unk> ) ;
ps . setString ( <num> , player ) ;
ps . executeUpdate ( ) ;
} catch ( SQLException ex ) {
log . severe ( " + player + " ) ;
} finally {
try {
if ( conn != null ) {
conn . close ( ) ;
}
} catch ( SQLException sqle ) {
log . severe ( " ) ;
}
}
}
}
else {
<unk> = new PropertiesFile ( <unk> + player + <unk> ) ;
<unk> . setInt ( " , <unk> ) ; <unk> . setLong ( " , <unk> ) ;
<unk> . setInt ( " , <unk> ) ; <unk> . setLong ( " , <unk> ) ;
<unk> . setInt ( " , <unk> ) ; <unk> . setLong ( " , <unk> ) ;
<unk> . setInt ( " , <unk> ) ; <unk> . setLong ( " , <unk> ) ;
<unk> . setInt ( " , <unk> ) ; <unk> . setLong ( " , <unk> ) ;
<unk> . setInt ( " , <unk> ) ; <unk> . setLong ( " , <unk> ) ;
<unk> . setInt ( " , <unk> ) ; <unk> . setLong ( " , <unk> ) ;
<unk> . save ( ) ;
}
}
public void <unk> ( ) {
etc . getServer ( ) . messageAll ( " ) ;
log . info ( " ) ;
<unk> <unk> ;
if ( MySQL ) {
Connection conn = <unk> ( ) ;
PreparedStatement ps = null ;
if ( conn != null ) {
try {
ps = conn . prepareStatement ( " ) ;
for ( String key : <unk> . keySet ( ) ) {
<unk> = <unk> . get ( key ) ;
ps . setInt ( <num> , <unk> . <unk> ( ) ) ;
ps . setLong ( <num> , <unk> . <unk> ( ) ) ;
ps . setInt ( <num> , <unk> . <unk> ( ) ) ;
ps . setLong ( <num> , <unk> . <unk> ( ) ) ;
ps . setInt ( <num> , <unk> . <unk> ( ) ) ;
ps . setLong ( <num> , <unk> . <unk> ( ) ) ;
ps . setInt ( <num> , <unk> . <unk> ( ) ) ;
ps . setLong ( <num> , <unk> . <unk> ( ) ) ;
ps . setInt ( <num> , <unk> . <unk> ( ) ) ;
ps . setLong ( <num> , <unk> . <unk> ( ) ) ;
ps . setInt ( <num> , <unk> . <unk> ( ) ) ;
ps . setLong ( <num> , <unk> . <unk> ( ) ) ;
ps . setInt ( <num> , <unk> . <unk> ( ) ) ;
ps . setLong ( <num> , <unk> . <unk> ( ) ) ;
ps . setString ( <num> , key ) ;
ps . addBatch ( ) ;
}
ps . executeBatch ( ) ;
} catch ( SQLException ex ) {
log . warning ( " ) ;
} finally {
try {
if ( conn != null ) {
conn . close ( ) ;
}
} catch ( SQLException sqle ) {
log . warning ( " ) ;
}
}
}
}
else {
for ( String key : <unk> . keySet ( ) ) {
<unk> = new PropertiesFile ( <unk> + key + <unk> ) ;
<unk> = <unk> . get ( key ) ;
<unk> . setInt ( " , <unk> . <unk> ( ) ) ; <unk> . setLong ( " , <unk> . <unk> ( ) ) ;
<unk> . setInt ( " , <unk> . <unk> ( ) ) ; <unk> . setLong ( " , <unk> . <unk> ( ) ) ;
<unk> . setInt ( " , <unk> . <unk> ( ) ) ; <unk> . setLong ( " , <unk> . <unk> ( ) ) ;
<unk> . setInt ( " , <unk> . <unk> ( ) ) ; <unk> . setLong ( " , <unk> . <unk> ( ) ) ;
<unk> . setInt ( " , <unk> . <unk> ( ) ) ; <unk> . setLong ( " , <unk> . <unk> ( ) ) ;
<unk> . setInt ( " , <unk> . <unk> ( ) ) ; <unk> . setLong ( " , <unk> . <unk> ( ) ) ;
<unk> . setInt ( " , <unk> . <unk> ( ) ) ; <unk> . setLong ( " , <unk> . <unk> ( ) ) ;
}
}
<unk> ( ) ;
etc . getServer ( ) . messageAll ( " ) ;
log . info ( " ) ;
}
public void <unk> ( ) {
Connection conn = <unk> ( ) ;
PreparedStatement ps = null ;
if ( conn != null ) {
try {
ps = conn . prepareStatement ( " ) ;
ps . executeUpdate ( ) ;
ps . close ( ) ;
} catch ( SQLException ex ) {
log . severe ( " ) ;
} finally {
try {
if ( conn != null ) {
conn . close ( ) ;
}
} catch ( SQLException sqle ) {
log . severe ( " ) ;
}
}
}
}
public void <unk> ( ) {
<unk> = CR . <unk> ;
<unk> . clear ( ) ;
<unk> . addAll ( <unk> . <unk> ) ;
if ( MySQL ) {
<unk> ( ) ;
Connection conn = <unk> ( ) ;
PreparedStatement ps = null ;
if ( conn != null ) {
try {
for ( Block block : <unk> ) {
ps = conn . prepareStatement ( " ) ;
ps . setString ( <num> , <unk> ( block ) ) ;
ps . executeUpdate ( ) ;
}
} catch ( SQLException ex ) {
log . log ( Level . SEVERE , " , ex ) ;
} finally {
try {
if ( conn != null ) {
conn . close ( ) ;
}
} catch ( SQLException sqle ) {
log . severe ( " ) ;
}
}
}
}
else {
try {
File <unk> = new File ( <unk> + <unk> ) ;
if ( ! <unk> . exists ( ) ) {
<unk> . createNewFile ( ) ;
}
else {
<unk> . delete ( ) ;
<unk> . createNewFile ( ) ;
}
BufferedWriter bw = new BufferedWriter ( new FileWriter ( <unk> ) ) ;
for ( Block block : <unk> ) {
bw . write ( <unk> ( block ) ) ;
bw . newLine ( ) ;
}
bw . close ( ) ;
} catch ( Exception ex ) {
log . severe ( " + <unk> ) ;
}
}
}
public String <unk> ( Block block ) {
StringBuffer <unk> = new StringBuffer ( ) ;
<unk> . append ( block . getType ( ) ) ;
<unk> . append ( " ) ;
<unk> . append ( block . getX ( ) ) ;
<unk> . append ( " ) ;
<unk> . append ( block . getY ( ) ) ;
<unk> . append ( " ) ;
<unk> . append ( block . getZ ( ) ) ;
<unk> . append ( " ) ;
<unk> . append ( block . getWorld ( ) . getType ( ) . getId ( ) ) ;
return <unk> . toString ( ) ;
}
public void <unk> ( ) {
try {
<unk> . disable ( ) ;
<unk> = null ;
<unk> save = new <unk> ( ) ;
save . start ( ) ;
} catch ( NoClassDefFoundError <unk> ) {
<unk> ( ) ;
} catch ( NullPointerException <unk> ) {
<unk> ( ) ;
}
}
private class <unk> extends Thread {
boolean running = false ;
public <unk> ( ) {
running = true ;
}
public void disable ( ) {
running = false ;
}
public void run ( ) {
while ( running ) {
try {
sleep ( <unk> * <num> ) ;
} catch ( InterruptedException e ) { }
if ( running ) {
<unk> ( ) ;
<unk> ( ) ;
}
}
if ( ! running ) {
if ( ! isInterrupted ( ) ) {
this . interrupt ( ) ;
}
}
}
}
public void <unk> ( ) {
try {
<unk> save = new <unk> ( ) ;
save . start ( ) ;
while ( ! save . isInterrupted ( ) ) {
continue ;
}
} catch ( NoClassDefFoundError <unk> ) {
<unk> ( ) ;
}
}
private class <unk> extends Thread {
public void run ( ) {
<unk> ( ) ;
<unk> ( ) ;
this . interrupt ( ) ;
}
}
}
package edu . <unk> . <unk> . <unk> . server ;
import java . util . ArrayList ;
import java . util . List ;
import edu . <unk> . <unk> . <unk> . shared . Message ;
import edu . <unk> . <unk> . <unk> . shared . <unk> ;
import com . google . gwt . user . server . rpc . RemoteServiceServlet ;
import javax . <unk> . <unk> ;
import javax . <unk> . <unk> ;
import javax . <unk> . Query ;
public class <unk> extends RemoteServiceServlet implements
<unk> {
private static final long serialVersionUID = <num> ;
private static final <unk> <unk> = <unk> . get ( ) ;
@Override
public List < Message > getMessages ( Long <unk> ) {
<unk> pm = <unk> . <unk> ( ) ;
Query query = pm . <unk> ( Message . class ) ;
query . <unk> ( " ) ;
query . setFilter ( " ) ;
query . setOrdering ( " ) ;
if ( <unk> == <num> ) {
query . setRange ( <num> , <unk> . <unk> ) ;
}
@SuppressWarnings("unchecked")
List < Message > messages = ( List < Message > ) query . execute ( <unk> ) ;
return new ArrayList < Message > ( messages ) ;
}
}
package edu . <unk> . <unk> . <unk> . server ;
import javax . <unk> . <unk> ;
import javax . <unk> . <unk> ;
public final class <unk> {
private static final <unk> <unk> =
<unk> . <unk> ( " ) ;
private <unk> ( ) { }
public static <unk> get ( ) {
return <unk> ;
}
}
package edu . <unk> . <unk> . <unk> . shared ;
import com . google . gwt . user . client . rpc . AsyncCallback ;
public interface <unk> {
void <unk> ( AsyncCallback < String > callback ) ;
}
package edu . <unk> . <unk> . <unk> . shared ;
import com . google . gwt . user . client . rpc . RemoteService ;
import com . google . gwt . user . client . rpc . RemoteServiceRelativePath ;
<unk>
public interface <unk> extends RemoteService {
String <unk> ( ) ;
package edu . <unk> . <unk> . <unk> . shared ;
import java . io . Serializable ;
import javax . <unk> . annotations . <unk> ;
import javax . <unk> . annotations . <unk> ;
import javax . <unk> . annotations . <unk> ;
import javax . <unk> . annotations . <unk> ;
import javax . <unk> . annotations . <unk> ;
<unk>
public class Message implements Serializable {
private static final long serialVersionUID = <num> ;
<unk>
private String author ;
<unk>
private String text ;
<unk>
private String url ;
<unk>
<unk>
private Long id ;
public Message ( String author , String text , String url ) {
this . author = author ;
this . text = text ;
this . url = url ;
}
public String getAuthor ( ) {
return author ;
}
public String getText ( ) {
return text ;
}
public String getURL ( ) {
return url ;
}
public Long getId ( ) {
return id ;
}
@SuppressWarnings("unused")
private Message ( ) { }
}
package edu . <unk> . <unk> . <unk> . shared ;
import java . util . List ;
import com . google . gwt . user . client . rpc . AsyncCallback ;
public interface <unk> {
void getMessages ( Long <unk> , AsyncCallback < List < Message >> callback ) ;
}
package edu . <unk> . <unk> . <unk> . server ;
import java . io . IOException ;
import javax . <unk> . <unk> ;
import javax . servlet . ServletException ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
import edu . <unk> . <unk> . <unk> . shared . <unk> ;
import com . google . appengine . api . <unk> . <unk> ;
import com . google . appengine . api . <unk> . <unk> ;
import com . google . appengine . api . <unk> . <unk> ;
import com . google . gwt . user . server . rpc . RemoteServiceServlet ;
@SuppressWarnings("serial")
public class <unk> extends RemoteServiceServlet implements
<unk> {
<unk> <unk> = <unk>
. <unk> ( ) ;
<unk> pm = <unk> . get ( ) . <unk> ( ) ;
@Override
public String <unk> ( ) {
return <unk>
. <unk> ( " ) ;
}
@Override
protected void doGet ( HttpServletRequest req , HttpServletResponse resp )
throws ServletException , IOException {
<unk> <unk> = new <unk> ( req . getParameter ( " ) ) ;
<unk> . serve ( <unk> , resp ) ;
}
package edu . <unk> . <unk> . <unk> . shared ;
import java . util . List ;
import com . google . gwt . user . client . rpc . RemoteService ;
import com . google . gwt . user . client . rpc . RemoteServiceRelativePath ;
<unk>
public interface <unk> extends RemoteService {
List < Message > getMessages ( Long <unk> ) ;
public static final int <unk> = <num> ;
}
package edu . <unk> . <unk> . <unk> . server ;
import java . io . IOException ;
import java . util . Map ;
import javax . <unk> . <unk> ;
import javax . servlet . ServletException ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
import com . google . appengine . api . <unk> . <unk> ;
import com . google . appengine . api . <unk> . <unk> ;
import com . google . appengine . api . <unk> . <unk> ;
import edu . <unk> . <unk> . <unk> . shared . Message ;
@SuppressWarnings("serial")
public class <unk> extends HttpServlet {
<unk> <unk> = <unk>
. <unk> ( ) ;
<unk> pm = <unk> . get ( ) . <unk> ( ) ;
@Override
public void doPost ( HttpServletRequest req , HttpServletResponse res )
throws ServletException , IOException {
@SuppressWarnings("deprecation")
Map < String , <unk> > <unk> = <unk> . <unk> ( req ) ;
<unk> <unk> = <unk> . get ( " ) ;
Message msg =
new Message (
req . getParameter ( " ) ,
req . getParameter ( " ) ,
" + <unk> . <unk> ( )
) ;
pm . <unk> ( msg ) ;
}
}
package edu . <unk> . <unk> . <unk> . client ;
import java . util . List ;
import edu . <unk> . <unk> . <unk> . shared . <unk> ;
import edu . <unk> . <unk> . <unk> . shared . <unk> ;
import edu . <unk> . <unk> . <unk> . shared . Message ;
import edu . <unk> . <unk> . <unk> . shared . <unk> ;
import edu . <unk> . <unk> . <unk> . shared . <unk> ;
import com . google . gwt . core . client . EntryPoint ;
import com . google . gwt . core . client . GWT ;
import com . google . gwt . dom . client . Element ;
import com . google . gwt . event . dom . client . ClickEvent ;
import com . google . gwt . event . dom . client . ClickHandler ;
import com . google . gwt . user . client . DOM ;
import com . google . gwt . user . client . Timer ;
import com . google . gwt . user . client . Window ;
import com . google . gwt . user . client . rpc . AsyncCallback ;
import com . google . gwt . user . client . ui . <unk> ;
import com . google . gwt . user . client . ui . Button ;
import com . google . gwt . user . client . ui . <unk> ;
import com . google . gwt . user . client . ui . <unk> ;
import com . google . gwt . user . client . ui . <unk> . <unk> ;
import com . google . gwt . user . client . ui . HorizontalPanel ;
import com . google . gwt . user . client . ui . Label ;
import com . google . gwt . user . client . ui . RootPanel ;
import com . google . gwt . user . client . ui . TextBox ;
import com . google . gwt . user . client . ui . VerticalPanel ;
import com . google . gwt . user . client . ui . <unk> . <unk> ;
public class <unk> implements EntryPoint {
private static final int <unk> = <num> ;
private final <unk> <unk> = GWT
. create ( <unk> . class ) ;
private final <unk> <unk> = GWT
. create ( <unk> . class ) ;
private VerticalPanel <unk> ;
private Label <unk> ;
private Label <unk> ;
private Long <unk> = <num> ;
public void onModuleLoad ( ) {
final VerticalPanel mainPanel = new VerticalPanel ( ) ;
final <unk> <unk> = new <unk> ( ) ;
final HorizontalPanel <unk> = new HorizontalPanel ( ) ;
<unk> . addStyleName ( " ) ;
mainPanel . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
final Label <unk> = new Label ( " ) ;
final TextBox <unk> = new TextBox ( ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
final Label textLabel = new Label ( " ) ;
final TextBox textField = new TextBox ( ) ;
<unk> . add ( textLabel ) ;
<unk> . add ( textField ) ;
final <unk> upload = new <unk> ( ) ;
<unk> . add ( upload ) ;
final Button <unk> = new Button ( " ) ;
<unk> . add ( <unk> ) ;
<unk> . setEncoding ( <unk> . <unk> ) ;
<unk> . setMethod ( <unk> . METHOD_POST ) ;
<unk> . setName ( " ) ;
textField . setName ( " ) ;
upload . setName ( " ) ;
final HorizontalPanel statusPanel = new HorizontalPanel ( ) ;
statusPanel . setHeight ( " ) ;
<unk> = new Label ( " ) ;
<unk> . setVisible ( false ) ;
<unk> = new Label ( " ) ;
<unk> . setVisible ( false ) ;
statusPanel . add ( <unk> ) ;
statusPanel . add ( <unk> ) ;
mainPanel . add ( statusPanel ) ;
<unk> = new VerticalPanel ( ) ;
mainPanel . add ( <unk> ) ;
RootPanel . get ( " ) . add ( mainPanel ) ;
<unk> . addClickHandler ( new ClickHandler ( ) {
@Override
public void onClick ( ClickEvent event ) {
<unk>
. <unk> ( new AsyncCallback < String > ( ) {
@Override
public void onSuccess ( String result ) {
<unk> . setAction ( result . toString ( ) ) ;
<unk> . submit ( ) ;
}
@Override
public void onFailure ( Throwable caught ) {
<unk> . setVisible ( true ) ;
}
} ) ;
}
} ) ;
<unk> . <unk> ( new <unk> . <unk> ( ) {
public void onSubmit ( <unk> event ) {
if ( <unk> . getText ( ) . length ( ) == <num> ) {
Window . alert ( " ) ;
event . cancel ( ) ;
}
if ( textField . getText ( ) . length ( ) == <num> ) {
Window . alert ( " ) ;
event . cancel ( ) ;
}
if ( upload . getFilename ( ) . length ( ) == <num> ) {
Window . alert ( " ) ;
event . cancel ( ) ;
}
}
} ) ;
<unk>
. <unk> ( new <unk> . <unk> ( ) {
@Override
public void <unk> ( <unk> event ) {
<unk> . setVisible ( false ) ;
<unk> ( ) ;
<unk> . reset ( ) ;
<unk> . setFocus ( true ) ;
}
} ) ;
<unk> ( ) ;
new Timer ( ) {
@Override
public void run ( ) {
<unk> ( ) ;
}
} . scheduleRepeating ( <unk> ) ;
Element <unk> = DOM . getElementById ( " ) ;
<unk> . getParentNode ( ) . removeChild ( <unk> ) ;
<unk> . setFocus ( true ) ;
}
private void <unk> ( ) {
if ( <unk> . isVisible ( ) ) {
return ;
}
<unk> . setVisible ( true ) ;
<unk> . setVisible ( false ) ;
<unk> . getMessages ( <unk> ,
new AsyncCallback < List < Message >> ( ) {
@Override
public void onFailure ( Throwable caught ) {
<unk> . setVisible ( false ) ;
<unk> . setVisible ( true ) ;
}
@Override
public void onSuccess ( List < Message > result ) {
<unk> . setVisible ( false ) ;
int position = <num> ;
for ( Message m : result ) {
Label heading = new Label ( m . getAuthor ( ) ) ;
heading . addStyleName ( " ) ;
<unk> . insert ( heading , position ++ ) ;
<unk> link = new <unk> ( " , m . getURL ( ) ) ;
link . setTarget ( " ) ;
<unk> . insert ( link , position ++ ) ;
Label body = new Label ( m . getText ( ) ) ;
body . addStyleName ( " ) ;
<unk> . insert ( body , position ++ ) ;
}
if ( ! result . isEmpty ( ) ) {
<unk> = result . get ( <num> ) . getId ( ) + <num> ;
}
}
} ) ;
}
}
package <unk> . <unk> ;
import java . util . Vector ;
import Utilities . <unk> ;
import Utilities . Object3D ;
import ij . IJ ;
import ij . ImagePlus ;
import ij . gui . <unk> ;
import ij . measure . <unk> ;
import ij . plugin . <unk> ;
import ij . plugin . <unk> ;
public class <unk> {
boolean <unk> , <unk> , <unk> ,
<unk> , <unk> , <unk> ,
<unk> , <unk> , <unk> ,
<unk> , <unk> ,
<unk> , redirect ;
<unk> <unk> = new <unk> ( ) ;
int <unk> = <unk> . <unk> ( ) ;
int <unk> = <unk> . <unk> ( ) ;
int <unk> = <unk> . <unk> ( ) ;
int <unk> = <unk> . <unk> ( ) ;
int <unk> = <unk> . <unk> ( ) ;
int <unk> = <unk> . <unk> ( ) ;
int <unk> = <unk> . <unk> ( ) ;
int <unk> = <unk> . <unk> ( ) ;
public ImagePlus <unk> ( ImagePlus imp ) {
<unk> bin = new <unk> ( ) ;
ImagePlus <unk> = bin . run ( imp ) ;
int <unk> = imp . <unk> ( ) ;
int <unk> = imp . getNSlices ( ) ;
int <unk> = <unk> / <unk> ;
double <unk> = <num> ;
int <unk> = <num> ;
<unk> <unk> = new <unk> ( ) ;
ImagePlus <unk> = null ;
int <unk> = ( int ) Math . pow ( <num> , imp . <unk> ( ) ) ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
<unk> = <unk> . run ( imp , ( i * <unk> + <num> ) , ( i + <num> ) * <unk> ) ;
<unk> = <unk> ( <unk> , <num> ) ;
IJ . log ( Integer . toString ( i ) + " + Double . toString ( <unk> ) ) ;
<unk> = ( int ) <unk> ( imp , ( int ) <unk> , this . <unk> , this . <unk> , this . <unk> , this . <unk> ) ;
IJ . log ( " + Integer . toString ( <unk> ) ) ;
for ( int j = <num> ; j < <unk> ; j ++ )
<unk> . getStack ( ) . getProcessor ( i * <unk> + <num> + j ) . threshold ( <unk> ) ;
}
return <unk> ;
}
public int <unk> ( ImagePlus imp , int <unk> ) {
<unk> <unk> = new <unk> ( imp ) ;
<unk> . setMethod ( <num> ) ;
<unk> . <unk> ( ) ;
int [ ] hist = <unk> . getProjection ( ) . getProcessor ( ) . <unk> ( ) ;
int <unk> = <num> ;
int i = hist . length  <num> ;
while ( <unk> < <unk> ) {
<unk> += hist [ i  ] ;
}
return i ;
}
public double <unk> ( ImagePlus imp ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ) {
<unk> <unk> = new <unk> ( ) ;
ImagePlus <unk> = <unk> . run ( imp ) ;
int <unk> = <num> ;
<unk> = false ;
redirect = false ;
double <unk> = <num> ;
<unk> <unk> = new <unk> ( imp , <unk> , <unk> , ( int ) <unk> * <num> , <unk> , redirect ) ;
Vector < Object3D > obj = <unk> . <unk> ( ) ;
int <unk> = obj . size ( ) ;
int <unk> = <num> ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
Object3D <unk> = obj . get ( i ) ;
<unk> += <unk> . size ;
}
double <unk> = ( double ) <unk> / <unk> ;
IJ . log ( " + Integer . toString ( <unk> ) ) ;
IJ . log ( " + " + Integer . toString ( <unk> ) ) ;
IJ . log ( " + " + Integer . toString ( <unk> ) ) ;
IJ . log ( " + " + Double . toString ( <unk> ) ) ;
IJ . log ( " + Double . toString ( <unk> ) ) ;
<unk> = <unk> ;
int <unk> = <num> ;
while (
( <unk> < <unk> || <unk> > <unk> || <unk> > <unk> || <unk> < <unk> )
&&
( <unk> < <unk> )
) {
if ( ( <unk> < <unk> ) && ( <unk> < <unk> ) ) <unk>  ;
if ( ( <unk> < <unk> ) && ( <unk> > <unk> ) ) <unk> ++ ;
if ( ( <unk> > <unk> ) && ( <unk> > <unk> ) ) <unk>  ;
if ( ( <unk> > <unk> ) && ( <unk> < <unk> ) ) <unk> ++ ;
if ( ( <unk> >= <unk> ) && ( <unk> <= <unk> ) ) {
if ( <unk> < <unk> ) <unk>  ;
else <unk> ++ ;
}
if ( ( <unk> >= <unk> ) && ( <unk> <= <unk> ) ) {
if ( <unk> < <unk> ) <unk> ++ ;
else <unk>  ;
}
IJ . <unk> ( true ) ;
<unk> = new <unk> ( <unk> , <unk> , <unk> , ( int ) ( <unk> * <num> ) , <unk> , redirect ) ;
obj = <unk> . <unk> ( ) ;
<unk> = obj . size ( ) ;
<unk> = <num> ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
Object3D <unk> = obj . get ( i ) ;
<unk> += <unk> . size ;
}
<unk> ++ ;
}
if ( <unk> > <num> ) IJ . log ( " + Integer . toString ( <unk> ) + " + Integer . toString ( <unk> ) + " + Integer . toString ( <unk> ) + " + Integer . toString ( <unk> ) ) ;
return <unk> ;
}
public void <unk> ( ) {
}
public void <unk> ( ImagePlus imp , int <unk> , int <unk> , int <unk> , int <unk> , int <unk> , int <unk> ) {
int <unk> = <num> ;
<unk> = false ;
redirect = false ;
int <unk> = <num> ;
double <unk> = <num> ;
double <unk> = <num> ;
double <unk> = <num> ;
int <unk> = <num> ;
Vector < Object3D > obj ;
<unk> <unk> ;
int iter = ( int ) Math . floor ( ( <unk>  <unk> ) / <unk> ) ;
int [ ] <unk> = new int [ iter ] ;
double [ ] <unk> = new double [ iter ] ;
double [ ] <unk> = new double [ iter ] ;
int [ ] <unk> = new int [ iter ] ;
for ( int j = <num> ; j < iter ; j ++ ) {
<unk> = <unk> + ( j * <unk> ) ;
IJ . <unk> ( true ) ;
<unk> = new <unk> ( imp , <unk> , <unk> ,
( int ) ( <unk> * <num> ) , <unk> , redirect ) ;
obj = <unk> . <unk> ( ) ;
<unk> = obj . size ( ) ;
<unk> = <num> ;
<unk> = <num> ;
if ( <unk> > <num> ) {
for ( int i = <num> ; i < <unk> ; i ++ ) {
Object3D <unk> = obj . get ( i ) ;
<unk> += <unk> . size ;
}
<unk> = <unk> / <unk> ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
Object3D <unk> = obj . get ( i ) ;
<unk> += Math . pow ( <unk>  <unk> . size , <num> ) ;
}
<unk> = <unk> / <unk> ;
}
<unk> [ j ] = <unk> ;
<unk> [ j ] = <unk> ;
<unk> [ j ] = <unk> ;
<unk> [ j ] = <unk> ;
}
<unk> ( <unk> , <unk> , <unk> , <unk> , <unk> , <unk> ) ;
}
public void <unk> ( int <unk> , int <unk> , int [ ] <unk> , double [ ] <unk> , double [ ] <unk> , int [ ] <unk> ) {
<unk> rt ;
rt = new <unk> ( ) ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
rt . <unk> ( ) ;
rt . setValue ( " , i , <unk> + i * <unk> ) ;
rt . setValue ( " , i , <unk> [ i ] ) ;
rt . setValue ( " , i , <unk> [ i ] ) ;
rt . setValue ( " , i , <unk> [ i ] ) ;
rt . setValue ( " , i , <unk> [ i ] ) ;
}
rt . show ( " ) ;
}
}
package <unk> . <unk> ;
import ij . gui . <unk> ;
public class <unk> {
private static int <unk> = <num> ;
private static int <unk> = <num> ;
private static int <unk> = <num> ;
private static int <unk> = <num> ;
private static int <unk> = <num> ;
private static int <unk> = <num> ;
private static int <unk> = <num> ;
private static int <unk> = <num> ;
void <unk> ( ) { }
void <unk> (
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk>
)
{
this . <unk> ( <unk> ) ;
this . <unk> ( <unk> ) ;
this . <unk> ( <unk> ) ;
this . <unk> ( <unk> ) ;
this . <unk> ( <unk> ) ;
this . <unk> ( <unk> ) ;
this . <unk> ( <unk> ) ;
this . <unk> ( <unk> ) ;
}
public boolean showDialog ( ) {
<unk> gd = new <unk> ( " ) ;
gd . <unk> ( " , this . <unk> ( ) , <num> ) ;
gd . <unk> ( " , this . <unk> ( ) , <num> ) ;
gd . <unk> ( " , this . <unk> ( ) , <num> ) ;
gd . addMessage ( " ) ;
gd . <unk> ( " , this . <unk> ( ) , <num> ) ;
gd . <unk> ( " , this . <unk> ( ) , <num> ) ;
gd . <unk> ( " , this . <unk> ( ) , <num> ) ;
gd . <unk> ( " , this . <unk> ( ) , <num> ) ;
gd . addMessage ( " ) ;
gd . <unk> ( " , this . <unk> ( ) , <num> ) ;
gd . showDialog ( ) ;
if ( gd . <unk> ( ) )
return false ;
this . <unk> ( ( int ) gd . <unk> ( ) ) ;
this . <unk> ( ( int ) gd . <unk> ( ) ) ;
this . <unk> ( ( int ) gd . <unk> ( ) ) ;
this . <unk> ( ( int ) gd . <unk> ( ) ) ;
this . <unk> ( ( int ) gd . <unk> ( ) ) ;
this . <unk> ( ( int ) gd . <unk> ( ) ) ;
this . <unk> ( ( int ) gd . <unk> ( ) ) ;
this . <unk> ( ( int ) gd . <unk> ( ) ) ;
return true ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
<unk> . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
<unk> . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
<unk> . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
<unk> . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
}
import <unk> . <unk> . <unk> ;
import ij . plugin . PlugIn ;
public class <unk> implements PlugIn {
@Override
public void run ( String arg ) {
<unk> <unk> = new <unk> ( ) ;
<unk> . showDialog ( ) ;
}
}
import <unk> . <unk> . <unk> ;
import ij . ImagePlus ;
import ij . WindowManager ;
import ij . plugin . PlugIn ;
public class <unk> implements PlugIn {
int <unk> = <num> ;
int <unk> = <num> ;
int <unk> = <num> ;
int <unk> = <num> ;
int <unk> = <num> ;
int <unk> = <num> ;
@Override
public void run ( String arg ) {
<unk> at = new <unk> ( ) ;
ImagePlus imp = WindowManager . getCurrentImage ( ) ;
if ( imp != null )
at . <unk> ( imp , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> ) ;
}
}
package uk . org . <unk> ;
import android . os . Bundle ;
import org . apache . <unk> . * ; ;
public class App extends <unk> {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
super . loadUrl ( " ) ;
}
}
package org . apache . solr . handler . ext ;
import java . io . IOException ;
import java . net . URL ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . Map ;
import java . util . Set ;
import org . apache . solr . common . params . <unk> ;
import org . apache . solr . common . params . SolrParams ;
import org . apache . solr . common . util . <unk> ;
import org . apache . solr . common . util . <unk> ;
import org . apache . solr . common . util . NamedList ;
import org . apache . solr . core . <unk> ;
import org . apache . solr . core . <unk> ;
import org . apache . solr . handler . <unk> ;
import org . apache . solr . request . SolrQueryRequest ;
import org . apache . solr . request . <unk> ;
import org . apache . solr . response . <unk> ;
import org . apache . solr . util . plugin . <unk> ;
import com . rabbitmq . client . Channel ;
import com . rabbitmq . client . Connection ;
import com . rabbitmq . client . ConnectionFactory ;
import com . rabbitmq . client . <unk> ;
import com . rabbitmq . client . QueueingConsumer ;
import com . rabbitmq . client . <unk> ;
import org . apache . solr . request . <unk> ;
public class <unk> extends <unk> implements <unk> {
protected String <unk> ;
protected ConnectionFactory factory ;
protected String queue ;
protected String <unk> ;
protected Boolean <unk> = Boolean . TRUE ;
protected <unk> core ;
public <unk> ( ) { }
@Override
public void init ( NamedList args ) {
super . init ( args ) ;
<unk> = ( String ) this . <unk> . get ( " ) ;
queue = ( String ) this . <unk> . get ( " ) ;
<unk> = ( String ) this . <unk> . get ( " ) ;
factory = new ConnectionFactory ( ) ;
factory . setHost ( <unk> ) ;
<unk> listener = new <unk> ( ) ;
listener . start ( ) ;
}
@Override
public String getDescription ( ) {
return " ;
}
@Override
public String getSource ( ) {
return " ;
}
@Override
public String getSourceId ( ) {
return " ;
}
@Override
public String getVersion ( ) {
return " ;
}
@Override
public void <unk> ( SolrQueryRequest req , <unk> rsp ) throws IOException {
rsp . add ( " , " ) ;
rsp . add ( " , <unk> ) ;
rsp . add ( " , queue ) ;
rsp . add ( " , <unk> ) ;
rsp . add ( " , <unk> . toString ( ) ) ;
}
public <unk> <unk> ( String handler , Map < String , String [ ] > params , String message ) {
<unk> <unk> = new <unk> ( params ) ;
<unk> requestHandler = core . <unk> ( handler ) ;
<unk> request = new <unk> ( core , <unk> ) { } ;
<unk> stream = new <unk> . <unk> ( message ) ;
ArrayList < <unk> > streams = new ArrayList < <unk> > ( ) ;
streams . add ( stream ) ;
request . <unk> ( streams ) ;
<unk> response = new <unk> ( ) ;
core . execute ( requestHandler , request , response ) ;
return response ;
}
public void inform ( <unk> core ) {
this . core = core ;
}
private class <unk> extends Thread {
public void run ( ) {
Connection connection ;
try {
connection = factory . newConnection ( ) ;
Channel channel = connection . createChannel ( ) ;
channel . queueDeclare ( queue , <unk> . booleanValue ( ) , false , false , null ) ;
QueueingConsumer consumer = new QueueingConsumer ( channel ) ;
channel . basicConsume ( queue , true , consumer ) ;
while ( true ) {
QueueingConsumer . Delivery delivery = consumer . nextDelivery ( ) ;
<unk> worker = new <unk> ( delivery ) ;
worker . start ( ) ;
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
} catch ( <unk> e ) {
e . printStackTrace ( ) ;
} catch ( <unk> e ) {
e . printStackTrace ( ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
}
}
private class <unk> extends Thread {
QueueingConsumer . Delivery delivery ;
public <unk> ( QueueingConsumer . Delivery delivery ) {
super ( ) ;
this . delivery = delivery ;
}
public void run ( ) {
String message = new String ( delivery . getBody ( ) ) ;
<unk> result = <unk> ( <unk> , getParams ( ) , message ) ;
}
private Map < String , String [ ] > getParams ( ) {
Map < String , Object > headers = delivery . getProperties ( ) . getHeaders ( ) ;
Map < String , String [ ] > params = new HashMap < String , String [ ] > ( ) ;
if ( headers != null ) {
Set < String > keys = headers . keySet ( ) ;
for ( String key : keys ) {
Object value = headers . get ( key ) ;
params . put ( key , new String [ ] { value . toString ( ) } ) ;
}
}
return params ;
}
}
}
package <unk> ;
import org . osgi . framework . <unk> ;
import org . osgi . framework . BundleContext ;
public class Activator implements <unk> {
private static BundleContext context ;
static BundleContext getContext ( ) {
return context ;
}
public void start ( BundleContext bundleContext ) throws Exception {
Activator . context = bundleContext ;
}
public void stop ( BundleContext bundleContext ) throws Exception {
Activator . context = null ;
}
}
package <unk> . actions ;
import org . eclipse . jface . action . IAction ;
import org . eclipse . jface . viewers . ISelection ;
import org . eclipse . ui . IWorkbenchWindow ;
import org . eclipse . ui . IWorkbenchWindowActionDelegate ;
import org . eclipse . jface . dialogs . MessageDialog ;
public class <unk> implements IWorkbenchWindowActionDelegate {
private IWorkbenchWindow window ;
public <unk> ( ) {
}
public void run ( IAction action ) {
MessageDialog . openInformation (
window . getShell ( ) ,
" ,
" ) ;
}
public void selectionChanged ( IAction action , ISelection selection ) {
}
public void dispose ( ) {
}
public void init ( IWorkbenchWindow window ) {
this . window = window ;
}
package <unk> ;
import org . eclipse . core . runtime . IStatus ;
import org . eclipse . core . runtime . Status ;
import base org . eclipse . jdt . core . <unk> ;
public team class <unk> {
protected class <unk> <unk> <unk> {
IStatus <unk> ( String name )
<  replace
IStatus <unk> ( String name , String <unk> ,
String <unk> ) ;
static <unk> IStatus <unk> ( String name ) {
if ( name . startsWith ( " ) )
return new Status ( IStatus . ERROR , Activator . PLUGIN_ID , " ) ;
return base . <unk> ( name ) ;
}
}
}
package <unk> ;
import org . eclipse . jface . resource . ImageDescriptor ;
import org . eclipse . ui . plugin . AbstractUIPlugin ;
import org . osgi . framework . BundleContext ;
public class Activator extends AbstractUIPlugin {
public static final String PLUGIN_ID = " ;
private static Activator plugin ;
public Activator ( ) {
}
public void start ( BundleContext context ) throws Exception {
super . start ( context ) ;
plugin = this ;
}
public void stop ( BundleContext context ) throws Exception {
plugin = null ;
super . stop ( context ) ;
}
public static Activator getDefault ( ) {
return plugin ;
}
public static ImageDescriptor getImageDescriptor ( String path ) {
return imageDescriptorFromPlugin ( PLUGIN_ID , path ) ;
}
}
package <unk> ;
import java . util . ArrayList ;
import java . util . HashSet ;
import java . util . List ;
import java . util . Set ;
import org . eclipse . core . resources . <unk> ;
import org . eclipse . core . resources . IProject ;
import org . eclipse . core . resources . IResource ;
import org . eclipse . core . runtime . CoreException ;
import org . eclipse . jdt . core . <unk> ;
import org . eclipse . jdt . core . <unk> ;
import org . eclipse . jdt . core . <unk> ;
import org . eclipse . jdt . core . <unk> ;
import org . eclipse . jdt . core . <unk> ;
import org . eclipse . jdt . core . <unk> ;
import org . eclipse . jdt . core . <unk> ;
import org . eclipse . jdt . core . Signature ;
import org . eclipse . jdt . core . compiler . <unk> ;
import org . eclipse . jdt . core . compiler . <unk> ;
import org . eclipse . jdt . core . compiler . <unk> ;
import org . eclipse . jdt . internal . compiler . <unk> . <unk> ;
import org . eclipse . jdt . internal . compiler . <unk> . <unk> ;
import org . eclipse . jdt . internal . compiler . lookup . <unk> ;
import org . eclipse . jdt . internal . compiler . lookup . <unk> ;
import org . eclipse . jdt . internal . compiler . lookup . <unk> ;
import org . eclipse . jdt . internal . compiler . lookup . <unk> ;
import org . eclipse . jdt . internal . core . builder . <unk> ;
import base org . eclipse . jdt . internal . compiler . <unk> . <unk> ;
import base org . eclipse . jdt . internal . compiler . <unk> . <unk> ;
import base org . eclipse . jdt . internal . compiler . <unk> . <unk> ;
import base org . eclipse . jdt . internal . compiler . <unk> . <unk> ;
import base org . eclipse . jdt . internal . compiler . lookup . <unk> ;
import base org . eclipse . jdt . internal . compiler . lookup . <unk> ;
import base org . eclipse . jdt . internal . compiler . lookup . <unk> ;
import base org . eclipse . jdt . internal . core . builder . <unk> ;
@SuppressWarnings("restriction")
public team class <unk> {
protected team class LifeCycle <unk> <unk> {
public List < <unk> > <unk> ;
IProject <unk> ( )  > get IProject <unk> ;
void <unk> ( ) <  replace void <unk> ( ) ;
<unk> void <unk> ( ) {
<unk> = new ArrayList < <unk> > ( ) ;
<unk> ( ) ;
this . activate ( <unk> ) ;
base . <unk> ( ) ;
this . deactivate ( <unk> ) ;
Set < <unk> > allMethods = new HashSet < <unk> > ( ) ;
for ( <unk> node : this . <unk> ( <unk> . class ) )
allMethods . add ( node ) ;
for ( <unk> start : this . <unk> ) {
start . <unk> ( allMethods ) ;
}
System . out . println ( " ) ;
for ( <unk> node : allMethods ) {
if ( ! node . isBinary ( ) ) {
System . out . println ( node . className ( ) + \t' + node ) ;
createMarker ( node ) ;
}
}
System . out . println ( " ) ;
<unk> = null ;
<unk> . this . <unk> ( this ) ;
}
protected class <unk> <unk> <unk> {
char [ ] getSelector ( )  > get char [ ] selector ;
String toString ( ) = > String toString ( ) ;
String className ( )  > get <unk> <unk>
with { result <  String . valueOf ( <unk> . sourceName ) }
char [ ] [ ] <unk> ( )  > get <unk> <unk>
with { result <  <unk> . <unk> }
<unk> [ ] getParameters ( )  > get <unk> [ ] parameters ;
public boolean isBinary ( )  > get <unk> <unk>
with { result <  <unk> . <unk> ( ) }
protected List < <unk> > <unk> ;
protected List < <unk> > <unk> ;
public <unk> ( <unk> <unk> ) {
this . <unk> = new ArrayList < <unk> > ( ) ;
this . <unk> = new ArrayList < <unk> > ( ) ;
}
public void <unk> ( Set < <unk> > allMethods ) {
if ( ! allMethods . contains ( this ) )
return ;
allMethods . remove ( this ) ;
for ( <unk> node : this . <unk> )
node . <unk> ( allMethods ) ;
for ( <unk> node : this . <unk> )
node . <unk> ( allMethods ) ;
}
}
protected class <unk> <unk> <unk> {
<unk> getNode ( )  > get <unk> binding ;
void resolve ( <unk> <unk> ) <  after void resolve ( <unk> <unk> ) ;
private void resolve ( <unk> <unk> ) {
<unk> node = this . getNode ( ) ;
if ( node != null && <unk> . equals ( node . getSelector ( ) , " . toCharArray ( ) ) )
LifeCycle . this . <unk> . add ( node ) ;
}
}
protected abstract class <unk> {
abstract <unk> getTarget ( ) ;
protected void <unk> ( <unk> <unk> , <unk> <unk> , <unk> <unk> ) {
if ( ( <unk> . <unk> & <unk> . <unk> ) != <num> )
return ;
<unk> <unk> = getTarget ( ) ;
if ( <unk> == null || <unk> . isBinary ( ) )
return ;
<unk> caller = <unk> . <unk> ( ) ;
if ( caller != null )
caller . <unk> . add ( <unk> ) ;
}
}
protected class <unk> extends <unk> <unk> <unk> {
<unk> getTarget ( )  > get <unk> binding ;
void <unk> ( <unk> <unk> , <unk> <unk> , <unk> <unk> )
<  after
<unk> <unk> ( <unk> <unk> , <unk> <unk> , <unk> <unk> ) ;
}
protected class <unk> extends <unk> <unk> <unk> {
<unk> getTarget ( )  > get <unk> binding ;
void <unk> ( <unk> <unk> , <unk> <unk> , <unk> <unk> )
<  after
<unk> <unk> ( <unk> <unk> , <unk> <unk> , <unk> <unk> ) ;
}
protected class <unk> extends <unk> <unk> <unk> {
<unk> getTarget ( )  > get <unk> binding ;
void <unk> ( <unk> <unk> , <unk> <unk> , <unk> <unk> )
<  after
<unk> <unk> ( <unk> <unk> , <unk> <unk> , <unk> <unk> ) ;
}
protected class <unk> <unk> <unk> {
<unk> <unk> ( )  > <unk> <unk> ( )
with { result <  result . <unk> ( ) }
}
protected class <unk> <unk> <unk> {
<unk> <  after <unk> ;
private void <unk> ( <unk> <unk> , <unk> [ ] methods ) {
for ( <unk> <unk> : methods )
if ( <unk> != null )
<unk> . <unk> . add ( <unk> ) ;
}
}
public void <unk> ( ) {
try {
<unk> ( ) . <unk> ( <unk> . <unk> , true , IResource . DEPTH_INFINITE ) ;
} catch ( CoreException e ) { }
}
public void createMarker ( <unk> method ) {
try {
<unk> <unk> = <unk> . create ( <unk> ( ) ) ;
char [ ] <unk> = Signature . <unk> ( method . <unk> ( ) ) ;
<unk> <unk> = <unk> . findType ( String . valueOf ( <unk> ) ) ;
<unk> [ ] parameters = method . getParameters ( ) ;
String [ ] <unk> = new String [ parameters . length ] ;
for ( int i = <num> ; i < parameters . length ; i ++ ) {
<unk> [ i ] = Signature . <unk> ( parameters [ i ] . sourceName ( ) , false ) ;
}
<unk> <unk> = <unk> . getMethod ( String . valueOf ( method . getSelector ( ) ) , <unk> ) ;
if ( ! <unk> . exists ( ) || ! ( <unk> instanceof <unk> ) )
return ;
<unk> <unk> = ( ( <unk> ) <unk> ) . <unk> ( ) ;
<unk> marker = <unk> . getResource ( ) . createMarker ( <unk> . <unk> ) ;
String [ ] <unk> = <unk> . <unk> ;
Object [ ] <unk> = new Object [ <unk> . length ] ;
int index = <num> ;
<unk> [ index ++ ] = " + String . valueOf ( method . getSelector ( ) ) ;
<unk> [ index ++ ] = <unk> . <unk> ;
<unk> [ index ++ ] = new Integer ( <unk> . <unk> ) ;
<unk> [ index ++ ] = <unk> . getOffset ( ) ;
<unk> [ index ++ ] = <unk> . getOffset ( ) + <unk> . getLength ( ) ;
<unk> [ index ++ ] = null ;
<unk> [ index ++ ] = " ;
<unk> [ index ++ ] = new Integer ( <unk> . <unk> ) ;
marker . setAttributes ( <unk> , <unk> ) ;
} catch ( IllegalArgumentException e ) {
e . printStackTrace ( ) ;
} catch ( CoreException e ) {
}
}
}
}
package Entity ;
import Main . Game ;
public class PlayerEntity extends Entity {
private Game game ;
private Entity entity ;
private <unk> shot ;
public PlayerEntity ( Game game , String ref , int x , int y ) {
super ( game . getSprite ( ref ) , x , y ) ;
this . game = game ;
}
public void fire ( ) {
if ( shot == null ) {
System . out . println ( " ) ;
shot = new <unk> ( game , " , ( int ) x + ( int ) dx , ( int ) y + ( int ) dy ) ;
game . entities . add ( shot ) ;
} else {
shot . <unk> ( ( int ) x + ( int ) dx , ( int ) y + ( int ) dy ) ;
}
}
@Override
public void move ( ) {
for ( int i = <num> ; i < game . entities . size ( ) ; i ++ ) {
if ( game . entities . get ( i ) . collidesWith ( this ) && ! game . entities . get ( i ) . equals ( this ) ) {
entity = game . entities . get ( i ) ;
if ( ! entity . sprite . <unk> ( ( int ) x + ( int ) dx  ( int ) entity . x , ( int ) y + ( int ) dy  ( int ) entity . y ) ) {
super . move ( ) ;
}
}
}
}
}
package Entity ;
import Main . Game ;
public class <unk> extends Entity {
private float moveSpeed = <num> ;
private Game game ;
private boolean used ;
public Entity entity ;
public <unk> ( Game game , String sprite , int x , int y ) {
super ( game . getSprite ( sprite ) , x , y ) ;
this . game = game ;
dy = moveSpeed ;
}
public void <unk> ( int x , int y ) {
this . x = x ;
this . y = y ;
used = false ;
}
public void move ( ) {
super . move ( ) ;
for ( int i = <num> ; i < game . entities . size ( ) ; i ++ ) {
if ( game . entities . get ( i ) . collidesWith ( this ) && ! game . entities . get ( i ) . equals ( this ) ) {
entity = game . entities . get ( i ) ;
if ( ! entity . sprite . <unk> ( ( int ) x + ( int ) dx  ( int ) entity . x , ( int ) y + ( int ) dy  ( int ) entity . y ) ) {
super . move ( ) ;
}
}
}
}
}
package Entity ;
import Texture . Sprite ;
import java . awt . Rectangle ;
public abstract class Entity {
protected float x ;
protected float y ;
protected Sprite sprite ;
protected float dx ;
protected float dy ;
private Rectangle me = new Rectangle ( ) ;
private Rectangle <unk> = new Rectangle ( ) ;
protected Entity ( Sprite sprite , int x , int y ) {
this . sprite = sprite ;
this . x = x ;
this . y = y ;
}
public void move ( ) {
x += dx ;
y += dy ;
}
public void <unk> ( float dx ) {
this . dx = dx ;
}
public void <unk> ( float dy ) {
this . dy = dy ;
}
public float <unk> ( ) {
return dx ;
}
public float <unk> ( ) {
return dy ;
}
public void draw ( ) {
sprite . draw ( ( int ) x , ( int ) y ) ;
}
public void doLogic ( ) {
}
public int getX ( ) {
return ( int ) x ;
}
public int getY ( ) {
return ( int ) y ;
}
public boolean collidesWith ( Entity other ) {
me . setBounds ( ( int ) x , ( int ) y , sprite . getWidth ( ) , sprite . getHeight ( ) ) ;
<unk> . setBounds ( ( int ) other . x , ( int ) other . y , other . sprite . getWidth ( ) , other . sprite . getHeight ( ) ) ;
return me . intersects ( <unk> ) ;
}
}
package Main ;
import Entity . Entity ;
import Entity . <unk> ;
import Entity . PlayerEntity ;
import Texture . Sprite ;
import Texture . TextureLoader ;
import java . util . ArrayList ;
import org . lwjgl . LWJGLException ;
import org . lwjgl . Sys ;
import org . lwjgl . input . Keyboard ;
import org . lwjgl . input . Mouse ;
import org . lwjgl . opengl . Display ;
import org . lwjgl . opengl . DisplayMode ;
import static org . lwjgl . opengl . GL11 . * ;
public class Game {
public static final String <unk> = " ;
private int width = <num> ;
private int height = <num> ;
private TextureLoader <unk> ;
public ArrayList < Entity > entities = new ArrayList < Entity > ( ) ;
private long <unk> = getTime ( ) ;
private long <unk> ;
private int fps ;
private static long <unk> = Sys . <unk> ( ) ;
public static boolean gameRunning = true ;
private boolean fullscreen ;
private static boolean <unk> ;
private PlayerEntity player ;
public Game ( boolean fullscreen ) {
this . fullscreen = fullscreen ;
initialize ( ) ;
}
public static long getTime ( ) {
return ( Sys . getTime ( ) * <num> ) / <unk> ;
}
public static void sleep ( long duration ) {
try {
Thread . sleep ( ( duration * <unk> ) / <num> ) ;
} catch ( InterruptedException e ) {
System . out . println ( " ) ;
}
}
public void initialize ( ) {
try {
setDisplayMode ( ) ;
Display . setTitle ( <unk> ) ;
Display . setFullscreen ( fullscreen ) ;
Display . create ( ) ;
glEnable ( GL_TEXTURE_2D ) ;
glDisable ( GL_DEPTH_TEST ) ;
glMatrixMode ( GL_PROJECTION ) ;
glLoadIdentity ( ) ;
glOrtho ( <num> , width , height , <num> ,  <num> , <num> ) ;
glMatrixMode ( GL_MODELVIEW ) ;
glLoadIdentity ( ) ;
glViewport ( <num> , <num> , width , height ) ;
<unk> = new TextureLoader ( ) ;
} catch ( LWJGLException e ) {
System . out . println ( " ) ;
Game . gameRunning = false ;
return ;
}
startGame ( ) ;
}
private boolean setDisplayMode ( ) {
try {
DisplayMode [ ] dm = org . lwjgl . util . Display . getAvailableDisplayModes ( width , height ,  <num> ,  <num> ,  <num> ,  <num> , <num> , <num> ) ;
org . lwjgl . util . Display . setDisplayMode ( dm , new String [ ] {
" + width ,
" + height ,
" + <num> ,
" + org . lwjgl . opengl . Display . <unk> ( ) . <unk> ( )
} ) ;
return true ;
} catch ( Exception e ) {
System . out . println ( " ) ;
}
return false ;
}
private void startGame ( ) {
entities . clear ( ) ;
<unk> ( ) ;
}
private void <unk> ( ) {
Entity <unk> = new <unk> ( this , " , <num> , <num> ) ;
entities . add ( <unk> ) ;
<unk> = new <unk> ( this , " , <num> , <num> ) ;
entities . add ( <unk> ) ;
<unk> = new <unk> ( this , " , <num> , <num> ) ;
entities . add ( <unk> ) ;
<unk> = new <unk> ( this , " , <num> , <num> ) ;
entities . add ( <unk> ) ;
player = new PlayerEntity ( this , " , <num> , <num> ) ;
entities . add ( player ) ;
}
private void <unk> ( ) {
while ( Game . gameRunning ) {
glClear ( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT ) ;
glMatrixMode ( GL_MODELVIEW ) ;
glLoadIdentity ( ) ;
checkInput ( ) ;
<unk> ( ) ;
Display . update ( ) ;
}
Display . destroy ( ) ;
}
public void checkInput ( ) {
player . <unk> ( <num> ) ;
player . <unk> ( <num> ) ;
boolean left = <unk> ( Keyboard . KEY_LEFT ) ;
boolean right = <unk> ( Keyboard . KEY_RIGHT ) ;
boolean down = <unk> ( Keyboard . KEY_DOWN ) ;
boolean up = <unk> ( Keyboard . KEY_UP ) ;
boolean space = <unk> ( Keyboard . KEY_SPACE ) ;
if ( ( left ) && ( ! right ) ) player . <unk> (  <num> ) ;
if ( ( ! left ) && ( right ) ) player . <unk> ( <num> ) ;
if ( ( up ) && ( ! down ) ) player . <unk> (  <num> ) ;
if ( ( ! up ) && ( down ) ) player . <unk> ( <num> ) ;
if ( space ) player . fire ( ) ;
}
public void <unk> ( ) {
Display . sync ( <num> ) ;
long delta = getTime ( )  <unk> ;
<unk> = getTime ( ) ;
<unk> += delta ;
fps ++ ;
if ( <unk> >= <num> ) {
Display . setTitle ( <unk> + " + fps + " ) ;
<unk> = <num> ;
fps = <num> ;
}
for ( Entity entity : entities ) {
entity . move ( ) ;
entity . draw ( ) ;
}
if ( ( Display . isCloseRequested ( ) || Keyboard . isKeyDown ( Keyboard . KEY_ESCAPE ) ) && <unk> ) {
Game . gameRunning = false ;
}
}
public static void main ( String argv [ ] ) {
<unk> = true ;
System . out . println ( " ) ;
new Game ( ( argv . length > <num> && " . equalsIgnoreCase ( argv [ <num> ] ) ) ) . execute ( ) ;
System . exit ( <num> ) ;
}
public void execute ( ) {
<unk> ( ) ;
}
public Sprite getSprite ( String ref ) {
return new Sprite ( <unk> , ref ) ;
}
private boolean <unk> ( int direction ) {
switch ( direction ) {
case Keyboard . KEY_LEFT :
return
Keyboard . isKeyDown ( Keyboard . KEY_LEFT ) ;
case Keyboard . KEY_RIGHT :
return
Keyboard . isKeyDown ( Keyboard . KEY_RIGHT ) ;
case Keyboard . KEY_DOWN :
return
Keyboard . isKeyDown ( Keyboard . KEY_DOWN ) ;
case Keyboard . KEY_UP :
return
Keyboard . isKeyDown ( Keyboard . KEY_UP ) ;
case Keyboard . KEY_SPACE :
return
Keyboard . isKeyDown ( Keyboard . KEY_SPACE ) ;
}
return false ;
}
}
package Texture ;
import java . awt . Color ;
import java . awt . Graphics ;
import java . awt . Image ;
import java . awt . color . <unk> ;
import java . awt . image . BufferedImage ;
import java . awt . image . <unk> ;
import java . awt . image . <unk> ;
import java . awt . image . DataBuffer ;
import java . awt . image . <unk> ;
import java . awt . image . Raster ;
import java . awt . image . WritableRaster ;
import java . io . IOException ;
import java . net . URL ;
import java . nio . ByteBuffer ;
import java . nio . ByteOrder ;
import java . nio . IntBuffer ;
import java . util . HashMap ;
import java . util . Hashtable ;
import javax . swing . ImageIcon ;
import org . lwjgl . BufferUtils ;
import static org . lwjgl . opengl . GL11 . * ;
public class TextureLoader {
private HashMap < String , Texture > table = new HashMap < String , Texture > ( ) ;
private <unk> <unk> ;
private <unk> <unk> ;
private IntBuffer <unk> = BufferUtils . createIntBuffer ( <num> ) ;
public TextureLoader ( ) {
<unk> = new <unk> ( <unk> . getInstance ( <unk> . <unk> ) ,
new int [ ] { <num> , <num> , <num> , <num> } ,
true ,
false ,
<unk> . TRANSLUCENT ,
DataBuffer . <unk> ) ;
<unk> = new <unk> ( <unk> . getInstance ( <unk> . <unk> ) ,
new int [ ] { <num> , <num> , <num> , <num> } ,
false ,
false ,
<unk> . OPAQUE ,
DataBuffer . <unk> ) ;
}
private int <unk> ( ) {
glGenTextures ( <unk> ) ;
return <unk> . get ( <num> ) ;
}
public Texture getTexture ( String resourceName ) throws IOException {
Texture tex = table . get ( resourceName ) ;
if ( tex != null ) {
return tex ;
}
tex = getTexture ( resourceName ,
GL_TEXTURE_2D ,
GL_RGBA ,
GL_LINEAR ,
GL_LINEAR ) ;
table . put ( resourceName , tex ) ;
return tex ;
}
public Texture getTexture ( String resourceName ,
int target ,
int <unk> ,
int <unk> ,
int <unk> ) throws IOException {
int <unk> ;
int <unk> = <unk> ( ) ;
Texture texture = new Texture ( target , <unk> ) ;
glBindTexture ( target , <unk> ) ;
BufferedImage <unk> = loadImage ( resourceName ) ;
texture . setWidth ( <unk> . getWidth ( ) ) ;
texture . setHeight ( <unk> . getHeight ( ) ) ;
if ( <unk> . <unk> ( ) . hasAlpha ( ) ) {
<unk> = GL_RGBA ;
} else {
<unk> = <unk> ;
}
ByteBuffer textureBuffer = <unk> ( <unk> , texture ) ;
if ( target == GL_TEXTURE_2D ) {
glTexParameteri ( target , GL_TEXTURE_MIN_FILTER , <unk> ) ;
glTexParameteri ( target , GL_TEXTURE_MAG_FILTER , <unk> ) ;
}
glTexImage2D ( target ,
0 ,
<unk> ,
<unk> ( <unk> . getWidth ( ) ) ,
<unk> ( <unk> . getHeight ( ) ) ,
0 ,
<unk> ,
GL_UNSIGNED_BYTE ,
textureBuffer ) ;
return texture ;
}
private static int <unk> ( int <unk> ) {
int ret = <num> ;
while ( ret < <unk> ) {
ret *= <num> ;
}
return ret ;
}
private ByteBuffer <unk> ( BufferedImage <unk> , Texture texture ) {
ByteBuffer <unk> ;
WritableRaster raster ;
BufferedImage <unk> ;
int texWidth = <num> ;
int texHeight = <num> ;
while ( texWidth < <unk> . getWidth ( ) ) {
texWidth *= <num> ;
}
while ( texHeight < <unk> . getHeight ( ) ) {
texHeight *= <num> ;
}
texture . <unk> ( texHeight ) ;
texture . <unk> ( texWidth ) ;
if ( <unk> . <unk> ( ) . hasAlpha ( ) ) {
raster = Raster . <unk> ( DataBuffer . <unk> , texWidth , texHeight , <num> , null ) ;
<unk> = new BufferedImage ( <unk> , raster , false , new Hashtable ( ) ) ;
} else {
raster = Raster . <unk> ( DataBuffer . <unk> , texWidth , texHeight , <num> , null ) ;
<unk> = new BufferedImage ( <unk> , raster , false , new Hashtable ( ) ) ;
}
Graphics g = <unk> . getGraphics ( ) ;
g . setColor ( new Color ( <num> , <num> , <num> , <num> ) ) ;
g . fillRect ( <num> , <num> , texWidth , texHeight ) ;
g . drawImage ( <unk> , <num> , <num> , null ) ;
byte [ ] data = ( ( <unk> ) <unk> . <unk> ( ) . getDataBuffer ( ) ) . getData ( ) ;
<unk> = ByteBuffer . allocateDirect ( data . length ) ;
<unk> . order ( ByteOrder . nativeOrder ( ) ) ;
<unk> . put ( data , <num> , data . length ) ;
<unk> . flip ( ) ;
return <unk> ;
}
public BufferedImage loadImage ( String ref ) throws IOException {
URL url = TextureLoader . class . getClassLoader ( ) . getResource ( ref ) ;
if ( url == null ) {
throw new IOException ( " + ref ) ;
}
Image img = new ImageIcon ( url ) . getImage ( ) ;
BufferedImage <unk> = new BufferedImage ( img . getWidth ( null ) , img . getHeight ( null ) , BufferedImage . TYPE_INT_RGB ) ;
Graphics g = <unk> . getGraphics ( ) ;
g . drawImage ( img , <num> , <num> , null ) ;
g . dispose ( ) ;
return <unk> ;
}
}
package Entity ;
import Main . Game ;
public class <unk> extends Entity {
private Game game ;
public <unk> ( Game game , String ref , int x , int y ) {
super ( game . getSprite ( ref ) , x , y ) ;
this . game = game ;
}
}
package Texture ;
import static org . lwjgl . opengl . GL11 . * ;
public class Texture {
private int target ;
private int <unk> ;
private int height ;
private int width ;
private int texWidth ;
private int texHeight ;
private float widthRatio ;
private float heightRatio ;
public Texture ( int target , int <unk> ) {
this . target = target ;
this . <unk> = <unk> ;
}
public void bind ( ) {
glBindTexture ( target , <unk> ) ;
}
public void setHeight ( int height ) {
this . height = height ;
setHeight ( ) ;
}
public void setWidth ( int width ) {
this . width = width ;
setWidth ( ) ;
}
public int getImageHeight ( ) {
return height ;
}
public int getImageWidth ( ) {
return width ;
}
public float getHeight ( ) {
return heightRatio ;
}
public float getWidth ( ) {
return widthRatio ;
}
public void <unk> ( int texHeight ) {
this . texHeight = texHeight ;
setHeight ( ) ;
}
public void <unk> ( int texWidth ) {
this . texWidth = texWidth ;
setWidth ( ) ;
}
private void setHeight ( ) {
if ( texHeight != <num> ) {
heightRatio = ( ( float ) height ) / texHeight ;
}
}
private void setWidth ( ) {
if ( texWidth != <num> ) {
widthRatio = ( ( float ) width ) / texWidth ;
}
}
}
package Texture ;
import java . awt . Color ;
import java . awt . image . BufferedImage ;
import java . nio . ByteBuffer ;
import static org . lwjgl . opengl . GL11 . * ;
public class Sprite {
private Texture texture ;
private BufferedImage img ;
private int width ;
private int height ;
public Sprite ( TextureLoader loader , String ref ) {
try {
texture = loader . getTexture ( ref ) ;
img = loader . loadImage ( ref ) ;
width = texture . getImageWidth ( ) ;
height = texture . getImageHeight ( ) ;
} catch ( Exception e ) {
System . out . println ( " ) ;
e . printStackTrace ( ) ;
System . exit (  <num> ) ;
}
}
public boolean <unk> ( int a , int b ) {
int i ;
try {
i = img . getRGB ( a + <num> , b + <num> ) ;
if ( i ==  <num> ) {
return false ;
} else {
return true ;
}
} catch ( Exception e ) {
return true ;
}
}
public int getWidth ( ) {
return texture . getImageWidth ( ) ;
}
public int getHeight ( ) {
return texture . getImageHeight ( ) ;
}
public void draw ( int x , int y ) {
glPushMatrix ( ) ;
texture . bind ( ) ;
glTranslatef ( x , y , <num> ) ;
glBegin ( GL_QUADS ) ;
{
glTexCoord2f ( <num> , <num> ) ;
glVertex2f ( <num> , <num> ) ;
glTexCoord2f ( <num> , texture . getHeight ( ) ) ;
glVertex2f ( <num> , height ) ;
glTexCoord2f ( texture . getWidth ( ) , texture . getHeight ( ) ) ;
glVertex2f ( width , height ) ;
glTexCoord2f ( texture . getWidth ( ) , <num> ) ;
glVertex2f ( width , <num> ) ;
}
glEnd ( ) ;
glPopMatrix ( ) ;
}
}
import static org . junit . Assert . assertEquals ;
import static org . junit . Assert . assertTrue ;
import java . util . ArrayList ;
import org . junit . Test ;
public class <unk> {
@Test
public void <unk> ( ) {
assertTrue ( " , true ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> , <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
private ArrayList < Integer > list ( int . . . ints ) {
ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;
for ( int i : ints ) {
ret . add ( i ) ;
}
return ret ;
}
}
import java . util . ArrayList ;
public class <unk> {
public static ArrayList < Integer > <unk> ( int n ) {
ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;
for ( int <unk> = <num> ; n > <unk> ; <unk> ++ ) {
if ( <unk> . <unk> ( <unk> ) . size ( ) == <num> )
ret . add ( <unk> ) ;
}
return ret ;
}
}
import java . util . ArrayList ;
public class <unk> {
public static ArrayList < Integer > <unk> ( int n ) {
ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;
for ( int <unk> = <num> ; n > <num> ; <unk> ++ ) {
for ( ; n % <unk> == <num> ; n /= <unk> ) {
ret . add ( <unk> ) ;
}
}
return ret ;
}
}
import static org . junit . Assert . * ;
import java . util . ArrayList ;
import org . junit . Test ;
public class <unk> {
@Test
public void <unk> ( ) {
assertTrue ( " , true ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
private ArrayList < Integer > list ( int . . . ints ) {
ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;
for ( int i : ints ) {
ret . add ( i ) ;
}
return ret ;
}
}
package net . lp . <unk> . util ;
import java . io . IOException ;
import net . lp . <unk> . v4 . <unk> ;
import android . app . backup . BackupAgentHelper ;
import android . app . backup . <unk> ;
import android . app . backup . SharedPreferencesBackupHelper ;
import android . content . Context ;
import android . content . SharedPreferences ;
import android . os . ParcelFileDescriptor ;
public class <unk> extends BackupAgentHelper {
static final String <unk> = " ;
static final String <unk> = " ;
static final String <unk> = " ;
@Override
public void onCreate ( ) {
super . onCreate ( ) ;
SharedPreferencesBackupHelper <unk> =
new SharedPreferencesBackupHelper ( this . getApplicationContext ( ) , new String [ ] { <unk> . <unk> } ) ;
addHelper ( <unk> , <unk> ) ;
}
@Override
public void <unk> ( <unk> data , int <unk> ,
ParcelFileDescriptor newState ) throws IOException {
super . <unk> ( data , <unk> , newState ) ;
SharedPreferences prefs = getSharedPreferences ( <unk> . <unk> , Context . MODE_PRIVATE ) ;
prefs . edit ( ) . putBoolean ( <unk> . <unk> , true ) . apply ( ) ;
}
}
package net . lp . <unk> . v4 ;
import java . nio . charset . Charset ;
import net . lp . <unk> . R ;
import net . lp . <unk> . domain . Gender ;
import net . lp . <unk> . domain . Probability ;
import net . lp . <unk> . domain . Region ;
import net . lp . <unk> . util . <unk> ;
import net . lp . <unk> . util . <unk> ;
import net . lp . <unk> . util . <unk> ;
import net . lp . <unk> . util . <unk> ;
import org . <unk> . intents . <unk> ;
import android . app . AlarmManager ;
import android . app . AlertDialog ;
import android . app . Dialog ;
import android . app . NotificationManager ;
import android . app . PendingIntent ;
import android . content . ActivityNotFoundException ;
import android . content . Context ;
import android . content . Intent ;
import android . content . IntentFilter ;
import android . content . IntentFilter . <unk> ;
import android . content . SharedPreferences ;
import android . content . SharedPreferences . Editor ;
import android . content . pm . PackageInfo ;
import android . content . pm . PackageManager ;
import android . content . res . Configuration ;
import android . net . Uri ;
import android . <unk> . <unk> ;
import android . <unk> . <unk> ;
import android . <unk> . <unk> ;
import android . <unk> . <unk> . <unk> ;
import android . os . Bundle ;
import android . os . Parcelable ;
import android . preference . PreferenceManager ;
import android . support . v4 . app . FragmentActivity ;
import android . support . v4 . app . FragmentManager ;
import android . support . v4 . app . FragmentTransaction ;
import android . util . Log ;
import android . view . Menu ;
import android . view . MenuInflater ;
import android . view . MenuItem ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . widget . AdapterView ;
import android . widget . AdapterView . OnItemSelectedListener ;
import android . widget . Spinner ;
import android . widget . TextView ;
import android . widget . Toast ;
import com . bugsense . trace . BugSenseHandler ;
import com . <unk> . android . <unk> ;
public class <unk> extends FragmentActivity implements
OnClickListener , OnItemSelectedListener {
public static final String TAG = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
private static final String <unk> = " ;
private static final String <unk> = " ;
private static final String <unk> = " ;
private static final String <unk> = " ;
private static final String <unk> = " ;
private <unk> <unk> ;
private int caught = <num> ;
private boolean ran = false ;
private IntentFilter [ ] <unk> ;
private String [ ] [ ] <unk> ;
private PendingIntent <unk> ;
public Gender <unk> ;
public Region mRegion ;
final static public boolean DEBUG = true ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
private static boolean <unk> = false ;
private static boolean <unk> ;
private static <unk> <unk> = null ;
private static Context applicationContext ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . activity ) ;
applicationContext = this . getApplicationContext ( ) ;
<unk> ( ) ;
if ( DEBUG && <unk> ) {
<unk> . <unk> ( ) ;
}
if ( ! DEBUG ) {
BugSenseHandler . setup ( this , <unk> ) ;
}
if ( ! <unk> . DEBUG ) <unk> . <unk> ( this , <unk> . <unk> ) ;
if ( <unk> ) {
<unk> = new <unk> ( this ) ;
Log . i ( TAG , " ) ;
} else {
Log . i ( TAG , " ) ;
}
PreferenceManager . setDefaultValues ( <unk> . <unk> ( ) , <unk> , MODE_PRIVATE , R . xml . preferences , false ) ;
<unk> . dataChanged ( ) ;
SharedPreferences prefs = getSharedPreferences ( <unk> , MODE_PRIVATE ) ;
<unk> = Gender . valueOf ( prefs . getString ( <unk> , " ) ) ;
String region = prefs . getString ( <unk> , null ) ;
if ( region == null ) {
mRegion = null ;
}
caught = prefs . getInt ( <unk> ,  <num> ) ;
if ( caught ==  <num> ) {
<unk> ( mRegion == null ) ;
} else {
}
<unk> = <unk> . getDefaultAdapter ( <unk> . <unk> ( ) ) ;
if ( <unk> == null ) {
Toast . makeText ( this , " , Toast . LENGTH_LONG )
. show ( ) ;
if ( ! DEBUG ) finish ( ) ;
}
<unk> = PendingIntent . getActivity ( this , <num> , new Intent ( this ,
getClass ( ) ) . addFlags ( Intent . FLAG_ACTIVITY_SINGLE_TOP ) , <num> ) ;
IntentFilter <unk> = new IntentFilter ( <unk> . <unk> ) ;
try {
<unk> . <unk> ( " ) ;
} catch ( <unk> e ) {
throw new RuntimeException ( " , e ) ;
}
<unk> = new IntentFilter [ ] { <unk> } ;
<unk> = new String [ ] [ ] { new String [ ] { <unk> . class . getName ( ) } } ;
}
private void <unk> ( ) {
if ( DEBUG && <unk> ) {
Log . i ( TAG , " ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
} else {
Log . i ( TAG , " ) ;
}
}
static {
try {
<unk> . <unk> ( ) ;
<unk> = true ;
} catch ( Throwable t ) {
<unk> = false ;
}
}
public static void dataChanged ( ) {
if ( <unk> != null ) {
<unk> . dataChanged ( ) ;
}
}
static {
try {
<unk> . <unk> ( ) ;
<unk> = true ;
} catch ( Throwable t ) {
<unk> = false ;
}
}
public static Context <unk> ( ) {
if ( applicationContext == null ) {
throw new IllegalArgumentException ( " ) ;
}
return applicationContext ;
}
public void onItemSelected ( AdapterView < ? > parent , View view , int position ,
long id ) {
if ( parent . getId ( ) == R . id . <unk> ) {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , this . getLocalClassName ( ) + " + Gender . values ( ) [ position ] , position ) ;
} else if ( parent . getId ( ) == R . id . <unk> ) {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , this . getLocalClassName ( ) + " + Region . values ( ) [ position ] , position ) ;
}
}
public void onNothingSelected ( AdapterView < ? > parent ) {
if ( parent . getId ( ) == R . id . <unk> ) {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , this . getLocalClassName ( ) + " , <num> ) ;
} else if ( parent . getId ( ) == R . id . <unk> ) {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , this . getLocalClassName ( ) + " , <num> ) ;
}
}
public void onClick ( View v ) {
if ( v . getId ( ) == R . id . button1 ) {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , this . getLocalClassName ( ) + " , <num> ) ;
if ( ! <unk> . DEBUG ) <unk> . <unk> ( ) ;
<unk> . getInstance ( ) . <unk> ( " , " ) ;
int <unk> = ( ( Spinner ) findViewById ( R . id . <unk> ) )
. getSelectedItemPosition ( ) ;
<unk> ( ) ;
<unk> = Gender . values ( ) [ <unk> ] ;
int <unk> = ( ( Spinner ) findViewById ( R . id . <unk> ) )
. getSelectedItemPosition ( ) ;
mRegion = Region . values ( ) [ <unk> ] ;
<unk> ( false ) ;
if ( DEBUG ) {
TextView tv = ( ( TextView ) findViewById ( R . id . debug ) ) ;
if ( tv != null ) {
tv . setText ( " + caught + "
+ <unk> . toString ( ) + "
+ mRegion ) ;
}
}
}
}
protected void <unk> ( ) {
if ( ! ( DEBUG && <unk> == null ) ) {
<unk> . <unk> ( this ) ;
<unk> . <unk> ( this , <unk> ( ) ) ;
}
FragmentManager <unk> = getSupportFragmentManager ( ) ;
android . support . v4 . app . FragmentTransaction transaction = <unk>
. beginTransaction ( ) ;
<unk> sf = new <unk> ( ) ;
transaction . remove ( <unk>
. findFragmentById ( R . id . <unk> ) ) ;
transaction . add ( R . id . <unk> , sf ) ;
transaction
. setTransition ( FragmentTransaction . TRANSIT_FRAGMENT_CLOSE ) ;
transaction . <unk> ( " ) ;
transaction . commit ( ) ;
}
@Override
public boolean onOptionsItemSelected ( MenuItem item ) {
switch ( item . getItemId ( ) ) {
case R . id . about : {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , this . getLocalClassName ( ) + " , <num> ) ;
<unk> ( ) ;
return true ;
}
case R . id . feedback : {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , this . getLocalClassName ( ) + " , <num> ) ;
startActivity ( new Intent ( Intent . ACTION_VIEW ,
Uri . parse ( getString ( R . string . <unk> ) ) ) ) ;
return true ;
}
case R . id . share : {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , this . getLocalClassName ( ) + " , <num> ) ;
startActivity ( Intent
. createChooser (
new Intent ( Intent . ACTION_SEND )
. putExtra (
Intent . EXTRA_TEXT ,
getString ( R . string . <unk> ) )
. putExtra (
Intent . EXTRA_SUBJECT ,
getString ( R . string . <unk> ) )
. setType ( " ) ,
getString ( R . string . <unk> ) ) ) ;
return true ;
}
case R . id . <unk> : {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , this . getLocalClassName ( ) + " , <num> ) ;
if ( ! <unk> . DEBUG ) <unk> . <unk> ( ) ;
<unk> . getInstance ( ) . <unk> ( " , " ) ;
FragmentManager <unk> = getSupportFragmentManager ( ) ;
<unk> . <unk> ( ) ;
<unk> = Gender . male ;
mRegion = null ;
<unk> ( true ) ;
return true ;
}
case R . id . help : {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , this . getLocalClassName ( ) + " , <num> ) ;
showDialog ( <unk> ) ;
}
}
return super . onOptionsItemSelected ( item ) ;
}
@Override
protected Dialog onCreateDialog ( int id ) {
switch ( id ) {
case <unk> :
return <unk> ( ) ;
case <unk> :
return <unk> ( ) ;
}
return null ;
}
public Dialog <unk> ( ) {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " ) ;
final AlertDialog . Builder builder = new AlertDialog . Builder ( this ) ;
builder . setTitle ( R . string . <unk> ) ;
builder . setCancelable ( true ) ;
builder . setMessage ( R . string . <unk> ) ;
final AlertDialog dialog = builder . create ( ) ;
return dialog ;
}
public Dialog <unk> ( ) {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " ) ;
Dialog dialog = new Dialog ( this ) ;
dialog . setContentView ( R . layout . <unk> ) ;
dialog . setTitle ( R . string . <unk> ) ;
dialog . setCancelable ( true ) ;
return dialog ;
}
public void onConfigurationChanged ( Configuration newConfig ) {
super . onConfigurationChanged ( newConfig ) ;
}
@Override
protected void onDestroy ( ) {
super . onDestroy ( ) ;
try {
removeDialog ( <unk> ) ;
} catch ( IllegalArgumentException e ) {
}
try {
removeDialog ( <unk> ) ;
} catch ( IllegalArgumentException e ) {
}
if ( <unk> != null ) {
<unk> . <unk> ( this ) ;
<unk> . <unk> ( this ) ;
}
<unk> = null ;
<unk> = null ;
if ( ! <unk> . DEBUG ) <unk> . <unk> ( this ) ;
<unk> . getInstance ( ) . <unk> ( ) ;
}
private void <unk> ( ) {
if ( ! <unk> . DEBUG ) <unk> . <unk> ( ) ;
<unk> . getInstance ( ) . <unk> ( " , " ) ;
Intent intent = new Intent ( <unk> . <unk> ) ;
intent . putExtra ( <unk> . <unk> , getResources ( )
. getResourceName ( R . drawable . logo ) ) ;
intent . putExtra ( <unk> . <unk> , getPackageName ( ) ) ;
intent . putExtra ( <unk> . <unk> ,
getString ( R . string . app_name ) ) ;
String version = " ;
try {
PackageInfo pi = getPackageManager ( ) . getPackageInfo (
getPackageName ( ) , <num> ) ;
version = pi . versionName ;
} catch ( PackageManager . NameNotFoundException e ) {
if ( ! <unk> . DEBUG ) <unk> . onError ( " , " , e . getMessage ( ) ) ;
if ( <unk> . DEBUG ) Log . e ( TAG , " , e ) ; }
;
intent . putExtra ( <unk> . <unk> , version ) ;
intent . putExtra ( <unk> . <unk> ,
getString ( R . string . <unk> ) ) ;
intent . putExtra ( <unk> . <unk> ,
getString ( R . string . <unk> ) ) ;
intent . putExtra ( <unk> . <unk> ,
getString ( R . string . <unk> ) ) ;
intent . putExtra ( <unk> . <unk> ,
getString ( R . string . <unk> ) ) ;
intent . putExtra ( <unk> . EXTRA_EMAIL ,
getString ( R . string . <unk> ) ) ;
intent . putExtra ( <unk> . <unk> , getResources ( )
. getResourceName ( R . raw . <unk> ) ) ;
try {
startActivityForResult ( intent , <num> ) ;
} catch ( ActivityNotFoundException e ) {
try {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , " + <unk> . <unk> ( ) . getString ( R . string . <unk> ) , <num> ) ;
Toast . makeText ( this , getString ( R . string . <unk> ) ,
Toast . LENGTH_LONG ) . show ( ) ;
startActivity ( new Intent ( Intent . ACTION_VIEW ,
Uri . parse ( getString ( R . string . <unk> ) ) ) ) ;
} catch ( ActivityNotFoundException e2 ) {
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , " + <unk> . <unk> ( ) . getString ( R . string . <unk> ) , <num> ) ;
Toast . makeText ( this , getString ( R . string . <unk> ) ,
Toast . LENGTH_LONG ) . show ( ) ;
}
}
}
private void storePreferences ( ) {
SharedPreferences prefs = getSharedPreferences ( <unk> , MODE_PRIVATE ) ;
Editor editor = prefs . edit ( ) ;
editor . putString ( <unk> , <unk> . name ( ) ) ;
if ( mRegion != null ) {
editor . putString ( <unk> , mRegion . name ( ) ) ;
} else {
editor . putString ( <unk> , null ) ;
}
editor . putInt ( <unk> , caught ) ;
editor . apply ( ) ;
<unk> . dataChanged ( ) ;
}
protected void <unk> ( boolean <unk> ) {
double prob = <num> ;
if ( ! ran ) {
if ( <unk> ) {
prob = Probability . <unk> * Probability . scale ;
} else {
prob = Probability . <unk> ( <unk> , mRegion )
* Probability . scale ;
}
caught = ( int ) Math . floor ( Math . random ( ) + Math . min ( <num> , prob ) ) ;
}
TextView tv = ( ( TextView ) findViewById ( R . id . debug ) ) ;
if ( DEBUG ) {
if ( tv != null ) {
tv . setText ( " + caught + "
+ <unk> . toString ( ) + "
+ ( mRegion == null ? " : mRegion . toString ( ) )
+ " + prob ) ;
}
}
storePreferences ( ) ;
}
@Override
public boolean onCreateOptionsMenu ( Menu menu ) {
MenuInflater inflater = getMenuInflater ( ) ;
inflater . inflate ( R . menu . menu , menu ) ;
return true ;
}
public <unk> <unk> ( ) {
String text = " + caught + " + <unk> . name ( ) ;
<unk> msg = new <unk> ( new <unk> [ ] { <unk> (
" , text . getBytes ( ) )
} ) ;
return msg ;
}
@Override
public void onResume ( ) {
super . onResume ( ) ;
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
if ( ! <unk> . DEBUG ) <unk> . <unk> ( ) ;
<unk> . getInstance ( ) . <unk> ( " + this . getLocalClassName ( ) , " ) ;
if ( <unk> . <unk> . equals ( getIntent ( ) . getAction ( ) ) ) {
<unk> ( getIntent ( ) ) ;
}
if ( ! ( DEBUG && <unk> == null ) ) {
<unk> . <unk> ( this , <unk> ( ) ) ;
<unk> . <unk> ( this , <unk> ,
<unk> , <unk> ) ;
}
NotificationManager nm = ( NotificationManager ) this
. getSystemService ( Context . NOTIFICATION_SERVICE ) ;
nm . cancel ( <num> ) ;
if ( caught !=  <num> ) {
<unk> ( ) ;
}
}
@Override
protected void onPause ( ) {
super . onPause ( ) ;
if ( <unk> != null ) {
<unk> . <unk> ( this ) ;
<unk> . <unk> ( this ) ;
}
}
@Override
public void onNewIntent ( Intent intent ) {
setIntent ( intent ) ;
<unk> ( intent ) ;
}
void <unk> ( Intent intent ) {
Parcelable [ ] <unk> = intent
. <unk> ( <unk> . <unk> ) ;
<unk> msg = ( <unk> ) <unk> [ <num> ] ;
String data = new String ( msg . <unk> ( ) [ <num> ] . getPayload ( ) ) ;
String [ ] parts = data . split ( " ) ;
Log . v ( " , " + caught + " + data ) ;
double <unk> = Double . parseDouble ( parts [ <num> ] ) ;
Gender <unk> = Gender . valueOf ( parts [ <num> ] ) ;
<unk> ( <unk> , <unk> ) ;
if ( ! <unk> . DEBUG ) <unk> . onEvent ( " ) ;
<unk> . getInstance ( ) . <unk> ( " , " , this . getLocalClassName ( ) + " , caught ) ;
Log . v ( " , " + caught ) ;
showDialog ( <unk> ) ;
}
private void <unk> ( double <unk> , Gender gender ) {
int <unk> = caught ;
if ( caught == <num> && <unk> > <num> ) {
double factor ;
if ( <unk> == Gender . male ) {
if ( gender == Gender . male ) {
factor = Probability . <unk> ;
} else {
factor = Probability . <unk> ;
}
} else {
if ( gender == Gender . male ) {
factor = Probability . <unk> ;
} else {
factor = Probability . <unk> ;
}
}
double random = Math . random ( ) ;
caught = ( int ) Math . floor ( random + ( factor * Probability . scale ) ) ;
storePreferences ( ) ;
if ( DEBUG ) {
TextView tv = ( ( TextView ) findViewById ( R . id . debug ) ) ;
if ( tv != null ) {
tv . setText ( " + caught + "
+ <unk> . toString ( ) + "
+ ( mRegion == null ? " : mRegion . toString ( ) ) ) ;
}
}
}
SharedPreferences prefs = getSharedPreferences ( <unk> , MODE_PRIVATE ) ;
Editor editor = prefs . edit ( ) ;
int history = prefs . getInt ( <unk> , <num> ) ;
history ++ ;
editor . putInt ( <unk> , history ) ;
if ( <unk> == <num> && caught == <num> ) {
int <unk> = history ;
editor . putInt ( <unk> , <unk> ) ;
}
editor . apply ( ) ;
<unk> . dataChanged ( ) ;
if ( history > <num> ) {
<unk> ( caught == <num> , prefs . getInt ( <unk> , <num> ) ) ;
}
}
private void <unk> ( boolean <unk> , int <unk> ) {
String msg ;
if ( <unk> && <unk> == <num> ) {
msg = getString ( R . string . <unk> ) ;
} else if ( <unk> ) {
msg = getString ( R . string . <unk> , <unk> ) ;
} else {
msg = getString ( R . string . <unk> ) ;
}
Intent intent = new Intent ( this , <unk> . class ) ;
intent . putExtra ( " , msg ) ;
PendingIntent operation = PendingIntent . getBroadcast ( this , <num> , intent ,
PendingIntent . FLAG_CANCEL_CURRENT ) ;
AlarmManager am = ( AlarmManager ) getSystemService ( ALARM_SERVICE ) ;
am . set ( AlarmManager . RTC , System . currentTimeMillis ( ) , operation ) ;
SharedPreferences prefs = getSharedPreferences ( <unk> , MODE_PRIVATE ) ;
Editor editor = prefs . edit ( ) ;
editor . remove ( <unk> ) ;
editor . remove ( <unk> ) ;
editor . apply ( ) ;
<unk> . dataChanged ( ) ;
}
public <unk> <unk> ( String mimeType , byte [ ] payload ) {
byte [ ] <unk> = mimeType . getBytes ( Charset . forName ( " ) ) ;
<unk> <unk> = new <unk> ( <unk> . <unk> ,
<unk> , new byte [ <num> ] , payload ) ;
return <unk> ;
}
package net . lp . <unk> . util ;
import android . app . backup . BackupManager ;
import android . content . Context ;
public class <unk> {
static {
try {
Class . forName ( " ) ;
} catch ( Exception e ) {
throw new RuntimeException ( e ) ;
}
}
public static void <unk> ( ) { }
public void dataChanged ( ) {
mInstance . dataChanged ( ) ;
}
private BackupManager mInstance ;
public <unk> ( Context ctx ) {
mInstance = new BackupManager ( ctx ) ;
}
}
package net . lp . <unk> . util ;
import java . util . concurrent . RejectedExecutionException ;
import net . lp . <unk> . v4 . <unk> ;
import android . content . Context ;
import android . content . SharedPreferences ;
import android . content . pm . PackageInfo ;
import android . content . pm . PackageManager ;
import android . os . AsyncTask ;
import android . os . Build ;
import android . preference . PreferenceManager ;
import android . util . Log ;
import com . <unk> . android . <unk> ;
import com . google . android . apps . analytics . GoogleAnalyticsTracker ;
public class <unk> {
private static final String TAG = <unk> . TAG + " ;
GoogleAnalyticsTracker mTracker ;
private Context <unk> ;
public static final String <unk> = " ;
private static final boolean <unk> = true ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final String <unk> = " ;
private static final int <unk> = <num> ;
private static final String <unk> = " ;
private static final int <unk> = <num> ;
private static final String <unk> = " ;
private static <unk> sInstance ;
@SuppressWarnings("unused")
public static <unk> getInstance ( ) {
if ( ! <unk> ) {
return <unk> ;
}
final Context context = <unk> . <unk> ( ) ;
if ( sInstance == null ) {
if ( context == null ) {
return <unk> ;
}
sInstance = new <unk> ( context ) ;
}
return sInstance ;
}
private <unk> ( Context context ) {
if ( context == null ) {
return ;
}
<unk> = context ;
mTracker = GoogleAnalyticsTracker . getInstance ( ) ;
mTracker . start ( <unk> . <unk> , <unk> . DEBUG ? <num> : <num> , <unk> ) ;
mTracker . setDebug ( <unk> . DEBUG ) ;
mTracker . setDryRun ( <unk> . DEBUG ) ;
Log . d ( TAG , " ) ;
SharedPreferences prefs = <unk> . getSharedPreferences ( <unk> . <unk> , Context . MODE_PRIVATE ) ;
final boolean <unk> = prefs . getBoolean ( <unk> , true ) ;
if ( <unk> ) {
Log . d ( TAG , " ) ;
String version = " ;
int versionCode = <num> ;
try {
PackageManager pm = <unk> . getPackageManager ( ) ;
PackageInfo pi = pm . getPackageInfo ( <unk> . getPackageName ( ) , <num> ) ;
version = pi . versionName ;
versionCode = pi . versionCode ;
} catch ( PackageManager . NameNotFoundException e ) {
if ( ! <unk> . DEBUG ) <unk> . onError ( " , " , e . getMessage ( ) ) ;
if ( <unk> . DEBUG ) Log . e ( TAG , " , e ) ;
} ;
final String versionString = version + " + versionCode + " ;
final String <unk> = " ;
final String model = Build . MODEL ;
mTracker . setCustomVar ( <unk> , <unk> , versionString , <unk> ) ;
mTracker . setCustomVar ( <unk> , <unk> , <unk> , <unk> ) ;
mTracker . setCustomVar ( <unk> , <unk> , model , <unk> ) ;
prefs . edit ( ) . putBoolean ( <unk> , false ) . apply ( ) ;
<unk> . dataChanged ( ) ;
}
}
public void <unk> ( final String <unk> , final String <unk> , final String label ,
final int value ) {
try {
new AsyncTask < Void , Void , Void > ( ) {
@Override
protected Void doInBackground ( Void . . . <unk> ) {
try {
mTracker . trackEvent ( <unk> , <unk> , label , value ) ;
Log . d ( TAG , "
+ <unk> + " + <unk> + " + label + " + value ) ;
} catch ( Exception e ) {
Log . w ( TAG , "
+ <unk> + " + <unk> + " + label + " + value , e ) ;
}
return null ;
}
} . execute ( ) ;
} catch ( RejectedExecutionException e ) {
}
}
public void <unk> ( String <unk> , String <unk> ) {
<unk> ( <unk> , <unk> , null , <num> ) ;
}
public void <unk> ( final String page , final String subpage ) {
try {
new AsyncTask < Void , Void , Void > ( ) {
@Override
protected Void doInBackground ( Void . . . <unk> ) {
try {
mTracker . trackPageView ( page ) ;
Log . d ( TAG , " + page + " + subpage ) ;
} catch ( Exception e ) {
Log . w ( TAG , " + page + " + subpage , e ) ;
}
return null ;
}
} . execute ( ) ;
} catch ( RejectedExecutionException e ) {
}
}
private static <unk> <unk> = new <unk> ( null ) {
@Override
public void <unk> ( String <unk> , String <unk> , String label , int value ) { }
@Override
public void <unk> ( String <unk> , String <unk> ) { }
@Override
public void <unk> ( String page , String product ) { }
@Override
public void <unk> ( ) { }
@Override
public void <unk> ( ) { }
} ;
public void <unk> ( ) {
if ( mTracker != null ) {
mTracker . stop ( ) ;
}
}
public void <unk> ( ) {
if ( mTracker != null ) {
mTracker . dispatch ( ) ;
}
}
}
package net . lp . <unk> . domain ;
public enum Region {
<unk> ( <num> ) , <unk> ( <num> ) , <unk> ( <num> ) , <unk> ( <num> ) , <unk> ( <num> ) , <unk> ( <num> ) , <unk> ( <num> ) , <unk> ( <num> ) , <unk> ( <num> ) , <unk> ( <num> ) ;
private final double <unk> ;
Region ( double probability ) {
<unk> = probability ;
}
public double getProbability ( ) {
return <unk> ;
}
}
package net . lp . <unk> . domain ;
public class Probability {
public final static double <unk> = <num> ;
public final static double scale = <num> ;
public final static double <unk> = <num> ;
public final static double <unk> = <num> ;
public final static double <unk> = <num> ;
public final static double <unk> = <num> ;
public static double <unk> ( Gender gender , Region region ) {
if ( Gender . male == gender ) {
return region . getProbability ( ) * <num> ;
} else {
return region . getProbability ( ) * <num> ;
}
}
}
package net . lp . <unk> . util ;
import android . os . <unk> ;
public class <unk> {
static {
try {
Class clazz = Class . forName ( " ) ;
Class . forName ( " ) ;
Class . forName ( " ) ;
} catch ( Exception ex ) {
throw new RuntimeException ( ex ) ;
}
}
public static void <unk> ( ) { }
public static void <unk> ( ) {
<unk> . <unk> ( new <unk> . <unk> . Builder ( )
. <unk> ( )
. <unk> ( )
. build ( ) ) ;
}
public static void <unk> ( ) {
<unk> . <unk> ( new <unk> . <unk> . Builder ( )
. <unk> ( )
. <unk> ( )
. build ( ) ) ;
}
public static void <unk> ( ) {
<unk> . <unk> ( ) ;
}
}
package net . lp . <unk> . v4 ;
import net . lp . <unk> . R ;
import android . content . DialogInterface . OnClickListener ;
import android . os . Bundle ;
import android . support . v4 . app . Fragment ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . Button ;
public class <unk> extends Fragment {
public <unk> ( ) {
}
@Override
public View onCreateView ( LayoutInflater inflater , ViewGroup container ,
Bundle savedInstanceState ) {
return inflater . inflate ( R . layout . started , container , false ) ;
}
}
package com . <unk> ;
import static android . view . Gravity . <unk> ;
import static android . view . Gravity . <unk> ;
import static android . view . Gravity . <unk> ;
import static android . view . Gravity . <unk> ;
import static android . view . Gravity . <unk> ;
import static android . view . Gravity . <unk> ;
import static android . view . Gravity . <unk> ;
import static android . view . View . MeasureSpec . EXACTLY ;
import static android . view . View . MeasureSpec . makeMeasureSpec ;
import static java . lang . Math . max ;
import static java . lang . Math . min ;
import java . lang . reflect . Array ;
import java . util . ArrayList ;
import java . util . Arrays ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
import android . content . Context ;
import android . content . res . TypedArray ;
import android . graphics . Canvas ;
import android . graphics . Color ;
import android . graphics . Paint ;
import android . util . AttributeSet ;
import android . util . Log ;
import android . view . Gravity ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . LinearLayout ;
public class GridLayout extends ViewGroup {
public static final int HORIZONTAL = LinearLayout . HORIZONTAL ;
public static final int VERTICAL = LinearLayout . VERTICAL ;
public static final int UNDEFINED = Integer . MIN_VALUE ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
static final String TAG = GridLayout . class . getName ( ) ;
static final boolean DEBUG = false ;
static final int <unk> = <num> ;
static final int <unk> = <num> ;
static final int <unk> = <num> ;
private static final int <unk> = HORIZONTAL ;
private static final int <unk> = UNDEFINED ;
private static final boolean <unk> = false ;
private static final boolean <unk> = true ;
private static final int <unk> = <unk> ;
private static final int ORIENTATION = R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
final Axis <unk> = new Axis ( true ) ;
final Axis <unk> = new Axis ( false ) ;
boolean <unk> = false ;
int orientation = <unk> ;
boolean <unk> = <unk> ;
int <unk> = <unk> ;
int <unk> ;
public GridLayout ( Context context , AttributeSet attrs , int defStyle ) {
super ( context , attrs , defStyle ) ;
if ( DEBUG ) {
setWillNotDraw ( false ) ;
}
<unk> = context . getResources ( ) . getDimensionPixelOffset ( R . dimen . <unk> ) ;
TypedArray a = context . obtainStyledAttributes ( attrs , R . styleable . GridLayout ) ;
try {
setRowCount ( a . getInt ( <unk> , <unk> ) ) ;
setColumnCount ( a . getInt ( <unk> , <unk> ) ) ;
setOrientation ( a . getInt ( ORIENTATION , <unk> ) ) ;
<unk> ( a . getBoolean ( <unk> , <unk> ) ) ;
<unk> ( a . getInt ( <unk> , <unk> ) ) ;
<unk> ( a . getBoolean ( <unk> , <unk> ) ) ;
<unk> ( a . getBoolean ( <unk> , <unk> ) ) ;
} finally {
a . recycle ( ) ;
}
super . <unk> ( <unk> ) ;
}
public GridLayout ( Context context , AttributeSet attrs ) {
this ( context , attrs , <num> ) ;
}
public GridLayout ( Context context ) {
this ( context , null ) ;
}
public int getOrientation ( ) {
return orientation ;
}
public void setOrientation ( int orientation ) {
if ( this . orientation != orientation ) {
this . orientation = orientation ;
<unk> ( ) ;
requestLayout ( ) ;
}
}
public int getRowCount ( ) {
return <unk> . getCount ( ) ;
}
public void setRowCount ( int rowCount ) {
<unk> . setCount ( rowCount ) ;
<unk> ( ) ;
requestLayout ( ) ;
}
public int getColumnCount ( ) {
return <unk> . getCount ( ) ;
}
public void setColumnCount ( int columnCount ) {
<unk> . setCount ( columnCount ) ;
<unk> ( ) ;
requestLayout ( ) ;
}
public boolean <unk> ( ) {
return <unk> ;
}
public void <unk> ( boolean <unk> ) {
this . <unk> = <unk> ;
requestLayout ( ) ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
requestLayout ( ) ;
}
public boolean <unk> ( ) {
return <unk> . <unk> ( ) ;
}
public void <unk> ( boolean <unk> ) {
<unk> . <unk> ( <unk> ) ;
<unk> ( ) ;
requestLayout ( ) ;
}
public boolean <unk> ( ) {
return <unk> . <unk> ( ) ;
}
public void <unk> ( boolean <unk> ) {
<unk> . <unk> ( <unk> ) ;
<unk> ( ) ;
requestLayout ( ) ;
}
static int <unk> ( int [ ] a , int <unk> ) {
int result = <unk> ;
for ( int i = <num> , N = a . length ; i < N ; i ++ ) {
result = Math . max ( result , a [ i ] ) ;
}
return result ;
}
@SuppressWarnings("unchecked")
static < T > T [ ] append ( T [ ] a , T [ ] b ) {
T [ ] result = ( T [ ] ) Array . newInstance ( a . getClass ( ) . getComponentType ( ) , a . length + b . length ) ;
System . arraycopy ( a , <num> , result , <num> , a . length ) ;
System . arraycopy ( b , <num> , result , a . length , b . length ) ;
return result ;
}
static Alignment <unk> ( int gravity , boolean horizontal ) {
int mask = horizontal ? <unk> : <unk> ;
int shift = horizontal ? <unk> : <unk> ;
int flags = ( gravity & mask ) >> shift ;
switch ( flags ) {
case ( <unk> | <unk> ) :
return LEADING ;
case ( <unk> | <unk> ) :
return TRAILING ;
case ( <unk> | <unk> | <unk> ) :
return FILL ;
case <unk> :
return CENTER ;
default :
return <unk> ;
}
}
private int <unk> ( View c , boolean horizontal , boolean <unk> ) {
if ( c . getClass ( ) == <unk> . class ) {
return <num> ;
}
return <unk> / <num> ;
}
private int <unk> ( View c , boolean <unk> , boolean horizontal , boolean <unk> ) {
return <unk> ? <unk> : <unk> ( c , horizontal , <unk> ) ;
}
private int <unk> ( View c , LayoutParams p , boolean horizontal , boolean <unk> ) {
if ( ! <unk> ) {
return <num> ;
}
<unk> spec = horizontal ? p . <unk> : p . <unk> ;
Axis axis = horizontal ? <unk> : <unk> ;
<unk> span = spec . span ;
boolean <unk> = <unk> ? ( span . min == <num> ) : ( span . max == axis . getCount ( ) ) ;
return <unk> ( c , <unk> , horizontal , <unk> ) ;
}
int <unk> ( View view , boolean horizontal , boolean <unk> ) {
LayoutParams lp = getLayoutParams ( view ) ;
int margin = horizontal ?
( <unk> ? lp . leftMargin : lp . rightMargin ) :
( <unk> ? lp . topMargin : lp . bottomMargin ) ;
return margin == UNDEFINED ? <unk> ( view , lp , horizontal , <unk> ) : margin ;
}
private int <unk> ( View view , boolean horizontal , boolean <unk> ) {
if ( <unk> == <unk> ) {
return <unk> ( view , horizontal , <unk> ) ;
} else {
Axis axis = horizontal ? <unk> : <unk> ;
int [ ] <unk> = <unk> ? axis . <unk> ( ) : axis . <unk> ( ) ;
LayoutParams lp = getLayoutParams ( view ) ;
<unk> spec = horizontal ? lp . <unk> : lp . <unk> ;
int index = <unk> ? spec . span . min : spec . span . max ;
return <unk> [ index ] ;
}
}
private int <unk> ( View child , boolean horizontal ) {
return <unk> ( child , horizontal , true ) + <unk> ( child , horizontal , false ) ;
}
private static boolean <unk> ( int [ ] a , int value , int start , int end ) {
if ( end > a . length ) {
return false ;
}
for ( int i = start ; i < end ; i ++ ) {
if ( a [ i ] > value ) {
return false ;
}
}
return true ;
}
private static void <unk> ( int [ ] a , int start , int end , int value ) {
int length = a . length ;
Arrays . fill ( a , Math . min ( start , length ) , Math . min ( end , length ) , value ) ;
}
private static void <unk> ( LayoutParams lp , int row , int <unk> , int col , int <unk> ) {
lp . <unk> ( new <unk> ( row , row + <unk> ) ) ;
lp . <unk> ( new <unk> ( col , col + <unk> ) ) ;
}
private static int clip ( <unk> <unk> , boolean <unk> , int count ) {
int size = <unk> . size ( ) ;
if ( count == <num> ) {
return size ;
}
int min = <unk> ? min ( <unk> . min , count ) : <num> ;
return min ( size , count  min ) ;
}
private void <unk> ( ) {
final boolean horizontal = ( orientation == HORIZONTAL ) ;
final Axis axis = horizontal ? <unk> : <unk> ;
final int count = ( axis . <unk> != UNDEFINED ) ? axis . <unk> : <num> ;
int <unk> = <num> ;
int minor = <num> ;
int [ ] <unk> = new int [ count ] ;
for ( int i = <num> , N = getChildCount ( ) ; i < N ; i ++ ) {
LayoutParams lp = <unk> ( getChildAt ( i ) ) ;
final <unk> <unk> = horizontal ? lp . <unk> : lp . <unk> ;
final <unk> <unk> = <unk> . span ;
final boolean <unk> = <unk> . <unk> ;
final int <unk> = <unk> . size ( ) ;
if ( <unk> ) {
<unk> = <unk> . min ;
}
final <unk> <unk> = horizontal ? lp . <unk> : lp . <unk> ;
final <unk> <unk> = <unk> . span ;
final boolean <unk> = <unk> . <unk> ;
final int <unk> = clip ( <unk> , <unk> , count ) ;
if ( <unk> ) {
minor = <unk> . min ;
}
if ( count != <num> ) {
if ( ! <unk> || ! <unk> ) {
while ( ! <unk> ( <unk> , <unk> , minor , minor + <unk> ) ) {
if ( <unk> ) {
<unk> ++ ;
} else {
if ( minor + <unk> <= count ) {
minor ++ ;
} else {
minor = <num> ;
<unk> ++ ;
}
}
}
}
<unk> ( <unk> , minor , minor + <unk> , <unk> + <unk> ) ;
}
if ( horizontal ) {
<unk> ( lp , <unk> , <unk> , minor , <unk> ) ;
} else {
<unk> ( lp , minor , <unk> , <unk> , <unk> ) ;
}
minor = minor + <unk> ;
}
<unk> ( ) ;
}
private void <unk> ( ) {
<unk> = false ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
<unk> ( ) ;
}
private void <unk> ( ) {
if ( <unk> != null && <unk> != null ) {
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
}
}
private LayoutParams <unk> ( View c ) {
return ( LayoutParams ) c . getLayoutParams ( ) ;
}
final LayoutParams getLayoutParams ( View c ) {
if ( ! <unk> ) {
<unk> ( ) ;
<unk> = true ;
}
return <unk> ( c ) ;
}
@Override
protected LayoutParams generateDefaultLayoutParams ( ) {
return new LayoutParams ( ) ;
}
@Override
public LayoutParams generateLayoutParams ( AttributeSet attrs ) {
return new LayoutParams ( getContext ( ) , attrs ) ;
}
@Override
protected LayoutParams generateLayoutParams ( ViewGroup . LayoutParams p ) {
return new LayoutParams ( p ) ;
}
private void drawLine ( Canvas graphics , int x1 , int y1 , int x2 , int y2 , Paint paint ) {
int dx = getPaddingLeft ( ) ;
int dy = getPaddingTop ( ) ;
graphics . drawLine ( dx + x1 , dy + y1 , dx + x2 , dy + y2 , paint ) ;
}
private static void drawRect ( Canvas canvas , int x1 , int y1 , int x2 , int y2 , Paint paint ) {
canvas . drawRect ( x1 , y1 , x2  <num> , y2  <num> , paint ) ;
}
@Override
protected void onDraw ( Canvas canvas ) {
super . onDraw ( canvas ) ;
if ( DEBUG ) {
int height = getHeight ( )  getPaddingTop ( )  getPaddingBottom ( ) ;
int width = getWidth ( )  getPaddingLeft ( )  getPaddingRight ( ) ;
Paint paint = new Paint ( ) ;
paint . setStyle ( Paint . Style . STROKE ) ;
paint . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
int [ ] xs = <unk> . locations ;
if ( xs != null ) {
for ( int i = <num> , length = xs . length ; i < length ; i ++ ) {
int x = xs [ i ] ;
drawLine ( canvas , x , <num> , x , height  <num> , paint ) ;
}
}
int [ ] ys = <unk> . locations ;
if ( ys != null ) {
for ( int i = <num> , length = ys . length ; i < length ; i ++ ) {
int y = ys [ i ] ;
drawLine ( canvas , <num> , y , width  <num> , y , paint ) ;
}
}
paint . setColor ( Color . BLUE ) ;
for ( int i = <num> ; i < getChildCount ( ) ; i ++ ) {
View c = getChildAt ( i ) ;
drawRect ( canvas , c . getLeft ( ) , c . getTop ( ) , c . getRight ( ) , c . getBottom ( ) , paint ) ;
}
paint . setColor ( Color . MAGENTA ) ;
for ( int i = <num> ; i < getChildCount ( ) ; i ++ ) {
View c = getChildAt ( i ) ;
drawRect ( canvas ,
c . getLeft ( )  <unk> ( c , true , true ) ,
c . getTop ( )  <unk> ( c , false , true ) ,
c . getRight ( ) + <unk> ( c , true , false ) ,
c . getBottom ( ) + <unk> ( c , false , false ) , paint ) ;
}
}
}
final boolean <unk> ( View c ) {
return c . getVisibility ( ) == View . GONE ;
}
private void <unk> ( View child , int <unk> , int <unk> ,
int childWidth , int childHeight ) {
int childWidthSpec = getChildMeasureSpec ( <unk> ,
getPaddingLeft ( ) + getPaddingRight ( ) + <unk> ( child , true ) , childWidth ) ;
int childHeightSpec = getChildMeasureSpec ( <unk> ,
getPaddingTop ( ) + getPaddingBottom ( ) + <unk> ( child , false ) , childHeight ) ;
child . measure ( childWidthSpec , childHeightSpec ) ;
}
private void <unk> ( int widthSpec , int heightSpec , boolean <unk> ) {
for ( int i = <num> , N = getChildCount ( ) ; i < N ; i ++ ) {
View c = getChildAt ( i ) ;
if ( <unk> ( c ) ) continue ;
LayoutParams lp = getLayoutParams ( c ) ;
if ( <unk> ) {
<unk> ( c , widthSpec , heightSpec , lp . width , lp . height ) ;
} else {
boolean horizontal = ( orientation == HORIZONTAL ) ;
<unk> spec = horizontal ? lp . <unk> : lp . <unk> ;
if ( spec . alignment == FILL ) {
<unk> span = spec . span ;
Axis axis = horizontal ? <unk> : <unk> ;
int [ ] locations = axis . getLocations ( ) ;
int cellSize = locations [ span . max ]  locations [ span . min ] ;
int <unk> = cellSize  <unk> ( c , horizontal ) ;
if ( horizontal ) {
<unk> ( c , widthSpec , heightSpec , <unk> , lp . height ) ;
} else {
<unk> ( c , widthSpec , heightSpec , lp . width , <unk> ) ;
}
}
}
}
}
@Override
protected void onMeasure ( int widthSpec , int heightSpec ) {
<unk> ( ) ;
<unk> ( widthSpec , heightSpec , true ) ;
int width , height ;
if ( orientation == HORIZONTAL ) {
width = <unk> . <unk> ( widthSpec ) ;
<unk> ( widthSpec , heightSpec , false ) ;
height = <unk> . <unk> ( heightSpec ) ;
} else {
height = <unk> . <unk> ( heightSpec ) ;
<unk> ( widthSpec , heightSpec , false ) ;
width = <unk> . <unk> ( widthSpec ) ;
}
int <unk> = getPaddingLeft ( ) + getPaddingRight ( ) ;
int <unk> = getPaddingTop ( ) + getPaddingBottom ( ) ;
int measuredWidth = Math . max ( <unk> + width , getSuggestedMinimumWidth ( ) ) ;
int measuredHeight = Math . max ( <unk> + height , getSuggestedMinimumHeight ( ) ) ;
if ( <unk> ) {
measuredWidth = <unk> . <unk> ( measuredWidth , widthSpec , <num> ) ;
measuredHeight = <unk> . <unk> ( measuredHeight , heightSpec , <num> ) ;
}
else {
measuredWidth = resolveSize ( measuredWidth , widthSpec ) ;
measuredHeight = resolveSize ( measuredHeight , heightSpec ) ;
}
setMeasuredDimension ( measuredWidth , measuredHeight ) ;
}
private int protect ( int alignment ) {
return ( alignment == UNDEFINED ) ? <num> : alignment ;
}
private int getMeasurement ( View c , boolean horizontal ) {
return horizontal ? c . getMeasuredWidth ( ) : c . getMeasuredHeight ( ) ;
}
final int <unk> ( View c , boolean horizontal ) {
if ( <unk> ( c ) ) {
return <num> ;
}
return getMeasurement ( c , horizontal ) + <unk> ( c , horizontal ) ;
}
@Override
public void requestLayout ( ) {
super . requestLayout ( ) ;
<unk> ( ) ;
}
final Alignment <unk> ( Alignment alignment , boolean horizontal ) {
return ( alignment != <unk> ) ? alignment :
( horizontal ? LEFT : BASELINE ) ;
}
@Override
protected void onLayout ( boolean changed , int left , int top , int right , int bottom ) {
int <unk> = right  left ;
int <unk> = bottom  top ;
int <unk> = getPaddingLeft ( ) ;
int paddingTop = getPaddingTop ( ) ;
int <unk> = getPaddingRight ( ) ;
int paddingBottom = getPaddingBottom ( ) ;
<unk> . layout ( <unk>  <unk>  <unk> ) ;
<unk> . layout ( <unk>  paddingTop  paddingBottom ) ;
int [ ] <unk> = <unk> . getLocations ( ) ;
int [ ] <unk> = <unk> . getLocations ( ) ;
for ( int i = <num> , N = getChildCount ( ) ; i < N ; i ++ ) {
View c = getChildAt ( i ) ;
if ( <unk> ( c ) ) continue ;
LayoutParams lp = getLayoutParams ( c ) ;
<unk> <unk> = lp . <unk> ;
<unk> <unk> = lp . <unk> ;
<unk> <unk> = <unk> . span ;
<unk> <unk> = <unk> . span ;
int x1 = <unk> [ <unk> . min ] ;
int y1 = <unk> [ <unk> . min ] ;
int x2 = <unk> [ <unk> . max ] ;
int y2 = <unk> [ <unk> . max ] ;
int cellWidth = x2  x1 ;
int cellHeight = y2  y1 ;
int <unk> = getMeasurement ( c , true ) ;
int <unk> = getMeasurement ( c , false ) ;
Alignment <unk> = <unk> ( <unk> . alignment , true ) ;
Alignment <unk> = <unk> ( <unk> . alignment , false ) ;
int dx , dy ;
<unk> <unk> = <unk> . <unk> ( ) . getValue ( i ) ;
<unk> <unk> = <unk> . <unk> ( ) . getValue ( i ) ;
int <unk> = protect ( <unk> . <unk> ( null , cellWidth  <unk> . size ( true ) ) ) ;
int <unk> = protect ( <unk> . <unk> ( null , cellHeight  <unk> . size ( true ) ) ) ;
int leftMargin = <unk> ( c , true , true ) ;
int topMargin = <unk> ( c , false , true ) ;
int rightMargin = <unk> ( c , true , false ) ;
int bottomMargin = <unk> ( c , false , false ) ;
int mWidth = leftMargin + <unk> + rightMargin ;
int mHeight = topMargin + <unk> + bottomMargin ;
int <unk> = <unk> . getOffset ( c , <unk> , mWidth ) ;
int <unk> = <unk> . getOffset ( c , <unk> , mHeight ) ;
dx = <unk> + <unk> + leftMargin ;
dy = <unk> + <unk> + topMargin ;
cellWidth -= leftMargin + rightMargin ;
cellHeight -= topMargin + bottomMargin ;
int type = <unk> ;
int width = <unk> . <unk> ( c , <unk> , cellWidth , type ) ;
int height = <unk> . <unk> ( c , <unk> , cellHeight , type ) ;
int cx = <unk> + x1 + dx ;
int cy = paddingTop + y1 + dy ;
if ( width != c . getMeasuredWidth ( ) || height != c . getMeasuredHeight ( ) ) {
c . measure ( makeMeasureSpec ( width , EXACTLY ) , makeMeasureSpec ( height , EXACTLY ) ) ;
}
c . layout ( cx , cy , cx + width , cy + height ) ;
}
}
final class Axis {
private static final int NEW = <num> ;
private static final int PENDING = <num> ;
private static final int COMPLETE = <num> ;
public final boolean horizontal ;
public int <unk> = UNDEFINED ;
private int maxIndex = UNDEFINED ;
<unk> < <unk> , <unk> > <unk> ;
public boolean <unk> = false ;
<unk> < <unk> , <unk> > <unk> ;
public boolean <unk> = false ;
<unk> < <unk> , <unk> > <unk> ;
public boolean <unk> = false ;
public int [ ] <unk> ;
public boolean <unk> = false ;
public int [ ] <unk> ;
public boolean <unk> = false ;
public <unk> [ ] <unk> ;
public boolean <unk> = false ;
public int [ ] locations ;
public boolean <unk> = false ;
boolean <unk> = <unk> ;
private <unk> <unk> = new <unk> ( <num> ) ;
private <unk> <unk> = new <unk> (  <unk> ) ;
private Axis ( boolean horizontal ) {
this . horizontal = horizontal ;
}
private int <unk> ( ) {
int result =  <num> ;
for ( int i = <num> , N = getChildCount ( ) ; i < N ; i ++ ) {
View c = getChildAt ( i ) ;
LayoutParams params = getLayoutParams ( c ) ;
<unk> spec = horizontal ? params . <unk> : params . <unk> ;
<unk> span = spec . span ;
result = max ( result , span . min ) ;
result = max ( result , span . max ) ;
}
return result ==  <num> ? UNDEFINED : result ;
}
private int <unk> ( ) {
if ( maxIndex == UNDEFINED ) {
maxIndex = max ( <num> , <unk> ( ) ) ;
}
return maxIndex ;
}
public int getCount ( ) {
return max ( <unk> , <unk> ( ) ) ;
}
public void setCount ( int count ) {
this . <unk> = count ;
}
public boolean <unk> ( ) {
return <unk> ;
}
public void <unk> ( boolean <unk> ) {
this . <unk> = <unk> ;
<unk> ( ) ;
}
private <unk> < <unk> , <unk> > <unk> ( ) {
<unk> < <unk> , <unk> > assoc = <unk> . of ( <unk> . class , <unk> . class ) ;
for ( int i = <num> , N = getChildCount ( ) ; i < N ; i ++ ) {
View c = getChildAt ( i ) ;
LayoutParams lp = getLayoutParams ( c ) ;
<unk> spec = horizontal ? lp . <unk> : lp . <unk> ;
<unk> bounds = <unk> ( spec . alignment , horizontal ) . getBounds ( ) ;
assoc . put ( spec , bounds ) ;
}
return assoc . pack ( ) ;
}
private void <unk> ( ) {
<unk> [ ] values = <unk> . values ;
for ( int i = <num> ; i < values . length ; i ++ ) {
values [ i ] . reset ( ) ;
}
for ( int i = <num> , N = getChildCount ( ) ; i < N ; i ++ ) {
View c = getChildAt ( i ) ;
LayoutParams lp = getLayoutParams ( c ) ;
<unk> spec = horizontal ? lp . <unk> : lp . <unk> ;
<unk> . getValue ( i ) . include ( c , spec , GridLayout . this , this ) ;
}
}
public <unk> < <unk> , <unk> > <unk> ( ) {
if ( <unk> == null ) {
<unk> = <unk> ( ) ;
}
if ( ! <unk> ) {
<unk> ( ) ;
<unk> = true ;
}
return <unk> ;
}
private <unk> < <unk> , <unk> > createLinks ( boolean min ) {
<unk> < <unk> , <unk> > result = <unk> . of ( <unk> . class , <unk> . class ) ;
<unk> [ ] keys = <unk> ( ) . keys ;
for ( int i = <num> , N = keys . length ; i < N ; i ++ ) {
<unk> span = min ? keys [ i ] . span : keys [ i ] . span . inverse ( ) ;
result . put ( span , new <unk> ( ) ) ;
}
return result . pack ( ) ;
}
private void <unk> ( <unk> < <unk> , <unk> > links , boolean min ) {
<unk> [ ] spans = links . values ;
for ( int i = <num> ; i < spans . length ; i ++ ) {
spans [ i ] . reset ( ) ;
}
<unk> [ ] bounds = <unk> ( ) . values ;
for ( int i = <num> ; i < bounds . length ; i ++ ) {
int size = bounds [ i ] . size ( min ) ;
<unk> <unk> = links . getValue ( i ) ;
<unk> . value = max ( <unk> . value , min ? size :  size ) ;
}
}
private <unk> < <unk> , <unk> > <unk> ( ) {
if ( <unk> == null ) {
<unk> = createLinks ( true ) ;
}
if ( ! <unk> ) {
<unk> ( <unk> , true ) ;
<unk> = true ;
}
return <unk> ;
}
private <unk> < <unk> , <unk> > <unk> ( ) {
if ( <unk> == null ) {
<unk> = createLinks ( false ) ;
}
if ( ! <unk> ) {
<unk> ( <unk> , false ) ;
<unk> = true ;
}
return <unk> ;
}
private void include ( List < <unk> > <unk> , <unk> key , <unk> size ,
boolean <unk> ) {
if ( key . size ( ) == <num> ) {
return ;
}
if ( <unk> ) {
for ( <unk> arc : <unk> ) {
<unk> span = arc . span ;
if ( span . equals ( key ) ) {
return ;
}
}
}
<unk> . add ( new <unk> ( key , size ) ) ;
}
private void include ( List < <unk> > <unk> , <unk> key , <unk> size ) {
include ( <unk> , key , size , true ) ;
}
<unk> [ ] [ ] <unk> ( <unk> [ ] <unk> ) {
int N = getCount ( ) + <num> ;
<unk> [ ] [ ] result = new <unk> [ N ] [ ] ;
int [ ] sizes = new int [ N ] ;
for ( <unk> arc : <unk> ) {
sizes [ arc . span . min ] ++ ;
}
for ( int i = <num> ; i < sizes . length ; i ++ ) {
result [ i ] = new <unk> [ sizes [ i ] ] ;
}
Arrays . fill ( sizes , <num> ) ;
for ( <unk> arc : <unk> ) {
int i = arc . span . min ;
result [ i ] [ sizes [ i ] ++ ] = arc ;
}
return result ;
}
private <unk> [ ] <unk> ( final <unk> [ ] <unk> ) {
return new Object ( ) {
<unk> [ ] result = new <unk> [ <unk> . length ] ;
int cursor = result . length  <num> ;
<unk> [ ] [ ] <unk> = <unk> ( <unk> ) ;
int [ ] visited = new int [ getCount ( ) + <num> ] ;
void walk ( int loc ) {
switch ( visited [ loc ] ) {
case NEW : {
visited [ loc ] = PENDING ;
for ( <unk> arc : <unk> [ loc ] ) {
walk ( arc . span . max ) ;
result [ cursor  ] = arc ;
}
visited [ loc ] = COMPLETE ;
break ;
}
case PENDING : {
assert false ;
break ;
}
case COMPLETE : {
break ;
}
}
}
<unk> [ ] sort ( ) {
for ( int loc = <num> , N = <unk> . length ; loc < N ; loc ++ ) {
walk ( loc ) ;
}
assert cursor ==  <num> ;
return result ;
}
} . sort ( ) ;
}
private <unk> [ ] <unk> ( List < <unk> > <unk> ) {
return <unk> ( <unk> . toArray ( new <unk> [ <unk> . size ( ) ] ) ) ;
}
private void <unk> ( List < <unk> > result , <unk> < <unk> , <unk> > links ) {
for ( int i = <num> ; i < links . keys . length ; i ++ ) {
<unk> key = links . keys [ i ] ;
include ( result , key , links . values [ i ] , false ) ;
}
}
private <unk> [ ] <unk> ( ) {
List < <unk> > mins = new ArrayList < <unk> > ( ) ;
List < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
<unk> ( mins , <unk> ( ) ) ;
<unk> ( <unk> , <unk> ( ) ) ;
if ( <unk> ) {
for ( int i = <num> ; i < getCount ( ) ; i ++ ) {
include ( mins , new <unk> ( i , i + <num> ) , new <unk> ( <num> ) ) ;
}
}
int N = getCount ( ) ;
include ( mins , new <unk> ( <num> , N ) , <unk> , false ) ;
include ( <unk> , new <unk> ( N , <num> ) , <unk> , false ) ;
<unk> [ ] <unk> = <unk> ( mins ) ;
<unk> [ ] <unk> = <unk> ( <unk> ) ;
return append ( <unk> , <unk> ) ;
}
private void <unk> ( ) {
<unk> ( ) ;
<unk> ( ) ;
}
public <unk> [ ] <unk> ( ) {
if ( <unk> == null ) {
<unk> = <unk> ( ) ;
}
if ( ! <unk> ) {
<unk> ( ) ;
<unk> = true ;
}
return <unk> ;
}
private boolean <unk> ( int [ ] locations , <unk> entry ) {
if ( ! entry . valid ) {
return false ;
}
<unk> span = entry . span ;
int u = span . min ;
int v = span . max ;
int value = entry . value . value ;
int <unk> = locations [ u ] + value ;
if ( <unk> > locations [ v ] ) {
locations [ v ] = <unk> ;
return true ;
}
return false ;
}
private void init ( int [ ] locations ) {
Arrays . fill ( locations , <num> ) ;
}
private String <unk> ( List < <unk> > <unk> ) {
String var = horizontal ? " : " ;
StringBuilder result = new StringBuilder ( ) ;
boolean first = true ;
for ( <unk> arc : <unk> ) {
if ( first ) {
first = false ;
} else {
result = result . append ( " ) ;
}
int src = arc . span . min ;
int dst = arc . span . max ;
int value = arc . value . value ;
result . append ( ( src < dst ) ?
var + dst + " + var + src + " + value :
var + src + " + var + dst + " +  value ) ;
}
return result . toString ( ) ;
}
private void logError ( String <unk> , <unk> [ ] <unk> , boolean [ ] <unk> ) {
List < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
List < <unk> > removed = new ArrayList < <unk> > ( ) ;
for ( int c = <num> ; c < <unk> . length ; c ++ ) {
<unk> arc = <unk> [ c ] ;
if ( <unk> [ c ] ) {
<unk> . add ( arc ) ;
}
if ( ! arc . valid ) {
removed . add ( arc ) ;
}
}
Log . d ( TAG , <unk> + " + <unk> ( <unk> ) + "
+ " + <unk> ( removed ) + " ) ;
}
private void solve ( <unk> [ ] <unk> , int [ ] locations ) {
String <unk> = horizontal ? " : " ;
int N = getCount ( ) + <num> ;
boolean [ ] <unk> = null ;
for ( int p = <num> ; p < <unk> . length ; p ++ ) {
init ( locations ) ;
for ( int i = <num> ; i < N ; i ++ ) {
boolean changed = false ;
for ( int j = <num> , length = <unk> . length ; j < length ; j ++ ) {
changed |= <unk> ( locations , <unk> [ j ] ) ;
}
if ( ! changed ) {
if ( <unk> != null ) {
logError ( <unk> , <unk> , <unk> ) ;
}
return ;
}
}
boolean [ ] <unk> = new boolean [ <unk> . length ] ;
for ( int i = <num> ; i < N ; i ++ ) {
for ( int j = <num> , length = <unk> . length ; j < length ; j ++ ) {
<unk> [ j ] |= <unk> ( locations , <unk> [ j ] ) ;
}
}
if ( p == <num> ) {
<unk> = <unk> ;
}
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
if ( <unk> [ i ] ) {
<unk> arc = <unk> [ i ] ;
if ( arc . span . min < arc . span . max ) {
continue ;
}
arc . valid = false ;
break ;
}
}
}
}
private void <unk> ( boolean <unk> ) {
int [ ] <unk> = <unk> ? <unk> : <unk> ;
for ( int i = <num> , N = getChildCount ( ) ; i < N ; i ++ ) {
View c = getChildAt ( i ) ;
if ( <unk> ( c ) ) continue ;
LayoutParams lp = getLayoutParams ( c ) ;
<unk> spec = horizontal ? lp . <unk> : lp . <unk> ;
<unk> span = spec . span ;
int index = <unk> ? span . min : span . max ;
<unk> [ index ] = max ( <unk> [ index ] , <unk> ( c , horizontal , <unk> ) ) ;
}
}
public int [ ] <unk> ( ) {
if ( <unk> == null ) {
<unk> = new int [ getCount ( ) + <num> ] ;
}
if ( ! <unk> ) {
<unk> ( true ) ;
<unk> = true ;
}
return <unk> ;
}
public int [ ] <unk> ( ) {
if ( <unk> == null ) {
<unk> = new int [ getCount ( ) + <num> ] ;
}
if ( ! <unk> ) {
<unk> ( false ) ;
<unk> = true ;
}
return <unk> ;
}
private void <unk> ( int [ ] a ) {
solve ( <unk> ( ) , a ) ;
if ( ! <unk> ) {
int a0 = a [ <num> ] ;
for ( int i = <num> , N = a . length ; i < N ; i ++ ) {
a [ i ] = a [ i ]  a0 ;
}
}
}
public int [ ] getLocations ( ) {
if ( locations == null ) {
int N = getCount ( ) + <num> ;
locations = new int [ N ] ;
}
if ( ! <unk> ) {
<unk> ( locations ) ;
<unk> = true ;
}
return locations ;
}
private int size ( int [ ] locations ) {
return locations [ getCount ( ) ] ;
}
private void <unk> ( int min , int max ) {
<unk> . value = min ;
<unk> . value =  max ;
<unk> = false ;
}
private int <unk> ( int min , int max ) {
<unk> ( min , max ) ;
return size ( getLocations ( ) ) ;
}
public int <unk> ( int measureSpec ) {
int mode = MeasureSpec . getMode ( measureSpec ) ;
int size = MeasureSpec . getSize ( measureSpec ) ;
switch ( mode ) {
case MeasureSpec . UNSPECIFIED : {
return <unk> ( <num> , <unk> ) ;
}
case MeasureSpec . EXACTLY : {
return <unk> ( size , size ) ;
}
case MeasureSpec . AT_MOST : {
return <unk> ( <num> , size ) ;
}
default : {
assert false ;
return <num> ;
}
}
}
public void layout ( int size ) {
<unk> ( size , size ) ;
getLocations ( ) ;
}
public void <unk> ( ) {
maxIndex = UNDEFINED ;
<unk> = null ;
<unk> = null ;
<unk> = null ;
<unk> = null ;
<unk> = null ;
<unk> = null ;
locations = null ;
<unk> ( ) ;
}
public void <unk> ( ) {
<unk> = false ;
<unk> = false ;
<unk> = false ;
<unk> = false ;
<unk> = false ;
<unk> = false ;
<unk> = false ;
}
}
public static class LayoutParams extends MarginLayoutParams {
private static final int <unk> = WRAP_CONTENT ;
private static final int <unk> = WRAP_CONTENT ;
private static final int <unk> = UNDEFINED ;
private static final int <unk> = UNDEFINED ;
private static final int <unk> = UNDEFINED ;
private static final <unk> <unk> = new <unk> ( UNDEFINED , UNDEFINED + <num> ) ;
private static final int <unk> = <unk> . size ( ) ;
private static final int MARGIN = R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
private static final int <unk> =
R . styleable . <unk> ;
private static final int <unk> =
R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
private static final int <unk> = R . styleable . <unk> ;
private static final int GRAVITY = R . styleable . <unk> ;
public <unk> <unk> = <unk> . UNDEFINED ;
public <unk> <unk> = <unk> . UNDEFINED ;
private LayoutParams (
int width , int height ,
int left , int top , int right , int bottom ,
<unk> <unk> , <unk> <unk> ) {
super ( width , height ) ;
setMargins ( left , top , right , bottom ) ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public LayoutParams ( <unk> <unk> , <unk> <unk> ) {
this ( <unk> , <unk> ,
<unk> , <unk> , <unk> , <unk> ,
<unk> , <unk> ) ;
}
public LayoutParams ( ) {
this ( <unk> . UNDEFINED , <unk> . UNDEFINED ) ;
}
public LayoutParams ( ViewGroup . LayoutParams params ) {
super ( params ) ;
}
public LayoutParams ( MarginLayoutParams params ) {
super ( params ) ;
}
public LayoutParams ( LayoutParams that ) {
super ( that ) ;
this . <unk> = that . <unk> ;
this . <unk> = that . <unk> ;
}
public LayoutParams ( Context context , AttributeSet attrs ) {
super ( context , attrs ) ;
<unk> ( context , attrs ) ;
init ( context , attrs ) ;
}
private void <unk> ( Context context , AttributeSet attrs ) {
TypedArray a =
context . obtainStyledAttributes ( attrs , R . styleable . <unk> ) ;
try {
int margin = a . getDimensionPixelSize ( MARGIN , <unk> ) ;
this . leftMargin = a . getDimensionPixelSize ( <unk> , margin ) ;
this . topMargin = a . getDimensionPixelSize ( <unk> , margin ) ;
this . rightMargin = a . getDimensionPixelSize ( <unk> , margin ) ;
this . bottomMargin = a . getDimensionPixelSize ( <unk> , margin ) ;
} finally {
a . recycle ( ) ;
}
}
private void init ( Context context , AttributeSet attrs ) {
TypedArray a = context . obtainStyledAttributes ( attrs , R . styleable . <unk> ) ;
try {
int gravity = a . getInt ( GRAVITY , Gravity . NO_GRAVITY ) ;
int column = a . getInt ( <unk> , <unk> ) ;
int <unk> = a . getInt ( <unk> , <unk> ) ;
this . <unk> = spec ( column , <unk> , <unk> ( gravity , true ) ) ;
int row = a . getInt ( <unk> , <unk> ) ;
int <unk> = a . getInt ( <unk> , <unk> ) ;
this . <unk> = spec ( row , <unk> , <unk> ( gravity , false ) ) ;
} finally {
a . recycle ( ) ;
}
}
public void setGravity ( int gravity ) {
<unk> = <unk> . <unk> ( <unk> ( gravity , false ) ) ;
<unk> = <unk> . <unk> ( <unk> ( gravity , true ) ) ;
}
@Override
protected void <unk> ( TypedArray attributes , int <unk> , int <unk> ) {
this . width = attributes . <unk> ( <unk> , <unk> ) ;
this . height = attributes . <unk> ( <unk> , <unk> ) ;
}
final void <unk> ( <unk> span ) {
<unk> = <unk> . <unk> ( span ) ;
}
final void <unk> ( <unk> span ) {
<unk> = <unk> . <unk> ( span ) ;
}
}
final static class <unk> {
public final <unk> span ;
public final <unk> value ;
public boolean valid = true ;
public <unk> ( <unk> span , <unk> value ) {
this . span = span ;
this . value = value ;
}
@Override
public String toString ( ) {
return span + " + ( ! valid ? " : " ) + " + value ;
}
}
final static class <unk> {
public int value ;
public <unk> ( ) {
reset ( ) ;
}
public <unk> ( int value ) {
this . value = value ;
}
public void reset ( ) {
value = Integer . MIN_VALUE ;
}
@Override
public String toString ( ) {
return Integer . toString ( value ) ;
}
}
final static class <unk> < K , V > extends ArrayList < Pair < K , V >> {
private final Class < K > <unk> ;
private final Class < V > <unk> ;
private <unk> ( Class < K > <unk> , Class < V > <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public static < K , V > <unk> < K , V > of ( Class < K > <unk> , Class < V > <unk> ) {
return new <unk> < K , V > ( <unk> , <unk> ) ;
}
public void put ( K key , V value ) {
add ( Pair . create ( key , value ) ) ;
}
<unk> = <unk>
public <unk> < K , V > pack ( ) {
int N = size ( ) ;
K [ ] keys = ( K [ ] ) Array . newInstance ( <unk> , N ) ;
V [ ] values = ( V [ ] ) Array . newInstance ( <unk> , N ) ;
for ( int i = <num> ; i < N ; i ++ ) {
keys [ i ] = get ( i ) . first ;
values [ i ] = get ( i ) . second ;
}
return new <unk> < K , V > ( keys , values ) ;
}
}
<unk> = <unk>
final static class <unk> < K , V > {
public final int [ ] index ;
public final K [ ] keys ;
public final V [ ] values ;
private <unk> ( K [ ] keys , V [ ] values ) {
this . index = <unk> ( keys ) ;
this . keys = compact ( keys , index ) ;
this . values = compact ( values , index ) ;
}
public V getValue ( int i ) {
return values [ index [ i ] ] ;
}
private static < K > int [ ] <unk> ( K [ ] keys ) {
int size = keys . length ;
int [ ] result = new int [ size ] ;
Map < K , Integer > <unk> = new HashMap < K , Integer > ( ) ;
for ( int i = <num> ; i < size ; i ++ ) {
K key = keys [ i ] ;
Integer index = <unk> . get ( key ) ;
if ( index == null ) {
index = <unk> . size ( ) ;
<unk> . put ( key , index ) ;
}
result [ i ] = index ;
}
return result ;
}
private static < K > K [ ] compact ( K [ ] a , int [ ] index ) {
int size = a . length ;
Class < ? > componentType = a . getClass ( ) . getComponentType ( ) ;
K [ ] result = ( K [ ] ) Array . newInstance ( componentType , <unk> ( index ,  <num> ) + <num> ) ;
for ( int i = <num> ; i < size ; i ++ ) {
result [ index [ i ] ] = a [ i ] ;
}
return result ;
}
}
static class <unk> {
public int before ;
public int after ;
public int <unk> ;
private <unk> ( ) {
reset ( ) ;
}
protected void reset ( ) {
before = Integer . MIN_VALUE ;
after = Integer . MIN_VALUE ;
<unk> = <unk> ;
}
protected void include ( int before , int after ) {
this . before = max ( this . before , before ) ;
this . after = max ( this . after , after ) ;
}
protected int size ( boolean min ) {
if ( ! min ) {
if ( <unk> ( <unk> ) ) {
return <unk> ;
}
}
return before + after ;
}
protected int getOffset ( View c , Alignment alignment , int size ) {
return before  alignment . <unk> ( c , size ) ;
}
protected final void include ( View c , <unk> spec , GridLayout <unk> , Axis axis ) {
this . <unk> &= spec . <unk> ( ) ;
int size = <unk> . <unk> ( c , axis . horizontal ) ;
Alignment alignment = <unk> . <unk> ( spec . alignment , axis . horizontal ) ;
int before = alignment . <unk> ( c , size ) ;
include ( before , size  before ) ;
}
@Override
public String toString ( ) {
return " +
" + before +
" + after +
}' ;
}
}
final static class <unk> {
public final int min ;
public final int max ;
public <unk> ( int min , int max ) {
this . min = min ;
this . max = max ;
}
int size ( ) {
return max  min ;
}
<unk> inverse ( ) {
return new <unk> ( max , min ) ;
}
@Override
public boolean equals ( Object that ) {
if ( this == that ) {
return true ;
}
if ( that == null || getClass ( ) != that . getClass ( ) ) {
return false ;
}
<unk> interval = ( <unk> ) that ;
if ( max != interval . max ) {
return false ;
}
if ( min != interval . min ) {
return false ;
}
return true ;
}
@Override
public int hashCode ( ) {
int result = min ;
result = <num> * result + max ;
return result ;
}
@Override
public String toString ( ) {
return " + min + " + max + " ;
}
}
public static class <unk> {
static final <unk> UNDEFINED = spec ( GridLayout . UNDEFINED ) ;
final boolean <unk> ;
final <unk> span ;
final Alignment alignment ;
private <unk> ( boolean <unk> , <unk> span , Alignment alignment ) {
this . <unk> = <unk> ;
this . span = span ;
this . alignment = alignment ;
}
private <unk> ( boolean <unk> , int start , int size , Alignment alignment ) {
this ( <unk> , new <unk> ( start , start + size ) , alignment ) ;
}
final <unk> <unk> ( <unk> span ) {
return new <unk> ( <unk> , span , alignment ) ;
}
final <unk> <unk> ( Alignment alignment ) {
return new <unk> ( <unk> , span , alignment ) ;
}
final int <unk> ( ) {
return ( alignment == <unk> ) ? <unk> : <unk> ;
}
@Override
public boolean equals ( Object that ) {
if ( this == that ) {
return true ;
}
if ( that == null || getClass ( ) != that . getClass ( ) ) {
return false ;
}
<unk> spec = ( <unk> ) that ;
if ( ! alignment . equals ( spec . alignment ) ) {
return false ;
}
if ( ! span . equals ( spec . span ) ) {
return false ;
}
return true ;
}
@Override
public int hashCode ( ) {
int result = span . hashCode ( ) ;
result = <num> * result + alignment . hashCode ( ) ;
return result ;
}
}
public static <unk> spec ( int start , int size , Alignment alignment ) {
return new <unk> ( start != UNDEFINED , start , size , alignment ) ;
}
public static <unk> spec ( int start , Alignment alignment ) {
return spec ( start , <num> , alignment ) ;
}
public static <unk> spec ( int start , int size ) {
return spec ( start , size , <unk> ) ;
}
public static <unk> spec ( int start ) {
return spec ( start , <num> ) ;
}
public static abstract class Alignment {
Alignment ( ) {
}
abstract int <unk> ( View view , int <unk> ) ;
int <unk> ( View view , int <unk> , int cellSize , int <unk> ) {
return <unk> ;
}
<unk> getBounds ( ) {
return new <unk> ( ) ;
}
}
static final Alignment <unk> = new Alignment ( ) {
public int <unk> ( View view , int <unk> ) {
return UNDEFINED ;
}
} ;
private static final Alignment LEADING = new Alignment ( ) {
public int <unk> ( View view , int <unk> ) {
return <num> ;
}
} ;
private static final Alignment TRAILING = new Alignment ( ) {
public int <unk> ( View view , int <unk> ) {
return <unk> ;
}
} ;
public static final Alignment TOP = LEADING ;
public static final Alignment BOTTOM = TRAILING ;
public static final Alignment RIGHT = TRAILING ;
public static final Alignment LEFT = LEADING ;
public static final Alignment CENTER = new Alignment ( ) {
public int <unk> ( View view , int <unk> ) {
return <unk> >> <num> ;
}
} ;
public static final Alignment BASELINE = new Alignment ( ) {
public int <unk> ( View view , int <unk> ) {
if ( view == null ) {
return UNDEFINED ;
}
int baseline = view . <unk> ( ) ;
return ( baseline ==  <num> ) ? UNDEFINED : baseline ;
}
@Override
public <unk> getBounds ( ) {
return new <unk> ( ) {
private int size ;
@Override
protected void reset ( ) {
super . reset ( ) ;
size = Integer . MIN_VALUE ;
}
@Override
protected void include ( int before , int after ) {
super . include ( before , after ) ;
size = max ( size , before + after ) ;
}
@Override
protected int size ( boolean min ) {
return max ( super . size ( min ) , size ) ;
}
@Override
protected int getOffset ( View c , Alignment alignment , int size ) {
return max ( <num> , super . getOffset ( c , alignment , size ) ) ;
}
} ;
}
} ;
public static final Alignment FILL = new Alignment ( ) {
public int <unk> ( View view , int <unk> ) {
return UNDEFINED ;
}
@Override
public int <unk> ( View view , int <unk> , int cellSize , int <unk> ) {
return cellSize ;
}
} ;
static boolean <unk> ( int <unk> ) {
return ( <unk> & <unk> ) != <num> ;
}
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static class Pair < F , S > {
public final F first ;
public final S second ;
public Pair ( F first , S second ) {
this . first = first ;
this . second = second ;
}
public boolean equals ( Object o ) {
if ( o == this )
return true ;
if ( ! ( o instanceof Pair ) )
return false ;
final Pair < F , S > other ;
try {
other = ( Pair < F , S > ) o ;
}
catch ( ClassCastException e ) {
return false ;
}
return first . equals ( other . first ) && second . equals ( other . second ) ;
}
public int hashCode ( ) {
int result = <num> ;
result = <num> * result + first . hashCode ( ) ;
result = <num> * result + second . hashCode ( ) ;
return result ;
}
public static < A , B > Pair < A , B > create ( A a , B b ) {
return new Pair < A , B > ( a , b ) ;
}
}
private <unk> mListener ;
private final <unk> <unk> = new <unk> ( ) {
public void <unk> ( View parent , View child ) {
if ( mListener != null ) {
mListener . <unk> ( parent , child ) ;
}
<unk> ( ) ;
}
public void <unk> ( View parent , View child ) {
if ( mListener != null ) {
mListener . <unk> ( parent , child ) ;
}
<unk> ( ) ;
}
} ;
@Override
public void <unk> ( <unk> listener ) {
mListener = listener ;
}
private static boolean <unk> ;
static {
try {
<unk> . <unk> ( ) ;
<unk> = true ;
}
catch ( Throwable t ) {
<unk> = false ;
}
}
private static class <unk> {
static {
try {
View . class . getMethod ( " , int . class , int . class , int . class ) ;
}
catch ( Exception ex ) {
throw new RuntimeException ( ex ) ;
}
}
public static void <unk> ( ) {
}
public static int <unk> ( int size , int measureSpec , int <unk> ) {
return View . <unk> ( size , measureSpec , <unk> ) ;
}
}
public void <unk> ( ) {
<unk> ( ) ;
}
}
package com . <unk> ;
import android . content . Context ;
import android . graphics . Canvas ;
import android . util . AttributeSet ;
import android . view . View ;
public final class <unk> extends View {
public <unk> ( Context context , AttributeSet attrs , int defStyle ) {
super ( context , attrs , defStyle ) ;
if ( getVisibility ( ) == VISIBLE ) {
setVisibility ( INVISIBLE ) ;
}
}
public <unk> ( Context context , AttributeSet attrs ) {
this ( context , attrs , <num> ) ;
}
public <unk> ( Context context ) {
this ( context , null ) ;
}
@Override
public void draw ( Canvas canvas ) {
}
private static int <unk> ( int size , int measureSpec ) {
int result = size ;
int <unk> = MeasureSpec . getMode ( measureSpec ) ;
int <unk> = MeasureSpec . getSize ( measureSpec ) ;
switch ( <unk> ) {
case MeasureSpec . UNSPECIFIED :
result = size ;
break ;
case MeasureSpec . AT_MOST :
result = Math . min ( size , <unk> ) ;
break ;
case MeasureSpec . EXACTLY :
result = <unk> ;
break ;
}
return result ;
}
@Override
protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) {
setMeasuredDimension (
<unk> ( getSuggestedMinimumWidth ( ) , widthMeasureSpec ) ,
<unk> ( getSuggestedMinimumHeight ( ) , heightMeasureSpec ) ) ;
}
}
package com . <unk> ;
public final class R {
public static final class attr {
public static int <unk> = <num> ;
public static int columnCount = <num> ;
public static int <unk> = <num> ;
public static int <unk> = <num> ;
public static int <unk> = <num> ;
public static int <unk> = <num> ;
public static int rowCount = <num> ;
public static int <unk> = <num> ;
public static int <unk> = <num> ;
}
public static final class dimen {
public static int <unk> = <num> ;
}
public static final class id {
public static int <unk> = <num> ;
public static int <unk> = <num> ;
}
public static final class styleable {
public static final int [ ] GridLayout = {
<num> , <num> , <num> , <num> ,
<num> , <num> , <num>
} ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int [ ] <unk> = {
<num> , <num> , <num> , <num> ,
<num>
} ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int [ ] <unk> = {
<num> , <num> , <num> , <num> ,
<num>
} ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
} ;
}
package net . lp . <unk> . util ;
import net . lp . <unk> . R ;
import android . app . Notification ;
import android . app . NotificationManager ;
import android . app . PendingIntent ;
import android . content . BroadcastReceiver ;
import android . content . Context ;
import android . content . Intent ;
import android . util . Log ;
public class <unk> extends BroadcastReceiver {
@Override
public void onReceive ( Context context , Intent intent ) {
Log . v ( " , " ) ;
NotificationManager nm = ( NotificationManager ) context
. getSystemService ( Context . NOTIFICATION_SERVICE ) ;
CharSequence title = context . getString ( R . string . app_name ) ;
CharSequence message = intent . getStringExtra ( " ) ;
PendingIntent contentIntent = PendingIntent . getActivity ( context , <num> ,
new Intent ( ) , <num> ) ;
Notification <unk> = new Notification ( R . drawable . <unk> ,
message , System . currentTimeMillis ( ) ) ;
<unk> . setLatestEventInfo ( context , title , message , contentIntent ) ;
nm . notify ( <num> , <unk> ) ;
}
}
package net . lp . <unk> . domain ;
public enum Gender {
male , female ;
}
package net . lp . <unk> . util ;
import net . lp . <unk> . R ;
import net . lp . <unk> . v4 . <unk> ;
import android . app . PendingIntent ;
import android . appwidget . AppWidgetManager ;
import android . content . Context ;
import android . content . Intent ;
import android . widget . RemoteViews ;
public class AppWidgetProvider extends android . appwidget . AppWidgetProvider {
public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) {
final int N = appWidgetIds . length ;
for ( int i = <num> ; i < N ; i ++ ) {
int appWidgetId = appWidgetIds [ i ] ;
Intent intent = new Intent ( context , <unk> . class ) ;
PendingIntent pendingIntent = PendingIntent . getActivity ( context , <num> , intent , <num> ) ;
RemoteViews views = new RemoteViews ( context . getPackageName ( ) , R . layout . appwidget ) ;
views . setOnClickPendingIntent ( R . id . button , pendingIntent ) ;
appWidgetManager . updateAppWidget ( appWidgetId , views ) ;
}
}
}
package net . lp . <unk> . v4 ;
import net . lp . <unk> . R ;
import android . os . Bundle ;
import android . support . v4 . app . Fragment ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
public class <unk> extends Fragment {
public <unk> ( ) {
}
@Override
public View onCreateView ( LayoutInflater inflater , ViewGroup container ,
Bundle savedInstanceState ) {
return inflater . inflate ( R . layout . touch , container , false ) ;
}
}
package net . lp . <unk> . v4 ;
import net . lp . <unk> . R ;
import android . os . Bundle ;
import android . support . v4 . app . Fragment ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . AdapterView . OnItemSelectedListener ;
import android . widget . Button ;
import android . widget . Spinner ;
public class <unk> extends Fragment {
private Button button ;
private Spinner <unk> ;
private Spinner <unk> ;
public <unk> ( ) {
}
@Override
public View onCreateView ( LayoutInflater inflater , ViewGroup container ,
Bundle savedInstanceState ) {
View view = inflater . inflate ( R . layout . start , container , false ) ;
button = ( Button ) view . findViewById ( R . id . button1 ) ;
button . setOnClickListener ( ( View . OnClickListener ) getActivity ( ) ) ;
<unk> = ( Spinner ) view . findViewById ( R . id . <unk> ) ;
<unk> . setOnItemSelectedListener ( ( OnItemSelectedListener ) getActivity ( ) ) ;
<unk> = ( Spinner ) view . findViewById ( R . id . <unk> ) ;
<unk> . setOnItemSelectedListener ( ( OnItemSelectedListener ) getActivity ( ) ) ;
return view ;
}
@Override
public void onDestroy ( ) {
super . onDestroy ( ) ;
button . setOnClickListener ( null ) ;
button = null ;
<unk> . setOnItemSelectedListener ( null ) ;
<unk> = null ;
<unk> . setOnItemSelectedListener ( null ) ;
<unk> = null ;
}
}
package com . <unk> . skeleton ;
import com . badlogic . gdx . <unk> . android . <unk> ;
public class skeleton extends <unk> {
public void onCreate ( android . os . Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
initialize ( new <unk> ( ) , false ) ;
}
}
package com . <unk> . skeleton . screens ;
import com . badlogic . gdx . <unk> ;
import com . badlogic . gdx . Screen ;
import com . badlogic . gdx . graphics . <unk> ;
import com . badlogic . gdx . graphics . Texture ;
import com . badlogic . gdx . graphics . g2d . Sprite ;
import com . badlogic . gdx . graphics . g2d . <unk> ;
import com . <unk> . skeleton . <unk> ;
public class <unk> implements Screen {
<unk> game ;
<unk> <unk> ;
Sprite <unk> ;
Texture bg ;
int width , height ;
public <unk> ( <unk> g ) {
game = g ;
}
@Override
public void render ( float delta ) {
<unk> . gl . glClear ( <unk> . GL_COLOR_BUFFER_BIT ) ;
<unk> . begin ( ) ;
<unk> . draw ( <unk> , <num> , <num> , width , height ) ;
<unk> . end ( ) ;
if ( <unk> . input . <unk> ( ) ) {
}
}
@Override
public void resize ( int width , int height ) {
this . width = width ;
this . height = height ;
}
@Override
public void show ( ) {
<unk> = new <unk> ( ) ;
bg = new Texture ( <unk> . files . internal ( " ) ) ;
<unk> = new Sprite ( bg , <num> , <num> , <num> , <num> ) ;
}
@Override
public void hide ( ) {
}
@Override
public void pause ( ) {
}
@Override
public void resume ( ) {
}
@Override
public void dispose ( ) {
}
}
package com . <unk> . skeleton ;
import com . badlogic . gdx . Game ;
import com . <unk> . skeleton . screens . <unk> ;
public class <unk> extends Game {
private <unk> <unk> ;
@Override
public void create ( ) {
<unk> = new <unk> ( this ) ;
this . setScreen ( <unk> ) ;
}
public static void main ( String [ ] args ) {
}
}
package modified ;
import java . util . List ;
import java . util . ArrayList ;
import uk . ac . cam . ch . <unk> . <unk> . <unk> . entities . <unk> ;
import uk . ac . cam . ch . <unk> . <unk> . <unk> . entities . <unk> ;
import uk . ac . cam . ch . <unk> . <unk> . <unk> . entities . <unk> ;
import uk . ac . cam . ch . <unk> . <unk> . Oscar ;
public class <unk> {
private String process ;
public <unk> ( ) {
super ( ) ;
}
public void <unk> ( String process ) {
this . process = process ;
}
public String <unk> ( ) {
Oscar <unk> = new Oscar ( ) ;
List < <unk> > entities = <unk> . <unk> ( process ) ;
ArrayList < String > list = new ArrayList < String > ( ) ;
for ( <unk> ne : entities ) {
list . add ( ne . getSurface ( ) . toString ( ) ) ;
<unk> <unk> = ne . <unk> ( <unk> . <unk> ) ;
if ( <unk> != null ) {
list . add ( <unk> . toString ( ) ) ;
}
list . add ( " ) ;
}
String <unk> = " ;
for ( String s : list ) {
<unk> += s + " ;
}
return <unk> ;
}
}
package <unk> . util ;
public class Calendar {
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private final int <unk> = <num> ;
private static final Date Birthday = new Date ( <num> , <num> , <num> , <num> , <num> , <num> ) ;
public static final Date <unk> = new Date ( <num> , <num> , <num> , <num> , <num> , <num> ) ;
public static final Date <unk> = new Date ( <num> , <num> , <num> , <num> , <num> , <num> ) ;
public static final Date <unk> = new Date ( <num> , <num> , <num> , <num> , <num> , <num> ) ;
public static final Date <unk> = new Date ( <num> , <num> , <num> , <num> , <num> , <num> ) ;
private int <unk> ;
private static long [ ] <unk> = {
<num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num>
} ;
private static byte [ ] [ ] fest = {
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ,
{ <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> }
} ;
private static int [ ] <unk> = {
0 , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> } ;
private static int [ ] <unk> = { <num> , <num> } ;
private final static String <unk> [ ] = {
" , " , " , " , " ,
" , " , " , " , "
} ;
private final static String <unk> [ ] = {
" , " , " , " , " , " ,
" , " , " , " , " , "
} ;
private final static String <unk> [ ] = {
" , " , " , " , " , " ,
" , " , " , " , " , "
} ;
private final static String <unk> [ ] = {
" , " , " , " ,
" , " , "
} ;
private final static String <unk> [ ] = {
" , " , " , " ,
" , " , " , " ,
" , " , " , " ,
" , " , " , " ,
" , " , " , " ,
" , " , " , "
} ;
private Date <unk> = new Date ( ) ;
private Date <unk> = new Date ( ) ;
private Date <unk> = new Date ( ) ;
private Date <unk> = new Date ( ) ;
private Date <unk> = new Date ( ) ;
private Date <unk> = new Date ( ) ;
private Date <unk> = new Date ( ) ;
private int <unk> [ ] = new int [ <unk> ] ;
private int <unk> [ ] = new int [ <unk> ] ;
private int <unk> [ ] = new int [ <unk> + <num> ] ;
private final static int <unk> = <num> ;
public boolean <unk> ( int y )
{
return ( ( ( y ) % <num> == <num> ) && ( ( y ) % <num> != <num> ) || ( ( y ) % <num> == <num> ) ) ;
}
private void <unk> ( long offset , Date d , Date g , Date z )
{
int year , month ;
year = d . getYear ( )  <unk> . getYear ( ) ;
month = year * <num> + d . getMonth ( )  <num> ;
g . setYear ( ( <unk> . getYear ( ) + year ) % <num> ) ;
z . setYear ( ( <unk> . getYear ( ) + year ) % <num> ) ;
g . setMonth ( ( <unk> . getMonth ( ) + month ) % <num> ) ;
z . setMonth ( ( <unk> . getMonth ( ) + month ) % <num> ) ;
g . setDay ( ( int ) ( <unk> . getDay ( ) + offset ) % <num> ) ;
z . setDay ( ( int ) ( <unk> . getDay ( ) + offset ) % <num> ) ;
z . setHour ( ( ( d . getHour ( ) + <num> ) / <num> ) % <num> ) ;
g . setHour ( ( g . getDay ( ) * <num> + z . getHour ( ) ) % <num> ) ;
}
private int <unk> ( )
{
int year , i , <unk> ;
int code ;
for ( year = <num> ; year < <unk> ; year ++ )
{
code = ( int ) <unk> [ year ] ;
<unk> = code & <num> ;
<unk> [ year ] = <num> ;
if ( <unk> != <num> )
{
i = ( code >> <num> ) & <num> ;
<unk> [ year ] += <unk> [ i ] ;
}
code >>= <num> ;
for ( i = <num> ; i < <unk>  <num> ; i ++ )
{
<unk> [ year ] += <unk> [ code & <num> ] ;
code >>= <num> ;
}
<unk> [ year ] = <num> ;
if ( <unk> != <num> ) <unk> [ year ] ++ ;
}
return <unk> ;
}
private int <unk> ( int year )
{
int i , <unk> ;
int code ;
code = ( int ) <unk> [ year ] ;
<unk> = code & <num> ;
code >>= <num> ;
if ( <unk> == <num> )
{
<unk> [ <unk> ] = <num> ;
for ( i = <unk>  <num> ; i >= <num> ; i  )
{
<unk> [ i ] = <unk> [ code & <num> ] ;
code >>= <num> ;
}
}
else
{
i = ( ( int ) ( <unk> [ year ] >> <num> ) ) & <num> ;
<unk> [ <unk> + <num> ] = <unk> [ i ] ;
for ( i = <unk> ; i >= <num> ; i  )
{
if ( i == <unk> + <num> ) i  ;
<unk> [ i ] = <unk> [ code & <num> ] ;
code >>= <num> ;
}
}
return <unk> ;
}
private long <unk> ( Date d )
{
long offset , delta ;
int i ;
delta = d . getYear ( )  <unk> ;
if ( delta < <num> )
{
System . out . println ( " ) ;
}
offset = delta * <num> + delta / <num>  delta / <num> + delta / <num> ;
for ( i = <num> ; i < d . getMonth ( ) ; i ++ )
{
offset += <unk> [ i ] ;
}
if ( ( d . getMonth ( ) > <num> ) && <unk> ( d . getYear ( ) ) )
{
offset ++ ;
}
offset += d . getDay ( )  <num> ;
if ( ( d . getMonth ( ) == <num> ) && <unk> ( d . getYear ( ) ) )
{
if ( d . getDay ( ) > <num> )
{
System . out . println ( " ) ;
}
}
else if ( d . getDay ( ) > <unk> [ d . getMonth ( ) ] )
{
System . out . println ( " ) ;
}
return offset ;
}
private long <unk> ( Date d )
{
long offset = <num> ;
int year , i , m , <unk> , <unk> ;
<unk> = <unk> ( ) ;
year = d . getYear ( )  <unk> . getYear ( ) ;
for ( i = <num> ; i < year ; i ++ )
{
offset += <unk> [ i ] ;
}
<unk> = <unk> ( year ) ;
if ( ( d . <unk> ( ) != <num> ) && ( <unk> != d . getMonth ( ) ) )
{
System . out . println ( d . getMonth ( ) + " + d . getYear ( ) ) ;
return  <num> ;
}
for ( m = <num> ; m < d . getMonth ( ) ; m ++ )
{
offset += <unk> [ m ] ;
}
if ( ( <unk> != <num> ) && ( ( d . getMonth ( ) > <unk> ) || ( ( d . <unk> ( ) != <num> ) && ( d . getMonth ( ) == <unk> ) ) ) )
{
offset += <unk> [ m ++ ] ;
}
offset += d . getDay ( )  <num> ;
if ( d . getDay ( ) > <unk> [ m ] )
{
System . out . println ( " ) ;
}
return offset ;
}
private void <unk> ( long offset , Date d )
{
int i , m , <unk> , <unk> ;
<unk> = <unk> ( ) ;
for ( i = <num> ; i < <unk> && offset > <num> ; i ++ )
{
offset -= <unk> [ i ] ;
}
if ( offset < <num> )
{
offset += <unk> [  i ] ;
}
if ( i == <unk> )
{
System . out . println ( " ) ;
}
d . setYear ( i + <unk> . getYear ( ) ) ;
<unk> = <unk> ( i ) ;
for ( m = <num> ; ( m < <unk> ) && ( offset > <num> ) ; m ++ )
{
offset -= <unk> [ m ] ;
}
if ( offset < <num> )
{
offset += <unk> [  m ] ;
}
d . <unk> ( <num> ) ;
if ( <unk> > <num> )
{
if ( <unk> == ( m  <num> ) )
{
d . <unk> ( <num> ) ;
}
else
{
d . <unk> ( <num> ) ;
}
if ( m > <unk> )
{
m ;
}
}
d . setMonth ( m ) ;
d . setDay ( ( int ) ( offset + <num> ) ) ;
}
private long <unk> ( Date d )
{
return ( <unk> ( d )  <unk> ( <unk> ) ) ;
}
private void <unk> ( long offset , Date d )
{
int i , m , days ;
offset -= <unk> ( <unk> ) ;
for ( i = <unk> . getYear ( ) ; ( i < ( <unk> . getYear ( ) + <unk> ) ) && ( offset > <num> ) ; ++ i )
{
if ( <unk> ( i ) )
{
offset -= <num> ;
}
else
{
offset -= <num> ;
}
}
if ( offset < <num> )
{
i ;
if ( <unk> ( i ) )
{
offset += <num> ;
}
else
{
offset += <num> ;
}
}
if ( i == ( <unk> . getYear ( ) + <unk> ) )
{
System . out . println ( " ) ;
}
d . setYear ( i ) ;
for ( m = <num> ; m <= <num> ; m ++ )
{
days = <unk> [ m ] ;
if ( ( m == <num> ) && ( <unk> ( i ) ) )
{
days ++ ;
}
if ( offset < days )
{
d . setMonth ( m ) ;
d . setDay ( ( int ) ( offset + <num> ) ) ;
return ;
}
offset -= days ;
}
}
private int <unk> ( int g , int z )
{
int <unk> ;
for ( <unk> = z ; <unk> % <num> != g && <unk> < <num> ; <unk> += <num> ) ;
if ( <unk> >= <num> ) { System . out . println ( " ) ; }
return <unk> + <num> ;
}
public int <unk> ( int <unk> , int <unk> , int <unk> , int <unk> )
{
if ( <unk> != <unk> ) return ( <unk>  <unk> ) ;
if ( <unk> != <unk> ) return ( <unk>  <unk> ) ;
return <num> ;
}
private int <unk> ( Date ds , Date dl )
{
int m , flag = <num> ;
if ( ds . getMonth ( ) == <num> )
{
flag = <unk> ( ds . getMonth ( ) , ds . getDay ( ) , <num> , fest [ ds . getYear ( )  <unk> . getYear ( )  <num> ] [ <num> ] ) ;
if ( flag < <num> ) dl . setMonth ( <num> ) ;
else if ( flag > <num> ) dl . setMonth ( <num> ) ;
dl . setYear ( ds . getYear ( )  <num> ) ;
return flag == <num> ? <num> : <num> ;
}
for ( m = <num> ; m <= <num> ; m ++ )
{
flag = <unk> ( ds . getMonth ( ) , ds . getDay ( ) , m , fest [ ds . getYear ( )  <unk> . getYear ( ) ] [ m  <num> ] ) ;
if ( flag == <num> ) m ++ ;
if ( flag <= <num> ) break ;
}
dl . setMonth ( ( m  <num> ) % <num> ) ;
dl . setYear ( ds . getYear ( ) ) ;
if ( ( dl . getMonth ( ) ) == <num> )
{
dl . setYear ( ds . getYear ( )  <num> ) ;
dl . setMonth ( <num> ) ;
}
return flag == <num> ? <num> : <num> ;
}
public void <unk> ( )
{
long offset ;
Date d ;
offset = <unk> ( <unk> ) ;
<unk> . <unk> ( ( int ) ( offset + <unk> . <unk> ( ) ) % <num> ) ;
if ( <unk> . getHour ( ) == <num> ) offset ++ ;
<unk> ( offset , <unk> ) ;
<unk> . setHour ( <unk> . getHour ( ) ) ;
<unk> ( offset , <unk> , <unk> , <unk> ) ;
<unk> = <unk> ( <unk> , <unk> ) ;
<unk> . setDay ( <unk> . getDay ( ) ) ;
<unk> . setHour ( <unk> . getHour ( ) ) ;
<unk> ( offset , <unk> , <unk> , <unk> ) ;
}
public void <unk> ( )
{
long offset ;
int <unk> ;
Date d ;
<unk> = <unk> . getHour ( ) == <num> ?  <num> : <num> ;
offset = <unk> ( <unk> ) ;
<unk> . <unk> ( ( int ) ( offset + <unk> + <unk> . <unk> ( ) ) % <num> ) ;
<unk> ( offset + <unk> , <unk> ) ;
<unk> . setHour ( <unk> . getHour ( ) ) ;
<unk> ( offset , <unk> , <unk> , <unk> ) ;
<unk> = <unk> ( <unk> , <unk> ) ;
<unk> . setDay ( <unk> . getDay ( ) ) ;
<unk> . setHour ( <unk> . getHour ( ) ) ;
<unk> ( offset , <unk> , <unk> , <unk> ) ;
}
private final static int <unk> [ ] = {
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num>
} ;
public String <unk> ( )
{
String <unk> = " ;
int year , month , day , temp ;
year = <unk> . getYear ( )  <num> ;
month = <unk> . getMonth ( ) ;
day = <unk> . getDay ( ) ;
int offset = year * <num> + month  <num> ;
if ( day < <num> )
{
temp = <num>  day ;
if ( ( <unk> [ offset ] >> <num> ) == temp )
{
return <unk> [ ( month << <num> )  <num> ] ;
}
else return <unk> ;
}
if ( day == <num> )
{
return <unk> ;
}
if ( day > <num> )
{
temp = day  <num> ;
if ( ( <unk> [ offset ] & <num> ) == temp )
{
return <unk> [ ( ( month << <num> )  <num> ) ] ;
}
else
{
return <unk> ;
}
}
return <unk> ;
}
private int <unk> ;
private int END ;
private int ROWS ;
public Calendar ( )
{
<unk> . setDate ( Birthday ) ;
this . <unk> ( ) ;
}
private void <unk> ( )
{
Date <unk> = new Date ( <unk> ) ;
<unk> . setDate ( new Date ( <unk> . getYear ( ) , <unk> . getMonth ( ) , <num> ) ) ;
<unk> = <unk> ( ) . <unk> ( ) ;
END = <unk> ( ) ;
<unk> . setDate ( <unk> ) ;
if ( ( END + <unk> ) % <num> == <num> )
{
ROWS = ( END + <unk> ) / <num> + <num> ;
}
else
{
ROWS = ( END + <unk> ) / <num> + <num> ;
}
}
public int <unk> ( )
{
return <unk> ;
}
public int <unk> ( )
{
return END ;
}
public int <unk> ( )
{
return ROWS ;
}
public void <unk> ( Date <unk> )
{
this . <unk> . setYear ( <unk> . getYear ( ) ) ;
this . <unk> . setMonth ( <unk> . getMonth ( ) ) ;
this . <unk> . setDay ( <unk> . getDay ( ) ) ;
this . <unk> . setHour ( <unk> . getHour ( ) ) ;
this . <unk> . <unk> ( <unk> . <unk> ( ) ) ;
this . <unk> . <unk> ( <unk> . <unk> ( ) ) ;
this . <unk> ( ) ;
}
public Date <unk> ( )
{
this . <unk> ( ) ;
return this . <unk> ;
}
public void <unk> ( Date <unk> )
{
this . <unk> . setYear ( <unk> . getYear ( ) ) ;
this . <unk> . setMonth ( <unk> . getMonth ( ) ) ;
this . <unk> . setDay ( <unk> . getDay ( ) ) ;
this . <unk> . setHour ( <unk> . getHour ( ) ) ;
this . <unk> . <unk> ( <unk> . <unk> ( ) ) ;
this . <unk> . <unk> ( <unk> . <unk> ( ) ) ;
}
public Date <unk> ( )
{
return this . <unk> ;
}
public String <unk> ( )
{
long offset ;
offset = <unk> ( <unk> ) ;
<unk> . <unk> ( ( int ) ( offset + <unk> . <unk> ( ) ) % <num> ) ;
return <unk> [ <unk> . <unk> ( ) ] ;
}
public String <unk> ( )
{
return <unk> [ <unk> . getYear ( ) ] ;
}
public String <unk> ( )
{
return <unk> [ <unk> . getYear ( ) ] + <unk> [ <unk> . getYear ( ) ] ;
}
public String <unk> ( )
{
return <unk> [ <unk> . getMonth ( ) ] + <unk> [ <unk> . getMonth ( ) ] ;
}
public String <unk> ( )
{
return <unk> [ <unk> . getDay ( ) ] + <unk> [ <unk> . getDay ( ) ] ;
}
public int <unk> ( )
{
if ( <unk> . getMonth ( ) == <num> && <unk> ( <unk> . getYear ( ) ) )
{
return <unk> [ <unk> . getMonth ( ) ] + <num> ;
}
return <unk> [ <unk> . getMonth ( ) ] ;
}
}
package <unk> . <unk> . <unk> ;
import <unk> . <unk> . R ;
import android . app . Activity ;
import android . os . Bundle ;
public class <unk> extends Activity {
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . test ) ;
final <unk> <unk> = ( <unk> ) findViewById ( R . id . <unk> ) ;
}
}
package <unk> . util ;
public class Date
{
private int year ;
private int month ;
private int day ;
private int hour ;
private int <unk> ;
private int <unk> ;
public Date ( int year , int month , int day , int hour , int <unk> , int <unk> )
{
this . year = year ;
this . month = month ;
this . day = day ;
this . hour = hour ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public Date ( int year , int month , int day )
{
this . year = year ;
this . month = month ;
this . day = day ;
}
public void setDate ( int year , int month , int day )
{
this . year = year ;
this . month = month ;
this . day = day ;
}
public Date ( Date d )
{
this . year = d . year ;
this . month = d . month ;
this . day = d . day ;
this . hour = d . hour ;
this . <unk> = d . <unk> ;
this . <unk> = d . <unk> ;
}
public void setDate ( Date d )
{
this . year = d . year ;
this . month = d . month ;
this . day = d . day ;
this . hour = d . hour ;
this . <unk> = d . <unk> ;
this . <unk> = d . <unk> ;
}
public Date ( )
{
this . year = <num> ;
this . month = <num> ;
this . day = <num> ;
this . hour = <num> ;
this . <unk> = <num> ;
this . <unk> = <num> ;
}
public void setYear ( int year )
{
this . year = year ;
}
public void setMonth ( int month )
{
this . month = month ;
}
public void setDay ( int day )
{
this . day = day ;
}
public void setHour ( int hour )
{
this . hour = hour ;
}
public void <unk> ( int <unk> )
{
this . <unk> = <unk> ;
}
public void <unk> ( int <unk> )
{
this . <unk> = <unk> ;
}
public int getYear ( )
{
return this . year ;
}
public int getMonth ( )
{
return this . month ;
}
public int getDay ( )
{
return this . day ;
}
public int getHour ( )
{
return this . hour ;
}
public int <unk> ( )
{
return this . <unk> ;
}
public int <unk> ( )
{
return this . <unk> ;
}
final private String <unk> [ ] = { " , " , " , " , " , " , " , " , " , " ,
" , " , " , " , " , " , " , " , " , " ,
" , " , " , " , " , " , " , " , " , " } ;
public String <unk> ( )
{
return <unk> [ this . getDay ( )  <num> ] ;
}
final private String <unk> [ ] = { " , " , " , " , " , " , " , " , " , " , " , " } ;
public String <unk> ( )
{
return <unk> [ this . getMonth ( )  <num> ] ;
}
package <unk> . <unk> ;
import <unk> . <unk> . <unk> . <unk> ;
import <unk> . <unk> . <unk> . <unk> ;
import android . os . Bundle ;
import android . app . TabActivity ;
import android . content . Intent ;
import android . view . Window ;
import android . widget . RadioGroup ;
import android . widget . RadioGroup . OnCheckedChangeListener ;
import android . widget . TabHost ;
public class <unk> extends TabActivity implements OnCheckedChangeListener {
private TabHost <unk> ;
private RadioGroup <unk> ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
requestWindowFeature ( Window . FEATURE_NO_TITLE ) ;
setContentView ( R . layout . <unk> ) ;
<unk> = this . getTabHost ( ) ;
<unk> . addTab ( <unk> . newTabSpec ( " ) . setIndicator ( " ) . setContent ( new Intent ( this , <unk> . class ) ) ) ;
<unk> . addTab ( <unk> . newTabSpec ( " ) . setIndicator ( " ) . setContent ( new Intent ( this , <unk> . class ) ) ) ;
<unk> . addTab ( <unk> . newTabSpec ( " ) . setIndicator ( " ) . setContent ( new Intent ( this , <unk> . class ) ) ) ;
<unk> . addTab ( <unk> . newTabSpec ( " ) . setIndicator ( " ) . setContent ( new Intent ( this , <unk> . class ) ) ) ;
<unk> . addTab ( <unk> . newTabSpec ( " ) . setIndicator ( " ) . setContent ( new Intent ( this , <unk> . class ) ) ) ;
<unk> = ( RadioGroup ) findViewById ( R . id . <unk> ) ;
<unk> . setOnCheckedChangeListener ( this ) ;
}
@Override
public void onCheckedChanged ( RadioGroup group , int checkedId ) {
switch ( checkedId )
{
case R . id . <unk> :
<unk> . setCurrentTabByTag ( " ) ;
break ;
case R . id . <unk> :
<unk> . setCurrentTabByTag ( " ) ;
break ;
case R . id . <unk> :
<unk> . setCurrentTabByTag ( " ) ;
break ;
case R . id . <unk> :
<unk> . setCurrentTabByTag ( " ) ;
break ;
case R . id . <unk> :
<unk> . setCurrentTabByTag ( " ) ;
break ;
}
}
package <unk> . <unk> . <unk> ;
import <unk> . util . Calendar ;
import <unk> . util . Date ;
import android . content . Context ;
import android . graphics . Canvas ;
import android . graphics . Color ;
import android . graphics . Paint ;
import android . graphics . Rect ;
import android . text . format . Time ;
import android . util . AttributeSet ;
import android . view . GestureDetector ;
import android . view . GestureDetector . OnGestureListener ;
import android . view . MotionEvent ;
import android . view . View ;
import android . util . Log ;
public class <unk> extends View implements OnGestureListener {
private GestureDetector <unk> ;
private Calendar cr ;
private Date <unk> ;
private Date selectedDate ;
private int touchX ;
private int touchY ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int END ;
private int WIDTH ;
public int HEIGHT ;
private final int edge = <num> ;
private int <unk> ;
private int <unk> ;
private int rows ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private Paint <unk> ;
private void <unk> ( )
{
<unk> . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
<unk> . setAntiAlias ( false ) ;
}
private void <unk> ( )
{
<unk> . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
<unk> . setAntiAlias ( true ) ;
<unk> . setTextSize ( <unk> ) ;
}
private void <unk> ( )
{
<unk> . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
<unk> . setAntiAlias ( true ) ;
<unk> . setTextSize ( <unk> ) ;
}
private void <unk> ( )
{
<unk> . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
<unk> . setAntiAlias ( true ) ;
<unk> . setTextSize ( <unk> ) ;
}
private void <unk> ( )
{
<unk> . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
<unk> . setAntiAlias ( true ) ;
<unk> . setTextSize ( <unk> ) ;
}
private void <unk> ( )
{
<unk> . setColor ( Color . WHITE ) ;
<unk> . setAntiAlias ( true ) ;
<unk> . setTextSize ( <unk> ) ;
}
private void <unk> ( )
{
<unk> . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
}
private void <unk> ( )
{
<unk> . setColor ( Color . WHITE ) ;
<unk> . setAntiAlias ( true ) ;
<unk> . setTextSize ( <unk> ) ;
}
private void <unk> ( )
{
<unk> . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
}
private void <unk> ( )
{
<unk> . setColor ( Color . WHITE ) ;
<unk> . setAntiAlias ( true ) ;
<unk> . setTextSize ( <unk> ) ;
}
private void <unk> ( )
{
<unk> . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
}
public <unk> ( Context context , AttributeSet attrs )
{
super ( context , attrs ) ;
Time t = new Time ( ) ;
t . setToNow ( ) ;
int year = t . year ;
int month = t . month + <num> ;
int day = t . <unk> ;
<unk> = new Paint ( ) ;
cr = new Calendar ( ) ;
<unk> = new Date ( ) ;
selectedDate = new Date ( ) ;
<unk> . setDate ( year , month , day ) ;
selectedDate . setDate ( <unk> ) ;
<unk> = cr . <unk> ( ) ;
END = cr . <unk> ( ) ;
this . <unk> = new GestureDetector ( this ) ;
}
public void <unk> ( Date date )
{
cr . <unk> ( date ) ;
<unk> = cr . <unk> ( ) ;
END = cr . <unk> ( ) ;
<unk> = <num> ;
<unk> = <unk> ;
this . selectedDate . setDate ( date ) ;
}
private void <unk> ( Canvas canvas )
{
String [ ] <unk> = { " , " , " , " , " , " , " } ;
this . <unk> ( ) ;
<unk> . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
canvas . drawRect ( new Rect ( <num> , <num> , <unk> + <num> , <unk> ) , <unk> ) ;
<unk> . setColor ( Color . WHITE ) ;
canvas . drawText ( <unk> [ <num> ] , <unk> / <num> , <num> * <unk> / <num> , <unk> ) ;
<unk> . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
canvas . drawRect ( new Rect ( <unk> + <num> , <num> , WIDTH  <unk> + <num> , <unk> ) , <unk> ) ;
this . <unk> ( ) ;
for ( int i = <num> ; i < <num> ; i ++ )
{
canvas . drawText ( <unk> [ i ] , <unk> / <num> + i * <unk> , <num> * <unk> / <num> , <unk> ) ;
}
<unk> . setColor ( Color . argb ( <num> , <num> , <num> , <num> ) ) ;
canvas . drawRect ( new Rect ( <num> * <unk> , <num> , <unk> * <num> + <num> , <unk> ) , <unk> ) ;
<unk> . setColor ( Color . WHITE ) ;
canvas . drawText ( <unk> [ <num> ] , <unk> / <num> + <num> * <unk> , <num> * <unk> / <num> , <unk> ) ;
this . <unk> ( ) ;
canvas . drawLine ( <num> , <num> , WIDTH , <num> , <unk> ) ;
for ( int i = <num> ; i < rows ; i ++ )
{
canvas . drawLine ( <num> , <unk> + <unk> * i , WIDTH , <unk> + <unk> * i , <unk> ) ;
}
for ( int j = <num> ; j < <num> ; j ++ )
{
canvas . drawLine ( <unk> * j , <unk> , <unk> * j , HEIGHT , <unk> ) ;
}
boolean isToday = false ;
boolean <unk> = false ;
int m = <unk> ;
int n = <num> ;
int r = <num> ;
for ( int i = <num> ; i < END ; i ++ )
{
Date <unk> = new Date ( cr . <unk> ( ) ) ;
cr . <unk> ( new Date ( <unk> . getYear ( ) , <unk> . getMonth ( ) , i + <num> ) ) ;
cr . <unk> ( ) ;
if ( cr . <unk> ( ) . getYear ( ) == <unk> . getYear ( ) &&
cr . <unk> ( ) . getMonth ( ) == <unk> . getMonth ( ) &&
<unk> . getDay ( ) == i + <num> )
{
isToday = true ;
}
else
{
isToday = false ;
}
if ( cr . <unk> ( ) != " )
{
<unk> = true ;
}
else
{
<unk> = false ;
}
if ( ( m + n + <num> ) % <num> == <num> )
{
if ( isToday )
{
this . <unk> ( ) ;
canvas . drawRect ( new Rect ( ( m + n ) * <unk> + <num> , <unk> + r * <unk> + <num> , ( m + n + <num> ) * <unk> , <unk> + ( r + <num> ) * <unk> ) , <unk> ) ;
this . <unk> ( ) ;
}
else
{
this . <unk> ( ) ;
}
canvas . drawText ( Integer . toString ( i + <num> ) , <unk> + ( m + n ) * <unk> , <unk> + <num> * <unk> / <num> + r * <unk> , <unk> ) ;
if ( <unk> )
{
this . <unk> ( ) ;
if ( isToday )
{
<unk> . setColor ( Color . WHITE ) ;
}
canvas . drawText ( cr . <unk> ( ) , <unk> + ( m + n ) * <unk> , <unk> + <unk> + r * <unk>  edge , <unk> ) ;
}
else
{
this . <unk> ( ) ;
if ( isToday )
{
<unk> . setColor ( Color . WHITE ) ;
}
canvas . drawText ( cr . <unk> ( ) . <unk> ( ) , <unk> + ( m + n ) * <unk> , <unk> + <unk> + r * <unk>  edge , <unk> ) ;
}
m = <num> ;
n = <num> ;
r ++ ;
}
else if ( n == <num> && m == <num> )
{
if ( isToday )
{
this . <unk> ( ) ;
canvas . drawRect ( new Rect ( ( m + n ) * <unk> + <num> , <unk> + r * <unk> + <num> , ( m + n + <num> ) * <unk> , <unk> + ( r + <num> ) * <unk> ) , <unk> ) ;
this . <unk> ( ) ;
}
else
{
this . <unk> ( ) ;
}
canvas . drawText ( Integer . toString ( i + <num> ) , <unk> + ( m + n ) * <unk> , <unk> + <num> * <unk> / <num> + r * <unk> , <unk> ) ;
if ( <unk> )
{
this . <unk> ( ) ;
if ( isToday )
{
<unk> . setColor ( Color . WHITE ) ;
}
canvas . drawText ( cr . <unk> ( ) , <unk> + ( m + n ) * <unk> , <unk> + <unk> + r * <unk>  edge , <unk> ) ;
}
else
{
this . <unk> ( ) ;
if ( isToday )
{
<unk> . setColor ( Color . WHITE ) ;
}
canvas . drawText ( cr . <unk> ( ) . <unk> ( ) , <unk> + ( m + n ) * <unk> , <unk> + <unk> + r * <unk>  edge , <unk> ) ;
}
n ++ ;
}
else
{
if ( isToday )
{
this . <unk> ( ) ;
canvas . drawRect ( new Rect ( ( m + n ) * <unk> + <num> , <unk> + r * <unk> + <num> , ( m + n + <num> ) * <unk> , <unk> + ( r + <num> ) * <unk> ) , <unk> ) ;
this . <unk> ( ) ;
}
else
{
this . <unk> ( ) ;
}
canvas . drawText ( Integer . toString ( i + <num> ) , <unk> + ( m + n ) * <unk> , <unk> + <num> * <unk> / <num> + r * <unk> , <unk> ) ;
if ( <unk> )
{
this . <unk> ( ) ;
if ( isToday )
{
<unk> . setColor ( Color . WHITE ) ;
}
canvas . drawText ( cr . <unk> ( ) , <unk> + ( m + n ) * <unk> , <unk> + <unk> + r * <unk>  edge , <unk> ) ;
}
else
{
this . <unk> ( ) ;
if ( isToday )
{
<unk> . setColor ( Color . WHITE ) ;
}
canvas . drawText ( cr . <unk> ( ) . <unk> ( ) , <unk> + ( m + n ) * <unk> , <unk> + <unk> + r * <unk>  edge , <unk> ) ;
}
n ++ ;
}
}
if ( <unk> ( ) > <num> && <unk> ( ) <= END )
{
cr . <unk> ( ) . setDay ( <unk> ( ) ) ;
cr . <unk> ( ) ;
if ( cr . <unk> ( ) != " )
{
<unk> = true ;
}
else
{
<unk> = false ;
}
this . <unk> ( ) ;
canvas . drawRect ( new Rect ( <unk> * <unk> + <num> , <unk> + <unk> * <unk> + <num> , ( <unk> + <num> ) * <unk> , <unk> + ( <unk> + <num> ) * <unk> ) , <unk> ) ;
this . <unk> ( ) ;
canvas . drawText ( Integer . toString ( <unk> ( ) ) , <unk> + <unk> * <unk> , <unk> + <num> * <unk> / <num> + <unk> * <unk> , <unk> ) ;
if ( <unk> )
{
this . <unk> ( ) ;
<unk> . setColor ( Color . WHITE ) ;
canvas . drawText ( cr . <unk> ( ) , <unk> + <unk> * <unk> , <unk> + <unk> + <unk> * <unk>  edge , <unk> ) ;
}
else
{
this . <unk> ( ) ;
<unk> . setColor ( Color . WHITE ) ;
canvas . drawText ( cr . <unk> ( ) . <unk> ( ) , <unk> + <unk> * <unk> , <unk> + <unk> + <unk> * <unk>  edge , <unk> ) ;
}
}
}
private int <unk> ( )
{
selectedDate . setYear ( cr . <unk> ( ) . getYear ( ) ) ;
selectedDate . setMonth ( cr . <unk> ( ) . getMonth ( ) ) ;
selectedDate . setDay ( <unk> * <num>  <unk> + <unk> + <num> ) ;
return selectedDate . getDay ( ) ;
}
public Date <unk> ( )
{
return selectedDate ;
}
protected void onDraw ( Canvas canvas )
{
super . onDraw ( canvas ) ;
WIDTH = this . getWidth ( ) ;
Log . i ( " , Integer . toString ( WIDTH ) ) ;
HEIGHT = this . getHeight ( ) ;
<unk> = WIDTH / <num> ;
rows = cr . <unk> ( ) ;
<unk> = ( HEIGHT ) / ( <num> * rows ) ;
<unk> = ( HEIGHT  <unk> ) / ( rows  <num> ) ;
<unk> = <unk> / <num> ;
<unk> = <unk> / <num> ;
<unk> = <unk> / <num> ;
<unk> = <unk> / <num> ;
<unk> = <num> * <unk> / <num> ;
<unk> ++ ;
<unk> ( canvas ) ;
}
public boolean onTouchEvent ( MotionEvent event )
{
return this . <unk> . onTouchEvent ( event ) ;
}
@Override
public boolean onDown ( MotionEvent event ) {
this . touchX = ( int ) event . getX ( ) ;
this . touchY = ( int ) event . getY ( ) ;
<unk> = touchX / <unk> ;
<unk> = ( touchY  <unk> ) / <unk> ;
this . <unk> ( ) ;
this . invalidate ( ) ;
return false ;
}
@Override
public boolean onFling ( MotionEvent e1 , MotionEvent e2 , float velocityX ,
float velocityY ) {
return false ;
}
@Override
public void onLongPress ( MotionEvent e ) {
}
@Override
public boolean onScroll ( MotionEvent e1 , MotionEvent e2 , float distanceX ,
float distanceY ) {
return false ;
}
@Override
public void onShowPress ( MotionEvent e ) {
}
@Override
public boolean onSingleTapUp ( MotionEvent e ) {
return false ;
}
}
package <unk> . <unk> . <unk> ;
import android . app . Activity ;
import android . content . Context ;
import android . graphics . Color ;
import android . os . Bundle ;
import android . text . format . Time ;
import android . util . Log ;
import android . view . GestureDetector ;
import android . view . GestureDetector . OnGestureListener ;
import android . view . MotionEvent ;
import android . view . View ;
import android . widget . Button ;
import android . widget . TextView ;
import android . widget . ViewFlipper ;
import <unk> . <unk> . R ;
import <unk> . util . Calendar ;
import <unk> . util . Date ;
public class <unk> extends Activity implements OnGestureListener {
private Time t ;
private Date <unk> ;
private Date <unk> ;
class <unk>
{
int tag ;
public <unk> ( )
{
this . tag = <num> ;
}
}
private <unk> pa ;
private Button <unk> ;
private Button <unk> ;
private Button <unk> ;
private TextView <unk> ;
private TextView tv ;
private TextView <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> [ ] ;
private ViewFlipper <unk> ;
private GestureDetector mGestureDetector ;
Calendar cr ;
private void <unk> ( )
{
cr = new Calendar ( ) ;
mGestureDetector = new GestureDetector ( this ) ;
pa = new <unk> ( ) ;
<unk> = new Date ( ) ;
<unk> = new Date ( ) ;
t = new Time ( ) ;
t . setToNow ( ) ;
int year = t . year ;
int month = t . month + <num> ;
int day = t . <unk> ;
<unk> . setDate ( year , month , day ) ;
<unk> . setDate ( <unk> ) ;
cr . <unk> ( <unk> ) ;
cr . <unk> ( ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
tv = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( <unk> ) findViewById ( R . id . <unk> ) ;
<unk> = ( <unk> ) findViewById ( R . id . <unk> ) ;
<unk> = new <unk> [ <num> ] ;
<unk> [ <num> ] = <unk> ;
<unk> [ <num> ] = <unk> ;
<unk> = ( ViewFlipper ) findViewById ( R . id . <unk> ) ;
<unk> . setText ( cr . <unk> ( ) + " + cr . <unk> ( ) + " + cr . <unk> ( ) . <unk> ( ) + " + cr . <unk> ( ) . <unk> ( ) ) ;
tv . setText ( Integer . toString ( <unk> . getYear ( ) ) + " + Integer . toString ( <unk> . getMonth ( ) ) + " ) ;
<unk> . setDay ( <num> ) ;
cr . <unk> ( <unk> ) ;
cr . <unk> ( ) ;
<unk> . setText ( " + cr . <unk> ( ) . <unk> ( ) + " + cr . <unk> ( ) . <unk> ( ) ) ;
<unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> ) ;
<unk> . setVisibility ( View . INVISIBLE ) ;
}
private boolean isToday ( )
{
if ( ( <unk> . getYear ( ) == <unk> . getYear ( ) ) && ( <unk> . getMonth ( ) == <unk> . getMonth ( ) ) )
{
return true ;
}
else
{
return false ;
}
}
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
this . <unk> ( ) ;
class <unk> implements Button . OnClickListener
{
private Context context ;
public <unk> ( Context context )
{
this . context = context ;
}
@Override
public void onClick ( View v ) {
if ( <unk> . getMonth ( )  <num> <= <num> )
{
<unk> . setYear ( <unk> . getYear ( )  <num> ) ;
<unk> . setMonth ( <num> ) ;
if ( <unk> != <unk> )
{
<unk> . setVisibility ( View . VISIBLE ) ;
}
else
{
<unk> . setVisibility ( View . INVISIBLE ) ;
}
}
else
{
<unk> . setMonth ( <unk> . getMonth ( )  <num> ) ;
if ( <unk> != <unk> )
{
<unk> . setVisibility ( View . VISIBLE ) ;
}
else
{
<unk> . setVisibility ( View . INVISIBLE ) ;
}
}
tv . setText ( Integer . toString ( <unk> . getYear ( ) ) + " + Integer . toString ( <unk> . getMonth ( ) ) + " ) ;
if ( pa . tag == <num> )
{
pa . tag = <num> ;
}
else
{
pa . tag = <num> ;
}
<unk> [ pa . tag ] . <unk> ( <unk> ) ;
<unk> . setDay ( <num> ) ;
cr . <unk> ( <unk> ) ;
cr . <unk> ( ) ;
<unk> . setText ( " + ( cr . <unk> ( ) . <unk> ( ) != <num> ? " : " ) + cr . <unk> ( ) . <unk> ( ) + " + cr . <unk> ( ) . <unk> ( ) + ( cr . <unk> ( ) == " ? " : cr . <unk> ( ) ) ) ;
<unk> . setInAnimation ( context , R . layout . <unk> ) ;
<unk> . setOutAnimation ( context , R . layout . <unk> ) ;
<unk> . showPrevious ( ) ;
}
}
<unk> . setOnClickListener ( new <unk> ( this ) ) ;
class <unk> implements Button . OnClickListener
{
private Context context ;
public <unk> ( Context context )
{
this . context = context ;
}
public void onClick ( View v ) {
if ( <unk> . getMonth ( ) + <num> >= <num> )
{
<unk> . setYear ( <unk> . getYear ( ) + <num> ) ;
<unk> . setMonth ( <num> ) ;
if ( <unk> != <unk> )
{
<unk> . setVisibility ( View . VISIBLE ) ;
}
else
{
<unk> . setVisibility ( View . INVISIBLE ) ;
}
}
else
{
<unk> . setMonth ( <unk> . getMonth ( ) + <num> ) ;
if ( <unk> != <unk> )
{
<unk> . setVisibility ( View . VISIBLE ) ;
}
else
{
<unk> . setVisibility ( View . INVISIBLE ) ;
}
}
tv . setText ( Integer . toString ( <unk> . getYear ( ) ) + " + Integer . toString ( <unk> . getMonth ( ) ) + " ) ;
if ( pa . tag == <num> )
{
pa . tag = <num> ;
}
else
{
pa . tag = <num> ;
}
<unk> [ pa . tag ] . <unk> ( <unk> ) ;
<unk> . setDay ( <num> ) ;
cr . <unk> ( <unk> ) ;
cr . <unk> ( ) ;
<unk> . setText ( " + ( cr . <unk> ( ) . <unk> ( ) != <num> ? " : " ) + cr . <unk> ( ) . <unk> ( ) + " + cr . <unk> ( ) . <unk> ( ) + ( cr . <unk> ( ) == " ? " : cr . <unk> ( ) ) ) ;
<unk> . setInAnimation ( context , R . layout . <unk> ) ;
<unk> . setOutAnimation ( context , R . layout . <unk> ) ;
<unk> . showNext ( ) ;
}
}
<unk> . setOnClickListener ( new <unk> ( this ) ) ;
class <unk> implements Button . OnClickListener
{
private Context context ;
public <unk> ( Context context )
{
this . context = context ;
}
public void onClick ( View v ) {
<unk> . setDate ( <unk> ) ;
tv . setText ( Integer . toString ( <unk> . getYear ( ) ) + " + Integer . toString ( <unk> . getMonth ( ) ) + " ) ;
<unk> . setVisibility ( View . INVISIBLE ) ;
if ( pa . tag == <num> )
{
pa . tag = <num> ;
}
else
{
pa . tag = <num> ;
}
<unk> [ pa . tag ] . <unk> ( <unk> ) ;
<unk> . setDay ( <num> ) ;
cr . <unk> ( <unk> ) ;
cr . <unk> ( ) ;
<unk> . setText ( " + ( cr . <unk> ( ) . <unk> ( ) != <num> ? " : " ) + cr . <unk> ( ) . <unk> ( ) + " + cr . <unk> ( ) . <unk> ( ) + ( cr . <unk> ( ) == " ? " : cr . <unk> ( ) ) ) ;
<unk> . setInAnimation ( context , R . layout . <unk> ) ;
<unk> . setOutAnimation ( context , R . layout . <unk> ) ;
<unk> . showNext ( ) ;
}
}
<unk> . setOnClickListener ( new <unk> ( this ) ) ;
}
public boolean onTouchEvent ( MotionEvent event )
{
cr . <unk> ( <unk> [ pa . tag ] . <unk> ( ) ) ;
cr . <unk> ( ) ;
<unk> . setText ( " + ( cr . <unk> ( ) . <unk> ( ) != <num> ? " : " ) + cr . <unk> ( ) . <unk> ( ) + " + cr . <unk> ( ) . <unk> ( ) + ( cr . <unk> ( ) == " ? " : cr . <unk> ( ) ) ) ;
return this . mGestureDetector . onTouchEvent ( event ) ;
}
public boolean dispatchTouchEvent ( MotionEvent event )
{
this . onTouchEvent ( event ) ;
return super . dispatchTouchEvent ( event ) ;
}
@Override
public boolean onDown ( MotionEvent event ) {
return true ;
}
private final int <unk> = <num> ;
@Override
public boolean onFling ( MotionEvent arg0 , MotionEvent arg1 , float arg2 ,
float arg3 ) {
if ( arg0 . getX ( )  arg1 . getX ( ) > <unk> )
{
if ( <unk> . getMonth ( ) + <num> >= <num> )
{
<unk> . setYear ( <unk> . getYear ( ) + <num> ) ;
<unk> . setMonth ( <num> ) ;
if ( <unk> != <unk> )
{
<unk> . setVisibility ( View . VISIBLE ) ;
}
else
{
<unk> . setVisibility ( View . INVISIBLE ) ;
}
}
else
{
<unk> . setMonth ( <unk> . getMonth ( ) + <num> ) ;
if ( <unk> != <unk> )
{
<unk> . setVisibility ( View . VISIBLE ) ;
}
else
{
<unk> . setVisibility ( View . INVISIBLE ) ;
}
}
tv . setText ( Integer . toString ( <unk> . getYear ( ) ) + " + Integer . toString ( <unk> . getMonth ( ) ) + " ) ;
if ( pa . tag == <num> )
{
pa . tag = <num> ;
}
else
{
pa . tag = <num> ;
}
<unk> [ pa . tag ] . <unk> ( <unk> ) ;
<unk> . setInAnimation ( this , R . layout . <unk> ) ;
<unk> . setOutAnimation ( this , R . layout . <unk> ) ;
<unk> . showNext ( ) ;
}
else if ( arg0 . getX ( )  arg1 . getX ( ) <  <unk> )
{
if ( <unk> . getMonth ( )  <num> <= <num> )
{
<unk> . setYear ( <unk> . getYear ( )  <num> ) ;
<unk> . setMonth ( <num> ) ;
if ( <unk> != <unk> )
{
<unk> . setVisibility ( View . VISIBLE ) ;
}
else
{
<unk> . setVisibility ( View . INVISIBLE ) ;
}
}
else
{
<unk> . setMonth ( <unk> . getMonth ( )  <num> ) ;
if ( <unk> != <unk> )
{
<unk> . setVisibility ( View . VISIBLE ) ;
}
else
{
<unk> . setVisibility ( View . INVISIBLE ) ;
}
}
tv . setText ( Integer . toString ( <unk> . getYear ( ) ) + " + Integer . toString ( <unk> . getMonth ( ) ) + " ) ;
if ( pa . tag == <num> )
{
pa . tag = <num> ;
}
else
{
pa . tag = <num> ;
}
<unk> [ pa . tag ] . <unk> ( <unk> ) ;
<unk> . setInAnimation ( this , R . layout . <unk> ) ;
<unk> . setOutAnimation ( this , R . layout . <unk> ) ;
<unk> . showPrevious ( ) ;
}
else if ( ( arg0 . getX ( )  arg1 . getX ( ) < <unk> ) &&
( arg0 . getX ( )  arg1 . getX ( ) >  <unk> ) &&
( arg0 . getY ( )  arg1 . getY ( ) > <num> * <unk> ) && ! this . isToday ( )
)
{
<unk> . setDate ( <unk> ) ;
tv . setText ( Integer . toString ( <unk> . getYear ( ) ) + " + Integer . toString ( <unk> . getMonth ( ) ) + " ) ;
<unk> . setVisibility ( View . INVISIBLE ) ;
if ( pa . tag == <num> )
{
pa . tag = <num> ;
}
else
{
pa . tag = <num> ;
}
<unk> [ pa . tag ] . <unk> ( <unk> ) ;
<unk> . setInAnimation ( this , R . layout . <unk> ) ;
<unk> . setOutAnimation ( this , R . layout . <unk> ) ;
<unk> . showNext ( ) ;
}
else
{
return false ;
}
<unk> . setDay ( <num> ) ;
cr . <unk> ( <unk> ) ;
cr . <unk> ( ) ;
<unk> . setText ( " + ( cr . <unk> ( ) . <unk> ( ) != <num> ? " : " ) + cr . <unk> ( ) . <unk> ( ) + " + cr . <unk> ( ) . <unk> ( ) + ( cr . <unk> ( ) == " ? " : cr . <unk> ( ) ) ) ;
return true ;
}
@Override
public void onLongPress ( MotionEvent arg0 ) {
}
@Override
public boolean onScroll ( MotionEvent arg0 , MotionEvent arg1 , float arg2 ,
float arg3 ) {
return false ;
}
@Override
public void onShowPress ( MotionEvent arg0 ) {
}
@Override
public boolean onSingleTapUp ( MotionEvent arg0 ) {
return false ;
}
}
package jp . co . <unk> . <unk> . main ;
import java . io . File ;
import java . util . Calendar ;
import jp . co . <unk> . <unk> . R ;
import android . app . TabActivity ;
import android . content . Intent ;
import android . content . res . Resources ;
import android . graphics . Color ;
import android . os . Bundle ;
import android . os . Environment ;
import android . util . Log ;
import android . view . LayoutInflater ;
import android . view . Menu ;
import android . view . MenuItem ;
import android . view . View ;
import android . view . Window ;
import android . view . View . OnClickListener ;
import android . widget . TabHost ;
import android . widget . TabHost . OnTabChangeListener ;
import android . widget . TabHost . TabSpec ;
import android . widget . TextView ;
public class <unk> extends TabActivity {
protected static final int
<unk> = <num> ,
<unk> = <num> ,
<unk> = <num> ;
protected static final String <unk> = " ;
protected DBAdapter <unk> ;
protected TextView <unk> ;
protected TextView <unk> ;
protected TextView <unk> ;
protected TextView <unk> ;
protected TextView <unk> ;
protected TextView <unk> ;
protected Calendar calendar ;
protected TextView <unk> ;
protected TextView <unk> ;
protected TextView <unk> ;
protected int <unk> ;
protected int <unk> ;
protected int <unk> ;
protected TextView age ;
protected TextView address ;
protected TextView phone ;
int <unk> ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
requestWindowFeature ( Window . FEATURE_NO_TITLE ) ;
Resources res = getResources ( ) ;
TabHost tabs = getTabHost ( ) ;
TabHost . TabSpec spec ;
LayoutInflater . from ( this ) . inflate ( R . layout . main , tabs . <unk> ( ) , true ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
calendar = Calendar . getInstance ( ) ;
<unk> = calendar . get ( Calendar . YEAR ) ;
<unk> = calendar . get ( Calendar . MONTH ) + <num> ;
<unk> = calendar . get ( Calendar . DAY_OF_MONTH ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> . setText ( String . valueOf ( <unk> ) ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> . setText ( String . valueOf ( <unk> ) ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> . setText ( String . valueOf ( <unk> ) ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
age = ( TextView ) findViewById ( R . id . <unk> ) ;
address = ( TextView ) findViewById ( R . id . <unk> ) ;
phone = ( TextView ) findViewById ( R . id . <unk> ) ;
TabSpec <unk> = tabs . newTabSpec ( getText ( R . string . <unk> ) . toString ( ) ) ;
<unk> . setIndicator ( getText ( R . string . <unk> ) . toString ( ) ) ;
<unk> . setContent ( R . id . <unk> ) ;
tabs . addTab ( <unk> ) ;
TabSpec <unk> = tabs . newTabSpec ( " ) ;
<unk> . setIndicator ( getText ( R . string . <unk> ) . toString ( ) ) ;
<unk> . setContent ( R . id . <unk> ) ;
tabs . addTab ( <unk> ) ;
TabSpec <unk> = tabs . newTabSpec ( " ) ;
<unk> . setIndicator ( getText ( R . string . <unk> ) . toString ( ) ) ;
<unk> . setContent ( R . id . <unk> ) ;
tabs . addTab ( <unk> ) ;
TabSpec <unk> = tabs . newTabSpec ( " ) ;
<unk> . setIndicator ( getText ( R . string . <unk> ) . toString ( ) ) ;
<unk> . setContent ( R . id . <unk> ) ;
tabs . addTab ( <unk> ) ;
tabs . setCurrentTab ( <num> ) ;
tabs . setOnTabChangedListener ( new TabHost . OnTabChangeListener ( ) {
public void onTabChanged ( String tabId ) {
if ( tabId == " ) {
<unk> = <num> ;
}
else if ( tabId == " ) {
<unk> = <num> ;
}
else if ( tabId == " ) {
<unk> = <num> ;
}
}
} ) ;
Intent intent = new Intent ( ) ;
switch ( <unk> ) {
case <num> :
intent . setClass ( this , <unk> . class ) ;
break ;
}
<unk> ( ) ;
}
@Override
public boolean onCreateOptionsMenu ( Menu item ) {
super . onCreateOptionsMenu ( item ) ;
MenuItem <unk> = item . add ( <num> , <unk> , <num> , R . string . edit ) ;
<unk> . setIcon ( R . drawable . ic_menu_edit ) ;
MenuItem item1 = item . add ( <num> , <unk> , <num> , R . string . setup ) ;
item1 . setIcon ( android . R . drawable . ic_menu_manage ) ;
MenuItem <unk> = item . add ( <num> , <unk> , <num> , R . string . exit ) ;
<unk> . setIcon ( android . R . drawable . ic_menu_close_clear_cancel ) ;
return true ;
}
@Override
public boolean onOptionsItemSelected ( MenuItem item ) {
Intent intent = new Intent ( ) ;
switch ( item . getItemId ( ) ) {
case <unk> :
intent . setClass ( this , <unk> . class ) ;
if ( intent != null ) {
startActivity ( intent ) ;
}
return true ;
case <unk> :
return true ;
case <unk> :
finish ( ) ;
return true ;
}
return true ;
}
public void <unk> ( ) {
File <unk> = new File ( Environment . getExternalStorageDirectory ( ) , <unk> ) ;
if ( <unk> . exists ( ) == false ) {
<unk> . mkdir ( ) ;
}
Log . i ( " , " + <unk> ) ;
}
@Override
protected void onDestroy ( ) {
super . onDestroy ( ) ;
}
package jp . co . <unk> . <unk> . main ;
public class <unk> {
private int rowId ;
private String value ;
public void <unk> ( int rowId ) {
this . rowId = rowId ;
}
public int getRowId ( ) {
return rowId ;
}
public void setValue ( String value ) {
this . value = value ;
}
public String getValue ( ) {
return value ;
}
}
package jp . co . <unk> . <unk> ;
public final class R {
public static final class attr {
}
public static final class color {
public static final int <unk> = <num> ;
public static final int black = <num> ;
public static final int blue = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int gold = <num> ;
public static final int gray = <num> ;
public static final int green = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int magenta = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int orange = <num> ;
public static final int pink = <num> ;
public static final int <unk> = <num> ;
public static final int red = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int white = <num> ;
public static final int yellow = <num> ;
}
public static final class drawable {
public static final int border = <num> ;
public static final int <unk> = <num> ;
public static final int ic_launcher = <num> ;
public static final int <unk> = <num> ;
public static final int ic_menu_back = <num> ;
public static final int ic_menu_edit = <num> ;
public static final int ic_menu_forward = <num> ;
public static final int ic_menu_home = <num> ;
public static final int ic_menu_refresh = <num> ;
public static final int ic_tab_b = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int ic_tab_c = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class id {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int linearLayout1 = <num> ;
public static final int linearLayout2 = <num> ;
public static final int linearLayout3 = <num> ;
public static final int linearLayout4 = <num> ;
public static final int linearLayout5 = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int scrollView1 = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class layout {
public static final int main = <num> ;
public static final int <unk> = <num> ;
}
public static final class string {
public static final int address = <num> ;
public static final int age = <num> ;
public static final int app_name = <num> ;
public static final int back = <num> ;
public static final int <unk> = <num> ;
public static final int birthday = <num> ;
public static final int <unk> = <num> ;
public static final int cancel = <num> ;
public static final int <unk> = <num> ;
public static final int day = <num> ;
public static final int <unk> = <num> ;
public static final int edit = <num> ;
public static final int email = <num> ;
public static final int <unk> = <num> ;
public static final int exit = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int forward = <num> ;
public static final int <unk> = <num> ;
public static final int home = <num> ;
public static final int <unk> = <num> ;
public static final int info = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int month = <num> ;
public static final int name = <num> ;
public static final int no = <num> ;
public static final int phone = <num> ;
public static final int <unk> = <num> ;
public static final int present = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int refresh = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int resume = <num> ;
public static final int <unk> = <num> ;
public static final int save = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int setup = <num> ;
public static final int sex = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int year = <num> ;
public static final int <unk> = <num> ;
public static final int yes = <num> ;
}
}
package jp . co . <unk> . <unk> ;
public final class BuildConfig {
public final static boolean DEBUG = true ;
package jp . co . <unk> . <unk> . main ;
import java . io . File ;
import android . content . ContentValues ;
import android . content . Context ;
import android . database . sqlite . SQLiteDatabase ;
import android . database . sqlite . SQLiteOpenHelper ;
public class DBAdapter extends SQLiteOpenHelper {
protected static final String <unk> = <unk> . <unk> + File . separator + " ;
protected static final String DB_TABLE_NAME = " ;
protected static final String COL_ID = " ;
protected static final String <unk> = " ;
protected static final String <unk> = " ;
protected static final int DB_VERSION = <num> ;
protected static final String <unk> = " + DB_TABLE_NAME + " +
COL_ID + " +
<unk> + " +
<unk> + " +
" ;
protected static final String <unk> =
" + DB_TABLE_NAME ;
protected SQLiteDatabase db ;
public DBAdapter ( Context context ) {
super ( context , <unk> , null , DB_VERSION ) ;
}
@Override
public void onCreate ( SQLiteDatabase db ) {
db . execSQL ( <unk> ) ;
}
@Override
public void onUpgrade ( SQLiteDatabase db ,
int oldVersion , int newVersion ) {
if ( oldVersion == <num> && newVersion == <num> ) {
db . execSQL ( <unk> ) ;
db . execSQL ( <unk> ) ;
}
}
package jp . co . <unk> . <unk> . main ;
import jp . co . <unk> . <unk> . R ;
import android . app . Activity ;
import android . content . ContentValues ;
import android . database . sqlite . SQLiteDatabase ;
import android . os . Bundle ;
import android . view . Menu ;
import android . view . MenuItem ;
import android . view . Window ;
import android . widget . DatePicker ;
import android . widget . EditText ;
import android . widget . RadioButton ;
import android . widget . RadioGroup ;
import android . widget . Toast ;
public class <unk> extends Activity {
DBAdapter <unk> ;
SQLiteDatabase db ;
private static final int
<unk> = <num> ,
<unk> = <num> ;
private EditText <unk> ;
private EditText <unk> ;
private RadioGroup <unk> ;
private RadioButton <unk> ;
private RadioButton <unk> ;
private DatePicker <unk> ;
private int <unk> ;
private int <unk> ;
private int birthday ;
private EditText address ;
private EditText phone ;
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
requestWindowFeature ( Window . FEATURE_NO_TITLE ) ;
setContentView ( R . layout . <unk> ) ;
<unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
<unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
<unk> = ( RadioGroup ) findViewById ( R . id . <unk> ) ;
<unk> = ( RadioButton ) findViewById ( R . id . <unk> ) ;
<unk> = ( RadioButton ) findViewById ( R . id . <unk> ) ;
<unk> = ( DatePicker ) findViewById ( R . id . <unk> ) ;
address = ( EditText ) findViewById ( R . id . <unk> ) ;
phone = ( EditText ) findViewById ( R . id . <unk> ) ;
}
@Override
public boolean onCreateOptionsMenu ( Menu item ) {
super . onCreateOptionsMenu ( item ) ;
MenuItem <unk> = item . add ( <num> , <unk> , <num> , R . string . save ) ;
<unk> . setIcon ( android . R . drawable . ic_menu_save ) ;
MenuItem item1 = item . add ( <num> , <unk> , <num> , R . string . back ) ;
item1 . setIcon ( android . R . drawable . ic_menu_revert ) ;
return true ;
}
@Override
public boolean onOptionsItemSelected ( MenuItem item ) {
<unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
<unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
switch ( item . getItemId ( ) ) {
case <unk> :
try {
writeData ( ) ;
Toast . makeText ( this , R . string . <unk> , Toast . LENGTH_LONG ) . show ( ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
finish ( ) ;
return true ;
case <unk> :
finish ( ) ;
return true ;
}
return true ;
}
public void writeData ( ) {
ContentValues values = new ContentValues ( ) ;
values . put ( " , " ) ;
values . put ( " , <unk> . getText ( ) . toString ( ) ) ;
values . put ( " , <unk> . getText ( ) . toString ( ) ) ;
<unk> = new DBAdapter ( this ) ;
db = <unk> . getReadableDatabase ( ) ;
long ret ;
try {
ret = db . insert ( DBAdapter . DB_TABLE_NAME , null , values ) ;
} finally {
db . close ( ) ;
}
if ( ret ==  <num> ) {
Toast . makeText ( this , " , Toast . LENGTH_SHORT ) . show ( ) ;
} else {
Toast . makeText ( this , " , Toast . LENGTH_SHORT ) . show ( ) ;
}
}
@Override
protected void onDestroy ( ) {
super . onDestroy ( ) ;
}
}
package com . <unk> . <unk> ;
import org . apache . log4j . Logger ;
public class App {
private static Logger logger = Logger . getLogger ( App . class ) ;
public static void main ( String [ ] args ) throws InterruptedException {
logger . trace ( " ) ;
logger . warn ( " ) ;
logger . error ( " ) ;
}
}
package com . <unk> . <unk> ;
import junit . framework . Test ;
import junit . framework . TestCase ;
import junit . framework . TestSuite ;
public class AppTest
extends TestCase
{
public AppTest ( String testName )
{
super ( testName ) ;
}
public static Test suite ( )
{
return new TestSuite ( AppTest . class ) ;
}
public void testApp ( )
{
assertTrue ( true ) ;
}
}
package <unk> ;
import android . app . Activity ;
import android . os . Bundle ;
public class <unk> {
private Activity activity ;
public <unk> ( Activity activity ) {
this . activity = activity ;
}
public void onCreate ( Bundle savedInstanceState ) { } ;
protected Activity getActivity ( ) {
return activity ;
}
}
package com . <unk> . <unk> ;
import <unk> . <unk> ;
import java . io . BufferedInputStream ;
import java . io . BufferedOutputStream ;
import java . io . IOException ;
import java . io . File ;
import java . io . FileNotFoundException ;
import java . io . FileOutputStream ;
import java . lang . Thread ;
import java . lang . reflect . Constructor ;
import java . lang . reflect . InvocationTargetException ;
import java . lang . reflect . Field ;
import android . app . Activity ;
import android . content . Context ;
import android . content . res . AssetFileDescriptor ;
import android . os . Bundle ;
import android . util . Log ;
import android . widget . TextView ;
import <unk> . system . <unk> ;
public class <unk> extends Activity
{
private ClassLoader loader ;
private <unk> <unk> ;
@Override
public void onCreate ( Bundle savedInstanceState )
{
super . onCreate ( savedInstanceState ) ;
<unk> ( ) . onCreate ( savedInstanceState ) ;
}
protected String <unk> ( ) {
return " ;
}
private <unk> <unk> ( ) {
try {
if ( <unk> == null ) {
Class <unk> = getLoader ( ) . loadClass ( <unk> ( ) ) ;
Constructor < <unk> > <unk>
= <unk> . getConstructor ( Activity . class ) ;
<unk> = <unk> . newInstance ( this ) ;
}
} catch ( ClassNotFoundException e ) {
throw new RuntimeException ( " + <unk> ( ) , e ) ;
} catch ( NoSuchMethodException e ) {
throw new RuntimeException ( " + <unk> ( ) , e ) ;
} catch ( InstantiationException e ) {
throw new RuntimeException ( " + <unk> ( ) , e ) ;
} catch ( IllegalAccessException e ) {
throw new RuntimeException ( " + <unk> ( ) , e ) ;
} catch ( InvocationTargetException e ) {
throw new RuntimeException ( " + <unk> ( ) , e ) ;
}
return <unk> ;
}
private ClassLoader getLoader ( ) {
if ( loader == null ) {
loader = <unk> ( ) ;
}
return loader ;
}
private ClassLoader <unk> ( ) {
try {
ClassLoader loader = classLoader ( ) ;
Thread . currentThread ( ) . setContextClassLoader ( loader ) ;
Class <unk> = loader . loadClass ( " ) ;
Field <unk> = <unk> . getField ( " ) ;
Class <unk> = loader . loadClass ( " ) ;
<unk> . getDeclaredMethod ( " , Object . class ) . invoke (
<unk> . get ( null ) ,
loader ) ;
return loader ;
} catch ( Exception ex ) {
throw new RuntimeException ( " , ex ) ;
}
}
private ClassLoader classLoader ( )
{
Log . e ( " , " ) ;
Context context = this ;
File <unk> = context . getDir ( " , <num> ) ;
try {
String paths = <unk> ( " , R . raw . hello ) + " +
<unk> ( " , R . raw . clojure ) ;
return new <unk> ( paths ,
<unk> . getAbsolutePath ( ) , null , this . getClassLoader ( ) ) ;
} catch ( IOException e ) {
Log . e ( " , " , e ) ;
throw new RuntimeException ( " , e ) ;
}
}
public String <unk> ( String <unk> , int id )
throws IOException , FileNotFoundException
{
Context context = this ;
File <unk> = context . getDir ( " , <num> ) ;
String <unk> = <unk> + " ;
File <unk> = new File ( <unk> , <unk> ) ;
final int <unk> = <num> * <num> ;
BufferedInputStream <unk> = new BufferedInputStream (
getResources ( ) . openRawResource ( id ) , <unk> ) ;
BufferedOutputStream <unk> = new BufferedOutputStream (
new FileOutputStream ( <unk> ) , <unk> ) ;
int n = <num> ;
byte [ ] b = new byte [ <unk> ] ;
while ( ( n = <unk> . read ( b , <num> , b . length ) ) !=  <num> ) {
<unk> . write ( b , <num> , n ) ;
}
<unk> . close ( ) ;
<unk> . close ( ) ;
Log . e ( " , " + <unk> . getAbsolutePath ( ) ) ;
return <unk> . getAbsolutePath ( ) ;
}
}
package <unk> . <unk> . <unk> ;
import <unk> . <unk> . <unk> . R ;
import ioio . lib . api . <unk> ;
import ioio . lib . api . DigitalOutput ;
import ioio . lib . api . IOIO ;
import ioio . lib . api . <unk> ;
import ioio . lib . api . exception . ConnectionLostException ;
import ioio . lib . util . <unk> ;
import android . os . Bundle ;
import android . widget . Button ;
import android . widget . Spinner ;
import android . widget . CheckBox ;
import android . widget . EditText ;
import android . widget . Toast ;
import android . widget . RadioGroup ;
import android . widget . RadioButton ;
import android . text . InputType ;
import android . view . View ;
import android . telephony . SmsManager ;
import android . content . Intent ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . OutputStream ;
public class MainActivity extends <unk> {
public enum <unk> {
<unk> , <unk> , <unk> , <unk> , <unk>
}
public enum <unk> {
<unk> , <unk> , <unk>
}
protected Button <unk> , btn_save , btn_send , <unk> ;
protected Spinner <unk> ;
protected CheckBox [ ] <unk> ;
protected EditText <unk> , <unk> , <unk> ;
protected RadioGroup <unk> ;
protected RadioButton <unk> , mode_email ;
protected <unk> <unk> ;
protected <unk> <unk> ;
protected int <unk> ;
protected boolean reset = false ;
protected String <unk> ;
protected static final byte <unk> = <num> ;
protected static final byte <unk> = <num> ;
protected static final byte <unk> = <num> ;
protected static final byte <unk> = <num> ;
protected static final byte <unk> = <num> ;
protected static final byte <unk> = <num> ;
protected static final byte <unk> = <num> ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
btn_save = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
<unk> = ( RadioGroup ) findViewById ( R . id . <unk> ) ;
<unk> = ( RadioButton ) findViewById ( R . id . <unk> ) ;
mode_email = ( RadioButton ) findViewById ( R . id . mode_email ) ;
<unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
btn_send = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> = ( Spinner ) findViewById ( R . id . <unk> ) ;
<unk> = new CheckBox [ <num> ] ;
<unk> [ <num> ] = ( CheckBox ) findViewById ( R . id . <unk> ) ;
<unk> [ <num> ] = ( CheckBox ) findViewById ( R . id . <unk> ) ;
<unk> [ <num> ] = ( CheckBox ) findViewById ( R . id . <unk> ) ;
<unk> [ <num> ] = ( CheckBox ) findViewById ( R . id . <unk> ) ;
<unk> [ <num> ] = ( CheckBox ) findViewById ( R . id . <unk> ) ;
<unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
<unk> . check ( R . id . <unk> ) ;
<unk> = <unk> . getCheckedRadioButtonId ( ) ;
<unk> . setHint ( R . string . <unk> ) ;
<unk> . setInputType ( InputType . TYPE_CLASS_PHONE ) ;
<unk> . setEnabled ( false ) ;
<unk> . setEnabled ( false ) ;
<unk> . setEnabled ( false ) ;
mode_email . setEnabled ( false ) ;
<unk> . setEnabled ( false ) ;
btn_send . setEnabled ( false ) ;
<unk> . setEnabled ( false ) ;
<unk> . setEnabled ( false ) ;
btn_save . setEnabled ( false ) ;
for ( int i = <num> ; i < <num> ; ++ i ) {
<unk> [ i ] . setEnabled ( false ) ;
}
<unk> = <unk> . <unk> ;
}
public void <unk> ( String str ) {
Toast . makeText ( getApplicationContext ( ) , str , Toast . LENGTH_SHORT ) . show ( ) ;
}
public void startSync ( View btn ) {
if ( <unk> == <unk> . <unk> ) {
<unk> = <unk> . <unk> ;
<unk> = <unk> . <unk> ;
} else {
<unk> ( " ) ;
}
}
public void <unk> ( View btn ) {
if ( <unk> == <unk> . <unk> ) {
<unk> = <unk> . getText ( ) . toString ( ) ;
while ( <unk> . length ( ) < <num> ) {
<unk> += " ;
}
<unk> = <unk> . <unk> ;
<unk> = <unk> . <unk> ;
} else {
<unk> ( " ) ;
}
}
public void <unk> ( View btn ) {
<unk> = <unk> . <unk> ;
<unk> = <unk> . <unk> ;
reset = true ;
}
public void <unk> ( View btn ) {
int new_mode = <unk> . getCheckedRadioButtonId ( ) ;
if ( new_mode == <unk> ) {
return ;
}
if ( new_mode == R . id . <unk> ) {
<unk> . setInputType ( InputType . TYPE_CLASS_PHONE ) ;
<unk> . setHint ( R . string . <unk> ) ;
<unk> . setText ( " ) ;
} else if ( new_mode == R . id . mode_email ) {
<unk> . setInputType ( InputType . TYPE_CLASS_TEXT
| InputType . TYPE_TEXT_VARIATION_EMAIL_ADDRESS ) ;
<unk> . setHint ( R . string . <unk> ) ;
<unk> . setText ( " ) ;
}
<unk> = new_mode ;
}
public void <unk> ( View btn ) {
String dest = <unk> . getText ( ) . toString ( ) ;
String <unk> [ ] = { dest } ;
String <unk> = <unk> . getText ( ) . toString ( ) ;
if ( <unk> . isChecked ( ) ) {
SmsManager manager = SmsManager . getDefault ( ) ;
manager . sendTextMessage ( dest , null , <unk> , null , null ) ;
<unk> ( " ) ;
} else if ( mode_email . isChecked ( ) ) {
final Intent email = new Intent ( Intent . ACTION_SEND ) ;
email . setType ( " ) ;
email . putExtra ( Intent . EXTRA_EMAIL , <unk> ) ;
email . putExtra ( Intent . EXTRA_SUBJECT , " ) ;
email . putExtra ( Intent . EXTRA_TEXT , <unk> ) ;
try {
startActivity ( email ) ;
} catch ( android . content . ActivityNotFoundException anfe ) {
<unk> ( " ) ;
} catch ( Exception e ) {
<unk> ( " ) ;
}
}
}
class IOIOThread extends <unk> . IOIOThread {
private DigitalOutput <unk> ;
private <unk> <unk> ;
private InputStream <unk> ;
private OutputStream <unk> ;
private byte <unk> ;
private boolean sent ;
private long <unk> ;
private int <unk> = <num> , <unk> = <num> ;
@Override
protected void setup ( ) throws ConnectionLostException {
<unk> = ioio_ . openDigitalOutput ( IOIO . <unk> ) ;
<unk> . <unk> <unk> = new <unk> . <unk> ( <num> , <unk> . <unk> . Mode . <unk> ) ;
DigitalOutput . <unk> <unk> = new DigitalOutput . <unk> ( <num> , DigitalOutput . <unk> . Mode . <unk> ) ;
<unk> = ioio_ . <unk> ( <unk> , <unk> , <num> , <unk> . Parity . NONE , <unk> . <unk> . ONE ) ;
<unk> = <unk> . getInputStream ( ) ;
<unk> = <unk> . getOutputStream ( ) ;
<unk> = <num> ;
<unk> . write ( true ) ;
}
protected void <unk> ( View iv ) {
final View v = iv ;
runOnUiThread ( new Runnable ( ) {
public void run ( ) {
v . setEnabled ( true ) ;
}
} ) ;
}
protected void <unk> ( View iv ) {
final View v = iv ;
runOnUiThread ( new Runnable ( ) {
public void run ( ) {
v . setEnabled ( false ) ;
}
} ) ;
}
protected void <unk> ( byte inp ) {
boolean low [ ] = new boolean [ <num> ] ;
low [ <num> ] = ( inp & <num> ) == <num> ;
low [ <num> ] = ( inp & <num> ) == <num> ;
low [ <num> ] = ( inp & <num> ) == <num> ;
low [ <num> ] = ( inp & <num> ) == <num> ;
low [ <num> ] = ( inp & <num> ) == <num> ;
String names [ ] = { " , " , " , " , " } ;
boolean <unk> = true ;
String tmp = " ;
for ( int i = <num> ; i < <num> ; ++ i ) {
if ( ! low [ i ] ) {
if ( ! <unk> ) {
tmp += " ;
}
tmp += " ;
tmp += names [ i ] ;
<unk> = false ;
}
}
if ( <unk> ) {
tmp = " ;
}
final String <unk> = tmp ;
final boolean <unk> = <unk> ;
runOnUiThread ( new Runnable ( ) {
public void run ( ) {
<unk> . setText ( <unk> ) ;
<unk> . setEnabled ( true ) ;
<unk> . setEnabled ( ! <unk> ) ;
mode_email . setEnabled ( ! <unk> ) ;
<unk> . setEnabled ( ! <unk> ) ;
btn_send . setEnabled ( ! <unk> ) ;
}
} ) ;
}
protected void <unk> ( String instr ) {
final String str = instr ;
runOnUiThread ( new Runnable ( ) {
public void run ( ) {
Toast . makeText ( getApplicationContext ( ) , str , Toast . LENGTH_SHORT ) . show ( ) ;
}
} ) ;
}
protected int <unk> ( ) throws ConnectionLostException , IOException {
int sleeptime = <num> ;
if ( <unk> == <unk> . <unk> ) {
sleeptime = <num> ;
<unk> . write ( <unk> ) ;
if ( <unk> . available ( ) > <num> ) {
<unk> = <num> ;
<unk> = ( byte ) <unk> . read ( ) ;
}
sent = false ;
} else if ( <unk> == <unk> . <unk> ) {
<unk> . write ( false ) ;
if ( ! sent ) {
<unk> . write ( <unk> ) ;
sent = true ;
}
if ( <unk> . available ( ) > <num> ) {
<unk> = <num> ;
<unk> = ( byte ) <unk> . read ( ) ;
if ( <unk> == <unk> && <unk> . available ( ) == <num> ) {
sent = false ;
<unk> = <unk> . <unk> ;
}
}
} else if ( <unk> == <unk> . <unk> && <unk> != <unk> . <unk> ) {
if ( <unk> == <unk> . <unk> ) {
if ( ! sent ) {
sent = true ;
<unk> . write ( <unk> ) ;
}
while ( <unk> . available ( ) > <num> ) {
<unk> = ( byte ) <unk> . read ( ) ;
}
if ( <unk> . available ( ) > <num> ) {
<unk> = <num> ;
<unk> = ( byte ) <unk> . read ( ) ;
<unk> &= <num> ;
<unk> ( <unk> ) ;
sent = false ;
<unk> = <unk> . <unk> ;
<unk> = <unk> . <unk> ;
}
} else if ( <unk> == <unk> . <unk> ) {
if ( ! sent ) {
sent = true ;
<unk> . write ( <unk> ) ;
}
if ( <unk> . available ( ) > <num> ) {
<unk> = <num> ;
<unk> = ( byte ) <unk> . read ( ) ;
if ( <unk> == <unk> ) {
sent = false ;
<unk> = <num> ;
<unk> = <unk> . <unk> ;
<unk> = <unk> . <unk> ;
}
}
}
} else if ( <unk> == <unk> . <unk> ) {
if ( <unk> == <num> ) {
if ( ! sent ) {
byte <unk> = ( byte ) ( <num> | <unk> . getSelectedItemPosition ( ) ) ;
sent = true ;
<unk> . write ( <unk> ) ;
}
if ( <unk> . available ( ) > <num> ) {
<unk> = <num> ;
<unk> = ( byte ) <unk> . read ( ) ;
if ( <unk> == <unk> ) {
sent = false ;
<unk> = <num> ;
}
}
} else if ( <unk> == <num> ) {
if ( ! sent ) {
byte temp = ( byte ) <num> ;
for ( int i = <num> ; i < <num> ; ++ i ) {
if ( <unk> [ i ] . isChecked ( ) ) {
temp |= ( <num> << i ) ;
}
}
sent = true ;
<unk> . write ( temp ) ;
}
if ( <unk> . available ( ) > <num> ) {
<unk> = <num> ;
<unk> = ( byte ) <unk> . read ( ) ;
if ( <unk> == <unk> ) {
sent = false ;
<unk> = <num> ;
}
}
} else {
if ( ! sent ) {
sent = true ;
<unk> . write ( <unk> . charAt ( <unk>  <num> ) ) ;
}
if ( <unk> . available ( ) > <num> ) {
<unk> = <num> ;
<unk> = ( byte ) <unk> . read ( ) ;
if ( <unk> == <unk> ) {
sent = false ;
++ <unk> ;
}
}
}
if ( <unk> == <num> ) {
sent = false ;
<unk> = <num> ;
<unk> = <unk> . <unk> ;
}
} else if ( <unk> == <unk> . <unk> ) {
if ( ! sent ) {
sent = true ;
<unk> . write ( <unk> ) ;
}
if ( <unk> . available ( ) > <num> ) {
<unk> = <num> ;
<unk> = ( byte ) <unk> . read ( ) ;
if ( <unk> == <unk> ) {
<unk> ( " ) ;
<unk> . write ( true ) ;
<unk> = <unk> . <unk> ;
}
}
}
if ( <unk> >= <num> ) {
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
for ( int i = <num> ; i < <num> ; ++ i ) {
<unk> ( <unk> [ i ] ) ;
}
<unk> ( btn_save ) ;
} else if ( <unk> <= <num> ) {
<unk> = <unk> . <unk> ;
<unk> = <unk> . <unk> ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
for ( int i = <num> ; i < <num> ; ++ i ) {
<unk> ( <unk> [ i ] ) ;
}
<unk> ( btn_save ) ;
}
if ( <unk> > <num> ) {
<unk> ;
}
return sleeptime ;
}
@Override
protected void loop ( ) throws ConnectionLostException {
try {
if ( reset ) {
reset = false ;
<unk> . write ( <unk> ) ;
ioio_ . <unk> ( ) ;
}
<unk> = <unk> ( ) ;
sleep ( <unk> ) ;
} catch ( InterruptedException e ) {
} catch ( IOException ioe ) {
}
}
}
@Override
protected <unk> . IOIOThread <unk> ( ) {
return new IOIOThread ( ) ;
}
import <unk> . Nappula ;
import <unk> . <unk> ;
import <unk> . <unk> ;
import java . util . ArrayList ;
import static org . junit . Assert . * ;
import org . junit . * ;
public class <unk> {
<unk> lauta ;
ArrayList < Nappula > <unk> ;
ArrayList < Nappula > <unk> ;
<unk> <unk> ;
public <unk> ( ) {
lauta = new <unk> ( ) ;
<unk> = new ArrayList < Nappula > ( ) ;
<unk> = new ArrayList < Nappula > ( ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
<unk> . add ( new Nappula ( " ) ) ;
<unk> . add ( new Nappula ( " ) ) ;
}
<unk> = new <unk> ( ) ;
}
@BeforeClass
public static void setUpClass ( ) throws Exception {
}
@AfterClass
public static void tearDownClass ( ) throws Exception {
}
@Before
public void setUp ( ) {
lauta . <unk> ( <unk> , <unk> ) ;
while ( <unk> . <unk> ( ) != <num> ) {
}
}
@After
public void tearDown ( ) {
}
@Test
public void <unk> ( ) {
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
}
@Test
public void <unk> ( ) {
assertFalse ( lauta . <unk> ( lauta . <unk> ( ) . get ( <num> ) , lauta . <unk> ( ) . get ( <num> ) , " , <unk> ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
}
@Test
public void <unk> ( ) {
assertFalse ( lauta . <unk> ( lauta . <unk> ( ) . get ( <num> ) , lauta . <unk> ( ) . get ( <num> ) , " , <unk> ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
}
@Test
public void <unk> ( ) {
assertFalse ( lauta . <unk> ( lauta . <unk> ( ) . get ( <num> ) , lauta . <unk> ( ) . get ( <num> ) , " , <unk> ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
}
@Test
public void <unk> ( ) {
while ( <unk> . <unk> ( ) != <num> ) {
}
assertFalse ( lauta . <unk> ( lauta . <unk> ( ) . get ( <num> ) , lauta . <unk> ( ) . get ( <num> ) , " , <unk> ) ) ;
}
@Test
public void <unk> ( ) {
lauta . <unk> ( lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . get ( <num> ) , lauta . <unk> ( ) . get ( <num> ) , lauta . <unk> ( ) ) ;
assertFalse ( lauta . <unk> ( lauta . <unk> ( ) . get ( <num> ) , lauta . <unk> ( ) . get ( <num> ) , " , <unk> ) ) ;
}
@Test
public void <unk> ( ) {
assertTrue ( lauta . <unk> ( lauta . <unk> ( ) . get ( <num> ) , lauta . <unk> ( ) . get ( <num> ) , " , <unk> ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , lauta . <unk> ( ) . get ( <num> ) . <unk> ( ) . size ( ) ) ;
}
}
package <unk> ;
import java . util . ArrayList ;
public class <unk> {
protected int <unk> ;
private ArrayList < Nappula > <unk> ;
public <unk> ( ) {
<unk> =  <num> ;
<unk> = new ArrayList < Nappula > ( ) ;
}
public void asetaNappula ( Nappula <unk> ) {
<unk> . add ( <unk> ) ;
}
public void <unk> ( Nappula <unk> ) {
<unk> . remove ( <unk> ) ;
}
public ArrayList < Nappula > <unk> ( ) {
return <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
@Override
public String toString ( ) {
if ( <unk> . isEmpty ( ) ) {
return " ;
}
else {
return <unk> . get ( <num> ) . <unk> ( ) + " + <unk> . size ( ) ;
}
}
}
package <unk> ;
public class <unk> {
public <unk> parent ;
public int key ;
public int degree ;
public <unk> child ;
public <unk> left ;
public <unk> right ;
public boolean mark ;
public <unk> ( ) {
parent = null ;
key = <num> ;
degree = <num> ;
child = null ;
left = null ;
right = null ;
mark = false ;
}
public <unk> ( int key ) {
this ( ) ;
this . key = key ;
}
}
import <unk> . <unk> ;
import org . junit . * ;
import static org . junit . Assert . * ;
public class <unk> {
<unk> n ;
public <unk> ( ) {
n = new <unk> ( ) ;
}
@BeforeClass
public static void setUpClass ( ) throws Exception {
}
@AfterClass
public static void tearDownClass ( ) throws Exception {
}
@Before
public void setUp ( ) {
}
@After
public void tearDown ( ) {
}
@Test
public void <unk> ( ) {
for ( int i = <num> ; i < <num> ; i ++ ) {
n . <unk> ( ) ;
assertTrue ( n . <unk> ( ) >= <num> && n . <unk> ( ) <= <num> ) ;
}
}
@Test
public void <unk> ( ) {
boolean [ ] <unk> = new boolean [ <num> ] ;
for ( int i = <num> ; i < <num> ; i ++ ) {
<unk> [ n . <unk> ( )  <num> ] = true ;
}
for ( int i = <num> ; i < <num> ; i ++ ) {
assertTrue ( <unk> [ i ] ) ;
}
}
}
package <unk> ;
public class <unk> extends <unk> {
public <unk> ( int <unk> ) {
<unk> = <unk> ;
}
}
package <unk> ;
public class <unk> implements <unk> {
private int [ ] A ;
private int <unk> ;
public <unk> ( ) {
A = new int [ <num> ] ;
<unk> = <num> ;
}
private int parent ( int i ) {
return ( i  <num> ) / <num> ;
}
private int left ( int i ) {
return <num> * i + <num> ;
}
private int right ( int i ) {
return <num> * i + <num> ;
}
private void heapify ( int i ) {
int l = left ( i ) ;
int r = right ( i ) ;
int largest ;
if ( r <= <unk>  <num> ) {
if ( A [ l ] > A [ r ] ) {
largest = l ;
}
else {
largest = r ;
}
if ( A [ i ] < A [ largest ] ) {
swap ( i , largest ) ;
heapify ( largest ) ;
}
}
else if ( l == <unk>  <num> && A [ i ] < A [ l ] ) {
swap ( i , l ) ;
}
}
@Override
public int <unk> ( ) {
if ( <unk> == <num> ) {
return Integer . MIN_VALUE ;
}
return A [ <num> ] ;
}
@Override
public int <unk> ( ) {
if ( <unk> == <num> ) {
return Integer . MIN_VALUE ;
}
int max = A [ <num> ] ;
A [ <num> ] = A [ <unk>  <num> ] ;
<unk>  ;
heapify ( <num> ) ;
return max ;
}
@Override
public void <unk> ( int k ) {
<unk> ++ ;
int i = <unk>  <num> ;
while ( i > <num> && A [ parent ( i ) ] < k ) {
A [ i ] = A [ parent ( i ) ] ;
i = parent ( i ) ;
}
A [ i ] = k ;
if ( <unk> == A . length ) {
int [ ] B = new int [ A . length * <num> ] ;
for ( int j = <num> ; j < A . length ; j ++ ) {
B [ j ] = A [ j ] ;
}
A = B ;
}
}
@Override
public void <unk> ( int i , int <unk> ) {
if ( <unk> > A [ i ] ) {
A [ i ] = <unk> ;
while ( i > <num> && A [ parent ( i ) ] < A [ i ] ) {
swap ( i , parent ( i ) ) ;
i = parent ( i ) ;
}
}
}
@Override
public void <unk> ( int i , int <unk> ) {
if ( <unk> < A [ i ] ) {
A [ i ] = <unk> ;
heapify ( i ) ;
}
}
private void swap ( int i , int j ) {
int temp = A [ i ] ;
A [ i ] = A [ j ] ;
A [ j ] = temp ;
}
}
import <unk> . Nappula ;
import <unk> . <unk> ;
import org . junit . * ;
import static org . junit . Assert . * ;
public class <unk> {
Nappula n ;
<unk> r1 ;
<unk> r2 ;
public <unk> ( ) {
n = new Nappula ( " ) ;
r1 = new <unk> ( ) ;
r2 = new <unk> ( ) ;
}
@BeforeClass
public static void setUpClass ( ) throws Exception {
}
@AfterClass
public static void tearDownClass ( ) throws Exception {
}
@Before
public void setUp ( ) {
}
@After
public void tearDown ( ) {
}
@Test
public void <unk> ( ) {
n . <unk> ( r1 ) ;
assertEquals ( r1 , n . getRuutu ( ) ) ;
n . <unk> ( r2 ) ;
assertEquals ( r2 , n . getRuutu ( ) ) ;
}
}
package GUI ;
import <unk> . <unk> ;
import <unk> . <unk> ;
import <unk> . <unk> ;
import java . awt . * ;
import java . awt . event . * ;
import javax . swing . * ;
public class <unk> extends JFrame {
private <unk> peli ;
private boolean <unk> = false ;
private boolean <unk> = false ;
private boolean <unk> = false ;
private boolean <unk> = false ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private JButton [ ] r = new JButton [ <num> ] ;
private JButton n1 = new JButton ( " ) ;
private JButton n2 = new JButton ( " ) ;
private JButton v1 = new JButton ( " ) ;
private JButton v2 = new JButton ( " ) ;
private JButton info = new JButton ( " ) ;
private JPanel p1 ;
private JPanel p2 ;
private JPanel p3 ;
private JPanel p4 ;
private JPanel p5 ;
private JPanel <unk> ;
private JPanel <unk> ;
public <unk> ( ) {
peli = new <unk> ( ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
r [ i ] = new JButton ( " + ( i + <num> ) ) ;
r [ i ] . setActionCommand ( " + i ) ;
}
p1 = new JPanel ( new GridLayout ( <num> , <num> ) ) ;
for ( int i = <num> ; i >= <num> ; i  ) {
p1 . add ( r [ i ] ) ;
}
p2 = new JPanel ( new GridLayout ( <num> , <num> ) ) ;
for ( int i = <num> ; i >= <num> ; i  ) {
p2 . add ( r [ i ] ) ;
}
p3 = new JPanel ( new GridLayout ( <num> , <num> ) ) ;
for ( int i = <num> ; i <= <num> ; i ++ ) {
p3 . add ( r [ i ] ) ;
}
p4 = new JPanel ( new GridLayout ( <num> , <num> ) ) ;
for ( int i = <num> ; i <= <num> ; i ++ ) {
p4 . add ( r [ i ] ) ;
}
p5 = new JPanel ( new BorderLayout ( ) ) ;
p5 . add ( " , p3 ) ;
p5 . add ( " , n1 ) ;
p5 . add ( " , p2 ) ;
<unk> = new JPanel ( new BorderLayout ( ) ) ;
<unk> . add ( " , p4 ) ;
<unk> . add ( " , n2 ) ;
<unk> . add ( " , p1 ) ;
<unk> = new JPanel ( new GridLayout ( <num> , <num> ) ) ;
<unk> . add ( v1 ) ;
<unk> . add ( info ) ;
<unk> . add ( v2 ) ;
setLayout ( new BorderLayout ( ) ) ;
add ( " , p5 ) ;
add ( " , <unk> ) ;
add ( " , <unk> ) ;
n1 . addActionListener ( new ActionListener ( ) {
@Override
public void actionPerformed ( ActionEvent e ) {
if ( <unk> ) {
peli . <unk> ( ) ;
<unk> = false ;
} else if ( <unk> ) {
<unk> = peli . <unk> ( ) ;
<unk> = false ;
}
<unk> ( ) ;
}
} ) ;
n2 . addActionListener ( new ActionListener ( ) {
@Override
public void actionPerformed ( ActionEvent e ) {
if ( <unk> ) {
peli . <unk> ( ) ;
<unk> = false ;
} else if ( <unk> ) {
<unk> = peli . <unk> ( ) ;
<unk> = false ;
}
<unk> ( ) ;
}
} ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
r [ i ] . addActionListener ( new ActionListener ( ) {
@Override
public void actionPerformed ( ActionEvent e ) {
int <unk> = Integer . parseInt ( e . getActionCommand ( ) ) ;
if ( <unk> ) {
<unk> = peli . <unk> ( ) . <unk> ( ) . get ( <unk> ) ;
<unk> = false ;
} else if ( <unk> ) {
<unk> = peli . <unk> ( ) . <unk> ( ) . get ( <unk> ) ;
<unk> = false ;
}
<unk> ( ) ;
}
} ) ;
}
v1 . addActionListener ( new ActionListener ( ) {
@Override
public void actionPerformed ( ActionEvent e ) {
if ( <unk> ) {
<unk> = peli . <unk> ( ) . <unk> ( ) ;
<unk> = false ;
}
if ( <unk> ) {
<unk> = peli . <unk> ( ) . <unk> ( ) ;
<unk> = false ;
}
<unk> ( ) ;
}
} ) ;
v2 . addActionListener ( new ActionListener ( ) {
@Override
public void actionPerformed ( ActionEvent e ) {
if ( <unk> ) {
<unk> = peli . <unk> ( ) . <unk> ( ) ;
<unk> = false ;
}
if ( <unk> ) {
<unk> = peli . <unk> ( ) . <unk> ( ) ;
<unk> = false ;
}
<unk> ( ) ;
}
} ) ;
}
public void pelaa ( ) {
peli . <unk> ( ) ;
<unk> ( ) ;
while ( peli . <unk> ( ) . isEmpty ( ) ) {
if ( ! peli . <unk> ( ) ) {
peli . <unk> ( ) ;
<unk> ( ) ;
}
<unk> ( ) ;
peli . <unk> ( ) ;
peli . <unk> ( ) ;
}
<unk> ( ) ;
}
public void <unk> ( ) {
for ( int i = <num> ; i < <num> ; i ++ ) {
r [ i ] . setText ( peli . <unk> ( ) . <unk> ( ) . get ( i ) . toString ( ) ) ;
}
v1 . setText ( peli . <unk> ( ) . <unk> ( ) . toString ( ) ) ;
v2 . setText ( peli . <unk> ( ) . <unk> ( ) . toString ( ) ) ;
n1 . setText ( peli . <unk> ( ) + " + peli . <unk> ( ) . toString ( ) ) ;
n2 . setText ( " + peli . <unk> ( ) . toString ( ) ) ;
}
public static void main ( String [ ] args ) {
<unk> i = new <unk> ( ) ;
i . setTitle ( " ) ;
i . pack ( ) ;
i . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
i . setVisible ( true ) ;
i . setSize ( <num> , <num> ) ;
i . pelaa ( ) ;
}
public void <unk> ( ) {
if ( peli . <unk> ( ) . equals ( " ) ) {
n1 . setText ( " ) ;
n2 . setText ( " ) ;
info . setText ( " ) ;
}
if ( peli . <unk> ( ) . equals ( " ) ) {
n1 . setText ( " ) ;
n2 . setText ( " ) ;
info . setText ( " ) ;
}
}
private void <unk> ( ) {
info . setText ( " ) ;
<unk> = true ;
while ( <unk> ) {
}
}
private void <unk> ( ) {
while ( peli . <unk> ( ) && peli . <unk> ( ) && peli . <unk> ( ) . isEmpty ( ) ) {
info . setText ( " ) ;
<unk> = true ;
while ( <unk> ) {
}
info . setText ( " ) ;
<unk> = true ;
while ( <unk> ) {
}
info . setText ( " ) ;
<unk> = true ;
while ( <unk> ) {
}
peli . <unk> ( <unk> , <unk> , <unk> ) ;
peli . <unk> ( ) ;
<unk> ( ) ;
}
}
}
package <unk> ;
public class <unk> extends <unk> {
public <unk> ( int <unk> ) {
<unk> = <unk> ;
}
}
package <unk> ;
import java . util . ArrayList ;
public class <unk> {
private ArrayList < <unk> > ruudut ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
public <unk> ( ) {
ruudut = new ArrayList < <unk> > ( ) ;
for ( int i = <num> ; i <= <num> ; i ++ ) {
<unk> r = new <unk> ( i ) ;
ruudut . add ( r ) ;
}
<unk> = new <unk> ( <num> ) ;
<unk> = new <unk> ( <num> ) ;
<unk> = new <unk> ( <num> ) ;
<unk> = new <unk> ( <num> ) ;
}
public void <unk> ( ArrayList < Nappula > <unk> , ArrayList < Nappula > <unk> ) {
<unk> ( <num> , <num> , ruudut . get ( <num> ) , <unk> ) ;
<unk> ( <num> , <num> , ruudut . get ( <num> ) , <unk> ) ;
<unk> ( <num> , <num> , ruudut . get ( <num> ) , <unk> ) ;
<unk> ( <num> , <num> , ruudut . get ( <num> ) , <unk> ) ;
<unk> ( <num> , <num> , ruudut . get ( <num> ) , <unk> ) ;
<unk> ( <num> , <num> , ruudut . get ( <num> ) , <unk> ) ;
<unk> ( <num> , <num> , ruudut . get ( <num> ) , <unk> ) ;
<unk> ( <num> , <num> , ruudut . get ( <num> ) , <unk> ) ;
}
public void <unk> ( int <unk> , int <unk> , <unk> ruutu , ArrayList < Nappula > <unk> ) {
for ( int i = <unk> ; i < <unk> + <unk> ; i ++ ) {
Nappula n = <unk> . get ( i ) ;
ruutu . asetaNappula ( n ) ;
n . <unk> ( ruutu ) ;
}
}
public ArrayList < <unk> > <unk> ( ) {
return ruudut ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public boolean <unk> ( <unk> <unk> , <unk> <unk> , String <unk> , <unk> <unk> ) {
if ( <unk> . <unk> ( ) . isEmpty ( ) ) {
return false ;
}
if ( ! <unk> . <unk> ( ) . get ( <num> ) . <unk> ( ) . equals ( <unk> ) ) {
return false ;
}
if ( <unk> . <unk> ( ) == true ) {
return false ;
}
if ( <unk> . equals ( <unk> ) || <unk> . equals ( <unk> ) ) {
return <unk> ( <unk> , <unk> , <unk> , <unk> ) ;
}
if ( ! <unk> . <unk> ( ) . isEmpty ( ) && ! <unk> . <unk> ( ) . get ( <num> ) . <unk> ( ) . equals ( <unk> . <unk> ( ) . get ( <num> ) . <unk> ( ) ) && <unk> . <unk> ( ) . size ( ) > <num> ) {
return false ;
}
if ( Math . abs ( <unk> . <unk> ( )  <unk> . <unk> ( ) ) != <unk> . <unk> ( ) ) {
return false ;
}
if ( <unk> . equals ( " ) && <unk> . <unk> ( ) > <unk> . <unk> ( ) ) {
if ( ! <unk> . <unk> ( ) . isEmpty ( ) && ! <unk> . equals ( <unk> ) ) {
return false ;
}
if ( <unk> . <unk> ( ) . size ( ) == <num> && <unk> . <unk> ( ) . get ( <num> ) . <unk> ( ) . equals ( " ) ) {
<unk> ( <unk> . <unk> ( ) . get ( <num> ) , <unk> , <unk> ) ;
}
}
if ( <unk> . equals ( " ) && <unk> . <unk> ( ) < <unk> . <unk> ( ) ) {
if ( ! <unk> . <unk> ( ) . isEmpty ( ) && ! <unk> . equals ( <unk> ) ) {
return false ;
}
if ( <unk> . <unk> ( ) . size ( ) == <num> && <unk> . <unk> ( ) . get ( <num> ) . <unk> ( ) . equals ( " ) ) {
<unk> ( <unk> . <unk> ( ) . get ( <num> ) , <unk> , <unk> ) ;
}
}
<unk> ( <unk> . <unk> ( ) . get ( <num> ) , <unk> , <unk> ) ;
<unk> . <unk> ( true ) ;
return true ;
}
public void <unk> ( Nappula <unk> , <unk> <unk> , <unk> <unk> ) {
<unk> . <unk> ( <unk> ) ;
<unk> . asetaNappula ( <unk> ) ;
<unk> . <unk> ( <unk> ) ;
}
private boolean <unk> ( <unk> <unk> , <unk> <unk> , String <unk> , <unk> <unk> ) {
if ( Math . abs ( <unk> . <unk> ( )  <unk> . <unk> ( ) ) > <unk> . <unk> ( ) ) {
return false ;
}
if ( <unk> . equals ( " ) && <unk> . equals ( <unk> ) && <unk> ( ) ) {
<unk> ( <unk> . <unk> ( ) . get ( <num> ) , <unk> , <unk> ) ;
<unk> . <unk> ( true ) ;
return true ;
}
if ( <unk> . equals ( " ) && <unk> . equals ( <unk> ) && <unk> ( ) ) {
<unk> ( <unk> . <unk> ( ) . get ( <num> ) , <unk> , <unk> ) ;
<unk> . <unk> ( true ) ;
return true ;
}
return false ;
}
private boolean <unk> ( ) {
if ( ! <unk> . <unk> ( ) . isEmpty ( ) ) {
return false ;
}
for ( int i = <num> ; i < <num> ; i ++ ) {
if ( ! ruudut . get ( i ) . <unk> ( ) . isEmpty ( ) && ruudut . get ( i ) . <unk> ( ) . get ( <num> ) . <unk> ( ) . equals ( " ) ) {
return false ;
}
}
return true ;
}
private boolean <unk> ( ) {
if ( ! <unk> . <unk> ( ) . isEmpty ( ) ) {
return false ;
}
for ( int i = <num> ; i < <num> ; i ++ ) {
if ( ! ruudut . get ( i ) . <unk> ( ) . isEmpty ( ) && ruudut . get ( i ) . <unk> ( ) . get ( <num> ) . <unk> ( ) . equals ( " ) ) {
return false ;
}
}
return true ;
}
}
import <unk> . Nappula ;
import <unk> . <unk> ;
import org . junit . * ;
import static org . junit . Assert . * ;
public class <unk> {
<unk> r ;
public <unk> ( ) {
r = new <unk> ( ) ;
}
@BeforeClass
public static void setUpClass ( ) throws Exception {
}
@AfterClass
public static void tearDownClass ( ) throws Exception {
}
@Before
public void setUp ( ) {
}
@After
public void tearDown ( ) {
}
@Test
public void <unk> ( ) {
r . asetaNappula ( new Nappula ( " ) ) ;
assertEquals ( <num> , r . <unk> ( ) . size ( ) ) ;
r . asetaNappula ( new Nappula ( " ) ) ;
assertEquals ( <num> , r . <unk> ( ) . size ( ) ) ;
}
@Test
public void <unk> ( ) {
r . asetaNappula ( new Nappula ( " ) ) ;
r . asetaNappula ( new Nappula ( " ) ) ;
r . <unk> ( r . <unk> ( ) . get ( <num> ) ) ;
assertEquals ( <num> , r . <unk> ( ) . size ( ) ) ;
r . <unk> ( r . <unk> ( ) . get ( <num> ) ) ;
assertEquals ( <num> , r . <unk> ( ) . size ( ) ) ;
}
}
package <unk> ;
public class <unk> implements <unk> {
private <unk> max ;
private int <unk> ;
public <unk> ( ) {
max = null ;
<unk> = <num> ;
}
@Override
public int <unk> ( ) {
if ( max == null ) {
return Integer . MIN_VALUE ;
}
return max . key ;
}
@Override
public int <unk> ( ) {
if ( max == null ) {
return Integer . MIN_VALUE ;
}
<unk> z = max ;
<unk> x = z . child ;
if ( x != null ) {
while ( x . parent != null ) {
x . parent = null ;
x = x . right ;
}
<unk> ( max , x ) ;
}
z . left . right = z . right ;
z . right . left = z . left ;
if ( z == z . right ) {
max = null ;
}
else {
max = z . right ;
<unk> ( ) ;
}
<unk>  ;
return z . key ;
}
private void <unk> ( ) {
<unk> [ ] A = new <unk> [ <unk> ] ;
for ( int i = <num> ; i < A . length ; i ++ ) {
A [ i ] = null ;
}
<unk> w = max ;
boolean first = true ;
while ( w != max || first ) {
<unk> x = w ;
int d = x . degree ;
while ( A [ d ] != null ) {
<unk> y = A [ d ] ;
if ( x . key < y . key ) {
int <unk> = x . degree ;
int <unk> = x . key ;
boolean <unk> = x . mark ;
x . degree = y . degree ;
x . key = y . key ;
x . mark = y . mark ;
y . degree = <unk> ;
y . key = <unk> ;
y . mark = <unk> ;
}
y . left . right = y . right ;
y . right . left = y . left ;
y . left = y ;
y . right = y ;
if ( x . child == null ) {
x . child = y ;
}
else {
<unk> ( x . child , y ) ;
}
x . degree ++ ;
y . mark = false ;
A [ d ] = null ;
d ++ ;
}
w = w . right ;
first = false ;
A [ d ] = x ;
}
max = null ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
if ( A [ i ] != null ) {
A [ i ] . left . right = A [ i ] . right ;
A [ i ] . right . left = A [ i ] . left ;
A [ i ] . parent = null ;
A [ i ] . left = A [ i ] ;
A [ i ] . right = A [ i ] ;
if ( max == null ) {
max = A [ i ] ;
}
else {
<unk> ( max , A [ i ] ) ;
if ( A [ i ] . key > max . key ) {
max = A [ i ] ;
}
}
}
}
}
@Override
public void <unk> ( int k ) {
<unk> s = new <unk> ( k ) ;
s . left = s ;
s . right = s ;
if ( max == null ) {
max = s ;
}
else {
<unk> ( max , s ) ;
if ( s . key > max . key ) {
max = s ;
}
}
<unk> ++ ;
}
private void <unk> ( <unk> a , <unk> b ) {
if ( a == null || b == null ) {
return ;
}
<unk> next = a . right ;
<unk> prev = b . left ;
next . left = prev ;
a . right = b ;
prev . right = next ;
b . left = a ;
}
@Override
public void <unk> ( int i , int <unk> ) {
throw new UnsupportedOperationException ( " ) ;
}
@Override
public void <unk> ( int i , int <unk> ) {
throw new UnsupportedOperationException ( " ) ;
}
}
package <unk> ;
public class <unk> {
private int <unk> ;
private boolean <unk> ;
public <unk> ( ) {
<unk> = <num> ;
}
public int <unk> ( ) {
<unk> = ( int ) ( Math . random ( ) * <num> ) + <num> ;
<unk> ( false ) ;
return <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public boolean <unk> ( ) {
return <unk> ;
}
public void <unk> ( boolean k ) {
<unk> = k ;
}
@Override
public String toString ( ) {
return " + <unk> + ( <unk> ? " : " ) ;
}
}
import <unk> . <unk> ;
import org . junit . * ;
import static org . junit . Assert . * ;
public class <unk> {
<unk> p ;
public <unk> ( ) {
p = new <unk> ( ) ;
}
@BeforeClass
public static void setUpClass ( ) throws Exception {
}
@AfterClass
public static void tearDownClass ( ) throws Exception {
}
@Before
public void setUp ( ) {
p . <unk> ( ) ;
}
@After
public void tearDown ( ) {
}
@Test
public void <unk> ( ) {
assertTrue ( p . <unk> ( ) ) ;
assertFalse ( p . <unk> ( ) ) ;
if ( p . <unk> ( ) . <unk> ( ) > p . <unk> ( ) . <unk> ( ) ) {
assertEquals ( " , p . <unk> ( ) ) ;
}
else {
assertEquals ( " , p . <unk> ( ) ) ;
}
}
package <unk> ;
import java . util . ArrayList ;
public class <unk> {
private <unk> lauta ;
private <unk> <unk> ;
private <unk> <unk> ;
private ArrayList < Nappula > <unk> ;
private ArrayList < Nappula > <unk> ;
private String <unk> ;
private String <unk> ;
private boolean <unk> ;
private boolean <unk> ;
public <unk> ( ) {
<unk> = " ;
<unk> = " ;
<unk> = true ;
<unk> = false ;
lauta = new <unk> ( ) ;
<unk> = new <unk> ( ) ;
<unk> = new <unk> ( ) ;
<unk> = new ArrayList < Nappula > ( ) ;
<unk> = new ArrayList < Nappula > ( ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
<unk> . add ( new Nappula ( " ) ) ;
<unk> . add ( new Nappula ( " ) ) ;
}
}
public void <unk> ( ) {
lauta . <unk> ( <unk> , <unk> ) ;
<unk> = true ;
<unk> = " ;
while ( <unk> . <unk> ( ) == <unk> . <unk> ( ) ) {
<unk> ( ) ;
}
<unk> = false ;
if ( <unk> . <unk> ( ) > <unk> . <unk> ( ) ) {
<unk> = " ;
} else {
<unk> = " ;
}
}
public boolean <unk> ( <unk> <unk> , <unk> <unk> , <unk> <unk> ) {
boolean <unk> = lauta . <unk> ( <unk> , <unk> , <unk> , <unk> ) ;
if ( <unk> && <unk> == true && <unk> . <unk> ( ) == true && <unk> . <unk> ( ) == true ) {
<unk> = false ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( false ) ;
}
return <unk> ;
}
public void <unk> ( ) {
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
if ( <unk> . <unk> ( ) == <unk> . <unk> ( ) ) {
<unk> = true ;
}
}
public <unk> <unk> ( ) {
return <unk> ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( ) {
<unk> = false ;
if ( <unk> . equals ( " ) ) {
<unk> = " ;
} else if ( <unk> . equals ( " ) ) {
<unk> = " ;
}
}
public <unk> <unk> ( ) {
return lauta ;
}
public void <unk> ( ) {
if ( lauta . <unk> ( ) . <unk> ( ) . size ( ) == <num> ) {
<unk> = " ;
}
if ( lauta . <unk> ( ) . <unk> ( ) . size ( ) == <num> ) {
<unk> = " ;
}
}
public String <unk> ( ) {
return <unk> ;
}
public String <unk> ( ) {
return <unk> ;
}
public boolean <unk> ( ) {
return <unk> ;
}
public boolean <unk> ( ) {
return <unk> ;
}
public boolean <unk> ( ) {
return ! <unk> . <unk> ( ) || ! <unk> . <unk> ( ) ;
}
public boolean <unk> ( ) {
if ( <unk> . equals ( " ) ) {
if ( lauta . <unk> ( ) . <unk> ( ) . isEmpty ( ) ) {
return true ;
}
<unk> r = lauta . <unk> ( ) . get ( <unk> . <unk> ( )  <num> ) ;
if ( ! <unk> . <unk> ( ) ) {
if ( <unk> ( r , <unk> ) ) {
return true ;
}
}
r = lauta . <unk> ( ) . get ( <unk> . <unk> ( )  <num> ) ;
if ( ! <unk> . <unk> ( ) ) {
if ( <unk> ( r , <unk> ) ) {
return true ;
}
}
return false ;
} else {
if ( lauta . <unk> ( ) . <unk> ( ) . isEmpty ( ) ) {
return true ;
}
<unk> r = lauta . <unk> ( ) . get ( <num>  <unk> . <unk> ( ) ) ;
if ( ! <unk> . <unk> ( ) ) {
if ( <unk> ( r , <unk> ) ) {
return true ;
}
}
r = lauta . <unk> ( ) . get ( <num>  <unk> . <unk> ( ) ) ;
if ( ! <unk> . <unk> ( ) ) {
if ( <unk> ( r , <unk> ) ) {
return true ;
}
}
return false ;
}
}
private boolean <unk> ( <unk> r , String <unk> ) {
return r . <unk> ( ) . isEmpty ( ) || r . <unk> ( ) . size ( ) == <num> || r . <unk> ( ) . get ( <num> ) . <unk> ( ) . equals ( <unk> ) ;
}
}
package <unk> ;
import java . util . Scanner ;
public class Main {
public static Scanner lukija = new Scanner ( System . in ) ;
public static void main ( String [ ] args ) {
int <unk> ;
int n = <num> ;
<unk> k = null ;
while ( true ) {
try {
System . out . println ( " ) ;
<unk> = lukija . nextInt ( ) ;
}
catch ( Exception e ) {
break ;
}
if ( <unk> > <num> || <unk> < <num> ) {
break ;
}
if ( <unk> == <num> ) {
k = new <unk> ( ) ;
}
else if ( <unk> == <num> ) {
k = new <unk> ( ) ;
}
else if ( <unk> == <num> ) {
k = new <unk> ( ) ;
}
while ( true ) {
try {
System . out . println ( " ) ;
n = lukija . nextInt ( ) ;
if ( n <= <num> ) {
continue ;
}
break ;
}
catch ( Exception e ) {
lukija . nextLine ( ) ;
}
}
long <unk> ;
long <unk> ;
System . gc ( ) ;
<unk> = System . currentTimeMillis ( ) ;
for ( int i = <num> ; i < n ; i ++ ) {
k . <unk> ( ( int ) ( <num> * Math . random ( ) + <num> ) ) ;
}
<unk> = System . currentTimeMillis ( ) ;
System . out . println ( n + " + ( <unk>  <unk> ) + " ) ;
System . gc ( ) ;
<unk> = System . currentTimeMillis ( ) ;
for ( int i = <num> ; i < n ; i ++ ) {
int key = k . <unk> ( ) ;
}
<unk> = System . currentTimeMillis ( ) ;
System . out . println ( n + " + ( <unk>  <unk> ) + " ) ;
System . gc ( ) ;
<unk> = System . currentTimeMillis ( ) ;
for ( int i = <num> ; i < n ; i ++ ) {
int key = k . <unk> ( ) ;
}
<unk> = System . currentTimeMillis ( ) ;
System . out . println ( n + " + ( <unk>  <unk> ) + " ) ;
}
}
}
package <unk> ;
interface <unk> {
public int <unk> ( ) ;
public int <unk> ( ) ;
public void <unk> ( int k ) ;
public void <unk> ( int i , int <unk> ) ;
public void <unk> ( int i , int <unk> ) ;
}
package <unk> ;
public class Nappula {
private String <unk> ;
private <unk> ruutu ;
public Nappula ( String <unk> ) {
this . <unk> = <unk> ;
}
public void <unk> ( <unk> ruutu ) {
this . ruutu = ruutu ;
}
public String <unk> ( ) {
return <unk> ;
}
public <unk> getRuutu ( ) {
return ruutu ;
}
}
package <unk> ;
public class <unk> extends <unk> {
private String <unk> ;
public <unk> ( int <unk> ) {
<unk> = <unk> ;
if ( <unk> % <num> == <num> ) {
<unk> = " ;
}
else {
<unk> = " ;
}
}
}
package <unk> ;
public class <unk> implements <unk> {
private <unk> head ;
public <unk> ( ) {
head = null ;
}
private void <unk> ( <unk> y , <unk> z ) {
y . parent = z ;
y . sibling = z . child ;
z . child = y ;
z . degree ++ ;
}
public <unk> <unk> ( <unk> h1 , <unk> h2 ) {
<unk> h = new <unk> ( ) ;
h . head = <unk> ( h1 , h2 ) ;
if ( h . head == null ) {
return h ;
}
<unk> <unk> = null ;
<unk> x = h . head ;
<unk> <unk> = x . sibling ;
while ( <unk> != null ) {
if ( ( x . degree != <unk> . degree ) || ( <unk> . sibling != null && <unk> . sibling . degree == x . degree ) ) {
<unk> = x ;
x = <unk> ;
}
else if ( x . key >= <unk> . key ) {
x . sibling = <unk> . sibling ;
<unk> ( <unk> , x ) ;
}
else {
if ( <unk> == null ) {
h . head = <unk> ;
}
else {
<unk> . sibling = <unk> ;
}
<unk> ( x , <unk> ) ;
x = <unk> ;
}
<unk> = x . sibling ;
}
return h ;
}
private <unk> <unk> ( <unk> h1 , <unk> h2 ) {
<unk> x = h1 . head ;
<unk> y = h2 . head ;
if ( x == null ) {
return y ;
}
else if ( y == null ) {
return x ;
}
<unk> <unk> ;
if ( x . degree <= y . degree ) {
<unk> = x ;
x = x . sibling ;
}
else {
<unk> = y ;
y = y . sibling ;
}
<unk> z = <unk> ;
while ( x != null && y != null ) {
if ( x . degree <= y . degree ) {
z . sibling = x ;
x = x . sibling ;
}
else {
z . sibling = y ;
y = y . sibling ;
}
z = z . sibling ;
}
if ( x == null ) {
z . sibling = y ;
}
else {
z . sibling = x ;
}
return <unk> ;
}
@Override
public int <unk> ( ) {
if ( head == null ) {
return Integer . MIN_VALUE ;
}
return max ( ) . key ;
}
private <unk> max ( ) {
<unk> y = null ;
<unk> x = head ;
int max = Integer . MIN_VALUE ;
while ( x != null ) {
if ( x . key > max ) {
max = x . key ;
y = x ;
}
x = x . sibling ;
}
return y ;
}
@Override
public int <unk> ( ) {
<unk> max = max ( ) ;
if ( head == null ) {
return Integer . MIN_VALUE ;
}
if ( head == max ) {
head = head . sibling ;
}
else {
<unk> prev = head ;
while ( true ) {
if ( prev . sibling == max ) {
prev . sibling = max . sibling ;
break ;
}
prev = prev . sibling ;
}
}
<unk> h = new <unk> ( ) ;
if ( max . child != null ) {
<unk> prev = null ;
<unk> curr = max . child ;
<unk> next = curr . sibling ;
while ( next != null ) {
curr . sibling = prev ;
prev = curr ;
curr = next ;
next = next . sibling ;
}
curr . sibling = prev ;
h . head = curr ;
}
this . head = <unk> ( this , h ) . head ;
return max . key ;
}
@Override
public void <unk> ( int k ) {
<unk> s = new <unk> ( k ) ;
<unk> h = new <unk> ( ) ;
h . head = s ;
this . head = <unk> ( this , h ) . head ;
}
@Override
public void <unk> ( int i , int <unk> ) {
throw new UnsupportedOperationException ( " ) ;
}
@Override
public void <unk> ( int i , int <unk> ) {
throw new UnsupportedOperationException ( " ) ;
}
}
package <unk> ;
public class <unk> {
public <unk> parent ;
public int key ;
public int degree ;
public <unk> child ;
public <unk> sibling ;
public <unk> ( ) {
parent = null ;
key = <num> ;
degree = <num> ;
child = null ;
sibling = null ;
}
public <unk> ( int key ) {
this ( ) ;
this . key = key ;
}
}
package org . <unk> . plugins . <unk> . core ;
public interface <unk> {
public static final String <unk> = " ;
String <unk> ( ) ;
}
package org . <unk> . plugins . <unk> ;
import org . <unk> . plugins . <unk> . core . <unk> ;
import org . <unk> . support . driver . <unk> ;
import org . <unk> . support . driver . <unk> ;
public class <unk> extends <unk>
implements <unk> {
static {
<unk> . registerDriver ( new <unk> ( ) ) ;
}
@Override
public String getModuleName ( ) {
return " ;
}
@Override
public String <unk> ( ) {
return " ;
}
}
package org . <unk> . plugins . <unk> . core ;
import java . util . ArrayList ;
import java . util . List ;
import java . util . Map ;
import org . springframework . beans . factory . <unk> ;
import org . springframework . beans . factory . InitializingBean ;
import org . springframework . context . ApplicationContext ;
import org . springframework . core . <unk> ;
import org . springframework . web . servlet . ViewResolver ;
import org . springframework . <unk> . mvc . builder . <unk> ;
public class <unk> extends <unk> implements
InitializingBean {
private ApplicationContext ac = null ;
private List < ViewResolver > <unk> = null ;
@Override
public void afterPropertiesSet ( ) throws Exception {
Map < String , ViewResolver > <unk> = <unk> . <unk> (
ac , ViewResolver . class , true , false ) ;
if ( ! <unk> . isEmpty ( ) ) {
this . <unk> = new ArrayList < ViewResolver > ( <unk> . values ( ) ) ;
<unk> . sort ( this . <unk> ) ;
<unk> ( <unk> ) ;
}
}
@Override
public void setApplicationContext ( ApplicationContext applicationContext ) {
ac = applicationContext ;
super . setApplicationContext ( applicationContext ) ;
}
}
package org . <unk> . plugins . <unk> ;
import org . <unk> . support . driver . <unk> ;
import org . <unk> . support . driver . <unk> ;
public class <unk> extends <unk> {
static {
<unk> . registerDriver ( new <unk> ( ) ) ;
}
@Override
public String getModuleName ( ) {
return " ;
}
}
package org . <unk> . plugins . <unk> . core ;
import java . io . IOException ;
import java . util . Enumeration ;
import org . apache . commons . logging . Log ;
import org . apache . commons . logging . LogFactory ;
import org . springframework . beans . factory . InitializingBean ;
import org . springframework . core . io . ClassPathResource ;
import org . springframework . core . io . FileSystemResource ;
import org . springframework . core . io . Resource ;
import org . springframework . util . Assert ;
import org . springframework . <unk> . config . <unk> ;
import org . springframework . <unk> . core . collection . <unk> ;
import org . springframework . <unk> . core . collection . <unk> ;
import org . springframework . <unk> . core . collection . <unk> ;
import org . springframework . <unk> . definition . registry . <unk> ;
import org . springframework . <unk> . definition . registry . <unk> ;
import org . springframework . <unk> . engine . builder . <unk> ;
import org . springframework . <unk> . engine . builder . <unk> ;
import org . springframework . <unk> . engine . builder . <unk> ;
import org . springframework . <unk> . engine . builder . <unk> ;
import org . springframework . <unk> . engine . builder . model . <unk> ;
import org . springframework . <unk> . engine . builder . support . <unk> ;
import org . springframework . <unk> . engine . builder . support . <unk> ;
import org . springframework . <unk> . engine . model . builder . <unk> ;
import org . springframework . <unk> . engine . model . builder . <unk> ;
import org . springframework . <unk> . engine . model . builder . xml . <unk> ;
import org . springframework . <unk> . engine . model . registry . <unk> ;
import org . springframework . <unk> . engine . model . registry . <unk> ;
import org . <unk> . core . util . <unk> ;
import org . <unk> . support . driver . <unk> ;
import org . <unk> . support . driver . resource . jar . <unk> . <unk> ;
import org . <unk> . support . driver . resource . jar . <unk> ;
import org . <unk> . support . util . StringUtils ;
public class <unk> implements InitializingBean {
private <unk> <unk> = null ;
private <unk> <unk> = null ;
private <unk> <unk> = null ;
protected Log log = LogFactory . getLog ( getClass ( ) ) ;
protected final String SLASH = " ;
public void <unk> ( <unk> <unk> ) {
this . <unk> = <unk> ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( <unk> <unk> ) {
this . <unk> = <unk> ;
}
@Override
public void afterPropertiesSet ( ) throws Exception {
Assert . notNull ( <unk> , " ) ;
Assert . notNull ( <unk> , " ) ;
<unk> = ( <unk> ) <unk> . <unk> (
<unk> , " ) ;
Assert . notNull ( <unk> , " ) ;
<unk> ( ) ;
}
protected void <unk> ( ) {
Enumeration < <unk> > <unk> = <unk> . getDrivers ( <unk> . class ) ;
while ( <unk> . hasMoreElements ( ) ) {
<unk> <unk> = <unk> . nextElement ( ) ;
String basePath = <unk> . <unk> ( ) ;
if ( StringUtils . hasText ( basePath ) ) {
basePath = StringUtils . <unk> ( basePath ) ;
if ( basePath . endsWith ( SLASH ) ) {
basePath = basePath . substring ( <num> , basePath . length ( )  <num> ) ;
}
String location = basePath + <unk> . <unk> ;
<unk> resolver = <unk> . <unk> ( <unk> . getClass ( ) ) ;
if ( resolver != null ) {
try {
Resource [ ] <unk> = resolver . getResources ( location ) ;
for ( Resource resource : <unk> ) {
if ( resource . exists ( ) ) {
<unk> <unk> = new <unk> ( <unk> (
resource , basePath ) , resource , <unk> ( ) ) ;
<unk> . <unk> ( <unk> ( <unk> ) ) ;
}
}
} catch ( IOException e ) {
log . error ( " , e ) ;
}
}
}
}
}
protected String <unk> ( Resource <unk> , String basePath ) {
String filePath ;
if ( <unk> instanceof ClassPathResource ) {
filePath = ( ( ClassPathResource ) <unk> ) . getPath ( ) ;
} else if ( <unk> instanceof FileSystemResource ) {
filePath = <unk> (
( ( FileSystemResource ) <unk> ) . getPath ( ) , basePath ) ;
} else if ( <unk> instanceof <unk> ) {
filePath = SLASH + ( ( <unk> ) <unk> ) . <unk> ( ) ;
} else {
return <unk> ( <unk> ) ;
}
int beginIndex = <num> ;
int endIndex = filePath . length ( ) ;
if ( filePath . startsWith ( basePath ) ) {
beginIndex = basePath . length ( ) ;
} else if ( filePath . startsWith ( SLASH + basePath ) ) {
beginIndex = basePath . length ( ) + <num> ;
}
if ( filePath . startsWith ( SLASH , beginIndex ) ) {
beginIndex ++ ;
}
if ( filePath . lastIndexOf ( SLASH ) >= beginIndex ) {
endIndex = filePath . lastIndexOf ( SLASH ) ;
} else {
return <unk> ( <unk> ) ;
}
return filePath . substring ( beginIndex , endIndex ) ;
}
protected String <unk> ( String filePath , String basePath ) {
int <unk> = filePath . lastIndexOf ( basePath ) ;
if ( <unk> !=  <num> ) {
return filePath . substring ( <unk> ) ;
} else {
return filePath ;
}
}
protected String <unk> ( Resource <unk> ) {
return StringUtils . <unk> ( <unk> . getFilename ( ) ) ;
}
protected <unk> <unk> ( ) {
<unk> <unk> = null ;
if ( <unk> . <unk> ( ) ) {
<unk> = new <unk> ( <num> , <num> ) ;
<unk> . put ( " , Boolean . TRUE ) ;
}
return <unk> ;
}
protected <unk> <unk> ( <unk> <unk> ) {
<unk> builder = <unk> ( <unk> ) ;
<unk> <unk> = new <unk> ( <unk> . getId ( ) , <unk> . getAttributes ( ) , <unk> , <unk> ) ;
<unk> <unk> = new <unk> ( builder , <unk> ) ;
return new <unk> ( <unk> ) ;
}
protected <unk> <unk> ( <unk> resource ) {
return new <unk> ( <unk> ( resource ) ) ;
}
protected <unk> <unk> ( <unk> resource ) {
<unk> <unk> = new <unk> ( <unk> ( resource ) ) ;
<unk> . <unk> ( resource . getId ( ) , <unk> ) ;
return <unk> ;
}
protected <unk> <unk> ( <unk> resource ) {
return new <unk> ( resource . getPath ( ) , <unk> ) ;
}
}
package org . <unk> . plugins . <unk> . core ;
import org . apache . commons . logging . Log ;
import org . apache . commons . logging . LogFactory ;
import org . springframework . beans . factory . InitializingBean ;
import org . springframework . <unk> . definition . <unk> ;
import org . springframework . <unk> . definition . <unk> ;
import org . springframework . <unk> . definition . <unk> ;
import org . springframework . <unk> . execution . <unk> ;
import org . springframework . <unk> . execution . <unk> ;
import org . springframework . <unk> . execution . RequestContext ;
import org . springframework . <unk> . security . <unk> ;
public class <unk>
extends
<unk> implements InitializingBean {
private Object listener = null ;
protected Log log = LogFactory . getLog ( getClass ( ) ) ;
@Override
public void <unk> ( RequestContext context , <unk> definition ) {
if ( listener != null ) {
<unk> <unk> = <unk> ( listener ) ;
if ( <unk> != null ) {
<unk> . <unk> ( context , definition ) ;
}
}
}
@Override
public void <unk> ( RequestContext context , <unk> state )
throws <unk> {
if ( listener != null ) {
<unk> <unk> = <unk> ( listener ) ;
if ( <unk> != null ) {
<unk> . <unk> ( context , state ) ;
}
}
}
@Override
public void <unk> ( RequestContext context , <unk> transition ) {
if ( listener != null ) {
<unk> <unk> = <unk> ( listener ) ;
if ( <unk> != null ) {
<unk> . <unk> ( context ,
transition ) ;
}
}
}
@Override
public void afterPropertiesSet ( ) throws Exception {
try {
listener = new <unk> ( ) ;
} catch ( Throwable e ) {
log . debug ( " , e ) ;
}
}
private <unk> <unk> ( Object listener ) {
if ( listener instanceof <unk> ) {
return ( <unk> ) listener ;
}
return null ;
}
}
package me . <unk> . highlighter ;
import java . util . ArrayList ;
import java . util . List ;
import org . bukkit . entity . Player ;
import org . bukkit . event . player . PlayerChatEvent ;
import org . bukkit . event . player . PlayerJoinEvent ;
import org . bukkit . event . EventHandler ;
import org . bukkit . event . Listener ;
import org . getspout . spoutapi . <unk> ;
import org . getspout . spoutapi . player . SpoutPlayer ;
import org . getspout . spoutapi . sound . SoundManager ;
public class <unk> implements Listener {
private Highlighter plugin ;
public <unk> ( Highlighter instance ) {
plugin = instance ;
}
@EventHandler
public void onPlayerChat ( PlayerChatEvent event ) {
SoundManager <unk> = <unk> . <unk> ( ) ;
for ( Player player : event . getRecipients ( ) ) {
SpoutPlayer <unk> = ( SpoutPlayer ) player ;
List < String > <unk> = <unk> . getConfig ( ) . getStringList ( player . getName ( ) ) ;
String [ ] array = <unk> . toArray ( new String [ <unk> . size ( ) ] ) ;
for ( String string : array ) {
if ( event . getMessage ( ) . toLowerCase ( ) . contains ( string . toLowerCase ( ) ) ) {
<unk> . <unk> ( null , <unk> , plugin . getConfig ( ) . getString ( " ) , true ) ;
}
}
}
}
@EventHandler
public void onPlayerJoin ( PlayerJoinEvent event ) {
if ( ! <unk> . getConfig ( ) . isSet ( event . getPlayer ( ) . getName ( ) ) ) {
List < String > newEntry = new ArrayList < String > ( ) ;
newEntry . add ( event . getPlayer ( ) . getName ( ) . toLowerCase ( ) ) ;
<unk> . getConfig ( ) . set ( event . getPlayer ( )
. getName ( ) , newEntry ) ;
<unk> . saveConfig ( ) ;
}
}
}
package me . <unk> . highlighter ;
import java . util . List ;
import org . bukkit . Bukkit ;
import org . bukkit . ChatColor ;
import org . bukkit . command . Command ;
import org . bukkit . command . CommandExecutor ;
import org . bukkit . command . CommandSender ;
import org . bukkit . entity . Player ;
public class <unk> implements CommandExecutor {
private <unk> <unk> ;
public <unk> ( <unk> <unk> ) {
<unk> = <unk> ;
}
@Override
public boolean onCommand ( CommandSender sender , Command command ,
String label , String [ ] args ) {
if ( sender instanceof Player ) {
Player player = ( Player ) sender ;
if ( hasPermission ( " , player ) ) {
if ( args . length == <num> ) {
player . sendMessage ( ChatColor . GREEN + Highlighter . prefix
+ " ) ;
sender . sendMessage ( ChatColor . GREEN
+ " ) ;
sender . sendMessage ( ChatColor . GREEN
+ " ) ;
sender . sendMessage ( ChatColor . GREEN
+ " ) ;
return true ;
} else if ( args . length == <num> && args [ <num> ] . equalsIgnoreCase ( " ) ) {
if ( <unk> . getConfig ( ) . getStringList (
player . getName ( ) ) . isEmpty ( ) ) {
player . sendMessage ( ChatColor . RED + Highlighter . prefix
+ " ) ;
return true ;
}
player . sendMessage ( ChatColor . GREEN + Highlighter . prefix
+ " ) ;
List < String > <unk> = <unk> . getConfig ( )
. getStringList ( player . getName ( ) ) ;
String [ ] array = <unk> . toArray ( new String [ <unk>
. size ( ) ] ) ;
for ( String string : array ) {
player . sendMessage ( ChatColor . DARK_GREEN + " + string . toLowerCase ( ) ) ;
}
return true ;
} else if ( args . length == <num> && args [ <num> ] . equalsIgnoreCase ( " ) ) {
if ( <unk> . getConfig ( ) . getStringList (
player . getName ( ) ) . contains ( args [ <num> ] . toLowerCase ( ) ) ) {
player . sendMessage ( ChatColor . RED + Highlighter . prefix
+ " ) ;
return true ;
}
List < String > newList = <unk> . getConfig ( )
. getStringList ( player . getName ( ) ) ;
newList . add ( args [ <num> ] . toLowerCase ( ) ) ;
<unk> . getConfig ( ) . set (
player . getName ( ) , newList ) ;
<unk> . saveConfig ( ) ;
player . sendMessage ( ChatColor . GREEN + Highlighter . prefix
+ " + args [ <num> ] + " ) ;
return true ;
} else if ( args . length == 2
&& args [ <num> ] . equalsIgnoreCase ( " ) ) {
if ( ! <unk> . getConfig ( ) . getStringList (
player . getName ( ) ) . contains ( args [ <num> ] . toLowerCase ( ) ) ) {
sender . sendMessage ( ChatColor . RED + Highlighter . prefix
+ " ) ;
return true ;
}
List < String > newList = <unk> . getConfig ( )
. getStringList ( player . getName ( ) ) ;
newList . remove ( args [ <num> ] . toLowerCase ( ) ) ;
<unk> . getConfig ( ) . set (
player . getName ( ) , newList ) ;
<unk> . saveConfig ( ) ;
player . sendMessage ( ChatColor . GREEN + Highlighter . prefix
+ " + args [ <num> ] + " ) ;
return true ;
}
sender . sendMessage ( ChatColor . GREEN + Highlighter . prefix
+ " ) ;
sender . sendMessage ( ChatColor . GREEN
+ " ) ;
sender . sendMessage ( ChatColor . GREEN
+ " ) ;
sender . sendMessage ( ChatColor . GREEN
+ " ) ;
return true ;
} else {
sender . sendMessage ( ChatColor . RED + Highlighter . prefix
+ " ) ;
return true ;
}
}
sender . sendMessage ( ChatColor . RED + Highlighter . prefix
+ " ) ;
return true ;
}
private boolean hasPermission ( String name , Player player ) {
if ( player . hasPermission ( name ) || player . isOp ( ) ) {
return true ;
}
return false ;
}
}
package me . <unk> . highlighter ;
import java . io . File ;
import java . io . IOException ;
import java . io . InputStream ;
import java . util . logging . Level ;
import org . bukkit . Bukkit ;
import org . bukkit . configuration . file . FileConfiguration ;
import org . bukkit . configuration . file . YamlConfiguration ;
public class <unk> {
private static FileConfiguration <unk> ;
private static File <unk> ;
private static File <unk> ;
private static Highlighter plugin ;
public <unk> ( Highlighter instance ) {
plugin = instance ;
}
public static void loadConfig ( ) {
if ( <unk> == null ) {
<unk> = new File ( plugin . getDataFolder ( ) , " ) ;
}
<unk> = YamlConfiguration . loadConfiguration ( <unk> ) ;
InputStream defConfigStream = plugin . getResource ( " ) ;
if ( defConfigStream != null ) {
YamlConfiguration defConfig = YamlConfiguration . loadConfiguration ( defConfigStream ) ;
<unk> . setDefaults ( defConfig ) ;
}
}
public static FileConfiguration getConfig ( ) {
if ( <unk> == null ) {
loadConfig ( ) ;
}
return <unk> ;
}
public static void saveConfig ( ) {
if ( <unk> == null || <unk> == null ) {
return ;
}
try {
<unk> . save ( <unk> ) ;
} catch ( IOException ex ) {
plugin . log . severe ( " + <unk> ) ;
}
}
}
package me . <unk> . highlighter ;
import java . util . logging . Logger ;
import org . bukkit . event . Event ;
import org . bukkit . plugin . Plugin ;
import org . bukkit . plugin . PluginManager ;
import org . bukkit . plugin . java . JavaPlugin ;
public class Highlighter extends JavaPlugin {
public static String prefix = " ;
public static String version = " ;
public static Logger log ;
private <unk> <unk> = null ;
public <unk> <unk> = new <unk> ( this ) ;
@Override
public void onDisable ( ) {
log . info ( prefix + " + version ) ;
}
@Override
public void onEnable ( ) {
log = getServer ( ) . getLogger ( ) ;
final PluginManager pm = getServer ( ) . getPluginManager ( ) ;
this . getConfig ( ) ;
if ( this . getConfig ( ) . isSet ( " ) == false ) {
this . saveDefaultConfig ( ) ;
log . info ( " ) ;
}
<unk> . loadConfig ( ) ;
getServer ( ) . getPluginManager ( ) . registerEvents ( new <unk> ( this ) , this ) ;
<unk> = new <unk> ( <unk> ) ;
getCommand ( " ) . setExecutor ( <unk> ) ;
log . info ( prefix + " + version ) ;
}
}
package model ;
import java . math . BigInteger ;
import java . util . Arrays ;
import java . util . Random ;
public class <unk> {
private static int val = <num> ;
private int [ ] sequence = new int [ val ] ;
private Random random = new Random ( ) ;
private int min = <num> ;
private int max = <num> ;
private int M = <num> ;
private int W = <num> ;
public void <unk> ( ) {
for ( int i = <num> ; i < val ; i ++ ) {
sequence [ i ] = random . nextInt ( max  min + <num> ) + min ;
}
Arrays . sort ( sequence ) ;
int <unk> = sequence [ <num> ] + sequence [ <num> ] ;
for ( int i = <num> ; i < val ; i ++ ) {
if ( <unk> >= sequence [ i ] ) {
sequence [ i ] = <unk> + random . nextInt ( <num>  <num> + <num> ) ;
}
<unk> += sequence [ i ] ;
}
System . out . println ( <unk> ) ;
}
public void <unk> ( ) {
Character a = A' ;
String c = Integer . toBinaryString ( a ) ;
}
public int getMin ( ) {
return min ;
}
public void setMin ( int min ) {
this . min = min ;
}
public int getMax ( ) {
return max ;
}
public void setMax ( int max ) {
this . max = max ;
}
}
package extra ;
import java . util . Vector ;
public class <unk> {
public String <unk> ( String msg )
{
char c ;
int j ;
String result = " ;
for ( int i = <num> ; i < msg . length ( ) ; ++ i ) {
c = msg . charAt ( i ) ;
j = ( int ) c ;
result += j ;
}
return result ;
}
public Vector <unk> ( int split , String msg )
{
int j ;
msg = this . <unk> ( msg ) ;
Vector blocks = new Vector ( ) ;
for ( int i = <num> ; i < msg . length ( ) ; )
{
j = i + <num> ;
while ( Integer . valueOf ( msg . substring ( i , j ) ) < split )
{
if ( j + <num> > msg . length ( ) )
{
j ++ ;
break ;
}
j ++ ;
}
j  ;
blocks . addElement ( Integer . valueOf ( msg . substring ( i , j ) ) ) ;
i = j ;
}
return blocks ;
}
public Vector <unk> ( int split , String msg )
{
Vector blocks = new Vector ( ) ;
String ascii = this . <unk> ( msg ) ;
int i = <num> ;
System . out . println ( ) ;
while ( true )
{
if ( i + split < ascii . length ( ) )
blocks . addElement ( ascii . substring ( ( int ) i , ( int ) ( i + split ) ) ) ;
else
{
blocks . addElement ( ascii . substring ( ( int ) i , ascii . length ( ) ) ) ;
break ;
}
i += split ;
}
return blocks ;
}
public void <unk> ( Vector vec )
{
for ( int i = <num> ; i < vec . size ( ) ; i ++ )
{
System . out . println ( vec . elementAt ( i ) ) ;
}
}
}
package controller ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import javax . swing . AbstractAction ;
import model . * ;
import layout . MainWindow ;
public class Controller extends AbstractAction implements ActionListener {
private static final long serialVersionUID = <num> ;
private MainWindow window ;
@Override
public void actionPerformed ( ActionEvent e ) {
if ( e . getActionCommand ( ) . equals ( " ) ) {
if ( window . getMethod ( ) == <num> ) {
if ( window . <unk> ( ) == <num> ) {
String fileName = window . getFileName ( ) ;
} else {
}
}
if ( window . getMethod ( ) == <num> ) {
if ( window . <unk> ( ) == <num> ) {
String fileName = window . getFileName ( ) ;
} else {
}
}
if ( window . getMethod ( ) == <num> ) {
RSA <unk> = new RSA ( ) ;
if ( window . <unk> ( ) . isEmpty ( ) )
{
window . <unk> ( <unk> . <unk> ( ) . toString ( ) ) ;
}
if ( window . <unk> ( ) == <num> ) {
String fileName = window . getFileName ( ) ;
} else {
}
}
} else {
if ( window . getMethod ( ) == <num> ) {
if ( window . <unk> ( ) == <num> ) {
String fileName = window . getFileName ( ) ;
} else {
}
}
if ( window . getMethod ( ) == <num> ) {
if ( window . <unk> ( ) == <num> ) {
String fileName = window . getFileName ( ) ;
} else {
}
}
if ( window . getMethod ( ) == <num> ) {
if ( window . <unk> ( ) == <num> ) {
String fileName = window . getFileName ( ) ;
} else {
}
}
}
}
public Controller ( ) {
window = new MainWindow ( ) ;
window . <unk> ( ) ;
window . repaint ( ) ;
window . setController ( this ) ;
}
}
package model ;
import java . math . BigInteger ;
public class RSA {
BigInteger n ;
public BigInteger <unk> ( )
{
System . out . println ( " ) ;
n = BigInteger . valueOf ( <num> ) ;
return this . n ;
}
}
package layout ;
import java . awt . Color ;
import java . awt . Font ;
import javax . swing . AbstractAction ;
import javax . swing . ButtonGroup ;
import javax . swing . JButton ;
import javax . swing . JFrame ;
import javax . swing . JPanel ;
import javax . swing . JRadioButton ;
import javax . swing . JScrollPane ;
import javax . swing . JTextArea ;
import javax . swing . JTextField ;
import javax . swing . ScrollPaneConstants ;
import javax . swing . UIManager ;
import javax . swing . UnsupportedLookAndFeelException ;
import javax . swing . border . EmptyBorder ;
import javax . swing . border . EtchedBorder ;
import javax . swing . border . TitledBorder ;
import javax . swing . event . ChangeEvent ;
import javax . swing . event . ChangeListener ;
public class MainWindow extends JFrame {
private static final long serialVersionUID = <num> ;
private JPanel contentPane ;
private final ButtonGroup <unk> = new ButtonGroup ( ) ;
private final ButtonGroup <unk> = new ButtonGroup ( ) ;
private JTextArea textArea ;
private JTextArea <unk> ;
private JTextField textField ;
private JRadioButton <unk> ;
private JPanel <unk> ;
private JPanel <unk> ;
private JButton <unk> ;
private JButton <unk> ;
private JTextField key1 ;
private JTextField key2 ;
private JTextField <unk> ;
private final ButtonGroup <unk> = new ButtonGroup ( ) ;
private JRadioButton <unk> ;
public MainWindow ( ) {
<unk> ( ) ;
}
public void <unk> ( ) {
try {
UIManager . setLookAndFeel ( UIManager . getSystemLookAndFeelClassName ( ) ) ;
} catch ( ClassNotFoundException e ) {
e . printStackTrace ( ) ;
} catch ( InstantiationException e ) {
e . printStackTrace ( ) ;
} catch ( IllegalAccessException e ) {
e . printStackTrace ( ) ;
} catch ( UnsupportedLookAndFeelException e ) {
e . printStackTrace ( ) ;
}
setTitle ( " ) ;
setVisible ( true ) ;
setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
setBounds ( <num> , <num> , <num> , <num> ) ;
contentPane = new JPanel ( ) ;
contentPane . setBorder ( new EmptyBorder ( <num> , <num> , <num> , <num> ) ) ;
setContentPane ( contentPane ) ;
contentPane . setLayout ( null ) ;
JPanel panel = new JPanel ( ) ;
panel . setBorder ( new TitledBorder ( new EtchedBorder ( EtchedBorder . LOWERED ,
null , null ) , " , TitledBorder . CENTER , TitledBorder . TOP ,
null , new Color ( <num> , <num> , <num> ) ) ) ;
panel . setBounds ( <num> , <num> , <num> , <num> ) ;
contentPane . add ( panel ) ;
panel . setLayout ( null ) ;
JScrollPane scrollPane = new JScrollPane ( ) ;
scrollPane
. setHorizontalScrollBarPolicy ( ScrollPaneConstants . HORIZONTAL_SCROLLBAR_NEVER ) ;
scrollPane . setBounds ( <num> , <num> , <num> , <num> ) ;
panel . add ( scrollPane ) ;
textArea = new JTextArea ( ) ;
textArea . setLineWrap ( true ) ;
textArea . setFont ( new Font ( " , Font . PLAIN , <num> ) ) ;
scrollPane . setViewportView ( textArea ) ;
JPanel <unk> = new JPanel ( ) ;
<unk> . setBorder ( new TitledBorder ( new EtchedBorder (
EtchedBorder . LOWERED , null , null ) , " ,
TitledBorder . CENTER , TitledBorder . TOP , null , Color . BLUE ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
contentPane . add ( <unk> ) ;
<unk> . setLayout ( null ) ;
JScrollPane <unk> = new JScrollPane ( ) ;
<unk>
. setHorizontalScrollBarPolicy ( ScrollPaneConstants . HORIZONTAL_SCROLLBAR_NEVER ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> ) ;
<unk> = new JTextArea ( ) ;
<unk> . setLineWrap ( true ) ;
<unk> . setFont ( new Font ( " , Font . PLAIN , <num> ) ) ;
<unk> . setViewportView ( <unk> ) ;
<unk> = new JButton ( " ) ;
<unk> . setActionCommand ( " ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
contentPane . add ( <unk> ) ;
<unk> = new JButton ( " ) ;
<unk> . setActionCommand ( " ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
contentPane . add ( <unk> ) ;
JPanel <unk> = new JPanel ( ) ;
<unk> . setBorder ( new TitledBorder ( new EtchedBorder (
EtchedBorder . LOWERED , null , null ) , " ,
TitledBorder . LEADING , TitledBorder . TOP , null , null ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
contentPane . add ( <unk> ) ;
<unk> . setLayout ( null ) ;
JRadioButton <unk> = new JRadioButton ( " , true ) ;
<unk> . setActionCommand ( " ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
JRadioButton <unk> = new JRadioButton ( " ) ;
<unk> . setActionCommand ( " ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
JRadioButton <unk> = new JRadioButton ( " ) ;
<unk> . setActionCommand ( " ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
JPanel <unk> = new JPanel ( ) ;
<unk> . setBorder ( new TitledBorder ( new EtchedBorder (
EtchedBorder . LOWERED , null , null ) , " ,
TitledBorder . LEADING , TitledBorder . TOP , null , null ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
contentPane . add ( <unk> ) ;
<unk> . setLayout ( null ) ;
<unk> = new JRadioButton ( " ) ;
<unk> . addChangeListener ( new ChangeListener ( ) {
public void stateChanged ( ChangeEvent arg0 ) {
if ( <unk> . isSelected ( ) )
<unk> . setVisible ( true ) ;
else
<unk> . setVisible ( false ) ;
}
} ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . setActionCommand ( " ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
JRadioButton <unk> = new JRadioButton ( " , true ) ;
<unk> . setActionCommand ( " ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> = new JPanel ( ) ;
<unk> . setBorder ( new TitledBorder ( null , " ,
TitledBorder . LEADING , TitledBorder . TOP , null , null ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
contentPane . add ( <unk> ) ;
<unk> . setLayout ( null ) ;
<unk> . setVisible ( false ) ;
textField = new JTextField ( ) ;
textField . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( textField ) ;
textField . setColumns ( <num> ) ;
<unk> = new JPanel ( ) ;
<unk> . setBorder ( new TitledBorder ( null , " ,
TitledBorder . LEADING , TitledBorder . TOP , null , null ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
contentPane . add ( <unk> ) ;
<unk> . setLayout ( null ) ;
<unk> . setVisible ( false ) ;
JPanel <unk> = new JPanel ( ) ;
<unk> . setBorder ( new TitledBorder ( null , " , TitledBorder . LEADING ,
TitledBorder . TOP , null , null ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> ) ;
<unk> . setLayout ( null ) ;
key1 = new JTextField ( ) ;
key1 . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( key1 ) ;
key1 . setColumns ( <num> ) ;
JPanel <unk> = new JPanel ( ) ;
<unk> . setBorder ( new TitledBorder ( null , " , TitledBorder . LEADING ,
TitledBorder . TOP , null , null ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> ) ;
<unk> . setLayout ( null ) ;
key2 = new JTextField ( ) ;
key2 . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( key2 ) ;
key2 . setColumns ( <num> ) ;
JPanel <unk> = new JPanel ( ) ;
<unk> . setBorder ( new TitledBorder ( null , " , TitledBorder . LEADING ,
TitledBorder . TOP , null , null ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> ) ;
<unk> . setLayout ( null ) ;
<unk> = new JTextField ( ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> ) ;
<unk> . setColumns ( <num> ) ;
JPanel <unk> = new JPanel ( ) ;
<unk> . setBorder ( new TitledBorder ( null , " , TitledBorder . LEADING ,
TitledBorder . TOP , null , null ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
contentPane . add ( <unk> ) ;
<unk> . setLayout ( null ) ;
JRadioButton <unk> = new JRadioButton ( " ) ;
<unk> . setSelected ( true ) ;
<unk> . add ( <unk> ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> ) ;
<unk> = new JRadioButton ( " ) ;
<unk> . addChangeListener ( new ChangeListener ( ) {
public void stateChanged ( ChangeEvent arg0 ) {
if ( <unk> . isSelected ( ) )
<unk> . setVisible ( true ) ;
else
<unk> . setVisible ( false ) ;
}
} ) ;
<unk> . add ( <unk> ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> ) ;
}
public String getInput ( ) {
return textArea . getText ( ) ;
}
public void setInput ( String in ) {
textArea . setText ( in ) ;
}
public String getOutput ( ) {
return <unk> . getText ( ) ;
}
public void setOutput ( String in ) {
<unk> . setText ( in ) ;
}
public int getMethod ( ) {
if ( <unk> . getSelection ( ) . getActionCommand ( ) . equals ( " ) )
return <num> ;
if ( <unk> . getSelection ( ) . getActionCommand ( ) . equals ( " ) )
return <num> ;
else
return <num> ;
}
public int <unk> ( ) {
if ( <unk> . getSelection ( ) . getActionCommand ( ) . equals ( " ) )
return <num> ;
else
return <num> ;
}
public String getFileName ( ) {
if ( <unk> ( ) == <num> )
return textField . getText ( ) ;
else
return null ;
}
public void setController ( AbstractAction a ) {
<unk> . addActionListener ( a ) ;
<unk> . addActionListener ( a ) ;
}
public String <unk> ( ) {
return key1 . getText ( ) ;
}
public void <unk> ( String key1 ) {
this . key1 . setText ( key1 ) ;
}
public String <unk> ( ) {
return key2 . getText ( ) ;
}
public void <unk> ( String key2 ) {
this . key2 . setText ( key2 ) ;
}
public String <unk> ( ) {
return <unk> . getText ( ) ;
}
public void <unk> ( String <unk> ) {
this . <unk> . setText ( <unk> ) ;
}
}
package extra ;
import java . math . BigInteger ;
public class <unk> {
public long <unk> ( long n )
{
long result ;
result = n ;
for ( long i = <num> ; i * i <= n ; i ++ )
{
if ( n % i == <num> )
result -= result / i ;
while ( n % i == <num> )
n = n / i ;
}
if ( n > <num> ) result -= result / n ;
return result ;
}
public BigInteger <unk> ( BigInteger p , BigInteger q )
{
p = p . subtract ( BigInteger . ONE ) ;
q = q . subtract ( BigInteger . ONE ) ;
return p . multiply ( q ) ;
}
public long <unk> ( long n )
{
long ax , bx , t ;
for ( long i = n ; i > <num> ; i  )
{
ax = i ;
bx = n ;
while ( bx != <num> )
{
t = bx ;
bx = ax % bx ;
ax = t ;
}
if ( ax == <num> )
return i ;
}
return <num> ;
}
}
package application ;
import model . <unk> ;
import controller . Controller ;
public class Application {
public static void main ( String [ ] args ) {
Controller con = new Controller ( ) ;
}
}
public class <unk> {
public static void main ( String args [ ] ) {
System . out . println ( " ) ;
}
}
package com . <unk> . <unk> ;
import java . io . BufferedReader ;
import java . io . File ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . InputStreamReader ;
import java . io . OutputStream ;
import android . os . AsyncTask ;
import android . os . Bundle ;
import android . os . Handler ;
import android . os . PowerManager ;
import android . animation . Animator ;
import android . animation . AnimatorSet ;
import android . animation . ObjectAnimator ;
import android . app . Activity ;
import android . app . ProgressDialog ;
import android . graphics . BitmapFactory ;
import android . graphics . Rect ;
import android . util . Log ;
import android . view . GestureDetector ;
import android . view . MotionEvent ;
import android . view . View ;
import android . view . ViewGroup . LayoutParams ;
import android . view . Window ;
import android . view . WindowManager ;
import android . view . animation . Animation ;
import android . view . animation . Transformation ;
import android . widget . CheckBox ;
import android . widget . CompoundButton ;
import android . widget . ImageView ;
import android . widget . LinearLayout ;
import android . widget . RelativeLayout ;
import android . widget . <unk> ;
import android . widget . TextView ;
import android . widget . Toast ;
public class <unk> extends Activity {
private static int <unk> = <num> ;
private static String TAG = " ;
private static float <unk> = <num> ;
private static float <unk> = <num> ;
private static int <unk> = <num> ;
private static String <unk> = " ;
private static String <unk> = " ;
private static String <unk> = " ;
private static String <unk> = " ;
private static String <unk> = " ;
private static String <unk> = " ;
private static String <unk> = " ;
ImageView mImage ;
ImageView mButton ;
View <unk> ;
Animator <unk> = null ;
boolean <unk> = false ;
Handler mHandler = new Handler ( ) ;
Handler <unk> = new Handler ( ) ;
LinearLayout <unk> ;
TextView <unk> ;
TextView <unk> ;
CheckBox <unk> ;
RelativeLayout <unk> ;
ImageView <unk> ;
GestureDetector gd ;
int <unk> ;
int <unk> ;
TextView <unk> ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
requestWindowFeature ( Window . FEATURE_NO_TITLE ) ;
getWindow ( ) . setFlags ( WindowManager . LayoutParams . FLAG_FULLSCREEN ,
WindowManager . LayoutParams . FLAG_FULLSCREEN ) ;
setContentView ( R . layout . <unk> ) ;
<unk> = BitmapFactory . decodeResource ( getResources ( ) , R . drawable . back ) . getHeight ( ) ;
mImage = ( ImageView ) findViewById ( R . id . imageView1 ) ;
mButton = ( ImageView ) findViewById ( R . id . <unk> ) ;
<unk> = findViewById ( R . id . <unk> ) ;
<unk> = ( LinearLayout ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( CheckBox ) findViewById ( R . id . <unk> ) ;
<unk> = ( RelativeLayout ) findViewById ( R . id . <unk> ) ;
<unk> = ( ImageView ) findViewById ( R . id . separator ) ;
<unk> = ( TextView ) findViewById ( R . id . manual ) ;
mButton . setOnTouchListener ( new View . OnTouchListener ( ) {
Rect mRect ;
boolean <unk> = false ;
public boolean onTouch ( View v , MotionEvent event ) {
Log . v ( TAG , " ) ;
if ( mButton . getAlpha ( ) != <num> ) {
return false ;
}
switch ( event . getAction ( ) ) {
case MotionEvent . ACTION_DOWN :
mRect = new Rect ( <num> , <num> , ( int ) mButton . getWidth ( ) , ( int ) mButton . getHeight ( ) ) ;
<unk> ( ) ;
<unk> . postDelayed ( <unk> , <unk> * <num> ) ;
<unk> = false ;
break ;
case MotionEvent . ACTION_UP :
if ( ! <unk> && ! <unk> ) {
Toast . makeText ( <unk> . this , " , Toast . LENGTH_SHORT ) . show ( ) ;
}
if ( ! <unk> ) {
<unk> ( ) ;
<unk> . removeCallbacks ( <unk> ) ;
} else {
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
}
<unk> = false ;
break ;
case MotionEvent . ACTION_MOVE :
if ( ! mRect . contains ( ( int ) event . getX ( ) , ( int ) event . getY ( ) ) && ! <unk> ) {
<unk> ( ) ;
<unk> = true ;
<unk> . removeCallbacks ( <unk> ) ;
<unk> = false ;
}
}
return true ;
}
} ) ;
<unk> . setOnCheckedChangeListener ( new CompoundButton . OnCheckedChangeListener ( ) {
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) {
if ( isChecked ) {
<unk> ( ) ;
} else {
<unk> ( ) ;
}
}
} ) ;
gd = new GestureDetector ( this , new GestureDetector . OnGestureListener ( ) {
public boolean onSingleTapUp ( MotionEvent e ) {
return false ;
}
public void onShowPress ( MotionEvent e ) {
}
public boolean onScroll ( MotionEvent e1 , MotionEvent e2 , float distanceX ,
float distanceY ) {
return false ;
}
public void onLongPress ( MotionEvent e ) {
}
public boolean onFling ( MotionEvent e1 , MotionEvent e2 , float velocityX ,
float velocityY ) {
if ( mImage . getLayoutParams ( ) . height != <unk> ) {
if ( velocityY <= <num> ) {
<unk> a = new <unk> ( true ) ;
a . setDuration ( <num> ) ;
mImage . startAnimation ( a ) ;
} else {
<unk> a = new <unk> ( false ) ;
a . setDuration ( <num> ) ;
mImage . startAnimation ( a ) ;
}
}
return true ;
}
public boolean onDown ( MotionEvent e ) {
return false ;
}
} ) ;
<unk> . setOnTouchListener ( new View . OnTouchListener ( ) {
float <unk> =  <num> ;
public boolean onTouch ( View v , MotionEvent event ) {
MotionEvent ev = MotionEvent . obtain ( event . getDownTime ( ) , event . getEventTime ( ) , event . getAction ( ) , event . getRawX ( ) , event . getRawY ( ) , event . getPressure ( ) , event . getSize ( ) , event . getMetaState ( ) , event . <unk> ( ) , event . <unk> ( ) , event . getDeviceId ( ) , event . <unk> ( ) ) ;
boolean res = gd . onTouchEvent ( ev ) ;
switch ( event . getAction ( ) ) {
case MotionEvent . ACTION_DOWN :
<unk> = event . getRawY ( ) ;
<unk> . setImageResource ( R . drawable . <unk> ) ;
break ;
case MotionEvent . ACTION_MOVE :
float diff = event . getRawY ( )  <unk> ;
LayoutParams lp = mImage . getLayoutParams ( ) ;
if ( lp . height + diff > <unk> && lp . height < <unk> ) {
diff = <unk>  lp . height ;
}
if ( <unk> !=  <num> && lp . height + diff >= <num> && lp . height + diff <= <unk> ) {
lp . height += diff ;
mImage . requestLayout ( ) ;
<unk> += diff ;
}
break ;
case MotionEvent . ACTION_UP :
<unk> =  <num> ;
<unk> . setImageResource ( R . drawable . <unk> ) ;
if ( ! res ) {
<unk> a = new <unk> ( true ) ;
a . setDuration ( <num> ) ;
mImage . startAnimation ( a ) ;
}
}
return true ;
}
} ) ;
new <unk> ( ) . execute ( ) ;
}
Runnable <unk> = new Runnable ( ) {
public void run ( ) {
Log . v ( TAG , " ) ;
<unk> = true ;
}
} ;
private void <unk> ( ) {
Log . v ( TAG , " ) ;
<unk> ( ) ;
AnimatorSet set = new AnimatorSet ( ) ;
set . setDuration ( <unk> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( <unk> , " , <unk> . getAlpha ( ) , <num> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( <unk> , " , <unk> . getAlpha ( ) , <num> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( <unk> , " , <unk> . getAlpha ( ) , <num> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( <unk> , " , <unk> . getAlpha ( ) , <num> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( mImage , " , mImage . getAlpha ( ) , <num> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( <unk> , " , mImage . getAlpha ( ) , <num> ) ;
AnimatorSet <unk> = new AnimatorSet ( ) ;
<unk> . playTogether ( <unk> , <unk> , <unk> , <unk> ) ;
<unk> . addListener ( new Animator . AnimatorListener ( ) {
public void onAnimationStart ( Animator animation ) {
}
public void onAnimationRepeat ( Animator animation ) {
}
public void onAnimationEnd ( Animator animation ) {
<unk> . setVisibility ( View . INVISIBLE ) ;
<unk> . setVisibility ( View . INVISIBLE ) ;
mImage . setVisibility ( View . INVISIBLE ) ;
}
public void onAnimationCancel ( Animator animation ) {
}
} ) ;
AnimatorSet set2 = new AnimatorSet ( ) ;
set2 . playTogether ( <unk> , <unk> ) ;
set . <unk> ( <unk> , set2 ) ;
set . start ( ) ;
<unk> = set ;
}
private void <unk> ( ) {
Log . v ( TAG , " ) ;
<unk> ( ) ;
AnimatorSet set = new AnimatorSet ( ) ;
set . setDuration ( <unk> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( <unk> , " , <unk> . getAlpha ( ) , <num> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( <unk> , " , <unk> . getAlpha ( ) , <num> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( <unk> , " , <unk> . getAlpha ( ) , <num> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( <unk> , " , <unk> . getAlpha ( ) , <num> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( mImage , " , mImage . getAlpha ( ) , <num> ) ;
Animator <unk> = ObjectAnimator . ofFloat ( <unk> , " , mImage . getAlpha ( ) , <num> ) ;
set . playTogether ( <unk> , <unk> , <unk> , <unk> , <unk> , <unk> ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
mImage . setVisibility ( View . VISIBLE ) ;
set . start ( ) ;
<unk> = set ;
}
private void <unk> ( ) {
Log . v ( TAG , " ) ;
if ( <unk> != null && <unk> . isRunning ( ) ) {
<unk> . cancel ( ) ;
}
}
private void <unk> ( ) {
Log . v ( TAG , " ) ;
Animator a = ObjectAnimator . ofFloat ( <unk> , " , <num> , <num> ) ;
a . setDuration ( <num> ) ;
a . start ( ) ;
}
private void <unk> ( ) {
Log . v ( TAG , " ) ;
Animator a = ObjectAnimator . ofFloat ( <unk> , " , <num> , <num> ) ;
a . setDuration ( <num> ) ;
<unk> . setVisibility ( View . VISIBLE ) ;
a . start ( ) ;
}
private void <unk> ( ) {
Log . v ( TAG , " ) ;
Animator a = ObjectAnimator . ofFloat ( mButton , " , mButton . getAlpha ( ) , <num> ) ;
a . setDuration ( <num> ) ;
a . start ( ) ;
}
private void <unk> ( ) {
Log . v ( TAG , " ) ;
Animator a = ObjectAnimator . ofFloat ( mButton , " , mButton . getAlpha ( ) , <num> ) ;
a . setDuration ( <num> ) ;
a . start ( ) ;
}
private void <unk> ( ) {
Log . v ( TAG , " ) ;
try {
<unk> ( <unk> ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
return ;
}
new <unk> ( ) . execute ( ) ;
}
private void <unk> ( ) {
Log . v ( TAG , " ) ;
ObjectAnimator <unk> = ObjectAnimator . ofFloat ( <unk> , " , <unk> . getAlpha ( ) , <unk> ) ;
<unk> . setDuration ( <num> ) ;
final ObjectAnimator repeatable = ObjectAnimator . ofFloat ( <unk> , " , <unk> , <unk> ) ;
repeatable . setDuration ( <unk> ) ;
repeatable . setRepeatCount ( ObjectAnimator . INFINITE ) ;
repeatable . setRepeatMode ( ObjectAnimator . REVERSE ) ;
<unk> . addListener ( new Animator . AnimatorListener ( ) {
public void onAnimationStart ( Animator animation ) {
}
public void onAnimationRepeat ( Animator animation ) {
}
public void onAnimationEnd ( Animator animation ) {
repeatable . start ( ) ;
}
public void onAnimationCancel ( Animator animation ) {
}
} ) ;
<unk> . start ( ) ;
}
class <unk> extends Animation {
int <unk> ;
boolean <unk> ;
public <unk> ( boolean hide ) {
<unk> = hide ;
}
@Override
protected void applyTransformation ( float interpolatedTime , Transformation t ) {
int newHeight ;
if ( <unk> ) {
newHeight = ( int ) ( <unk> * ( <num>  interpolatedTime ) ) ;
} else {
newHeight = ( int ) ( <unk> + ( <unk>  <unk> ) * interpolatedTime ) ;
}
mImage . getLayoutParams ( ) . height = newHeight ;
mImage . requestLayout ( ) ;
}
@Override
public void initialize ( int width , int height , int parentWidth , int parentHeight ) {
super . initialize ( width , height , parentWidth , parentHeight ) ;
<unk> = height ;
}
@Override
public boolean willChangeBounds ( ) {
return true ;
}
}
private void <unk> ( int resId ) throws IOException {
InputStream s = getResources ( ) . openRawResource ( resId ) ;
File tmp = File . createTempFile ( " , " ) ;
OutputStream out = new FileOutputStream ( tmp ) ;
byte buf [ ] = new byte [ <num> ] ;
int len ;
while ( ( len = s . read ( buf ) ) > <num> ) {
out . write ( buf , <num> , len ) ;
}
out . close ( ) ;
s . close ( ) ;
<unk> ( true ) ;
<unk> ( " + tmp . getAbsolutePath ( ) + " + <unk> ) ;
<unk> ( " + <unk> ) ;
<unk> ( false ) ;
tmp . delete ( ) ;
}
private String <unk> ( String cmd ) {
StringBuilder builder = new StringBuilder ( ) ;
String line = new String ( ) ;
try {
ProcessBuilder <unk> = new ProcessBuilder ( " ) ;
<unk> . redirectErrorStream ( true ) ;
Process p = <unk> . start ( ) ;
p . getOutputStream ( ) . write ( ( cmd + " ) . getBytes ( ) ) ;
p . getOutputStream ( ) . write ( " . getBytes ( ) ) ;
p . waitFor ( ) ;
InputStream input = p . getInputStream ( ) ;
BufferedReader reader = new BufferedReader ( new InputStreamReader ( input ) ) ;
while ( ( line = reader . readLine ( ) ) != null ) {
builder . append ( line ) ;
}
return builder . toString ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
return " ;
}
private void <unk> ( boolean rw ) {
if ( rw ) {
<unk> ( " ) ;
} else {
<unk> ( " ) ;
}
}
class <unk> extends AsyncTask < Void , String , Void > {
ProgressDialog dialog ;
@Override
protected void onPreExecute ( ) {
super . onPreExecute ( ) ;
dialog = ProgressDialog . show ( <unk> . this , " , " ) ;
dialog . setCancelable ( false ) ;
}
@Override
protected void onProgressUpdate ( String . . . values ) {
super . onProgressUpdate ( values ) ;
dialog . setMessage ( values [ values . length  <num> ] ) ;
}
@Override
protected Void doInBackground ( Void . . . params ) {
<unk> ( " + <unk> ) ;
return null ;
}
@Override
protected void onPostExecute ( Void result ) {
super . onPostExecute ( result ) ;
dialog . dismiss ( ) ;
PowerManager pm = ( PowerManager ) getSystemService ( POWER_SERVICE ) ;
pm . reboot ( " ) ;
}
}
class <unk> extends AsyncTask < Void , String , String > {
@Override
protected void onProgressUpdate ( String . . . values ) {
super . onProgressUpdate ( values ) ;
}
@Override
protected String doInBackground ( Void . . . arg0 ) {
Log . i ( TAG , " ) ;
<unk> ( " + <unk> + " + <unk> ) ;
Log . i ( TAG , " ) ;
String res = <unk> ( " + <unk> ) ;
Log . i ( TAG , " + res ) ;
return res ;
}
@Override
protected void onPostExecute ( String res ) {
super . onPostExecute ( res ) ;
if ( res . isEmpty ( ) ) {
<unk> . setText ( " ) ;
return ;
}
if ( res . contains ( " ) ) {
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> = R . raw . <unk> ;
} else if ( res . contains ( " ) || res . contains ( " ) ) {
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> = R . raw . <unk> ;
} else {
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> = R . raw . <unk> ;
}
<unk> ( ) ;
<unk> ( ) ;
}
}
}
package blocks ;
import org . eclipse . core . runtime . Status ;
import org . eclipse . jface . resource . ImageDescriptor ;
import org . eclipse . ui . plugin . AbstractUIPlugin ;
import org . osgi . framework . BundleContext ;
public class Activator extends AbstractUIPlugin {
public static final String PLUGIN_ID = " ;
private static Activator plugin ;
public Activator ( ) {
}
public void start ( BundleContext context ) throws Exception {
super . start ( context ) ;
plugin = this ;
}
public void stop ( BundleContext context ) throws Exception {
plugin = null ;
super . stop ( context ) ;
}
public static Activator getDefault ( ) {
return plugin ;
}
public static ImageDescriptor getImageDescriptor ( String path ) {
return imageDescriptorFromPlugin ( PLUGIN_ID , path ) ;
}
public void log ( String msg ) {
log ( msg , null ) ;
}
public void log ( String msg , Exception e ) {
getLog ( ) . log ( new Status ( Status . INFO , PLUGIN_ID , Status . OK , msg , e ) ) ;
}
}
package com . <unk> . <unk> ;
import android . app . Activity ;
import android . content . Intent ;
import android . os . Bundle ;
import android . view . View ;
import android . view . View . OnClickListener ;
public class <unk> extends Activity implements OnClickListener {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
View <unk> = findViewById ( R . id . button1 ) ;
<unk> . setOnClickListener ( this ) ;
View <unk> = findViewById ( R . id . button2 ) ;
<unk> . setOnClickListener ( this ) ;
View <unk> = findViewById ( R . id . button3 ) ;
<unk> . setOnClickListener ( this ) ;
View <unk> = findViewById ( R . id . button4 ) ;
<unk> . setOnClickListener ( this ) ;
View <unk> = findViewById ( R . id . button5 ) ;
<unk> . setOnClickListener ( this ) ;
View aboutButton = findViewById ( R . id . button6 ) ;
aboutButton . setOnClickListener ( this ) ;
}
@Override
public void onClick ( View v ) {
switch ( v . getId ( ) ) {
case R . id . button1 :
Intent j = new Intent ( this , <unk> . class ) ;
j . putExtra ( com . <unk> . <unk> . <unk> . URL ,
" ) ;
startActivity ( j ) ;
break ;
case R . id . button2 :
Intent k = new Intent ( this , <unk> . class ) ;
k . putExtra ( com . <unk> . <unk> . <unk> . URL ,
" ) ;
startActivity ( k ) ;
break ;
case R . id . button3 :
Intent l = new Intent ( this , <unk> . class ) ;
l . putExtra ( com . <unk> . <unk> . <unk> . URL ,
" ) ;
startActivity ( l ) ;
break ;
case R . id . button4 :
Intent m = new Intent ( this , <unk> . class ) ;
m . putExtra ( com . <unk> . <unk> . <unk> . URL ,
" ) ;
startActivity ( m ) ;
break ;
case R . id . button5 :
Intent n = new Intent ( this , <unk> . class ) ;
n . putExtra ( com . <unk> . <unk> . <unk> . URL ,
" ) ;
startActivity ( n ) ;
break ;
case R . id . button6 :
Intent o = new Intent ( this , <unk> . class ) ;
o . putExtra ( com . <unk> . <unk> . <unk> . URL ,
" ) ;
startActivity ( o ) ;
break ;
}
}
package com . <unk> . <unk> ;
import android . app . Activity ;
import android . app . ProgressDialog ;
import android . os . Bundle ;
import android . webkit . WebChromeClient ;
import android . webkit . WebView ;
import android . util . Log ;
public class <unk> extends Activity {
public static final String URL = " ;
private static final String TAG = " ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
String <unk> = getIntent ( ) . getStringExtra ( URL ) ;
Log . i ( TAG , " + <unk> ) ;
WebView webview = new WebView ( this ) ;
setContentView ( webview ) ;
webview . loadUrl ( <unk> ) ;
final Activity activity = this ;
final ProgressDialog progressDialog = new ProgressDialog ( activity ) ;
progressDialog . <unk> ( ProgressDialog . <unk> ) ;
progressDialog . setMessage ( " ) ;
progressDialog . setCancelable ( false ) ;
webview . setWebChromeClient ( new WebChromeClient ( ) {
public void onProgressChanged ( WebView view , int progress ) {
progressDialog . show ( ) ;
progressDialog . setProgress ( <num> ) ;
activity . setProgress ( progress * <num> ) ;
progressDialog . incrementProgressBy ( progress ) ;
if ( progress == <num> && progressDialog . isShowing ( ) )
progressDialog . dismiss ( ) ;
}
} ) ;
}
package com . <unk> . <unk> ;
public final class R {
public static final class attr {
}
public static final class color {
public static final int background = <num> ;
}
public static final class drawable {
public static final int icon = <num> ;
}
public static final class id {
public static final int button1 = <num> ;
public static final int button2 = <num> ;
public static final int button3 = <num> ;
public static final int button4 = <num> ;
public static final int button5 = <num> ;
public static final int button6 = <num> ;
}
public static final class layout {
public static final int main = <num> ;
public static final int <unk> = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int hello = <num> ;
}
public static final class style {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
}
import java . util . * ;
public class Vertex {
String <unk> ;
String <unk> ;
String <unk> ;
int <unk> ;
int <unk> ;
int <unk> ;
int <unk> ;
boolean <unk> ;
double identity ;
int <unk> ;
int <unk> ;
int <unk> ;
double <unk> ;
double <unk> ;
int <unk> ;
int <unk> ;
int <unk> ;
int <unk> ;
int <unk> ;
int <unk> ;
int <unk> ;
double <unk> ;
HashMap < String , Vertex > <unk> = null ;
HashMap < String , Vertex > <unk> = null ;
TreeMap < Integer , <unk> > <unk> = null ;
public <unk> <unk> = null ;
public Vertex ( String <unk> , String <unk> , int <unk> ,
int <unk> , int <unk> , int <unk> , int <unk> ,
TreeMap < Integer , <unk> > <unk> , <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public Vertex ( String <unk> , String <unk> , double identity ,
int <unk> , int <unk> , int <unk> ,
int <unk> , int <unk> , int <unk> , int <unk> ,
double value , double <unk> , boolean <unk> ,
TreeMap < Integer , <unk> > <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . identity = identity ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = value ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = new HashMap < String , Vertex > ( ) ;
this . <unk> = new HashMap < String , Vertex > ( ) ;
this . <unk> = <unk> ;
this . <unk> = this . <unk> + " + this . <unk> + "
+ this . <unk> + " + this . <unk> + "
+ this . <unk> ;
}
public String <unk> ( ) {
return <unk> ;
}
public void <unk> ( ) {
<unk> = <unk>  <unk> ;
<unk> = <unk>  <num> ;
if ( true == this . <unk> ) {
<unk> = <unk>  <unk> ;
<unk> = <unk>  <num> ;
} else {
<unk> = <unk>  <num> ;
<unk> = <unk>  <unk> ;
}
<unk> = ( int ) ( <unk> * ( identity / <num> ) ) ;
}
public double <unk> ( ) {
double <unk> = <num> ;
if ( <unk> < <unk> )
<unk> = <unk> ;
else
<unk> = <unk> ;
double <unk> = <num> ;
if ( <unk> < <unk> )
<unk> = <unk> ;
else
<unk> = <unk> ;
double <unk> = <unk> + <unk> ;
double <unk> = <num> ;
<unk> = ( <unk> + <unk>
* <unk> )
/ ( <unk> + <unk> ) ;
if ( true == Double . isNaN ( <unk> ) )
{
System . out . printf ( " ) ;
System . exit ( <num> ) ;
}
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public void <unk> ( int <unk> ) {
int start = <num> ;
int end = <num> ;
if ( <num> == <unk> ) {
start = this . <unk> ;
end = this . <unk> ;
} else if ( <num> == <unk> ) {
start = this . <unk> ;
end = this . <unk> ;
} else if ( <num> == <unk> ) {
start = <num> ;
end = this . <unk> ;
} else if ( <num> == <unk> ) {
start = <num> ;
end = this . <unk> ;
}
Set < Integer > keySet = <unk> . keySet ( ) ;
Iterator < Integer > it = keySet . iterator ( ) ;
while ( true == it . hasNext ( ) ) {
int nextKey = it . next ( ) ;
<unk> <unk> = <unk> . get ( nextKey ) ;
int <unk> = <unk> . <unk> ;
int <unk> = <unk> . <unk> ;
int <unk> = <unk> . <unk> ;
int <unk> = <unk> . <unk> ;
String <unk> = <unk> . <unk> ;
int <unk> = <num> ;
int <unk> = <num> ;
if ( <unk> >= start ) {
if ( <unk> > end ) {
continue ;
} else if ( <unk> <= end ) {
<unk> = <unk> ;
<unk> = <unk> ;
} else if ( <unk> > end ) {
<unk> = <unk> ;
<unk> = <unk>  ( <unk>  end ) ;
}
} else if ( <unk> < start ) {
if ( <unk> < start ) {
continue ;
} else if ( end < <unk> ) {
<unk> = <unk> + ( start  <unk> ) ;
<unk> = <unk>  ( <unk>  end ) ;
} else if ( end >= <unk> ) {
<unk> = <unk> + ( start  <unk> ) ;
<unk> = <unk> ;
}
}
System . out . println ( "
+ this . <unk> ) ;
Fragment <unk> = <unk> . <unk> . <unk> . get ( <unk> ) ;
<unk> . <unk> ( <unk> , <unk> ,
this . <unk> , this . <unk> ,
this . <unk> , this . <unk> ) ;
}
}
public TreeMap < Integer , <unk> > <unk> ( ) {
TreeMap < Integer , <unk> > <unk> = new TreeMap < Integer , <unk> > ( ) ;
int <unk> = this . <unk>  <num> ;
if ( <num> == <unk> )
return null ;
Set < Integer > keys = <unk> . keySet ( ) ;
Iterator < Integer > it = keys . iterator ( ) ;
while ( true == it . hasNext ( ) ) {
int next = it . next ( ) ;
<unk> <unk> = <unk> . get ( next ) ;
<unk> <unk> = new <unk> (
<unk> . <unk> , <unk> . <unk> ,
<unk> . <unk> , <unk> . <unk> ,
<unk> . <unk> ) ;
if ( <unk> . <unk> <= <unk> ) {
<unk> . put ( <unk> . <unk> ,
<unk> ) ;
} else {
if ( <unk> . <unk> <= <unk> ) {
int <unk> = <unk> . <unk>
<unk> ;
<unk> . <unk> = <unk> ;
<unk> . <unk> -= <unk> ;
<unk> . put ( <unk> . <unk> ,
<unk> ) ;
}
break ;
}
}
return <unk> ;
}
public TreeMap < Integer , <unk> > <unk> ( ) {
TreeMap < Integer , <unk> > <unk> = new TreeMap < Integer , <unk> > ( ) ;
int <unk> = this . <unk> + <num> ;
if ( <unk> == this . <unk> + <num> ) {
return null ;
}
Set < Integer > keys = <unk> . keySet ( ) ;
Iterator < Integer > it = keys . iterator ( ) ;
while ( true == it . hasNext ( ) ) {
int next = it . next ( ) ;
<unk> <unk> = <unk> . get ( next ) ;
<unk> <unk> = new <unk> (
<unk> . <unk> , <unk> . <unk> ,
<unk> . <unk> , <unk> . <unk> ,
<unk> . <unk> ) ;
if ( <unk> . <unk> < <unk> ) {
continue ;
} else {
if ( <unk> . <unk> >= <unk> ) {
<unk> . <unk> -= ( <unk>  <num> ) ;
<unk> . <unk> -= ( <unk>  <num> ) ;
} else {
int <unk> = <unk>
<unk> . <unk> ;
<unk> . <unk> = <num> ;
<unk> . <unk> -= ( <unk>  <num> ) ;
<unk> . <unk> += <unk> ;
}
<unk> . put ( <unk> . <unk> ,
<unk> ) ;
}
}
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
}
class <unk> {
String <unk> ;
int <unk> ;
int <unk> ;
int <unk> ;
int <unk> ;
public <unk> ( String <unk> , int <unk> ,
int <unk> , int <unk> , int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
}
import java . util . Iterator ;
import java . util . Set ;
import java . util . TreeMap ;
import java . util . TreeSet ;
public class <unk> {
public <unk> ( int <unk> , int <unk> , int <unk> ) {
<unk> = <unk> ;
start = <unk> ;
end = <unk> ;
length = end  length + <num> ;
<unk> = new TreeMap < Integer , Integer > ( ) ;
}
int getStart ( )
{
return start ;
}
int getEnd ( )
{
return end ;
}
int getLength ( )
{
return length ;
}
public void <unk> ( int <unk> , int <unk> ) {
if ( <unk> > end || start > <unk> )
{
return ;
}
else
{
<unk> = start > <unk> ? start : <unk> ;
<unk> = end < <unk> ? end : <unk> ;
}
if ( false == <unk> . containsKey ( <unk> ) )
{
<unk> . put ( <unk> , <unk> ) ;
}
else
{
int <unk> = <unk> . get ( <unk> ) ;
if ( <unk> > <unk> )
{
<unk> . remove ( <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
}
}
}
public void <unk> ( )
{
Set < Integer > keys = <unk> . keySet ( ) ;
if ( <num> >= keys . size ( ) )
return ;
Iterator < Integer > it = keys . iterator ( ) ;
TreeMap < Integer , Integer > <unk> = new TreeMap < Integer , Integer > ( ) ;
int <unk> =  <num> ;
int <unk> =  <num> ;
while ( true == it . hasNext ( ) )
{
int <unk> = it . next ( ) ;
int <unk> = <unk> . get ( <unk> ) ;
if ( <unk> ==  <num> && <unk> ==  <num> )
{
<unk> = <unk> ;
<unk> = <unk> ;
<unk> . put ( <unk> , <unk> ) ;
}
else
{
if ( <unk> >= <unk>  <num> )
{
<unk> . remove ( <unk> ) ;
<unk> = ( <unk> > <unk> ) ? <unk> : <unk> ;
<unk> . put ( <unk> , <unk> ) ;
}
else
{
<unk> = <unk> ;
<unk> = <unk> ;
<unk> . put ( <unk> , <unk> ) ;
}
}
}
<unk> = <unk> ;
}
int <unk> ( )
{
Set < Integer > keys = <unk> . keySet ( ) ;
Iterator < Integer > it = keys . iterator ( ) ;
int count = <num> ;
while ( true == it . hasNext ( ) )
{
int <unk> = it . next ( ) ;
int <unk> = <unk> . get ( <unk> ) ;
int <unk> = <unk>  <unk> + <num> ;
count += <unk> ;
}
return count ;
}
static int <unk> ( <unk> first , <unk> second )
{
int <unk> =  <num> ;
int <unk> = first . getStart ( ) ;
int <unk> = first . getEnd ( ) ;
<unk> <unk> = new <unk> ( <unk> , <unk> , <unk> ) ;
TreeMap < Integer , Integer > <unk> = first . <unk> ;
Set < Integer > <unk> = <unk> . keySet ( ) ;
Iterator < Integer > <unk> = <unk> . iterator ( ) ;
while ( true == <unk> . hasNext ( ) )
{
int firstStart = <unk> . next ( ) ;
int firstEnd = <unk> . get ( firstStart ) ;
TreeMap < Integer , Integer > <unk> = second . <unk> ;
Set < Integer > <unk> = <unk> . keySet ( ) ;
Iterator < Integer > <unk> = <unk> . iterator ( ) ;
while ( true == <unk> . hasNext ( ) )
{
int <unk> = <unk> . next ( ) ;
int <unk> = <unk> . get ( <unk> ) ;
if ( <unk> > firstEnd || firstStart > <unk> )
{
continue ;
}
else
{
int <unk> = ( firstStart > <unk> ) ? firstStart : <unk> ;
int <unk> = ( firstEnd < <unk> ) ? firstEnd : <unk> ;
<unk> . <unk> ( <unk> , <unk> ) ;
}
}
}
<unk> . <unk> ( ) ;
int <unk> = <unk> . <unk> ( ) ;
return <unk> ;
}
int <unk> ;
int start ;
int end ;
int length ;
TreeMap < Integer , Integer > <unk> = null ;
}
import java . util . * ;
import java . io . * ;
import java . util . regex . * ;
public class <unk> {
HashMap < Integer , <unk> > <unk> = null ;
HashMap < Integer , <unk> > <unk> = null ;
void <unk> ( String <unk> , String <unk> , String <unk> ,
String <unk> ) {
<unk> ( <unk> , <unk> ) ;
<unk> ( <unk> , <unk> ) ;
<unk> ( <unk> ) ;
}
void <unk> ( String <unk> ) {
Set < Integer > <unk> = <unk> . keySet ( ) ;
Iterator < Integer > it = <unk> . iterator ( ) ;
int <unk> = <num> ;
int <unk> = <num> ;
int <unk> = <num> ;
while ( true == it . hasNext ( ) ) {
int id = it . next ( ) ;
<unk> <unk> = <unk> . get ( id ) ;
if ( true == <unk> . containsKey ( id ) ) {
<unk> <unk> = <unk> . get ( id ) ;
int <unk> = <unk> . <unk> ( <unk> , <unk> ) ;
int <unk> = <unk> . <unk> ( ) ;
int <unk> = <unk> . <unk> ( ) ;
<unk> += <unk> ;
<unk> += ( <unk>  <unk> ) ;
<unk> += ( <unk>  <unk> ) ;
} else {
int <unk> = <unk> . <unk> ( ) ;
<unk> += <unk> ;
}
}
PrintWriter outFile = null ;
try {
outFile = new PrintWriter ( new FileWriter ( <unk> , true ) ) ;
} catch ( Exception e ) {
}
System . out . println ( " + <unk> ) ;
System . out . println ( " + <unk> ) ;
System . out . println ( " + <unk> ) ;
String <unk> = <unk> + " + <unk> + "
+ <unk> ;
outFile . println ( <unk> ) ;
try {
outFile . close ( ) ;
} catch ( Exception e ) {
}
}
void <unk> ( String <unk> , String <unk> ) {
BufferedReader <unk> = null ;
BufferedReader <unk> = null ;
<unk> = new HashMap < Integer , <unk> > ( ) ;
try {
<unk> = new BufferedReader ( new FileReader ( <unk> ) ) ;
} catch ( FileNotFoundException e ) {
e . printStackTrace ( ) ;
}
Vector < String > vec = new Vector < String > ( ) ;
String regex = null ;
Pattern pat = null ;
Matcher mat = null ;
String line = null ;
regex = " ;
pat = Pattern . compile ( regex ) ;
try {
while ( null != ( line = <unk> . readLine ( ) ) ) {
mat = pat . matcher ( line ) ;
if ( true == mat . find ( ) ) {
vec . add ( line ) ;
}
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
try {
<unk> . close ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
regex = null ;
pat = null ;
mat = null ;
line = null ;
regex = " ;
pat = Pattern . compile ( regex ) ;
Iterator < String > <unk> = vec . iterator ( ) ;
while ( true == <unk> . hasNext ( ) ) {
line = <unk> . next ( ) ;
mat = pat . matcher ( line ) ;
if ( true == mat . find ( ) ) {
int <unk> = Integer . parseInt ( mat . group ( <num> ) ) ;
int start = Integer . parseInt ( mat . group ( <num> ) ) ;
int length = Integer . parseInt ( mat . group ( <num> ) ) ;
int end = start + length  <num> ;
<unk> <unk> = new <unk> ( <unk> , start ,
end ) ;
<unk> . put ( <unk> , <unk> ) ;
}
}
try {
<unk> = new BufferedReader ( new FileReader ( <unk> ) ) ;
} catch ( FileNotFoundException e ) {
e . printStackTrace ( ) ;
}
regex = " ;
pat = Pattern . compile ( regex ) ;
try {
while ( null != ( line = <unk> . readLine ( ) ) ) {
mat = pat . matcher ( line ) ;
if ( true == mat . find ( ) ) {
int <unk> = Integer . parseInt ( mat . group ( <num> ) ) ;
int startPos = <unk> . get ( <unk> ) . getStart ( ) ;
int start = startPos + Integer . parseInt ( mat . group ( <num> ) )  <num> ;
int end = startPos + Integer . parseInt ( mat . group ( <num> ) )  <num> ;
<unk> temp = <unk> . get ( <unk> ) ;
temp . <unk> ( start , end ) ;
}
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
try {
<unk> . close ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
Set < Integer > <unk> = <unk> . keySet ( ) ;
Iterator < Integer > it = <unk> . iterator ( ) ;
while ( true == it . hasNext ( ) ) {
int id = it . next ( ) ;
<unk> . get ( id ) . <unk> ( ) ;
}
}
void <unk> ( String <unk> , String <unk> ) {
<unk> = new HashMap < Integer , <unk> > ( ) ;
BufferedReader <unk> = null ;
try {
<unk> = new BufferedReader ( new FileReader ( <unk> ) ) ;
} catch ( FileNotFoundException e ) {
e . printStackTrace ( ) ;
}
Vector < String > vec = new Vector < String > ( ) ;
String regex = null ;
Pattern pat = null ;
Matcher mat = null ;
String line = null ;
regex = " ;
pat = Pattern . compile ( regex ) ;
try {
while ( null != ( line = <unk> . readLine ( ) ) ) {
mat = pat . matcher ( line ) ;
if ( true == mat . find ( ) ) {
vec . add ( line ) ;
}
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
try {
<unk> . close ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
regex = null ;
pat = null ;
mat = null ;
line = null ;
Iterator < String > <unk> = vec . iterator ( ) ;
regex = " ;
pat = Pattern . compile ( regex ) ;
while ( true == <unk> . hasNext ( ) ) {
line = <unk> . next ( ) ;
mat = pat . matcher ( line ) ;
if ( true == mat . find ( ) ) {
int <unk> = Integer . parseInt ( mat . group ( <num> ) ) ;
int start = Integer . parseInt ( mat . group ( <num> ) ) ;
int length = Integer . parseInt ( mat . group ( <num> ) ) ;
int end = start + length  <num> ;
<unk> <unk> = new <unk> ( <unk> , start ,
end ) ;
<unk> . put ( <unk> , <unk> ) ;
}
}
BufferedReader <unk> = null ;
try {
<unk> = new BufferedReader ( new FileReader ( <unk> ) ) ;
} catch ( FileNotFoundException e ) {
e . printStackTrace ( ) ;
}
regex = " ;
pat = Pattern . compile ( regex ) ;
try {
while ( null != ( line = <unk> . readLine ( ) ) ) {
mat = pat . matcher ( line ) ;
if ( true == mat . find ( ) ) {
int start = Integer . parseInt ( mat . group ( <num> ) ) ;
int end = Integer . parseInt ( mat . group ( <num> ) ) ;
Set < Integer > <unk> = <unk> . keySet ( ) ;
Iterator < Integer > it = <unk> . iterator ( ) ;
while ( true == it . hasNext ( ) ) {
int id = it . next ( ) ;
<unk> temp = <unk> . get ( id ) ;
temp . <unk> ( start , end ) ;
}
}
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
try {
<unk> . close ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
Set < Integer > <unk> = <unk> . keySet ( ) ;
Iterator < Integer > it = <unk> . iterator ( ) ;
while ( true == it . hasNext ( ) ) {
int id = it . next ( ) ;
<unk> . get ( id ) . <unk> ( ) ;
}
}
public static void main ( String [ ] args ) {
<unk> ac = new <unk> ( ) ;
ac . <unk> ( args [ <num> ] , args [ <num> ] , args [ <num> ] , args [ <num> ] ) ;
}
}
import java . util . * ;
public class Path {
public Path ( Vector < Vertex > <unk> , double <unk> , String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
double <unk> ;
Vector < Vertex > <unk> ;
String <unk> ;
}
import java . util . * ;
public class <unk> {
Vector < Vertex > <unk> = null ;
HashMap < String , Graph > <unk> = null ;
<unk> <unk> = null ;
double <unk> ;
double <unk> ;
double <unk> ;
double <unk> ;
double <unk> ;
double <unk> ;
int <unk> = <num> ;
int <unk> ;
int <unk> ;
public <unk> ( <unk> <unk> , int <unk> ) {
<unk> = new HashMap < String , Graph > ( ) ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public void <unk> ( Vector < Vertex > <unk> , String <unk> ) {
<unk> = <unk> ;
Set < String > keySet = <unk> . <unk> . keySet ( ) ;
Iterator < String > it = keySet . iterator ( ) ;
int <unk> = <num> ;
while ( true == it . hasNext ( ) )
{
<unk> ++ ;
System . out . println ( " + <unk> ) ;
String <unk> = it . next ( ) ;
if ( false == <unk> . containsKey ( <unk> ) )
{
Graph <unk> = new Graph ( <unk> , this , <unk> , <unk> ) ;
<unk> . <unk> ( <unk> , <unk> , <unk> , <unk> , <unk> , <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
}
}
System . out . println ( " ) ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ )
{
Vertex <unk> = <unk> . get ( i ) ;
String <unk> = <unk> . <unk> ( ) ;
<unk> . get ( <unk> ) . addVertex ( <unk> ) ;
}
System . out . println ( " ) ;
Set < String > <unk> = <unk> . keySet ( ) ;
it = <unk> . iterator ( ) ;
int <unk> = <num> ;
while ( true == it . hasNext ( ) )
{
<unk> ++ ;
String <unk> = it . next ( ) ;
Graph <unk> = <unk> . get ( <unk> ) ;
<unk> . <unk> ( ) ;
System . out . println ( " + <unk> ) ;
}
System . out . println ( " ) ;
}
public Path <unk> ( ) {
Set < String > <unk> = <unk> . keySet ( ) ;
Iterator < String > it = <unk> . iterator ( ) ;
double <unk> = <num> ;
Path <unk> = null ;
while ( true == it . hasNext ( ) )
{
String <unk> = it . next ( ) ;
Graph <unk> = <unk> . get ( <unk> ) ;
Path localPath = <unk> . <unk> ( ) ;
if ( null == localPath )
continue ;
if ( null == <unk> || localPath . <unk> > <unk> )
{
<unk> = localPath . <unk> ;
<unk> = localPath ;
}
}
return <unk> ;
}
public Path <unk> ( Path <unk> ) {
Vector < Vertex > <unk> = <unk> . <unk> ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ )
{
String <unk> = <unk> . get ( i ) . <unk> ;
Set < String > <unk> = <unk> . keySet ( ) ;
Iterator < String > it = <unk> . iterator ( ) ;
while ( true == it . hasNext ( ) )
{
String <unk> = it . next ( ) ;
Graph <unk> = <unk> . get ( <unk> ) ;
if ( true == <unk> . <unk> ( <unk> ) )
{
<unk> . <unk> ( <unk> ) ;
}
}
}
return <unk> ;
}
public void <unk> ( Vector < Vertex > <unk> ) {
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ )
{
Vertex <unk> = <unk> . get ( i ) ;
String <unk> = <unk> . <unk> ( ) ;
int <unk> = <unk> . get ( <unk> ) . addVertex ( <unk> ) ;
<unk> . get ( <unk> ) . <unk> ( <unk> , <unk> ) ;
}
}
public void <unk> ( double <unk> , double <unk> , double <unk> ,
double <unk> , double <unk> , double <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
}
import java . util . * ;
public class Graph {
String <unk> = null ;
<unk> <unk> = null ;
<unk> <unk> = null ;
int <unk> ;
HashMap < String , Fragment > <unk> = null ;
HashSet < String > <unk> = null ;
HashMap < String , Vertex > <unk> = null ;
HashMap < String , Vertex > <unk> = null ;
HashMap < String , Vertex > <unk> = null ;
HashMap < String , Vertex > <unk> = null ;
HashMap < String , Vertex > <unk> = null ;
HashMap < String , HashSet < String >> <unk> = null ;
HashMap < String , HashSet < String >> <unk> = null ;
HashMap < String , HashSet < String >> <unk> = null ;
double <unk> ;
double <unk> ;
double <unk> ;
double <unk> ;
double <unk> ;
double <unk> ;
int <unk> ;
public Graph ( String <unk> , <unk> graphs , <unk> <unk> , int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = graphs ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
<unk> = <unk> . <unk> ( ) . get ( <unk> ) . <unk> ;
<unk> = <unk> . <unk> ( ) ;
<unk> = new HashMap < String , Vertex > ( ) ;
<unk> = new HashMap < String , Vertex > ( ) ;
<unk> = new HashMap < String , Vertex > ( ) ;
<unk> = new HashMap < String , Vertex > ( ) ;
<unk> = new HashMap < String , Vertex > ( ) ;
<unk> = new HashMap < String , HashSet < String >> ( ) ;
<unk> = new HashMap < String , HashSet < String >> ( ) ;
<unk> = new HashSet < String > ( ) ;
<unk> = new HashMap < String , HashSet < String >> ( ) ;
}
public int addVertex ( Vertex <unk> ) {
int <unk> = <unk> . <unk> ;
int <unk> = <unk> . <unk> ;
<unk> . <unk> ( ) ;
int <unk> = <num> ;
if ( true == <unk> . <unk> ) {
if ( <num> == <unk> && <unk> == <unk> ) {
<unk> = <num> ;
<unk> . put ( <unk> . <unk> , <unk> ) ;
} else if ( <num> == <unk> && <unk> < <unk> ) {
<unk> = <num> ;
<unk> . put ( <unk> . <unk> , <unk> ) ;
} else if ( <num> < <unk> && <unk> == <unk> ) {
<unk> = <num> ;
<unk> . put ( <unk> . <unk> , <unk> ) ;
} else if ( <num> < <unk> && <unk> < <unk> ) {
<unk> = <num> ;
<unk> . put ( <unk> . <unk> , <unk> ) ;
}
} else {
if ( <unk> == <unk> && <num> == <unk> ) {
<unk> = <num> ;
<unk> . put ( <unk> . <unk> , <unk> ) ;
} else if ( <unk> == <unk> && <unk> > <num> ) {
<unk> = <num> ;
<unk> . put ( <unk> . <unk> , <unk> ) ;
} else if ( <unk> < <unk> && <unk> == <num> ) {
<unk> = <num> ;
<unk> . put ( <unk> . <unk> , <unk> ) ;
} else if ( <unk> < <unk> && <unk> > <num> ) {
<unk> = <num> ;
<unk> . put ( <unk> . <unk> , <unk> ) ;
}
}
<unk> . put ( <unk> . <unk> , <unk> ) ;
if ( false == <unk> . contains ( <unk> . <unk> ) )
<unk> . add ( <unk> . <unk> ) ;
if ( false == <unk> . containsKey ( <unk> . <unk> ) )
{
HashSet < String > temp = new HashSet < String > ( ) ;
<unk> . put ( <unk> . <unk> , temp ) ;
}
HashSet < String > local = <unk> . get ( <unk> . <unk> ) ;
local . add ( <unk> . <unk> ) ;
return <unk> ;
}
public void <unk> ( ) {
<unk> ( <unk> , <unk> ) ;
<unk> ( <unk> , <unk> ) ;
<unk> ( <unk> , <unk> ) ;
<unk> ( <unk> , <unk> ) ;
}
private void <unk> (
HashMap < String , Vertex > <unk> ,
HashMap < String , Vertex > <unk> ) {
Set < String > <unk> = null ;
Set < String > <unk> = null ;
Iterator < String > <unk> = null ;
Iterator < String > <unk> = null ;
<unk> = <unk> . keySet ( ) ;
<unk> = <unk> . iterator ( ) ;
while ( true == <unk> . hasNext ( ) ) {
String <unk> = <unk> . next ( ) ;
Vertex <unk> = <unk> . get ( <unk> ) ;
<unk> = <unk> . keySet ( ) ;
<unk> = <unk> . iterator ( ) ;
while ( true == <unk> . hasNext ( ) ) {
String <unk> = <unk> . next ( ) ;
Vertex <unk> = <unk> . get ( <unk> ) ;
boolean <unk> = <unk> ( <unk> , <unk> ) ;
if ( true == <unk> ) {
if ( false == <unk> . containsKey ( <unk> ) ) {
HashSet < String > <unk> = new HashSet < String > ( ) ;
<unk> . put ( <unk> , <unk> ) ;
}
HashSet < String > <unk> = <unk>
. get ( <unk> ) ;
<unk> . add ( <unk> ) ;
if ( false == <unk> . containsKey ( <unk> ) ) {
HashSet < String > <unk> = new HashSet < String > ( ) ;
<unk> . put ( <unk> , <unk> ) ;
}
HashSet < String > <unk> = <unk>
. get ( <unk> ) ;
<unk> . add ( <unk> ) ;
}
}
}
}
private boolean <unk> ( Vertex <unk> , Vertex <unk> ) {
if ( <unk> . <unk> != <unk> . <unk> )
return false ;
if ( false == <unk> . <unk> . equals ( <unk> . <unk> ) )
{
double <unk> = <num> ;
int <unk> = <unk> . <unk> ;
int <unk> = <unk> . <unk> ;
double <unk> = <unk> > <unk> ? <unk> : <unk> ;
double <unk> = <unk> < <unk> ? <unk> : <unk> ;
double <unk> = <unk>  <unk> * <unk> ;
if ( <unk> > <unk> )
return false ;
if ( true == <unk> . <unk> ) {
if ( <unk> . <unk> <= <unk> . <unk> )
return false ;
if ( <unk> . <unk> > <unk> . <unk> ) {
int <unk> = <unk> . <unk>
<unk> . <unk> ;
if ( <unk> > <unk> )
return false ;
} else {
int <unk> = <unk> . <unk>
<unk> . <unk> ;
if ( <unk> > <unk> )
return false ;
}
} else {
if ( <unk> . <unk> >= <unk> . <unk> )
return false ;
if ( <unk> . <unk> < <unk> . <unk> ) {
int <unk> = <unk> . <unk>
<unk> . <unk> ;
if ( <unk> > <unk> )
return false ;
} else {
int <unk> = <unk> . <unk>
<unk> . <unk> ;
if ( <unk> > <unk> )
return false ;
}
}
}
else
{
if ( true == <unk> . <unk> )
{
if ( <unk> . <unk> <= <unk> . <unk> )
return false ;
if ( <unk> . <unk> <= <unk> . <unk> )
return false ;
if ( <unk> . <unk> < <unk> . <unk>
&& <unk> . <unk> < <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int <unk> = <unk> . <unk>  <unk> . <unk> ;
if ( <unk> > <unk> )
return false ;
if ( <unk> > <unk> )
return false ;
}
else if ( <unk> . <unk> <= <unk> . <unk>
&& <unk> . <unk> <= <unk> . <unk>
&& <unk> . <unk> < <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int <unk> = <unk> . <unk>  <unk> . <unk> ;
if ( <unk> > <unk> )
return false ;
if ( <unk> > <unk> )
return false ;
}
else if ( <unk> . <unk> < <unk> . <unk>
&& <unk> . <unk> <= <unk> . <unk>
&& <unk> . <unk> <= <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int <unk> = <unk> . <unk>  <unk> . <unk> ;
if ( <unk> > <unk> )
return false ;
if ( <unk> > <unk> )
return false ;
}
else
{
return false ;
}
}
else
{
if ( <unk> . <unk> <= <unk> . <unk> )
return false ;
if ( <unk> . <unk> >= <unk> . <unk> )
return false ;
if ( <unk> . <unk> < <unk> . <unk>
&& <unk> . <unk> > <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int <unk> = <unk> . <unk>  <unk> . <unk> ;
if ( <unk> > <unk> )
return false ;
if ( <unk> > <unk> )
return false ;
}
else if ( <unk> . <unk> <= <unk> . <unk>
&& <unk> . <unk> <= <unk> . <unk>
&& <unk> . <unk> > <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int <unk> = <unk> . <unk>  <unk> . <unk> ;
if ( <unk> > <unk> )
return false ;
if ( <unk> > <unk> )
return false ;
}
else if ( <unk> . <unk> < <unk> . <unk>
&& <unk> . <unk> >= <unk> . <unk>
&& <unk> . <unk> >= <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int <unk> = <unk> . <unk>  <unk> . <unk> ;
if ( <unk> > <unk> )
return false ;
if ( <unk> > <unk> )
return false ;
}
else
{
return false ;
}
}
}
<unk> . <unk> ++ ;
if ( <unk> . <unk> . equals ( <unk> . <unk> ) )
{
}
return true ;
}
public Path <unk> ( ) {
Vertex <unk> = <unk> ( ) ;
if ( null == <unk> )
return null ;
Vector < Vertex > <unk> = new Vector < Vertex > ( ) ;
<unk> . add ( <unk> ) ;
String <unk> = <unk> . <unk> ;
Set < String > <unk> = <unk> . get ( <unk> ) ;
int <unk> = <num> ;
while ( null != <unk> ) {
String <unk> = <unk> (
<unk> , <unk> ) ;
if ( null != <unk> ) {
if ( true == <unk> . contains ( <unk>
. get ( <unk> ) ) )
break ;
<unk> = <unk> ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . add ( <unk> . get ( <unk> ) ) ;
} else {
break ;
}
<unk> ++ ;
}
<unk> = <unk> . <unk> ;
<unk> = <unk> . get ( <unk> ) ;
int <unk> = <num> ;
while ( null != <unk> ) {
String <unk> = <unk> (
<unk> , <unk> ) ;
if ( null != <unk> ) {
if ( true == <unk> . contains ( <unk>
. get ( <unk> ) ) )
break ;
<unk> = <unk> ;
<unk> = <unk> . get ( <unk> ) ;
<unk> . add ( <num> , <unk> . get ( <unk> ) ) ;
} else {
break ;
}
<unk> ++ ;
}
if ( <num> == <unk> . size ( ) )
{
return new Path ( <unk> , <unk> . <unk> , <unk> ) ;
}
double <unk> = <unk> ( <unk> ) ;
return new Path ( <unk> , <unk> , <unk> ) ;
}
private String <unk> ( String <unk> ,
Set < String > <unk> ) {
Iterator < String > it = <unk> . iterator ( ) ;
String <unk> = null ;
double <unk> = <num> ;
while ( true == it . hasNext ( ) ) {
String <unk> = it . next ( ) ;
if ( <unk> . get ( <unk> ) . <unk> < <unk> )
continue ;
double <unk> = <unk> ( <unk> ,
<unk> ) ;
if ( null == <unk> || <unk> > <unk> ) {
<unk> = <unk> ;
<unk> = <unk> ;
}
}
return <unk> ;
}
private String <unk> ( String <unk> ,
Set < String > <unk> ) {
Iterator < String > it = <unk> . iterator ( ) ;
String <unk> = null ;
double <unk> = <num> ;
while ( true == it . hasNext ( ) ) {
String <unk> = it . next ( ) ;
if ( <unk> . get ( <unk> ) . <unk> < <unk> )
continue ;
double <unk> = <unk> ( <unk> ,
<unk> ) ;
if ( null == <unk> || <unk> > <unk> ) {
<unk> = <unk> ;
<unk> = <unk> ;
}
}
return <unk> ;
}
private double <unk> ( String <unk> , String <unk> ) {
double <unk> = <num> ;
Vertex <unk> = <unk> . get ( <unk> ) ;
Vertex <unk> = <unk> . get ( <unk> ) ;
double <unk> = <num> ;
double leftOver = <unk> . <unk>
+ <unk> . <unk> ;
if ( false == <unk> . <unk> . equals ( <unk> . <unk> ) )
{
int <unk> = <unk> . <unk> ;
int <unk> = <unk> . <unk> ;
double <unk> = <unk> > <unk> ? <unk> : <unk> ;
double <unk> = <unk> < <unk> ? <unk> : <unk> ;
if ( true == <unk> . <unk> ) {
if ( <unk> . <unk> > <unk> . <unk> ) {
int <unk> = <unk> . <unk>
<unk> . <unk> ;
double <unk> = <unk> < <unk> ? <unk>
: <unk> ;
double <unk> = <unk> > <unk> ? <unk>
: <unk> ;
double <unk> = <unk> . <unk>
+ <unk> . <unk>
+ <unk> * ( <unk> + leftOver ) ;
double <unk> = <unk> . <unk>
+ <unk> . <unk> + <unk> + leftOver ;
<unk> = <unk> / <unk> ;
} else {
int <unk> = <unk> . <unk>
<unk> . <unk> ;
double <unk> = <unk>
* ( ( <unk> . <unk> + <unk> . <unk> )
/ ( <unk> . <unk> + <unk> . <unk> ) ) ;
double <unk> = <unk> . <unk>
+ <unk> . <unk>  <unk>
+ <unk> * leftOver ;
double <unk> = <unk> . <unk>
+ <unk> . <unk> + <unk>
<unk> + leftOver ;
<unk> = <unk> / <unk> ;
}
} else {
if ( <unk> . <unk> < <unk> . <unk> ) {
int <unk> = <unk> . <unk>
<unk> . <unk> ;
double <unk> = <unk> < <unk> ? <unk>
: <unk> ;
double <unk> = <unk> > <unk> ? <unk>
: <unk> ;
double <unk> = <unk> . <unk>
+ <unk> . <unk>
+ <unk> * ( <unk> + leftOver ) ;
double <unk> = <unk> . <unk>
+ <unk> . <unk> + <unk> + leftOver ;
<unk> = <unk> / <unk> ;
} else {
int <unk> = <unk> . <unk>
<unk> . <unk> ;
double <unk> = <unk>
* ( ( <unk> . <unk> + <unk> . <unk> )
/ ( <unk> . <unk> + <unk> . <unk> ) ) ;
double <unk> = <unk> . <unk>
+ <unk> . <unk>  <unk>
+ <unk> * leftOver ;
double <unk> = <unk> . <unk>
+ <unk> . <unk> + <unk>
<unk> + leftOver ;
<unk> = <unk> / <unk> ;
}
}
}
else
{
if ( true == <unk> . <unk> )
{
if ( <unk> . <unk> < <unk> . <unk>
&& <unk> . <unk> < <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int <unk> = <unk> < <unk> ?
<unk> : <unk> ;
int <unk> = <unk> > <unk> ?
<unk> : <unk> ;
double <unk> = ( double ) ( <unk> . <unk> + <unk> . <unk> )
+ <unk> * ( <unk> + leftOver ) ;
double <unk> = ( double ) ( <unk> . <unk>
+ <unk> . <unk> + <unk> + leftOver ) ;
<unk> = <unk> / <unk> ;
}
else if ( <unk> . <unk> <= <unk> . <unk>
&& <unk> . <unk> <= <unk> . <unk>
&& <unk> . <unk> < <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
double overlap = <unk> . <unk>  <unk> . <unk> ;
double <unk> =
( ( double ) ( <unk> . <unk> + <unk> . <unk> )
/ ( double ) ( <unk> . <unk> + <unk> . <unk> ) ) * overlap ;
double <unk> = ( <unk> . <unk>
+ <unk> . <unk>  <unk> )
+ <unk> * leftOver ;
double <unk> = ( double ) ( <unk> . <unk> + <unk> . <unk>
+ <unk> + leftOver ) ;
<unk> = <unk> / <unk> ;
}
else if ( <unk> . <unk> < <unk> . <unk>
&& <unk> . <unk> <= <unk> . <unk>
&& <unk> . <unk> <= <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int overlap = <unk> . <unk>  <unk> . <unk> ;
double <unk> =
( ( double ) ( <unk> . <unk> + <unk> . <unk> )
/ ( double ) ( <unk> . <unk> + <unk> . <unk> ) ) * overlap ;
double <unk> = ( <unk> . <unk>
+ <unk> . <unk>  <unk> )
+ <unk> * leftOver ;
double <unk> = ( double ) ( <unk> . <unk> + <unk> . <unk>
+ <unk> + leftOver ) ;
<unk> = <unk> / <unk> ;
}
}
else
{
if ( <unk> . <unk> < <unk> . <unk>
&& <unk> . <unk> > <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int <unk> = <unk> < <unk> ?
<unk> : <unk> ;
int <unk> = <unk> > <unk> ?
<unk> : <unk> ;
double <unk> = ( double ) ( <unk> . <unk> + <unk> . <unk> )
+ <unk> * ( <unk> + leftOver ) ;
double <unk> = ( double ) ( <unk> . <unk>
+ <unk> . <unk> + <unk> + leftOver ) ;
<unk> = <unk> / <unk> ;
}
else if ( <unk> . <unk> <= <unk> . <unk>
&& <unk> . <unk> <= <unk> . <unk>
&& <unk> . <unk> > <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int overlap = <unk> . <unk>  <unk> . <unk> ;
double <unk> =
( ( double ) ( <unk> . <unk> + <unk> . <unk> )
/ ( double ) ( <unk> . <unk> + <unk> . <unk> ) ) * overlap ;
double <unk> = ( <unk> . <unk>
+ <unk> . <unk>  <unk> )
+ <unk> * leftOver ;
double <unk> = ( double ) ( <unk> . <unk> + <unk> . <unk>
+ <unk> + leftOver ) ;
<unk> = <unk> / <unk> ;
}
else if ( <unk> . <unk> < <unk> . <unk>
&& <unk> . <unk> >= <unk> . <unk>
&& <unk> . <unk> >= <unk> . <unk> )
{
int <unk> = <unk> . <unk>  <unk> . <unk> ;
int overlap = <unk> . <unk>  <unk> . <unk> ;
double <unk> =
( ( double ) ( <unk> . <unk> + <unk> . <unk> )
/ ( double ) ( <unk> . <unk> + <unk> . <unk> ) ) * overlap ;
double <unk> = ( <unk> . <unk>
+ <unk> . <unk>  <unk> )
+ <unk> * leftOver ;
double <unk> = ( double ) ( <unk> . <unk> + <unk> . <unk>
+ <unk> + leftOver ) ;
<unk> = <unk> / <unk> ;
}
}
}
if ( true == Double . isNaN ( <unk> ) )
{
System . out . println ( " ) ;
System . exit ( <num> ) ;
}
return <unk> ;
}
private double <unk> ( Vector < Vertex > <unk> ) {
double <unk> = <num> ;
double <unk> = <num> ;
double <unk> = <num> ;
for ( int i = <num> ; i < <unk> . size ( )  <num> ; i ++ ) {
Vertex left = <unk> . get ( i ) ;
Vertex right = <unk> . get ( i + <num> ) ;
if ( false == left . <unk> . equals ( right . <unk> ) )
{
int <unk> = left . <unk> ;
int <unk> = right . <unk> ;
int <unk> = <unk> > <unk> ? <unk>
: <unk> ;
int <unk> = <unk> < <unk> ? <unk>
: <unk> ;
int <unk> = <num> ;
int <unk> = <num> ;
if ( true == left . <unk> )
{
if ( right . <unk> > left . <unk> ) {
<unk> = right . <unk>  left . <unk> ;
double <unk> = <unk> < <unk> ? <unk>
: <unk> ;
<unk> += ( <unk> * <unk> ) ;
double <unk> = <unk> > <unk> ? <unk>
: <unk> ;
<unk> += <unk> ;
} else {
<unk> = left . <unk>  right . <unk> ;
double <unk> = <unk>
* ( ( left . <unk> + right . <unk> )
/ ( left . <unk> + right . <unk> ) ) ;
double <unk> =  <unk> ;
<unk> += <unk> ;
double <unk> = <unk>  <unk> ;
<unk> += <unk> ;
}
}
else
{
if ( right . <unk> < left . <unk> ) {
<unk> = left . <unk>  right . <unk> ;
double <unk> = <unk> < <unk> ? <unk>
: <unk> ;
<unk> += ( <unk> * <unk> ) ;
double <unk> = <unk> > <unk> ? <unk>
: <unk> ;
<unk> += <unk> ;
} else {
<unk> = right . <unk>  left . <unk> ;
double <unk> = <unk>
* ( ( left . <unk> + right . <unk> )
/ ( left . <unk> + right . <unk> ) ) ;
double <unk> =  <unk> ;
<unk> += <unk> ;
double <unk> = <unk>  <unk> ;
<unk> += <unk> ;
}
}
}
else
{
if ( true == left . <unk> )
{
if ( left . <unk> < right . <unk>
&& left . <unk> < right . <unk> )
{
int <unk> = right . <unk>  left . <unk> ;
int <unk> = right . <unk>  left . <unk> ;
int <unk> = <unk> < <unk>
? <unk> : <unk> ;
int <unk> = <unk> > <unk>
? <unk> : <unk> ;
double <unk> = <unk> * <unk> ;
<unk> += <unk> ;
double <unk> = <unk> ;
<unk> += <unk> ;
}
else if ( left . <unk> <= right . <unk>
&& right . <unk> <= left . <unk>
&& left . <unk> < right . <unk> )
{
int overlap = left . <unk>  right . <unk> ;
int <unk> = right . <unk>  left . <unk> ;
double <unk> = overlap
* ( ( double ) ( left . <unk> + right . <unk> )
/ ( double ) ( left . <unk> + right . <unk> ) ) ;
double <unk> =  <unk> ;
double <unk> = <unk> ;
<unk> += <unk> ;
<unk> += <unk> ;
}
else if ( left . <unk> < right . <unk>
&& left . <unk> <= right . <unk>
&& right . <unk> <= left . <unk> )
{
int overlap = left . <unk>  right . <unk> ;
int <unk> = right . <unk>  left . <unk> ;
double <unk> = overlap
* ( ( double ) ( left . <unk> + right . <unk> ) /
( double ) ( left . <unk> + right . <unk> ) ) ;
double <unk> =  <unk> ;
double <unk> = <unk> ;
<unk> += <unk> ;
<unk> += <unk> ;
}
}
else
{
if ( left . <unk> < right . <unk>
&& left . <unk> > right . <unk> )
{
int <unk> = right . <unk>  left . <unk> ;
int <unk> = left . <unk>  right . <unk> ;
int <unk> = <unk> < <unk>
? <unk> : <unk> ;
int <unk> = <unk> > <unk>
? <unk> : <unk> ;
double <unk> = <unk> * <unk> ;
<unk> += <unk> ;
double <unk> = <unk> ;
<unk> += <unk> ;
}
else if ( left . <unk> <= right . <unk>
&& right . <unk> <= left . <unk>
&& left . <unk> > right . <unk> )
{
int overlap = left . <unk>  right . <unk> ;
int <unk> = left . <unk>  right . <unk> ;
double <unk> = overlap
* ( ( double ) ( left . <unk> + right . <unk> )
/ ( double ) ( left . <unk> + right . <unk> ) ) ;
double <unk> =  <unk> ;
double <unk> = <unk> ;
<unk> += <unk> ;
<unk> += <unk> ;
}
else if ( left . <unk> < right . <unk>
&& left . <unk> >= right . <unk>
&& right . <unk> >= left . <unk> )
{
int overlap = right . <unk>  left . <unk> ;
int <unk> = right . <unk>  left . <unk> ;
double <unk> = overlap
* ( ( double ) ( left . <unk> + right . <unk> )
/ ( double ) ( left . <unk> + right . <unk> ) ) ;
double <unk> =  <unk> ;
double <unk> = <unk> ;
<unk> += <unk> ;
<unk> += <unk> ;
}
}
}
}
int <unk> = <num> ;
int <unk> = <num> ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ ) {
<unk> += <unk> . get ( i ) . <unk> ;
<unk> += <unk> . get ( i ) . <unk> ;
}
int <unk> = <unk> . size ( ) ;
int leftOver = <unk> . get ( <num> ) . <unk>
+ <unk> . get ( <unk>  <num> ) . <unk> ;
double <unk> = ( <unk> + <unk> + <unk>
* leftOver )
/ ( <unk> + <unk> + leftOver ) ;
if ( true == Double . isNaN ( <unk> ) )
{
System . out . println ( " ) ;
System . exit ( <num> ) ;
}
return <unk> ;
}
public Vertex <unk> ( ) {
Vertex <unk> = null ;
double <unk> = <num> ;
Set < String > <unk> = <unk> . keySet ( ) ;
Iterator < String > <unk> = <unk> . iterator ( ) ;
while ( true == <unk> . hasNext ( ) ) {
String <unk> = <unk> . next ( ) ;
Vertex <unk> = <unk> . get ( <unk> ) ;
if ( <unk> . <unk> < <unk> )
continue ;
if ( <unk> < <unk> . <unk> ) {
<unk> = <unk> . <unk> ;
<unk> = <unk> ;
}
}
return <unk> ;
}
public boolean <unk> ( String <unk> ) {
if ( true == <unk> . containsKey ( <unk> ) )
return true ;
else
return false ;
}
public void <unk> ( String <unk> ) {
Set < String > <unk> = <unk> . get ( <unk> ) ;
if ( <num> < <unk> . size ( ) )
{
Iterator < String > <unk> = <unk> . iterator ( ) ;
while ( true == <unk> . hasNext ( ) )
{
String <unk> = <unk> . next ( ) ;
if ( true == <unk> . containsKey ( <unk> ) ) {
<unk> . remove ( <unk> ) ;
}
if ( true == <unk> . containsKey ( <unk> ) ) {
<unk> . remove ( <unk> ) ;
}
if ( true == <unk> . containsKey ( <unk> ) ) {
<unk> . remove ( <unk> ) ;
}
if ( true == <unk> . containsKey ( <unk> ) ) {
<unk> . remove ( <unk> ) ;
}
if ( true == <unk> . containsKey ( <unk> ) ) {
<unk> . remove ( <unk> ) ;
}
if ( true == <unk> . containsKey ( <unk> ) ) {
<unk> . remove ( <unk> ) ;
}
Set < String > <unk> = <unk> . keySet ( ) ;
Iterator < String > <unk> = <unk> . iterator ( ) ;
while ( true == <unk> . hasNext ( ) ) {
String next = <unk> . next ( ) ;
Set < String > values = <unk> . get ( next ) ;
if ( true == values . contains ( <unk> ) ) {
values . remove ( <unk> ) ;
}
}
if ( true == <unk> . containsKey ( <unk> ) ) {
<unk> . remove ( <unk> ) ;
}
Set < String > <unk> = <unk> . keySet ( ) ;
Iterator < String > <unk> = <unk> . iterator ( ) ;
while ( true == <unk> . hasNext ( ) ) {
String next = <unk> . next ( ) ;
Set < String > values = <unk> . get ( next ) ;
if ( true == values . contains ( <unk> ) ) {
values . remove ( <unk> ) ;
}
}
}
<unk> . remove ( <unk> ) ;
<unk> . remove ( <unk> ) ;
}
}
public void <unk> ( Vertex <unk> , int <unk> ) {
HashMap < String , Vertex > <unk> = new HashMap < String , Vertex > ( ) ;
<unk> . put ( <unk> . <unk> , <unk> ) ;
if ( <num> == <unk> ) {
<unk> ( <unk> , <unk> ) ;
<unk> ( <unk> , <unk> ) ;
} else if ( <num> == <unk> ) {
<unk> ( <unk> , <unk> ) ;
<unk> ( <unk> , <unk> ) ;
} else if ( <num> == <unk> ) {
<unk> ( <unk> , <unk> ) ;
<unk> ( <unk> , <unk> ) ;
<unk> ( <unk> , <unk> ) ;
<unk> ( <unk> , <unk> ) ;
}
}
public void <unk> ( double <unk> , double <unk> , double <unk> ,
double <unk> , double <unk> , double <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public boolean <unk> ( String <unk> ) {
if ( true == <unk> . contains ( <unk> ) )
return true ;
else
return false ;
}
}
import java . io . * ;
import java . util . * ;
import java . util . regex . * ;
public class <unk> {
public <unk> ( int <unk> ) {
this . <unk> = <unk> ;
<unk> = new <unk> ( this , <unk> ) ;
<unk> = new HashMap < String , Repeat > ( ) ;
<unk> = new HashMap < String , Fragment > ( ) ;
}
public static void main ( String [ ] args ) {
BufferedReader inFile = null ;
try {
inFile = new BufferedReader ( new FileReader ( args [ <num> ] ) ) ;
} catch ( FileNotFoundException e ) {
e . printStackTrace ( ) ;
}
String <unk> = null ;
String <unk> = null ;
String <unk> = null ;
String <unk> = null ;
String <unk> = null ;
String <unk> = null ;
double <unk> = <num> ;
double <unk> = <num> ;
double <unk> = <num> ;
double <unk> = <num> ;
double <unk> = <num> ;
double <unk> = <num> ;
int <unk> = <num> ;
String localPath = null ;
String regex = " ;
Pattern pat = Pattern . compile ( regex ) ;
Matcher mat = null ;
String line = null ;
try {
while ( null != ( line = inFile . readLine ( ) ) ) {
mat = pat . matcher ( line ) ;
if ( true == mat . find ( ) ) {
String <unk> = mat . group ( <num> ) ;
String <unk> = mat . group ( <num> ) ;
if ( true == <unk> . equals ( " ) ) {
<unk> = <unk> ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = <unk> ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = <unk> ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = <unk> ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = <unk> ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = <unk> ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = Double . parseDouble ( <unk> ) ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = Double . parseDouble ( <unk> ) ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = Double . parseDouble ( <unk> ) ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = Double . parseDouble ( <unk> ) ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = Double . parseDouble ( <unk> ) ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = Double . parseDouble ( <unk> ) ;
} else if ( true == <unk> . equals ( " ) ) {
<unk> = Integer . parseInt ( <unk> ) ;
} else if ( true == <unk> . equals ( " ) ) {
localPath = <unk> ;
} else {
System . out . println ( " + <unk>
+ " + <unk> ) ;
}
}
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
<unk> <unk> = new <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> , <unk> , <unk> ,
<unk> , <unk> , <unk> , <unk> , <unk> ,
<unk> , <unk> , <unk> , <unk> , localPath ) ;
}
public void <unk> ( String <unk> , String <unk> ,
String <unk> , String <unk> , String outputFile ,
String <unk> , double <unk> , double <unk> , double <unk> ,
double <unk> , double <unk> , double <unk> , String Path ) {
this . Path = Path ;
this . <unk> = <unk> ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
int mode = <num> ;
Vector < Vertex > <unk> = <unk> ( <unk> , <unk> , mode ,
null , <num> ) ;
<unk> . <unk> ( <unk> , <unk> , <unk> , <unk> , <unk> , <unk> ) ;
<unk> . <unk> ( <unk> , <unk> ) ;
boolean condition = true ;
boolean <unk> = false ;
int <unk> = <num> ;
File file = new File ( <unk> ) ;
file . delete ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . <unk> ( <unk> , <unk> ) ;
while ( true == condition ) {
<unk> ++ ;
System . out . println ( " ) ;
Path <unk> = <unk> . <unk> ( ) ;
System . out . println ( " ) ;
if ( null == <unk> ) {
return ;
}
System . out . println ( " ) ;
System . out . println ( " + <unk> . <unk> ) ;
System . out . println ( " + <unk> . <unk> ) ; Vertex
<unk> = <unk> . <unk> . get ( <num> ) ;
System . out . println ( " +
<unk> . <unk> ) ;
System . out . println ( " +
<unk> . <unk> ) ;
System . out . println ( " +
<unk> . <unk> ) ;
System . out . println ( " +
<unk> . <unk> ) ; System . out . println ( " +
<unk> . <unk> ) ; System . out . println ( " +
<unk> . <unk> ) ; System . out . println ( " +
<unk> . <unk> ) ;
System . out . println ( " +
<unk> . <unk> ) ;
System . out . println ( " +
<unk> . <unk> ) ;
System . out . println ( " +
<unk> . <unk> ) ;
System . out . println ( " +
<unk> . <unk> . size ( ) ) ;
System . out . println ( " ) ;
Path removed = <unk> . <unk> ( <unk> ) ;
TreeMap < Integer , <unk> > trimmed = <unk> ( removed ) ;
if ( null == trimmed ) {
continue ;
}
Vector < Vertex > <unk> = <unk> ( trimmed , <unk> ) ;
if ( null != <unk> ) {
<unk> . <unk> ( <unk> ) ;
}
if ( <num> == <unk> % <num> ) {
System . out
. println ( " ) ;
<unk> ( ) ;
System . out . println ( " ) ;
<unk> ( outputFile ) ;
System . out . println ( " ) ;
<unk> . <unk> ( <unk> , outputFile ) ;
<unk> . <unk> ( <unk> ) ;
}
System . out . println ( " ) ;
int <unk> = <unk> ( ) ;
System . out . println ( " + <unk> ) ;
}
System . out . println ( " ) ;
<unk> ( ) ;
<unk> ( outputFile ) ;
<unk> . <unk> ( <unk> , outputFile ) ;
<unk> . <unk> ( <unk> ) ;
}
private int <unk> ( ) {
HashMap < String , Graph > <unk> = <unk> . <unk> ;
Set < String > <unk> = <unk> . keySet ( ) ;
Iterator < String > it = <unk> . iterator ( ) ;
int <unk> = <num> ;
while ( true == it . hasNext ( ) ) {
String next = it . next ( ) ;
Graph local = <unk> . get ( next ) ;
int <unk> = local . <unk> . size ( ) ;
<unk> += <unk> ;
}
return <unk> ;
}
private void <unk> ( String outFile ) {
PrintWriter outputFile = null ;
try {
outputFile = new PrintWriter ( new FileWriter ( outFile ) ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
Set < String > keys = <unk> . keySet ( ) ;
Iterator < String > it = keys . iterator ( ) ;
while ( true == it . hasNext ( ) ) {
String <unk> = it . next ( ) ;
Fragment <unk> = <unk> . get ( <unk> ) ;
TreeMap < Integer , <unk> > <unk> = <unk> . <unk> ;
Set < Integer > <unk> = <unk> . keySet ( ) ;
Iterator < Integer > <unk> = <unk> . iterator ( ) ;
while ( true == <unk> . hasNext ( ) ) {
int startPos = <unk> . next ( ) ;
int endPos = <unk> . get ( startPos ) . endPos ;
String <unk> = <unk> . get ( startPos ) . <unk> ;
int <unk> = <unk> . get ( startPos ) . <unk> ;
int <unk> = <unk> . get ( startPos ) . <unk> ;
if ( true == <unk> . get ( startPos ) . <unk> ) {
outputFile . println ( <unk> + " + startPos + "
+ endPos + " + <unk> + " + <unk>
+ " + <unk> ) ;
} else {
outputFile . println ( <unk> + " + startPos + "
+ endPos + " + <unk> + " + <unk>
+ " + <unk> ) ;
}
}
}
outputFile . close ( ) ;
}
private void <unk> ( ) {
System . out . println ( " ) ;
Set < String > keys = <unk> . keySet ( ) ;
Iterator < String > it = keys . iterator ( ) ;
while ( true == it . hasNext ( ) ) {
String nextKey = it . next ( ) ;
Fragment <unk> = <unk> . get ( nextKey ) ;
<unk> . <unk> ( ) ;
}
System . out . println ( " ) ;
}
private Vector < Vertex > <unk> (
TreeMap < Integer , <unk> > trimmed , String <unk> ) {
String <unk> = new String ( ) ;
Set < Integer > keySet = trimmed . keySet ( ) ;
Iterator < Integer > it = keySet . iterator ( ) ;
while ( true == it . hasNext ( ) ) {
int next = it . next ( ) ;
<unk> <unk> = trimmed . get ( next ) ;
String <unk> = <unk> . <unk> ;
int <unk> = <unk> . <unk> ;
int <unk> = <unk> . <unk> ;
Fragment <unk> = <unk> . get ( <unk> ) ;
String <unk> = <unk> . <unk> . substring (
<unk>  <num> , <unk> ) ;
<unk> = <unk> . concat ( <unk> ) ;
}
if ( <num> == <unk> . length ( ) )
return null ;
<unk> . <unk> ++ ;
String <unk> = Path + "
+ <unk> . <unk> ;
PrintWriter <unk> = null ;
try {
<unk> = new PrintWriter ( new FileWriter ( <unk> ) ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
int <unk> = <unk> . length ( ) ;
String <unk> = trimmed . firstEntry ( ) . getValue ( ) . <unk> ;
int <unk> = trimmed . firstEntry ( ) . getValue ( ) . <unk> ;
int <unk> = <unk> . get ( <unk> ) . <unk>
+ <unk>  <num> ;
String firstLine = " + <unk> . <unk>
+ " + <unk> + " + <unk> ;
String <unk> = " + <unk> . <unk> ;
Fragment <unk> = new Fragment ( <unk> , <unk> ,
<unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
<unk> . println ( firstLine ) ;
int count = <num> ;
while ( count < <unk> ) {
int <unk> = count ;
int <unk> = <unk> + <num> ;
if ( <unk> > <unk> )
<unk> = <unk> ;
String subString = <unk> . substring ( <unk> ,
<unk> ) ;
<unk> . println ( subString ) ;
count = <unk> ;
}
<unk> . close ( ) ;
int mode = <num> ;
Vector < Vertex > <unk> = <unk> ( <unk> , <unk> ,
mode , trimmed , <unk> ) ;
File tempFile = new File ( <unk> ) ;
tempFile . delete ( ) ;
return <unk> ;
}
private TreeMap < Integer , <unk> > <unk> ( Path removed ) {
this . <unk> += removed . <unk> . size ( ) ;
int rem = this . <unk> . <unk>  <unk> ;
Vector < Vertex > <unk> = removed . <unk> ;
Vector < Vertex > <unk> = <unk> ( <unk> ) ;
boolean <unk> = true ;
if ( <num> == <unk> . size ( ) )
{
int <unk> = ( int ) Math . abs ( <unk> . get ( <num> ) . <unk>  <unk> . get ( <num> ) . <unk> ) ;
if ( <unk> < <num> )
<unk> = false ;
}
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ ) {
Vertex <unk> = <unk> . get ( i ) ;
int <unk> = <num> ;
if ( <num> == <unk> . size ( ) ) {
<unk> = <num> ;
} else if ( <num> == i ) {
<unk> = <num> ;
} else if ( i == <unk> . size ( )  <num> ) {
<unk> = <num> ;
} else {
<unk> = <num> ;
}
if ( true == <unk> )
{
<unk> . <unk> ( <unk> ) ;
}
}
TreeMap < Integer , <unk> > leftSide = <unk> . get ( <num> )
. <unk> ( ) ;
TreeMap < Integer , <unk> > rightSide = <unk> . get (
<unk> . size ( )  <num> ) . <unk> ( ) ;
TreeMap < Integer , <unk> > combined = <unk> ( leftSide ,
rightSide ) ;
return combined ;
}
private Vector < Vertex > <unk> ( Vector < Vertex > <unk> ) {
int count = <num> ;
Vector < Vertex > <unk> = new Vector < Vertex > ( ) ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ ) {
Vertex <unk> = <unk> . get ( i ) ;
if ( i == <num> ) {
Vertex <unk> = new Vertex ( <unk> . <unk> ,
<unk> . <unk> , <unk> . <unk> ,
<unk> . <unk> ,
<unk> . <unk> ,
<unk> . <unk> ,
<unk> . <unk> , <unk> . <unk> ,
<unk> . <unk> ) ;
<unk> . <unk> = <unk> . <unk> ;
<unk> . add ( count , <unk> ) ;
} else {
Vertex <unk> = <unk> . get ( i  <num> ) ;
if ( true == <unk> . <unk>
. equals ( <unk> . <unk> ) ) {
<unk> . get ( count ) . <unk> = <unk> . <unk> ;
<unk> . get ( count ) . <unk> = <unk> . <unk> ;
} else {
count ++ ;
Vertex <unk> = new Vertex ( <unk> . <unk> ,
<unk> . <unk> , <unk> . <unk> ,
<unk> . <unk> ,
<unk> . <unk> ,
<unk> . <unk> ,
<unk> . <unk> ,
<unk> . <unk> , <unk> . <unk> ) ;
<unk> . <unk> = <unk> . <unk> ;
<unk> . add ( count , <unk> ) ;
}
}
}
return <unk> ;
}
private TreeMap < Integer , <unk> > <unk> (
TreeMap < Integer , <unk> > leftSide ,
TreeMap < Integer , <unk> > rightSide ) {
if ( null == leftSide && null == rightSide ) {
return null ;
} else if ( null == leftSide ) {
return rightSide ;
} else if ( null == rightSide ) {
return leftSide ;
} else {
<unk> <unk> = leftSide . get ( leftSide . <unk> ( ) ) ;
int <unk> = <unk> . <unk> ;
Set < Integer > keySet = rightSide . keySet ( ) ;
Iterator < Integer > it = keySet . iterator ( ) ;
while ( true == it . hasNext ( ) ) {
int <unk> = it . next ( ) ;
<unk> <unk> = rightSide . get ( <unk> ) ;
<unk> . <unk> += <unk> ;
<unk> . <unk> += <unk> ;
leftSide . put ( <unk> . <unk> , <unk> ) ;
}
}
return leftSide ;
}
private Vector < Vertex > <unk> ( String <unk> , String <unk> ,
int mode , TreeMap < Integer , <unk> > <unk> ,
int <unk> ) {
HashMap < String , Integer > <unk> = new HashMap < String , Integer > ( ) ;
String <unk> = null ;
if ( <num> == mode )
<unk> = Path + " ;
else
<unk> = Path + " ;
<unk> ( <unk> , <unk> , <unk> , mode ) ;
Vector < Vertex > <unk> = new Vector < Vertex > ( ) ;
HashSet < String > <unk> = new HashSet < String > ( ) ;
BufferedReader <unk> = null ;
try {
<unk> = new BufferedReader ( new FileReader ( <unk> ) ) ;
} catch ( FileNotFoundException e ) {
e . printStackTrace ( ) ;
}
int count = <num> ;
String regex = "
+ " ;
Pattern pat = null ;
pat = Pattern . compile ( regex ) ;
Matcher mat = null ;
String line = null ;
int count1 = <num> ;
try {
while ( null != ( line = <unk> . readLine ( ) ) ) {
if ( true == line . startsWith ( " ) )
continue ;
mat = pat . matcher ( line ) ;
if ( true == mat . find ( ) ) {
int <unk> = Integer . parseInt ( mat . group ( <num> ) ) ;
int <unk> = Integer . parseInt ( mat . group ( <num> ) ) ;
int <unk> = Integer . parseInt ( mat . group ( <num> ) ) ;
int <unk> = Integer . parseInt ( mat . group ( <num> ) ) ;
int <unk> = Integer . parseInt ( mat . group ( <num> ) ) ;
if ( <unk> < <unk> )
{
continue ;
}
String <unk> = mat . group ( <num> ) + mat . group ( <num> ) ;
if ( true == <unk> . containsKey ( <unk> ) ) {
int val = <unk> . get ( <unk> ) ;
if ( val > <num> )
continue ;
<unk> . put ( <unk> , val + <num> ) ;
} else {
int val = <num> ;
<unk> . put ( <unk> , val ) ;
}
if ( <unk> > <unk> )
continue ;
boolean <unk> = true ;
if ( <unk> > <unk> )
<unk> = false ;
String <unk> = mat . group ( <num> ) ;
String <unk> = mat . group ( <num> ) ;
double identity = Double . parseDouble ( mat . group ( <num> ) ) ;
int <unk> = Integer . parseInt ( mat . group ( <num> ) ) ;
int <unk> = Integer . parseInt ( mat . group ( <num> ) ) ;
double <unk> = Double . parseDouble ( mat . group ( <num> ) ) ;
double <unk> = Double . parseDouble ( mat . group ( <num> ) ) ;
TreeMap < Integer , <unk> > <unk> = null ;
int <unk> = <num> ;
if ( <num> == mode ) {
<unk> = new TreeMap < Integer , <unk> > ( ) ;
Fragment <unk> = <unk> . get ( <unk> ) ;
int <unk> = <unk> . <unk> ;
String <unk> = <unk> ;
int <unk> = <num> ;
int <unk> = <unk> ;
int <unk> = <num> ;
int <unk> = <unk> ;
<unk> <unk> = new <unk> (
<unk> , <unk> , <unk> ,
<unk> , <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
<unk> = <unk> . <unk> ;
} else if ( <num> == mode ) {
<unk> = <unk> ;
<unk> = <unk> ;
} else
;
Vertex <unk> = new Vertex ( <unk> , <unk> ,
identity , <unk> , <unk> , <unk> ,
<unk> , <unk> , <unk> , <unk> ,
<unk> , <unk> , <unk> , <unk> ) ;
<unk> . <unk> = this . <unk> ;
int <unk> = <unk> . get ( <unk> ) . <unk> ;
<unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> ) ;
count ++ ;
<unk> . <unk> ( ) ;
<unk> . add ( <unk> ) ;
if ( <num> == mode ) {
count1 ++ ;
if ( <num> == count1 % <num> )
{
System . out . println ( " + count1 + " +
<unk> . <unk> ) ;
}
}
}
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
return <unk> ;
}
private void <unk> ( String <unk> , String <unk> ,
String outFile , int mode ) {
String <unk> = <unk> + " + <unk>
+ " + <unk> + " + outFile ;
Process proc = null ;
try {
proc = Runtime . getRuntime ( ) . exec ( <unk> ) ;
InputStream stderr = proc . getErrorStream ( ) ;
InputStreamReader isr = new InputStreamReader ( stderr ) ;
BufferedReader br = new BufferedReader ( isr ) ;
String line = null ;
while ( ( line = br . readLine ( ) ) != null )
System . out . println ( line ) ;
int <unk> = proc . waitFor ( ) ;
} catch ( Throwable e ) {
e . printStackTrace ( ) ;
}
try {
proc . waitFor ( ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
}
public void <unk> ( String <unk> ) {
BufferedReader <unk> = null ;
try {
<unk> = new BufferedReader ( new FileReader ( <unk> ) ) ;
} catch ( FileNotFoundException e ) {
e . printStackTrace ( ) ;
}
String regex = null ;
Pattern pat = null ;
Matcher mat = null ;
String line = null ;
regex = " ;
pat = Pattern . compile ( regex ) ;
String <unk> = null ;
try {
while ( null != ( line = <unk> . readLine ( ) ) ) {
mat = pat . matcher ( line ) ;
if ( true == mat . find ( ) ) {
<unk> = mat . group ( <num> ) ;
int startPos = Integer . parseInt ( mat . group ( <num> ) ) ;
int length = Integer . parseInt ( mat . group ( <num> ) ) ;
if ( false == <unk> . containsKey ( <unk> ) ) {
Fragment <unk> = new Fragment ( <unk> , startPos ,
length ) ;
<unk> . put ( <unk> , <unk> ) ;
}
} else {
if ( null != <unk> && <num> < line . length ( ) ) {
String modified = <unk> . get ( <unk> ) . <unk>
. concat ( line ) ;
<unk> . get ( <unk> ) . <unk> = modified ;
}
}
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
regex = " ;
pat = Pattern . compile ( regex ) ;
mat = pat . matcher ( <unk> ) ;
if ( true == mat . find ( ) ) {
<unk> . <unk> = Integer . parseInt ( mat . group ( <num> ) ) ;
}
}
public void <unk> ( String <unk> ) {
BufferedReader <unk> = null ;
try {
<unk> = new BufferedReader ( new FileReader ( <unk> ) ) ;
} catch ( FileNotFoundException e1 ) {
e1 . printStackTrace ( ) ;
}
String regex = null ;
Pattern pat = null ;
Matcher mat = null ;
String line = null ;
regex = " ;
pat = Pattern . compile ( regex ) ;
int <unk> = <num> ;
boolean <unk> = false ;
String <unk> = null ;
try {
while ( null != ( line = <unk> . readLine ( ) ) ) {
mat = pat . matcher ( line ) ;
if ( true == mat . find ( ) ) {
if ( true == <unk> ) {
if ( false == <unk> . containsKey ( <unk> ) ) {
Repeat <unk> = new Repeat ( <unk> , <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
}
}
<unk> = mat . group ( <num> ) ;
<unk> = <num> ;
if ( false == <unk> ) {
<unk> = true ;
}
} else {
<unk> += line . length ( ) ;
}
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
if ( true == <unk> ) {
if ( false == <unk> . containsKey ( <unk> ) ) {
Repeat <unk> = new Repeat ( <unk> , <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
}
}
}
HashMap < String , Repeat > <unk> ( ) {
return <unk> ;
}
HashMap < String , Fragment > <unk> ( ) {
return <unk> ;
}
int <unk> = <num> ;
String Path = null ;
int <unk> = <num> ;
String <unk> = null ;
<unk> <unk> = null ;
HashMap < String , Repeat > <unk> = null ;
HashMap < String , Fragment > <unk> = null ;
}
class Repeat {
public Repeat ( String <unk> , int <unk> ) {
<unk> = <unk> ;
<unk> = <unk> ;
}
String <unk> ;
int <unk> ;
}
class Fragment {
public Fragment ( String <unk> , int startPos , int length ) {
this . <unk> = new TreeMap < Integer , <unk> > ( ) ;
this . <unk> = new String ( ) ;
this . <unk> = new String ( ) ;
this . <unk> = <unk> ;
this . <unk> = startPos ;
this . <unk> = length ;
}
public void <unk> ( ) {
TreeMap < Integer , <unk> > <unk> = new TreeMap < Integer , <unk> > ( ) ;
Set < Integer > keySet = <unk> . keySet ( ) ;
Iterator < Integer > it = keySet . iterator ( ) ;
int <unk> =  <num> ;
int <unk> =  <num> ;
int <unk> ;
int <unk> ;
while ( true == it . hasNext ( ) ) {
int startPos = it . next ( ) ;
int endPos = <unk> . get ( startPos ) . endPos ;
if (  <num> == <unk> &&  <num> == <unk> ) {
<unk> = startPos ;
<unk> = endPos ;
String <unk> = <unk> . get ( <unk> ) . <unk> ;
<unk> = <unk> . get ( <unk> ) . <unk> ;
<unk> = <unk> . get ( <unk> ) . <unk> ;
boolean <unk> = <unk> . get ( <unk> ) . <unk> ;
<unk> <unk> = new <unk> ( <unk> ,
<unk> , <unk> , <unk> , <unk> ,
<unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
} else {
if ( startPos <= <unk> + <num> ) {
if ( endPos > <unk> ) {
<unk> . remove ( <unk> ) ;
<unk> = endPos ;
String <unk> = <unk> . get ( <unk> ) . <unk> ;
<unk> = <unk> . get ( <unk> ) . <unk> ;
<unk> = <unk> . get ( <unk> ) . <unk> ;
boolean <unk> = <unk> . get ( <unk> ) . <unk> ;
<unk> <unk> = new <unk> (
<unk> , <unk> , <unk> , <unk> ,
<unk> , <unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
}
} else {
<unk> = startPos ;
<unk> = endPos ;
String <unk> = <unk> . get ( <unk> ) . <unk> ;
boolean <unk> = <unk> . get ( <unk> ) . <unk> ;
<unk> = <unk> . get ( <unk> ) . <unk> ;
<unk> = <unk> . get ( <unk> ) . <unk> ;
<unk> <unk> = new <unk> ( <unk> ,
<unk> , <unk> , <unk> , <unk> ,
<unk> ) ;
<unk> . put ( <unk> , <unk> ) ;
}
}
}
<unk> = <unk> ;
}
public void <unk> ( int <unk> , int <unk> ,
int <unk> , int <unk> , String <unk> ,
boolean <unk> ) {
if ( true == <unk> . containsKey ( <unk> ) ) {
<unk> local = <unk> . get ( <unk> ) ;
int endPos = local . endPos ;
if ( endPos <= <unk> ) {
<unk> . remove ( <unk> ) ;
} else {
return ;
}
}
<unk> temp = new <unk> ( <unk> , <unk> ,
<unk> , <unk> , <unk> , <unk> ) ;
<unk> . put ( <unk> , temp ) ;
}
String <unk> ;
int <unk> ;
int <unk> ;
String <unk> = null ;
TreeMap < Integer , <unk> > <unk> = null ;
}
class <unk> {
public <unk> ( int <unk> , int <unk> ,
int <unk> , int <unk> , String <unk> ,
boolean <unk> ) {
this . startPos = <unk> ;
this . endPos = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
int startPos ;
int endPos ;
int <unk> ;
int <unk> ;
String <unk> ;
boolean <unk> ;
}
package jp . <unk> ;
import android . app . Activity ;
import android . database . Cursor ;
import android . graphics . Bitmap ;
import android . os . Bundle ;
import android . os . Handler ;
import android . provider . MediaStore ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . * ;
import java . util . ArrayList ;
import java . util . LinkedList ;
import java . util . concurrent . Executors ;
import java . util . concurrent . ScheduledExecutorService ;
import java . util . concurrent . TimeUnit ;
public class GalleryActivity extends Activity {
private static final int <unk> = <num> ;
private <unk> < <unk> > mAdapter ;
private int <unk> ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . gallery ) ;
<unk> = getWindowManager ( ) . getDefaultDisplay ( ) . getWidth ( ) / <unk> ;
mAdapter = new <unk> ( <unk> ) ;
ListView <unk> = ( ListView ) findViewById ( R . id . <unk> ) ;
<unk> . setAdapter ( mAdapter ) ;
<unk> ( ) ;
}
private void <unk> ( ) {
Cursor c = managedQuery (
MediaStore . Images . Media . EXTERNAL_CONTENT_URI ,
null , null , null ,
String . format ( " , MediaStore . Images . ImageColumns . <unk> )
) ;
ArrayList < <unk> > items = new ArrayList < <unk> > ( ) ;
c . moveToFirst ( ) ;
do {
int idIndex = c . getColumnIndexOrThrow ( " ) ;
int <unk> = c . getColumnIndexOrThrow ( MediaStore . Images . ImageColumns . <unk> ) ;
<unk> item = new <unk> (
getApplicationContext ( ) ,
c . getLong ( idIndex ) ,
c . getString ( <unk> )
) ;
items . add ( item ) ;
} while ( c . moveToNext ( ) ) ;
mAdapter . <unk> ( items ) ;
}
private void onItemClick ( <unk> item ) {
Toast . makeText ( getApplicationContext ( ) , item . <unk> ( ) . <unk> ( ) , Toast . LENGTH_SHORT ) . show ( ) ;
}
private class <unk> extends <unk> < <unk> > {
private ScheduledExecutorService <unk> = Executors . newSingleThreadScheduledExecutor ( ) ;
private LinkedList < Holder > <unk> = new LinkedList < Holder > ( ) ;
private Handler mHandler = new Handler ( ) ;
public <unk> ( int <unk> ) {
super ( <unk> ) ;
<unk> . scheduleAtFixedRate (
new <unk> ( ) , <num> , <num> , TimeUnit . MILLISECONDS
) ;
}
@Override
protected View <unk> ( ViewGroup parent ) {
return getLayoutInflater ( ) . inflate ( R . layout . <unk> , parent , false ) ;
}
@Override
protected View <unk> ( View convertView ) {
return convertView . findViewById ( R . id . <unk> ) ;
}
@Override
protected View <unk> ( String title ) {
View v = getLayoutInflater ( ) . inflate ( R . layout . <unk> , null , false ) ;
TextView textView = ( TextView ) v . findViewById ( R . id . <unk> ) ;
textView . setText ( title ) ;
return v ;
}
@Override
protected View <unk> ( <unk> item ) {
View v = getLayoutInflater ( ) . inflate ( R . layout . <unk> , null , false ) ;
ImageView imageView = ( ImageView ) v . findViewById ( R . id . <unk> ) ;
imageView . setLayoutParams ( new AbsListView . LayoutParams ( <unk> , <unk> ) ) ;
Bitmap bitmap = item . <unk> ( ) ;
if ( bitmap != null ) {
imageView . setImageBitmap ( bitmap ) ;
imageView . setOnClickListener ( new OnItemClickListener ( item ) ) ;
} else {
<unk> . add ( new Holder ( imageView , item ) ) ;
}
return v ;
}
private class <unk> implements Runnable {
@Override
public void run ( ) {
while ( true ) {
Holder holder ;
synchronized ( GalleryActivity . this ) {
holder = <unk> . poll ( ) ;
}
if ( holder == null ) {
break ;
}
<unk> ( holder , holder . item . getBitmap ( ) ) ;
}
}
}
private void <unk> ( final Holder holder , final Bitmap bitmap ) {
mHandler . post ( new Runnable ( ) {
@Override
public void run ( ) {
holder . imageView . setImageBitmap ( bitmap ) ;
holder . imageView . setOnClickListener ( new OnItemClickListener ( holder . item ) ) ;
}
} ) ;
}
public class Holder {
ImageView imageView ;
<unk> item ;
public Holder ( ImageView imageView , <unk> item ) {
this . imageView = imageView ;
this . item = item ;
}
}
class OnItemClickListener implements View . OnClickListener {
private <unk> item ;
public OnItemClickListener ( <unk> item ) {
this . item = item ;
}
@Override
public void onClick ( View view ) {
GalleryActivity . this . onItemClick ( item ) ;
}
}
}
}
package jp . <unk> ;
import android . content . Context ;
import android . graphics . Bitmap ;
import android . graphics . BitmapFactory ;
import android . provider . MediaStore ;
import java . lang . ref . SoftReference ;
import java . text . SimpleDateFormat ;
import java . util . Date ;
public class <unk> implements <unk> {
private final SimpleDateFormat sdf = new SimpleDateFormat ( " ) ;
private Context mContext ;
private Long <unk> ;
private String <unk> ;
private SoftReference < Bitmap > <unk> ;
private Date <unk> ;
private int mType ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
public <unk> ( Context context , long <unk> , String taken ) {
mType = <unk> ;
mContext = context ;
<unk> = <unk> ;
<unk> = new Date ( Long . valueOf ( taken ) ) ;
}
public <unk> ( Context context , String path , String taken ) {
mType = <unk> ;
mContext = context ;
<unk> = path ;
<unk> = new Date ( Long . valueOf ( taken ) ) ;
}
public Bitmap <unk> ( ) {
Bitmap bitmap = null ;
if ( <unk> != null ) {
bitmap = <unk> . get ( ) ;
}
return bitmap ;
}
public Bitmap getBitmap ( ) {
Bitmap bitmap = null ;
if ( <unk> != null ) {
bitmap = <unk> . get ( ) ;
}
if ( bitmap == null ) {
switch ( mType ) {
case <unk> :
bitmap = <unk> ( ) ;
break ;
case <unk> :
bitmap = <unk> ( ) ;
break ;
}
<unk> = new SoftReference < Bitmap > ( bitmap ) ;
}
return bitmap ;
}
private Bitmap <unk> ( ) {
return MediaStore . Images . <unk> . <unk> (
mContext . getContentResolver ( ) ,
<unk> ,
MediaStore . Images . <unk> . <unk> ,
null
) ;
}
private Bitmap <unk> ( ) {
return BitmapFactory . decodeFile ( <unk> ) ;
}
public Date <unk> ( ) {
return <unk> ;
}
@Override
public long getId ( ) {
return <num> ;
}
@Override
public String getTitle ( ) {
return sdf . format ( <unk> ( ) ) ;
}
}
package jp . <unk> ;
public interface <unk> {
public long getId ( ) ;
public String getTitle ( ) ;
package jp . <unk> ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . BaseAdapter ;
import android . widget . LinearLayout ;
import java . util . ArrayList ;
import java . util . List ;
public abstract class <unk> < T extends <unk> > extends BaseAdapter {
private int mNumColumns ;
private ArrayList < Container > <unk> ;
protected abstract View <unk> ( String title ) ;
protected abstract View <unk> ( T item ) ;
protected abstract View <unk> ( ViewGroup parent ) ;
protected abstract View <unk> ( View convertView ) ;
private class Container {
String title ;
ArrayList < T > items ;
public Container ( String title ) {
this . title = title ;
this . items = new ArrayList < T > ( ) ;
}
}
public <unk> ( int numColumns ) {
mNumColumns = numColumns ;
<unk> = new ArrayList < Container > ( ) ;
}
public void <unk> ( List < T > items ) {
for ( T item : items ) {
if ( <unk> . size ( ) == <num> ) {
<unk> . add ( new Container ( item . getTitle ( ) ) ) ;
}
Container container = <unk> . get ( <unk> . size ( )  <num> ) ;
if ( container . title . equals ( item . getTitle ( ) ) ) {
} else {
<unk> . add ( new Container ( item . getTitle ( ) ) ) ;
container = <unk> . get ( <unk> . size ( )  <num> ) ;
}
container . items . add ( item ) ;
}
}
private int <unk> ( Container c ) {
return ( ( c . items . size ( ) + mNumColumns  <num> ) / mNumColumns ) + <num> ;
}
@Override
public int getCount ( ) {
int count = <num> ;
for ( Container c : <unk> ) {
count += <unk> ( c ) ;
}
return count ;
}
@Override
public List < T > getItem ( int position ) {
ArrayList < T > items = new ArrayList < T > ( ) ;
int <unk> = <num> ;
for ( Container c : <unk> ) {
int rowSize = <unk> ( c ) ;
if ( <unk> == position ) {
return null ;
}
if ( ( <unk> + rowSize ) > position ) {
int offset = ( position  <unk>  <num> ) * mNumColumns ;
for ( int itemPos = offset ; itemPos < c . items . size ( ) ; itemPos ++ ) {
items . add ( c . items . get ( itemPos ) ) ;
if ( items . size ( ) >= mNumColumns ) {
break ;
}
}
break ;
}
<unk> += rowSize ;
}
return items ;
}
private String getTitle ( int position ) {
int <unk> = <num> ;
for ( Container c : <unk> ) {
if ( <unk> == position ) {
return c . title ;
}
<unk> += <unk> ( c ) ;
}
return " ;
}
@Override
public long getItemId ( int position ) {
return position ;
}
@Override
public View getView ( int position , View convertView , ViewGroup parent ) {
<unk> holder ;
if ( convertView == null || convertView . getTag ( ) == null ) {
convertView = <unk> ( parent ) ;
holder = new <unk> ( ) ;
holder . container = ( LinearLayout ) <unk> ( convertView ) ;
convertView . setTag ( holder ) ;
} else {
holder = ( <unk> ) convertView . getTag ( ) ;
}
if ( holder . container . getChildCount ( ) > <num> ) {
holder . container . removeAllViews ( ) ;
}
List < T > items = getItem ( position ) ;
if ( items == null ) {
String title = getTitle ( position ) ;
View v = <unk> ( title ) ;
if ( v != null ) {
holder . container . addView ( v ) ;
}
} else {
for ( T item : items ) {
View v = <unk> ( item ) ;
if ( v != null ) {
holder . container . addView ( v ) ;
}
}
}
return convertView ;
}
private class <unk> {
LinearLayout container ;
}
package com . <unk> . <unk> . util ;
import org . hibernate . <unk> ;
import org . hibernate . cfg . Configuration ;
import org . hibernate . service . <unk> ;
import org . hibernate . service . <unk> ;
public class HibernateUtil {
private static <unk> <unk> = null ;
private static <unk> <unk> = null ;
static {
try {
Configuration configuration = new Configuration ( ) ;
configuration . configure ( " ) ;
<unk> = new <unk> ( ) . <unk> ( configuration . getProperties ( ) ) . <unk> ( ) ;
<unk> = configuration . <unk> ( <unk> ) ;
} catch ( Exception e ) {
System . err . println ( " + e ) ;
throw new <unk> ( e ) ;
}
}
public static <unk> <unk> ( ) {
return <unk> ;
}
}
package com . <unk> . <unk> . entity ;
import java . io . Serializable ;
public class Address implements Serializable {
private static final long serialVersionUID = <num> ;
private long id ;
private String street ;
private String city ;
private String state ;
private String <unk> ;
public Address ( ) {
}
public long getId ( ) {
return id ;
}
public void setId ( long id ) {
this . id = id ;
}
public String getStreet ( ) {
return street ;
}
public void setStreet ( String street ) {
this . street = street ;
}
public String getCity ( ) {
return city ;
}
public void setCity ( String city ) {
this . city = city ;
}
public String getState ( ) {
return state ;
}
public void setState ( String state ) {
this . state = state ;
}
public String <unk> ( ) {
return <unk> ;
}
public void <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
}
package com . <unk> . <unk> . entity ;
import org . hibernate . HibernateException ;
import org . hibernate . Session ;
import org . hibernate . Transaction ;
import com . <unk> . <unk> . util . HibernateUtil ;
public class App
{
public static void main ( String [ ] args )
{
Session session = HibernateUtil . <unk> ( ) . openSession ( ) ;
Transaction transaction = null ;
try {
transaction = session . beginTransaction ( ) ;
Address address = new Address ( ) ;
address . setCity ( " ) ;
address . setState ( " ) ;
address . setStreet ( " ) ;
address . <unk> ( " ) ;
<unk> st1 = new <unk> ( ) ;
st1 . setName ( " ) ;
st1 . setAddress ( address ) ;
<unk> st2 = new <unk> ( ) ;
st2 . setName ( " ) ;
st2 . setAddress ( address ) ;
session . save ( st2 ) ;
session . save ( st1 ) ;
transaction . commit ( ) ;
} catch ( HibernateException e ) {
transaction . rollback ( ) ;
e . printStackTrace ( ) ;
} finally {
session . close ( ) ;
}
}
}
package com . <unk> . <unk> ;
import junit . framework . Test ;
import junit . framework . TestCase ;
import junit . framework . TestSuite ;
public class AppTest
extends TestCase
{
public AppTest ( String testName )
{
super ( testName ) ;
}
public static Test suite ( )
{
return new TestSuite ( AppTest . class ) ;
}
public void testApp ( )
{
assertTrue ( true ) ;
}
}
package com . <unk> . <unk> . entity ;
import java . io . Serializable ;
public class <unk> implements Serializable {
private static final long serialVersionUID = <num> ;
private long id ;
private String name ;
private Address address ;
public <unk> ( ) {
}
public long getId ( ) {
return id ;
}
public void setId ( long id ) {
this . id = id ;
}
public String getName ( ) {
return name ;
}
public void setName ( String name ) {
this . name = name ;
}
public Address getAddress ( ) {
return address ;
}
public void setAddress ( Address address ) {
this . address = address ;
}
}
import java . io . * ;
import java . net . * ;
import java . util . Vector ;
public class wget {
private String <unk> = " ;
public wget ( String url ) {
<unk> = url ;
}
public void get ( String data ) throws IOException
{
try {
data = URLEncoder . encode ( data , " ) ;
String <unk> = <unk> + data ;
URL <unk> = new URL ( <unk> ) ;
InputStreamReader isr = new InputStreamReader ( <unk> . openStream ( ) ) ;
BufferedReader in = new BufferedReader ( isr ) ;
StringBuffer sb = new StringBuffer ( ) ;
String inputLine ;
while ( ( inputLine = in . readLine ( ) ) != null ) {
System . out . println ( inputLine ) ;
}
}
catch ( MalformedURLException mue ) {
mue . printStackTrace ( ) ;
}
catch ( IOException ioe ) {
throw ioe ;
}
}
public static void main ( String [ ] args ) {
try {
BufferedReader <unk> = new BufferedReader ( new InputStreamReader ( System . in ) ) ;
while ( <unk> . ready ( ) ) {
wget <unk> = new wget ( args [ <num> ] ) ;
<unk> . get ( <unk> . readLine ( ) ) ;
Thread . currentThread ( ) . sleep ( <num> ) ;
}
<unk> . close ( ) ;
}
catch ( Exception ex ) {
ex . printStackTrace ( ) ;
}
}
package com . <unk> . <unk> ;
import java . io . Serializable ;
import android . content . Context ;
import android . graphics . Canvas ;
import android . graphics . Paint ;
import android . graphics . Path ;
import android . os . Bundle ;
import android . support . v4 . app . Fragment ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . FrameLayout ;
public class <unk> extends Fragment implements <unk> {
private static final String TAG = " ;
public <unk> ( ) { }
private <unk> chartView ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
private static final String <unk> = " ;
private int <unk> ;
private int <unk> ;
@Override
public View onCreateView ( LayoutInflater inflater , ViewGroup container ,
Bundle savedInstanceState ) {
Bundle args = getArguments ( ) ;
long t1 = System . currentTimeMillis ( ) ;
<unk> . d ( TAG , " , System . currentTimeMillis ( ) ) ;
if ( args == null
|| ! args . containsKey ( <unk> )
|| ! args . containsKey ( <unk> )
|| ! args . containsKey ( <unk> )
|| ! args . containsKey ( <unk> )
|| ! args . containsKey ( <unk> )
|| ! args . containsKey ( <unk> )
|| ! args . containsKey ( <unk> )
|| ! args . containsKey ( <unk> )
|| ! args . containsKey ( <unk> )
|| ! args . containsKey ( <unk> )
|| ! args . containsKey ( <unk> ) ) {
throw new IllegalStateException ( " ) ;
}
<unk> . d ( TAG , " , System . currentTimeMillis ( )  t1 ) ;
ViewGroup . LayoutParams params = container . getLayoutParams ( ) ;
params . height = args . getInt ( <unk> ) ;
params . width = args . getInt ( <unk> ) ;
this . chartView = new <unk> ( getActivity ( ) , args ) ;
this . <unk> = args . getInt ( <unk> ) ;
this . <unk> = args . getInt ( <unk> ) ;
this . chartView . setBackgroundColor ( <unk> ) ;
this . chartView . setLayoutParams ( params ) ;
return this . chartView ;
}
@Override
public void onActivityCreated ( Bundle <unk> ) {
super . onActivityCreated ( <unk> ) ;
if ( <unk> != null ) {
<unk> state = ( <unk> ) <unk> . get ( <unk> ) ;
<unk> . i ( TAG , " ) ;
this . chartView . restoreState ( state ) ;
} else {
<unk> . i ( TAG , " ) ;
}
}
public void setName ( String name ) {
this . chartView . setName ( name ) ;
}
public void <unk> ( float <unk> ) {
this . chartView . <unk> ( <unk> ) ;
}
public void reset ( ) {
this . chartView . reset ( ) ;
}
public void setDisabled ( ) {
this . chartView . <unk> ( true ) ;
this . chartView . setBackgroundColor ( <unk> ) ;
this . chartView . invalidate ( ) ;
}
public void setEnabled ( ) {
this . chartView . <unk> ( false ) ;
this . chartView . setBackgroundColor ( <unk> ) ;
}
public void <unk> ( ) {
this . chartView . invalidate ( ) ;
}
@Override
public void onSaveInstanceState ( Bundle outState ) {
<unk> . i ( TAG , " ) ;
outState . putSerializable ( <unk> ,
this . chartView . <unk> ( ) ) ;
super . onSaveInstanceState ( outState ) ;
}
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int ROWS = <num> ;
protected static class <unk> implements Serializable {
private static final long serialVersionUID =  <num> ;
float [ ] values = new float [ <unk> ] ;
boolean <unk> = false ;
int pos ;
}
private class <unk> extends FrameLayout {
private static final String TAG = " ;
private <unk> state ;
private String name ;
boolean <unk> = false ;
int width = <num> , height = <num> ;
int <unk> ;
Paint <unk> = new Paint ( ) ;
Paint <unk> = new Paint ( ) ;
Paint <unk> = new Paint ( ) ;
Path column = new Path ( ) ;
Path path = new Path ( ) ;
Path row = new Path ( ) ;
int lineWidth ;
public <unk> ( Context context , Bundle args ) {
super ( context ) ;
this . lineWidth = args . getInt ( <unk> ) ;
this . <unk> . setStrokeWidth ( this . lineWidth ) ;
this . <unk> . setAntiAlias ( args . getBoolean ( <unk> ) ) ;
this . <unk> . setColor ( args . getInt ( <unk> ) ) ;
this . <unk> . setStyle ( Paint . Style . STROKE ) ;
this . <unk> . setColor ( args . getInt ( <unk> ) ) ;
this . <unk> . setTextSize ( args . getInt ( <unk> ) ) ;
this . <unk> . setAntiAlias ( args . getBoolean ( <unk> ) ) ;
this . <unk> . setColor ( args . getInt ( <unk> ) ) ;
this . <unk> . setStrokeWidth ( args . getInt ( <unk> ) ) ;
this . <unk> . setStyle ( Paint . Style . STROKE ) ;
this . state = new <unk> ( ) ;
}
public void setName ( String name ) {
this . name = name ;
}
public void restoreState ( <unk> <unk> ) {
this . state = <unk> ;
}
public void <unk> ( boolean <unk> ) {
this . <unk> = <unk> ;
}
public <unk> <unk> ( ) {
return this . state ;
}
public void <unk> ( float <unk> ) {
this . state . values [ this . state . pos ++ ] = <unk> ;
if ( this . state . pos == <unk> ) {
this . state . <unk> = true ;
this . state . pos = <num> ;
}
invalidate ( ) ;
}
public void reset ( ) {
this . state = new <unk> ( ) ;
}
@Override
protected void onDraw ( Canvas canvas ) {
float textSize = this . <unk> . getTextSize ( ) ;
if ( ! this . <unk> ) {
float t = <num> ;
int <unk> = this . state . pos  <num> ;
if ( this . state . <unk> && <unk> < <num> ) {
<unk> = <unk> + <unk> ;
} else if ( ! this . state . <unk> && <unk> < <num> ) {
return ;
}
path . rewind ( ) ;
path . <unk> ( <unk> + <num> ) ;
path . moveTo ( t , height * ( <num>  this . state . values [ <unk> ] ) ) ;
column . rewind ( ) ;
column . moveTo ( <num> , <num> ) ;
column . lineTo ( <num> , height ) ;
row . rewind ( ) ;
row . moveTo ( <num> , <num> ) ;
row . lineTo ( width , <num> ) ;
t += this . <unk> ;
float adjustedHeight = ( height  this . lineWidth * <num> ) ;
for ( int i = this . state . pos  <num> ; i >= <num> ; i  ) {
float y = adjustedHeight * ( <num>  this . state . values [ i ] ) ;
float x = t ;
t += this . <unk> ;
path . lineTo ( x , y ) ;
}
for ( int i = <unk>  <num> ; this . state . <unk> && i >= this . state . pos ; i  ) {
float y = adjustedHeight * ( <num>  this . state . values [ i ] ) ;
float x = t ;
t += this . <unk> ;
path . lineTo ( x , y ) ;
}
int <unk> = this . state . pos  <num> ;
if ( <unk> < <num> ) {
<unk> += <unk> ;
}
float y = adjustedHeight * ( <num>  this . state . values [ <unk> ] ) ;
path . lineTo ( t , y ) ;
int <unk> = <unk> / <unk> ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
canvas . drawPath ( column , this . <unk> ) ;
column . offset ( <unk> * this . <unk> , <num> ) ;
}
float rowHeight = this . height / ( ( float ) ROWS ) ;
for ( int i = <num> ; i < ROWS ; i ++ ) {
canvas . drawPath ( row , this . <unk> ) ;
row . offset ( <num> , rowHeight ) ;
}
canvas . drawPath ( path , this . <unk> ) ;
canvas . drawText (
Float . toString ( ( float )
Math . round ( this . state . values [ <unk> ] * <num> ) / <num> ) + " ,
0 , textSize + <num> , this . <unk> ) ;
if ( this . name != null ) {
float nameWidth = <num> ;
float [ ] widths = new float [ this . name . length ( ) ] ;
this . <unk> . getTextWidths ( this . name , widths ) ;
for ( int i = <num> ; i < widths . length ; i ++ ) {
nameWidth += widths [ i ] ;
}
canvas . drawText ( this . name , this . width  nameWidth , textSize + <num> ,
this . <unk> ) ;
}
} else if ( this . name != null ) {
String message = this . name + " ;
float <unk> = <num> ;
float [ ] widths = new float [ message . length ( ) ] ;
this . <unk> . getTextWidths ( message , widths ) ;
for ( int i = <num> ; i < widths . length ; i ++ ) {
<unk> += widths [ i ] ;
}
canvas . drawText ( message , this . width / <num>  <unk> / <num> ,
this . height / <num> + textSize / <num> , this . <unk> ) ;
}
}
@Override
protected void onSizeChanged ( int width , int height , int oldWidth , int oldHeight ) {
<unk> . d ( TAG , " , getWidth ( ) , getHeight ( ) ) ;
this . width = getWidth ( ) ;
this . height = getHeight ( ) ;
this . <unk> = this . width / <unk> ;
}
}
}
package com . <unk> . <unk> ;
import java . io . File ;
import java . io . FileNotFoundException ;
import java . io . IOException ;
import java . io . RandomAccessFile ;
import java . util . ArrayList ;
import java . util . HashMap ;
@SuppressWarnings("unused")
public class <unk> {
private static final String TAG = " ;
private static final float <unk> =  <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private static final String <unk> = " ;
RandomAccessFile <unk> ;
private byte [ ] mBuffer = new byte [ <num> ] ;
private static final int <unk> = <num> ;
private static final long [ ] <unk> = {
1 ,
10 ,
100 ,
1000 ,
<unk> ,
<unk> ,
<unk> ,
<unk> ,
<unk> ,
<unk>
} ;
private HashMap < String , Long [ ] > <unk> = null ;
private HashMap < String , Long [ ] > <unk> = null ;
private int <unk> = <num> ;
private static void swap ( Object a , Object b ) {
Object tmp = a ;
a = b ;
b = tmp ;
}
public <unk> ( ) throws FileNotFoundException {
File file = new File ( <unk> ) ;
<unk> = new RandomAccessFile ( file , " ) ;
}
public <unk> ( String <unk> ) throws FileNotFoundException {
File file = new File ( <unk> ) ;
<unk> = new RandomAccessFile ( file , " ) ;
}
public void <unk> ( ) {
<unk> = <unk> ( <unk> ) ;
}
public synchronized float [ ] getUsage ( float [ ] <unk> ) {
<unk> = <unk> ( <unk> ) ;
float [ ] results ;
if ( <unk> == null ) {
results = new float [ <unk> + <num> ] ;
} else {
results = <unk> ;
}
if ( <unk> . size ( ) > this . <unk> ) {
this . <unk> = <unk> . size ( ) ;
}
results [ <num> ] = this . <unk> ;
for ( int i = <num> ; i < this . <unk> ; i ++ ) {
String <unk> = " + ( i == <num> ? " : i  <num> ) ;
<unk> . d ( TAG , " , <unk> ) ;
Long [ ] <unk> = <unk> . get ( <unk> ) ;
Long [ ] <unk> = <unk> . get ( <unk> ) ;
if ( <unk> == null || <unk> == null ) {
<unk> . d ( TAG , " ) ;
results [ i + <num> ] = <unk> ;
} else {
float usage = <unk> ( <unk> , <unk> ) ;
<unk> . d ( TAG , " , usage ) ;
results [ i + <num> ] = usage ;
}
}
swap ( <unk> , <unk> ) ;
return results ;
}
private float <unk> ( Long [ ] <unk> , Long [ ] <unk> ) {
long <unk> = <unk> [ <unk> ] ;
long <unk> = <unk> [ <unk> ] ;
long <unk> = <num> , <unk> = <num> ;
for ( int i = <num> ; i <= <unk> ; i ++ ) {
<unk> += <unk> [ i ] ;
<unk> += <unk> [ i ] ;
}
float <unk> = <unk>  <unk> ;
float <unk> = <unk>  <unk> ;
float <unk> = ( <unk>  <unk> ) / <unk> ;
return <unk> ;
}
public static String <unk> ( byte b ) {
switch ( b ) {
case  ' :
return " ;
case <num>  :
return " ;
case <num>  :
return " ;
case <num>  :
return " ;
case <num>  :
return " ;
case <num>  :
return " ;
case <num>  :
return " ;
case <num>  :
return " ;
case <num>  :
return " ;
default :
throw new IllegalArgumentException ( " ) ;
}
}
public HashMap < String , Long [ ] > <unk> ( HashMap < String , Long [ ] > <unk> ) {
if ( <unk> == null ) {
<unk> = new HashMap < String , Long [ ] > ( <unk> ) ;
} else {
<unk> . clear ( ) ;
}
long startTime = System . currentTimeMillis ( ) ;
try {
<unk> . seek ( <num> ) ;
int bytesRead = <unk> . read ( mBuffer ) ;
String <unk> = null ;
int i =  <num> ;
Long [ ] values = null ;
long value = <num> ;
int <unk> = <num> ;
while ( i ++ < bytesRead ) {
if ( mBuffer [ i ] == c' && mBuffer [ i + <num> ] == p' &&
mBuffer [ i + <num> ] == u' ) {
<unk> = <unk> ( mBuffer [ i + <num> ] ) ;
values = <unk> . get ( <unk> ) ;
if ( values == null ) {
values = new Long [ <num> ] ;
}
<unk> = <num> ;
i += <unk> ;
}
if ( mBuffer [ i ] >= <num>  && mBuffer [ i ] <= <num>  ) {
int j = i ;
while ( mBuffer [ j ] !=  ' && mBuffer [ j ] != \n' ) j ++ ; j  ;
int power = j  i ;
while ( i <= j ) {
long <unk> = ( mBuffer [ i ++ ]  <num>  ) * <unk> [ power  ] ;
value += <unk> ;
}
}
if ( <unk> < <unk> ) {
values [ <unk> ++ ] = value ;
value = <num> ;
} else if ( <unk> == <unk> ) {
values [ <unk> ++ ] = value ;
value = <num> ;
<unk> . put ( <unk> , values ) ;
}
}
return <unk> ;
} catch ( IOException e ) {
System . out . println ( TAG + " + e . getMessage ( ) ) ;
return null ;
}
}
public void close ( ) {
try {
<unk> . close ( ) ;
} catch ( IOException e ) {
}
}
}
package com . <unk> . <unk> ;
import static com . <unk> . <unk> . <unk> . * ;
import android . os . Bundle ;
import android . view . ViewGroup . LayoutParams ;
public final class <unk> {
public static <unk> <unk> ( ) {
<unk> fragment = new <unk> ( ) ;
Bundle bundle = new Bundle ( ) ;
bundle . putInt ( <unk> , LayoutParams . MATCH_PARENT ) ;
bundle . putInt ( <unk> , <num> ) ;
bundle . putInt ( <unk> , <num> ) ;
bundle . putInt ( <unk> , <num> ) ;
bundle . putInt ( <unk> , <num> ) ;
bundle . putInt ( <unk> , <num> ) ;
bundle . putInt ( <unk> , <num> ) ;
bundle . putInt ( <unk> , <num> ) ;
bundle . putInt ( <unk> , <num> ) ;
bundle . putInt ( <unk> , <num> ) ;
bundle . putBoolean ( <unk> , true ) ;
fragment . setArguments ( bundle ) ;
return fragment ;
}
}
package com . <unk> . <unk> ;
import android . app . Activity ;
import android . os . Bundle ;
import android . webkit . WebView ;
import com . <unk> . analytics . <unk> ;
import com . <unk> . analytics . <unk> ;
public class AboutActivity extends Activity {
private static final String TAG = " ;
<unk> analytics = <unk> . <unk> ( ) ;
@Override
protected void onCreate ( Bundle savedInstanceState ) {
this . analytics . create ( this , TAG ) ;
super . onCreate ( savedInstanceState ) ;
WebView web = new WebView ( this ) ;
web . loadUrl ( " ) ;
setContentView ( web ) ;
}
}
package com . <unk> . <unk> ;
import java . io . FileNotFoundException ;
import java . util . ArrayList ;
import android . content . Context ;
import android . content . Intent ;
import android . os . Bundle ;
import android . support . v4 . app . Fragment ;
import android . support . v4 . app . FragmentActivity ;
import android . support . v4 . app . FragmentManager ;
import android . view . View ;
import android . widget . Button ;
import com . <unk> . analytics . <unk> ;
import com . <unk> . analytics . <unk> ;
import com . <unk> . analytics . <unk> ;
public class <unk> extends FragmentActivity
implements <unk> . <unk> , <unk> {
private static final String <unk> = " ;
private static final String TAG = " ;
private <unk> <unk> ;
private FragmentManager <unk> ;
private <unk> <unk> ;
private <unk> analytics = <unk> . <unk> ( ) ;
private ArrayList < Fragment > <unk> = new ArrayList < Fragment > ( ) ;
private <unk> <unk> ;
private boolean isPaused = false ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
this . analytics . create ( this , TAG ) ;
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
this . <unk> = getSupportFragmentManager ( ) ;
this . <unk> = new <unk> ( ) ;
this . <unk> = ( <unk> )
this . <unk> . <unk> ( <unk> ) ;
if ( this . <unk> == null ) {
try {
this . <unk> = new <unk> ( ) ;
} catch ( FileNotFoundException e ) {
Intent intent = new Intent ( this , <unk> . class ) ;
intent . putExtra ( <unk> . EXTRA_MESSAGE ,
"
+ " ) ;
intent . addFlags ( Intent . FLAG_ACTIVITY_NO_HISTORY ) ;
startActivity ( intent ) ;
return ;
}
}
this . <unk> . <unk> ( true ) ;
this . <unk> . beginTransaction ( )
. add ( this . <unk> , <unk> ) . commit ( ) ;
this . <unk> . <unk> ( this ) ;
}
@Override
public void onResume ( ) {
this . analytics . resume ( ) ;
super . onResume ( ) ;
if ( this . <unk> != null ) {
this . isPaused = false ;
this . <unk> = new <unk> ( this , this . <unk> ) ;
( ( Button ) findViewById ( R . id . <unk> ) ) . setOnClickListener ( this . <unk> ) ;
Button toggle = ( Button ) findViewById ( R . id . <unk> ) ;
toggle . setOnClickListener ( this . <unk> ) ;
toggle . setText ( getString ( R . string . Stop ) ) ;
this . <unk> . start ( ) ;
}
}
public void onPause ( ) {
this . analytics . pause ( ) ;
super . onPause ( ) ;
if ( this . <unk> != null ) {
this . <unk> . stop ( ) ;
( ( Button ) findViewById ( R . id . <unk> ) ) . setText ( getString ( R . string . Start ) ) ;
this . isPaused = true ;
}
}
private static class <unk> implements View . OnClickListener {
private String <unk> ;
private String <unk> ;
private <unk> monitor ;
public <unk> ( Context context , <unk> monitor ) {
this . <unk> = context . getString ( R . string . Stop ) ;
this . <unk> = context . getString ( R . string . Start ) ;
this . monitor = monitor ;
}
private void toggle ( Button button ) {
if ( this . monitor . isStarted ( ) ) {
this . monitor . stop ( ) ;
button . setText ( this . <unk> ) ;
} else {
this . monitor . start ( ) ;
button . setText ( this . <unk> ) ;
}
}
private static void <unk> ( ) {
for ( int i = <num> ; i < <num> ; i ++ ) {
new Thread ( new Runnable ( ) {
public void run ( ) {
for ( int rev = <num> ; rev < <num> ; rev ++ ) {
for ( long i = <num> , j = <num> ; i + j < <num> ; ) {
long temp = i + j ;
j = i ;
i = temp ;
<unk> . d ( TAG , " , i , j ) ;
}
}
}
} ) . start ( ) ;
}
}
public void onClick ( View view ) {
int id = view . getId ( ) ;
switch ( id ) {
case R . id . <unk> :
toggle ( ( Button ) view ) ;
break ;
case R . id . <unk> :
<unk> ( ) ;
break ;
}
}
}
private class <unk> implements Runnable {
public ArrayList < Fragment > <unk> ;
public float [ ] <unk> ;
int <unk> = <num> ;
public synchronized void run ( ) {
if ( isPaused ) {
<unk> . v ( TAG , " ) ;
return ;
}
synchronized ( <unk> ) {
boolean isDirty = false ;
int <unk> = ( int ) <unk> [ <num> ] ;
<unk> . d ( TAG , " , <unk> ) ;
while ( <unk> . size ( ) < <unk> ) {
isDirty = true ;
String tag = String . valueOf ( <unk> ) ;
Fragment chart = <unk> . this . <unk>
. <unk> ( tag ) ;
if ( chart == null ) {
chart = <unk> . <unk> ( ) ;
}
<unk> . d ( TAG , " ,
chart . getId ( ) ) ;
<unk> . this . <unk>
. beginTransaction ( )
. add ( R . id . <unk> , chart , tag ) . commit ( ) ;
<unk> . add ( chart ) ;
<unk> ++ ;
}
if ( isDirty ) {
<unk> . this . <unk> . <unk> ( ) ;
}
int i ;
for ( i = <num> ; i < <unk> ; i ++ ) {
<unk> <unk> = ( <unk> ) <unk> . get ( i ) ;
float <unk> = <unk> [ i + <num> ] ;
if ( <unk> != null && <unk> >= <num> ) {
<unk> . setEnabled ( ) ;
<unk> . setName ( " + ( i == <num> ? " : ( i  <num> ) + " ) ) ;
<unk> . <unk> ( <unk> ) ;
} else if ( <unk> != null ) {
<unk> . reset ( ) ;
<unk> . setName ( " + ( i == <num> ? " : ( i  <num> ) + " ) ) ;
<unk> . setDisabled ( ) ;
}
}
}
}
}
@Override
public void <unk> ( final float [ ] <unk> ) {
synchronized ( <unk> ) {
<unk> . <unk> = <unk> ;
<unk> . <unk> = <unk> ;
}
runOnUiThread ( <unk> ) ;
}
@Override
public <unk> <unk> ( ) {
return this . analytics ;
}
}
package com . <unk> . <unk> ;
import android . content . Intent ;
import android . os . Bundle ;
import android . support . v4 . app . Fragment ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . ImageView ;
import com . <unk> . analytics . <unk> ;
import com . <unk> . analytics . <unk> ;
public class <unk> extends Fragment {
private <unk> analytics ;
@Override
public View onCreateView ( LayoutInflater inflater ,
ViewGroup container , Bundle savedInstanceState ) {
View layout = inflater . inflate ( R . layout . <unk> ,
container , false ) ;
( ( ImageView ) layout . findViewById ( R . id . <unk> ) ) . setOnClickListener (
new View . OnClickListener ( ) {
@Override
public void onClick ( View v ) {
<unk> . this . analytics . event ( " ) ;
Intent intent = new Intent ( getActivity ( ) , AboutActivity . class ) ;
startActivity ( intent ) ;
}
}
) ;
return layout ;
}
@Override
public void onActivityCreated ( Bundle savedInstanceState ) {
super . onActivityCreated ( savedInstanceState ) ;
this . analytics = <unk> . <unk> ( this ) ;
}
}
package com . <unk> . <unk> ;
public interface <unk> {
public void <unk> ( float <unk> ) ;
public void setName ( String name ) ;
public void reset ( ) ;
public void setDisabled ( ) ;
public void setEnabled ( ) ;
}
package com . <unk> . <unk> ;
import android . os . Bundle ;
import android . support . v4 . app . Fragment ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . TextView ;
public class <unk> extends Fragment {
@SuppressWarnings("unused")
private static final String TAG = " ;
public <unk> ( ) { }
TextView <unk> ;
TextView <unk> ;
@Override
public View onCreateView ( LayoutInflater inflater , ViewGroup container ,
Bundle savedInstanceState ) {
View view = inflater . inflate ( R . layout . <unk> , container , false ) ;
this . <unk> = ( TextView ) view . findViewById ( R . id . <unk> ) ;
this . <unk> = ( TextView ) view . findViewById ( R . id . <unk> ) ;
return view ;
}
public void setName ( String name ) {
this . <unk> . setText ( name ) ;
}
public void <unk> ( int used , int available ) {
this . <unk> . setText ( used + " + available ) ;
}
}
package com . <unk> . <unk> ;
import android . app . Application ;
import com . <unk> . analytics . <unk> ;
public class <unk> extends Application {
@Override
public void onCreate ( ) {
<unk> . <unk> = " ;
}
}
package com . <unk> . <unk> ;
import android . app . Activity ;
import android . content . Intent ;
import android . os . Bundle ;
import android . webkit . WebView ;
import com . <unk> . analytics . <unk> ;
import com . <unk> . analytics . <unk> ;
public class <unk> extends Activity {
private static final String TAG = " ;
public static final String EXTRA_MESSAGE = " ;
private <unk> analytics = <unk> . <unk> ( ) ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
this . analytics . create ( this , TAG ) ;
super . onCreate ( savedInstanceState ) ;
WebView web = new WebView ( this ) ;
String message = null ;
Intent intent = getIntent ( ) ;
if ( intent != null ) {
message = intent . getStringExtra ( EXTRA_MESSAGE ) ;
}
StringBuilder html = new StringBuilder ( ) ;
html . append ( " ) ;
html . append ( " ) ;
html . append ( " ) ;
html . append ( " ) ;
html . append ( " ) ;
html . append ( " ) ;
html . append ( <unk> . format ( " , ( message == null ?
" : message ) ) ) ;
html . append ( "
+ " ) ;
html . append ( " ) ;
html . append ( " ) ;
web . loadData ( html . toString ( ) , " , null ) ;
setContentView ( web ) ;
}
}
package com . <unk> . <unk> ;
import android . util . Log ;
public class <unk> {
public static String format ( String fmt , Object . . . values ) {
StringBuilder builder = new StringBuilder ( ) ;
int len = fmt . length ( ) ;
int pos = <num> ;
boolean <unk> = false ;
for ( int i = <num> ; i < len ; i ++ ) {
char ch = fmt . charAt ( i ) ;
if ( ch == %' && ! <unk> )
{
<unk> = true ;
continue ;
}
if ( <unk> && ch == s' && pos < values . length )
{
builder . append ( ( String ) values [ pos ++ ] ) ;
<unk> = false ;
}
else if ( <unk> && ch == d' && pos < values . length )
{
builder . append ( Integer . toString ( ( Integer ) values [ pos ++ ] ) ) ;
<unk> = false ;
}
else if ( <unk> && ch == l' && pos < values . length )
{
builder . append ( Long . toString ( ( Long ) values [ pos ++ ] ) ) ;
<unk> = false ;
}
else if ( <unk> && ch == f' && pos < values . length )
{
builder . append ( Float . toString ( ( Float ) values [ pos ++ ] ) ) ;
<unk> = false ;
}
else if ( <unk> && ch == r' && pos < values . length )
{
builder . append ( Double . toString ( ( Double ) values [ pos ++ ] ) ) ;
<unk> = false ;
}
else if ( <unk> && ch == x' && pos < values . length )
{
builder . append ( Integer . toHexString ( ( Integer ) values [ pos ++ ] ) ) ;
<unk> = false ;
}
else
{
builder . append ( ch ) ;
}
}
return builder . toString ( ) ;
}
public static void a ( String tag , String fmt , Object . . . values ) {
Log . println ( Log . <unk> , tag , format ( fmt , values ) ) ;
}
public static void e ( String tag , String fmt , Object . . . values ) {
Log . e ( tag , format ( fmt , values ) ) ;
}
public static void i ( String tag , String fmt , Object . . . values ) {
Log . i ( tag , format ( fmt , values ) ) ;
}
public static void w ( String tag , String fmt , Object . . . values ) {
Log . w ( tag , format ( fmt , values ) ) ;
}
public static void v ( String tag , String fmt , Object . . . values ) {
Log . v ( tag , format ( fmt , values ) ) ;
}
public static void d ( String tag , String fmt , Object . . . values ) {
Log . d ( tag , format ( fmt , values ) ) ;
}
public static void wtf ( String tag , String fmt , Object . . . values ) {
Log . e ( tag , format ( fmt , values ) ) ;
}
}
package com . <unk> . <unk> ;
import java . io . FileNotFoundException ;
import android . support . v4 . app . Fragment ;
import android . util . Log ;
public class <unk> extends Fragment {
private static final String TAG = " ;
private Thread <unk> = null ;
private <unk> <unk> ;
private <unk> task = null ;
public interface <unk> {
public void <unk> ( float [ ] <unk> ) ;
}
protected <unk> mListener = null ;
protected static final int <unk> = <num> ;
public <unk> ( ) throws FileNotFoundException {
this . <unk> = new <unk> ( ) ;
}
public void <unk> ( <unk> listener ) {
mListener = listener ;
}
private void publishResults ( float [ ] <unk> ) {
if ( mListener != null ) {
mListener . <unk> ( <unk> ) ;
} else {
Log . w ( TAG , " ) ;
}
}
public synchronized boolean start ( ) {
if ( this . <unk> == null ) {
try {
this . task = new <unk> ( this . <unk> ) ;
this . <unk> = new Thread ( this . task ) ;
this . <unk> . start ( ) ;
} catch ( FileNotFoundException e ) {
Log . e ( TAG , " + e . getMessage ( ) ) ;
return false ;
}
return true ;
}
Log . e ( TAG , " ) ;
return false ;
}
public synchronized boolean isStarted ( ) {
return this . <unk> != null ;
}
public synchronized boolean stop ( ) {
if ( this . <unk> != null ) {
this . task . stop ( ) ;
this . <unk> = null ;
this . task = null ;
return true ;
}
Log . e ( TAG , " ) ;
return false ;
}
private class <unk> implements Runnable {
<unk> <unk> ;
private boolean isRunning = true ;
public <unk> ( <unk> reader ) throws FileNotFoundException {
this . <unk> = reader ;
}
public void stop ( ) {
isRunning = false ;
}
public void run ( ) {
float [ ] <unk> = null ;
<unk> . <unk> ( ) ;
try {
Thread . sleep ( <unk> ) ;
} catch ( InterruptedException e1 ) {
Log . d ( TAG , " ) ;
return ;
}
while ( this . isRunning ) {
<unk> = <unk> . getUsage ( <unk> ) ;
publishResults ( <unk> ) ;
try {
Thread . sleep ( <unk> ) ;
} catch ( InterruptedException e ) {
Log . d ( TAG , " ) ;
break ;
}
}
}
} ;
}
package com . ah . <unk> . plugin . eclipse . util ;
import org . eclipse . core . runtime . <unk> ;
import com . ah . <unk> . plugin . eclipse . <unk> ;
public class <unk> {
private static final boolean DEBUG = " . equalsIgnoreCase ( <unk>
. <unk> ( <unk> . PLUGIN_ID + " ) ) ;
public static void debug ( String debugMsg ) {
if ( DEBUG ) {
System . out . println ( debugMsg ) ;
}
}
}
package com . ah . <unk> . plugin . eclipse . compare ;
import org . eclipse . compare . <unk> ;
import org . eclipse . compare . <unk> ;
import org . eclipse . compare . <unk> ;
import org . eclipse . core . resources . IFile ;
import org . eclipse . core . resources . IResource ;
import org . eclipse . team . internal . ui . Utils ;
import org . eclipse . team . internal . ui . history . <unk> ;
import org . eclipse . team . internal . ui . <unk> . <unk> ;
import org . eclipse . ui . IEditorInput ;
import org . eclipse . ui . IEditorPart ;
import org . eclipse . ui . <unk> ;
import org . eclipse . ui . IWorkbenchPage ;
import org . eclipse . ui . IWorkbenchWindow ;
public class <unk> {
private IWorkbenchWindow window ;
private IResource [ ] <unk> ;
public <unk> ( IWorkbenchWindow window , IResource [ ] <unk> ) {
this . window = window ;
this . <unk> = <unk> ;
}
public void execute ( ) {
<unk> <unk> = null ;
<unk> left = null ;
<unk> right = null ;
if ( <unk> . length == <num> ) {
if ( <unk> [ <num> ] != null )
left = <unk> ( <unk> [ <num> ] ) ;
if ( <unk> [ <num> ] != null )
right = <unk> ( <unk> [ <num> ] ) ;
} else {
return ;
}
<unk> ( <unk> , left , right ) ;
}
private void <unk> ( <unk> <unk> , <unk> left , <unk> right ) {
IWorkbenchPage <unk> = window . getActivePage ( ) ;
<unk> input = new <unk> ( <unk> , left , right ,
<unk> ) ;
IEditorPart editor = Utils . <unk> ( input , <unk> ,
new Class [ ] { <unk> . class } ) ;
if ( editor != null ) {
IEditorInput <unk> = editor . getEditorInput ( ) ;
if ( <unk> . equals ( input ) ) {
<unk> . activate ( editor ) ;
} else {
<unk> . <unk> ( input , ( <unk> ) editor ) ;
<unk> . activate ( editor ) ;
}
} else {
<unk> . <unk> ( input ) ;
}
}
private <unk> <unk> ( IResource resource ) {
return <unk> . <unk> ( ( IFile ) resource ) ;
}
}
package com . ah . <unk> . plugin . eclipse . util ;
import org . eclipse . core . resources . IFile ;
import org . eclipse . core . runtime . IPath ;
import org . eclipse . jdt . core . ICompilationUnit ;
import org . eclipse . jface . text . TextSelection ;
import org . eclipse . jface . viewers . ISelection ;
import org . eclipse . jface . viewers . <unk> ;
import org . eclipse . ui . IEditorPart ;
import org . eclipse . ui . IWorkbenchWindow ;
public class <unk> {
public static <unk> <unk> ( IWorkbenchWindow window , ISelection selection ) {
<unk> <unk> = null ;
Object firstElement ;
String <unk> = null ;
IPath <unk> = null ;
if ( selection instanceof <unk> ) {
firstElement = ( ( <unk> ) selection ) . getFirstElement ( ) ;
if ( firstElement instanceof ICompilationUnit ) {
ICompilationUnit <unk> = ( ICompilationUnit ) firstElement ;
<unk> = <unk> . <unk> ( ) . getElementName ( ) ;
<unk> = <unk> . getResource ( ) . getLocation ( ) ;
<unk> = new <unk> ( <unk> . getResource ( ) , <unk> , <unk> ) ;
<unk> . debug ( " + <unk> . <unk> ( ) . getPath ( ) . toString ( ) ) ;
<unk> . debug ( " + <unk> ) ;
<unk> . debug ( " + <unk> . getResource ( ) . getClass ( ) ) ;
<unk> . debug ( " + <unk> . toString ( ) ) ;
} else if ( firstElement instanceof IFile ) {
IFile file = ( IFile ) firstElement ;
<unk> = file . getProject ( ) . getName ( ) ;
<unk> = file . getLocation ( ) ;
<unk> = new <unk> ( firstElement , <unk> , <unk> ) ;
<unk> . debug ( " + file ) ;
<unk> . debug ( " + file . getProject ( ) . getName ( ) ) ;
<unk> . debug ( " + file . getLocation ( ) . toString ( ) ) ;
}
} else if ( selection instanceof TextSelection ) {
IEditorPart editor = window . getActivePage ( ) . getActiveEditor ( ) ;
firstElement = editor . getEditorInput ( ) . getAdapter ( IFile . class ) ;
<unk> = ( ( IFile ) firstElement ) . getProject ( ) . getName ( ) ;
<unk> = ( ( IFile ) firstElement ) . getLocation ( ) ;
<unk> = new <unk> ( firstElement , <unk> , <unk> ) ;
<unk> . debug ( " + editor ) ;
<unk> . debug ( " + editor . getTitle ( ) ) ;
<unk> . debug ( " + editor . <unk> ( ) ) ;
<unk> . debug ( " + <unk> . <unk> ( ) ) ;
<unk> . debug ( " + <unk> . <unk> ( ) . toString ( ) ) ;
}
return <unk> ;
}
}
package com . ah . <unk> . plugin . eclipse . item ;
import java . util . LinkedList ;
import java . util . List ;
import org . eclipse . core . resources . IProject ;
import org . eclipse . core . resources . IWorkspace ;
import org . eclipse . core . resources . <unk> ;
import org . eclipse . core . resources . ResourcesPlugin ;
import org . eclipse . jface . action . <unk> ;
import org . eclipse . jface . viewers . ISelection ;
import org . eclipse . ui . IWorkbenchWindow ;
import org . eclipse . ui . PlatformUI ;
import org . eclipse . ui . actions . <unk> ;
import org . eclipse . ui . <unk> . <unk> ;
import org . eclipse . ui . <unk> . <unk> ;
import com . ah . <unk> . plugin . eclipse . util . <unk> ;
import com . ah . <unk> . plugin . eclipse . util . <unk> ;
import com . ah . <unk> . plugin . eclipse . util . <unk> ;
public class <unk> extends <unk> {
private static final String <unk> = " ;
@Override
protected <unk> [ ] <unk> ( ) {
IWorkbenchWindow window = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ;
ISelection selection = window . <unk> ( ) . getSelection ( ) ;
<unk> . debug ( " + selection ) ;
<unk> . debug ( " + selection . getClass ( ) ) ;
<unk> <unk> = <unk> . <unk> ( window , selection ) ;
if ( null == <unk> || null == <unk> . <unk> ( ) ) {
return new <unk> [ <num> ] ;
}
String <unk> = <unk> . <unk> ( ) ;
<unk> parameter = new <unk> (
window , null ,
<unk> ,
<unk> . <unk> ) ;
List < <unk> > items = initMenuItems ( <unk> , parameter ) ;
return items . toArray ( new <unk> [ items . size ( ) ] ) ;
}
private List < <unk> > initMenuItems ( String <unk> ,
<unk> parameter ) {
List < <unk> > items = new LinkedList < <unk> > ( ) ;
IWorkspace workspace = ResourcesPlugin . getWorkspace ( ) ;
<unk> root = workspace . getRoot ( ) ;
IProject [ ] projects = root . getProjects ( ) ;
<unk> . debug ( " + root . getLocation ( ) ) ;
int <unk> = <num> ;
for ( IProject project : projects ) {
<unk> . debug ( " + project + " + project . isAccessible ( )
+ " + project . isHidden ( ) ) ;
if ( project . isOpen ( ) ) {
String <unk> = project . getName ( ) ;
if ( ! <unk> . equals ( <unk> )
&& ! <unk> . equalsIgnoreCase ( <unk> . <unk> . getName ( ) )
&& ! <unk> . equalsIgnoreCase ( <unk> . <unk> . getName ( ) ) ) {
parameter . label = <unk> ;
if ( <unk> ( <unk> , <unk> ) ) {
items . add ( <unk> ++ , new <unk> ( parameter ) ) ;
} else {
items . add ( new <unk> ( parameter ) ) ;
}
<unk> . debug ( " + project . getLocation ( ) . toString ( ) ) ;
}
}
}
return items ;
}
private boolean <unk> ( String text1 , String text2 ) {
String <unk> , <unk> ;
if ( text1 . length ( ) > text2 . length ( ) ) {
<unk> = text1 . toLowerCase ( ) ;
<unk> = text2 . toLowerCase ( ) ;
} else {
<unk> = text2 . toLowerCase ( ) ;
<unk> = text1 . toLowerCase ( ) ;
}
if ( <unk> . startsWith ( <unk> ) ) {
return true ;
} else {
String <unk> = <unk> . substring ( <num> , <unk> . length ( ) / <num> ) ;
String <unk> = <unk> . substring ( <num> , <unk> . length ( ) / <num> ) ;
if ( <unk> . startsWith ( <unk> ) ) {
return true ;
}
}
return false ;
}
enum <unk> {
<unk> ( " ) , <unk> ( " ) ;
private final String name ;
private <unk> ( String name ) {
this . name = name ;
}
public String getName ( ) {
return name ;
}
}
}
package com . ah . <unk> . plugin . eclipse . handlers ;
import java . io . File ;
import org . eclipse . core . commands . AbstractHandler ;
import org . eclipse . core . commands . ExecutionEvent ;
import org . eclipse . core . commands . ExecutionException ;
import org . eclipse . core . resources . IFile ;
import org . eclipse . core . resources . IResource ;
import org . eclipse . core . resources . ResourcesPlugin ;
import org . eclipse . core . runtime . IPath ;
import org . eclipse . core . runtime . Path ;
import org . eclipse . jface . dialogs . MessageDialog ;
import org . eclipse . jface . viewers . ISelection ;
import org . eclipse . swt . widgets . Event ;
import org . eclipse . swt . widgets . MenuItem ;
import org . eclipse . ui . IWorkbenchWindow ;
import org . eclipse . ui . handlers . <unk> ;
import com . ah . <unk> . plugin . eclipse . compare . <unk> ;
import com . ah . <unk> . plugin . eclipse . util . <unk> ;
import com . ah . <unk> . plugin . eclipse . util . <unk> ;
import com . ah . <unk> . plugin . eclipse . util . <unk> ;
public class <unk> extends AbstractHandler {
@Override
public Object execute ( ExecutionEvent event ) throws ExecutionException {
try {
<unk> . debug ( " ) ;
IWorkbenchWindow window = <unk> . <unk> ( event ) ;
String <unk> = <unk> ( event ) ;
ISelection selection = <unk> . <unk> ( event ) ;
<unk> . debug ( " + selection . getClass ( ) ) ;
<unk> <unk> = <unk> . <unk> ( window , selection ) ;
if ( null == <unk> || <unk> . isNull ( ) ) {
MessageDialog . <unk> ( window . getShell ( ) , " ,
" + <unk> ) ;
return null ;
}
<unk> ( window , <unk> , <unk> ) ;
} finally {
<unk> . debug ( " ) ;
}
return null ;
}
private void <unk> ( IWorkbenchWindow window , String <unk> ,
<unk> <unk> ) {
IPath <unk> = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getLocation ( ) ;
<unk> . debug ( " + <unk> . append ( <unk> . <unk> ( ) ) . toString ( ) ) ;
if ( ! ( null == <unk> || <unk> . trim ( ) . isEmpty ( ) ) ) {
IPath <unk> = <unk> . append ( <unk> ) ;
if ( <unk> . toFile ( ) . exists ( ) ) {
String <unk> = <unk> . <unk> ( ) . toString ( ) . replace (
<unk> . append ( <unk> . <unk> ( ) ) . toString ( ) ,
<unk> . toString ( ) ) ;
<unk> . debug ( " + <unk> + " ) ;
if ( new File ( <unk> ) . exists ( ) ) {
IFile <unk> = ResourcesPlugin
. getWorkspace ( )
. getRoot ( )
. getFile (
new Path ( <unk> . replace (
<unk> . toString ( ) , " ) ) ) ;
<unk> action = new <unk> ( window , new IResource [ ] {
( IResource ) <unk> . getElement ( ) , <unk> } ) ;
action . execute ( ) ;
} else {
MessageDialog . <unk> ( window . getShell ( ) , " ,
" + <unk> + " ) ;
}
} else {
MessageDialog . <unk> ( window . getShell ( ) , " ,
" + <unk> + " ) ;
}
}
}
private String <unk> ( ExecutionEvent event ) {
String <unk> = null ;
final Object trigger = event . getTrigger ( ) ;
if ( trigger instanceof Event ) {
Event <unk> = ( Event ) trigger ;
<unk> . debug ( " + <unk> . widget ) ;
if ( <unk> . widget instanceof MenuItem ) {
MenuItem menuItem = ( MenuItem ) <unk> . widget ;
<unk> = menuItem . getText ( ) ;
<unk> . debug ( " + <unk> ) ;
}
}
return <unk> ;
}
}
package com . ah . <unk> . plugin . eclipse ;
import org . eclipse . jface . resource . ImageDescriptor ;
import org . eclipse . ui . plugin . AbstractUIPlugin ;
import org . osgi . framework . BundleContext ;
public class <unk> extends AbstractUIPlugin {
public static final String PLUGIN_ID = " ;
private static <unk> plugin ;
public <unk> ( ) {
}
public void start ( BundleContext context ) throws Exception {
super . start ( context ) ;
plugin = this ;
}
public void stop ( BundleContext context ) throws Exception {
plugin = null ;
super . stop ( context ) ;
}
public static <unk> getDefault ( ) {
return plugin ;
}
public static ImageDescriptor getImageDescriptor ( String path ) {
return imageDescriptorFromPlugin ( PLUGIN_ID , path ) ;
}
}
package com . ah . <unk> . plugin . eclipse . util ;
import org . eclipse . core . runtime . IPath ;
public class <unk> {
private Object element ;
private String <unk> ;
private IPath <unk> ;
public <unk> ( Object element , String <unk> , IPath <unk> ) {
this . element = element ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public boolean isNull ( ) {
return ( null == this . element
|| null == this . <unk>
|| null == this . <unk> ) ;
}
public Object getElement ( ) {
return element ;
}
public void setElement ( Object element ) {
this . element = element ;
}
public String <unk> ( ) {
return <unk> ;
}
public void <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
public IPath <unk> ( ) {
return <unk> ;
}
public void <unk> ( IPath <unk> ) {
this . <unk> = <unk> ;
}
}
package eu . <unk> . hello . vaadin ;
import eu . <unk> . hello . vaadin . application . <unk> ;
import static eu . <unk> . vaadin . <unk> . <unk> . <unk> ;
import static eu . <unk> . vaadin . <unk> . <unk> . <unk> ;
public class Launcher {
public static void main ( final String [ ] args ) {
<unk> ( <unk> ( <unk> . class ) ) . start ( ) ;
}
}
package eu . <unk> . hello . vaadin . application ;
import com . vaadin . server . VaadinRequest ;
import com . vaadin . ui . * ;
import org . slf4j . Logger ;
import org . slf4j . LoggerFactory ;
public class <unk> extends UI {
private static final Logger LOG = LoggerFactory . getLogger ( <unk> . class ) ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String NAME = " ;
@Override
public void init ( final VaadinRequest <unk> ) {
setContent ( <unk> ( ) ) ;
}
private <unk> <unk> ( ) {
final <unk> <unk> = new <unk> ( ) ;
<unk> . setSpacing ( true ) ;
<unk> . setSizeUndefined ( ) ;
final TextField <unk> = new TextField ( ) ;
<unk> . setCaption ( <unk> ) ;
final String <unk> = ( String ) getUI ( ) . getSession ( ) . getAttribute ( NAME ) ;
if ( <unk> != null ) {
<unk> . setValue ( <unk> ) ;
}
<unk> . addComponent ( <unk> ) ;
final Button <unk> = new Button ( <unk> , new Button . ClickListener ( ) {
@Override
public void buttonClick ( final Button . ClickEvent <unk> ) {
getUI ( ) . getSession ( ) . setAttribute ( NAME , <unk> . getValue ( ) ) ;
final String greeting = <unk> + <unk> . getValue ( ) + " ;
LOG . debug ( greeting ) ;
Notification . show ( greeting ) ;
}
} ) ;
<unk> . addComponent ( <unk> ) ;
final VerticalLayout vl = new VerticalLayout ( ) ;
vl . addComponent ( <unk> ) ;
vl . setComponentAlignment ( <unk> , Alignment . <unk> ) ;
vl . setSizeFull ( ) ;
return vl ;
}
}
package eu . <unk> . hello . vaadin ;
import eu . <unk> . hello . vaadin . application . <unk> ;
import static eu . <unk> . vaadin . <unk> . <unk> . <unk> ;
import static eu . <unk> . vaadin . <unk> . <unk> . <unk> ;
public class <unk> {
public static void main ( final String [ ] args ) {
<unk> ( <unk> ( <unk> . class ) ) . start ( ) ;
}
}
import javax . swing . ImageIcon ;
public class <unk> extends javax . swing . JFrame {
public <unk> ( ) {
this . setIconImage ( new ImageIcon ( getClass ( ) . getResource ( " ) ) . getImage ( ) ) ;
initComponents ( ) ;
this . setLocationRelativeTo ( null ) ;
}
@SuppressWarnings("unchecked")
private void initComponents ( ) {
<unk> = new javax . swing . <unk> ( ) ;
<unk> = new javax . swing . JButton ( ) ;
num1 = new javax . swing . JTextField ( ) ;
<unk> = new javax . swing . JTextField ( ) ;
<unk> = new javax . swing . JLabel ( ) ;
setDefaultCloseOperation ( javax . swing . WindowConstants . DISPOSE_ON_CLOSE ) ;
setResizable ( false ) ;
<unk> . setFont ( new java . awt . Font ( " , <num> , <num> ) ) ;
<unk> . setText ( " ) ;
<unk> . setCursor ( new java . awt . Cursor ( java . awt . Cursor . <unk> ) ) ;
<unk> . addActionListener ( new java . awt . event . ActionListener ( ) {
public void actionPerformed ( java . awt . event . ActionEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
num1 . setFont ( new java . awt . Font ( " , <num> , <num> ) ) ;
num1 . setHorizontalAlignment ( javax . swing . JTextField . CENTER ) ;
num1 . addKeyListener ( new java . awt . event . KeyAdapter ( ) {
public void keyTyped ( java . awt . event . KeyEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
num1 . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( num1 , javax . swing . <unk> . <unk> ) ;
<unk> . setFont ( new java . awt . Font ( " , <num> , <num> ) ) ;
<unk> . setHorizontalAlignment ( javax . swing . JTextField . CENTER ) ;
<unk> . addKeyListener ( new java . awt . event . KeyAdapter ( ) {
public void keyTyped ( java . awt . event . KeyEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
<unk> . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ;
getContentPane ( ) . setLayout ( layout ) ;
layout . setHorizontalGroup (
layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addComponent ( <unk> , javax . swing . GroupLayout . DEFAULT_SIZE , <num> , Short . MAX_VALUE )
) ;
layout . setVerticalGroup (
layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addComponent ( <unk> , javax . swing . GroupLayout . DEFAULT_SIZE , <num> , Short . MAX_VALUE )
) ;
pack ( ) ;
}
private void <unk> ( java . awt . event . ActionEvent evt ) {
}
private void <unk> ( java . awt . event . KeyEvent evt ) {
char c = evt . getKeyChar ( ) ;
if ( ! Character . getName ( c ) . equals ( " ) && Character . isDigit ( c ) == false ) {
evt . consume ( ) ;
}
}
private void <unk> ( java . awt . event . KeyEvent evt ) {
char c = evt . getKeyChar ( ) ;
if ( ! Character . getName ( c ) . equals ( " ) && Character . isDigit ( c ) == false ) {
evt . consume ( ) ;
}
}
public static void main ( String args [ ] ) {
try {
for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) {
if ( " . equals ( info . getName ( ) ) ) {
javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ;
break ;
}
}
} catch ( ClassNotFoundException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
} catch ( InstantiationException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
} catch ( IllegalAccessException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
} catch ( javax . swing . UnsupportedLookAndFeelException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
}
java . awt . EventQueue . invokeLater ( new Runnable ( ) {
public void run ( ) {
new <unk> ( ) . setVisible ( true ) ;
}
} ) ;
}
private javax . swing . JButton <unk> ;
private javax . swing . JLabel <unk> ;
private javax . swing . <unk> <unk> ;
private javax . swing . JTextField num1 ;
private javax . swing . JTextField <unk> ;
}
import <unk> . * ;
import org . omg . <unk> . * ;
import org . omg . <unk> . <unk> . * ;
import org . omg . CORBA . * ;
import org . omg . <unk> . * ;
import org . omg . <unk> . <unk> ;
import java . util . Properties ;
public class <unk> {
public static void main ( String [ ] args ) {
try
{
<unk> <unk> = <unk> . init ( args , null ) ;
<unk> <unk> = <unk> . <unk> ( <unk> . <unk> ( " ) ) ;
<unk> . <unk> ( ) . activate ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . <unk> ( <unk> ) ;
org . omg . CORBA . Object ref = <unk> . <unk> ( <unk> ) ;
Calculadora href = <unk> . <unk> ( ref ) ;
org . omg . CORBA . Object <unk> = <unk> . <unk> ( " ) ;
<unk> <unk> = <unk> . <unk> ( <unk> ) ;
String name = " ;
<unk> path [ ] = <unk> . <unk> ( name ) ;
<unk> . rebind ( path , href ) ;
System . out . println ( " ) ;
<unk> . run ( ) ;
}
catch ( Exception e )
{ System . err . println ( " + e ) ;
e . printStackTrace ( System . out ) ;
}
System . out . println ( " ) ;
}
}
import javax . swing . ImageIcon ;
public class <unk> extends javax . swing . JFrame {
public <unk> ( ) {
this . setIconImage ( new ImageIcon ( getClass ( ) . getResource ( " ) ) . getImage ( ) ) ;
initComponents ( ) ;
this . setLocationRelativeTo ( null ) ;
}
@SuppressWarnings("unchecked")
private void initComponents ( ) {
<unk> = new javax . swing . <unk> ( ) ;
<unk> = new javax . swing . JButton ( ) ;
<unk> = new javax . swing . JButton ( ) ;
<unk> = new javax . swing . JButton ( ) ;
<unk> = new javax . swing . JButton ( ) ;
<unk> = new javax . swing . JLabel ( ) ;
setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ;
setResizable ( false ) ;
setUndecorated ( true ) ;
<unk> . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> . setBorderPainted ( false ) ;
<unk> . <unk> ( false ) ;
<unk> . setCursor ( new java . awt . Cursor ( java . awt . Cursor . <unk> ) ) ;
<unk> . <unk> ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
<unk> . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> . setBorderPainted ( false ) ;
<unk> . <unk> ( false ) ;
<unk> . setCursor ( new java . awt . Cursor ( java . awt . Cursor . <unk> ) ) ;
<unk> . <unk> ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
<unk> . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> . setBorderPainted ( false ) ;
<unk> . <unk> ( false ) ;
<unk> . setCursor ( new java . awt . Cursor ( java . awt . Cursor . <unk> ) ) ;
<unk> . <unk> ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
<unk> . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> . setBorderPainted ( false ) ;
<unk> . <unk> ( false ) ;
<unk> . setCursor ( new java . awt . Cursor ( java . awt . Cursor . <unk> ) ) ;
<unk> . <unk> ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
<unk> . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ;
getContentPane ( ) . setLayout ( layout ) ;
layout . setHorizontalGroup (
layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addComponent ( <unk> , javax . swing . GroupLayout . DEFAULT_SIZE , <num> , Short . MAX_VALUE )
) ;
layout . setVerticalGroup (
layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addComponent ( <unk> , javax . swing . GroupLayout . DEFAULT_SIZE , <num> , Short . MAX_VALUE )
) ;
pack ( ) ;
}
public static void main ( String args [ ] ) {
try {
for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) {
if ( " . equals ( info . getName ( ) ) ) {
javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ;
break ;
}
}
} catch ( ClassNotFoundException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
} catch ( InstantiationException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
} catch ( IllegalAccessException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
} catch ( javax . swing . UnsupportedLookAndFeelException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
}
java . awt . EventQueue . invokeLater ( new Runnable ( ) {
public void run ( ) {
new <unk> ( ) . setVisible ( true ) ;
}
} ) ;
}
private javax . swing . JButton <unk> ;
private javax . swing . JLabel <unk> ;
private javax . swing . <unk> <unk> ;
private javax . swing . JButton <unk> ;
private javax . swing . JButton <unk> ;
private javax . swing . JButton <unk> ;
}
import <unk> . * ;
import org . omg . <unk> . * ;
import org . omg . <unk> . <unk> . * ;
import org . omg . CORBA . * ;
import org . omg . <unk> . * ;
import org . omg . <unk> . <unk> ;
import java . util . Properties ;
public class <unk> extends <unk> {
private <unk> <unk> ;
private int <unk> ;
private float num1 , <unk> , <unk> ;
public <unk> ( ) {
num1 = <num> ;
<unk> = <num> ;
<unk> = <num> ;
<unk> =  <num> ;
}
public void <unk> ( <unk> <unk> ) {
<unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float x , float y ) {
num1 = x ;
<unk> = y ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public float <unk> ( ) {
return num1 + num1 ;
}
public float <unk> ( ) {
return num1  num1 ;
}
public float <unk> ( ) {
return num1 * num1 ;
}
public float <unk> ( ) {
return num1 / num1 ;
}
public void shutdown ( ) {
<unk> . shutdown ( false ) ;
}
}
import javax . swing . ImageIcon ;
public class <unk> extends javax . swing . JFrame {
public static int <unk> ;
public <unk> ( ) {
this . setIconImage ( new ImageIcon ( getClass ( ) . getResource ( " ) ) . getImage ( ) ) ;
initComponents ( ) ;
this . setLocationRelativeTo ( null ) ;
}
@SuppressWarnings("unchecked")
private void initComponents ( ) {
<unk> = new javax . swing . <unk> ( ) ;
<unk> = new javax . swing . JLabel ( ) ;
<unk> = new javax . swing . JLabel ( ) ;
<unk> = new javax . swing . JLabel ( ) ;
<unk> = new javax . swing . JLabel ( ) ;
<unk> = new javax . swing . JLabel ( ) ;
<unk> = new javax . swing . JLabel ( ) ;
setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ;
setTitle ( " ) ;
setResizable ( false ) ;
<unk> . setFont ( new java . awt . Font ( " , <num> , <num> ) ) ;
<unk> . setHorizontalAlignment ( javax . swing . SwingConstants . CENTER ) ;
<unk> . setText ( " ) ;
<unk> . setPreferredSize ( new java . awt . Dimension ( <num> , <num> ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
<unk> . setFont ( new java . awt . Font ( " , <num> , <num> ) ) ;
<unk> . setHorizontalAlignment ( javax . swing . SwingConstants . CENTER ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
<unk> . setFont ( new java . awt . Font ( " , <num> , <num> ) ) ;
<unk> . setHorizontalAlignment ( javax . swing . SwingConstants . CENTER ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
<unk> . setFont ( new java . awt . Font ( " , <num> , <num> ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
<unk> . setIcon ( new javax . swing . ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> . setBounds ( <num> , <num> , <num> , <num> ) ;
<unk> . add ( <unk> , javax . swing . <unk> . <unk> ) ;
javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ;
getContentPane ( ) . setLayout ( layout ) ;
layout . setHorizontalGroup (
layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addComponent ( <unk> , javax . swing . GroupLayout . DEFAULT_SIZE , <num> , Short . MAX_VALUE )
) ;
layout . setVerticalGroup (
layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING )
. addComponent ( <unk> , javax . swing . GroupLayout . DEFAULT_SIZE , <num> , Short . MAX_VALUE )
) ;
pack ( ) ;
}
public static void main ( String args [ ] ) {
try {
for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) {
if ( " . equals ( info . getName ( ) ) ) {
javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ;
break ;
}
}
} catch ( ClassNotFoundException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
} catch ( InstantiationException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
} catch ( IllegalAccessException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
} catch ( javax . swing . UnsupportedLookAndFeelException ex ) {
java . util . logging . Logger . getLogger ( <unk> . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ;
}
java . awt . EventQueue . invokeLater ( new Runnable ( ) {
public void run ( ) {
new <unk> ( ) . setVisible ( true ) ;
}
} ) ;
}
private javax . swing . JLabel <unk> ;
private javax . swing . JLabel <unk> ;
private javax . swing . JLabel <unk> ;
private javax . swing . <unk> <unk> ;
private javax . swing . JLabel <unk> ;
private javax . swing . JLabel <unk> ;
private javax . swing . JLabel <unk> ;
}
package tests . testjavacomp ;
class secondClass {
private void scFuncOne ( ) { }
public void scFuncOne ( ) { }
}
public class testjavacomp {
private int funcOne ( ) { }
private int funcTwo ( ) { }
private char funcThree ( ) { }
class nestedClass {
private void ncFuncOne ( ) { }
public void ncFuncOne ( ) { }
}
public void publicFunc ( ) {
int i ;
i = fu
;
fu
;
secondClass SC ;
SC .
;
nestedClass NC ;
NC .
;
}
}
import java . io . File ;
public class Example {
int i ;
public static void main ( String args [ ] ) {
Example ex = new Example ( ) ;
ex . i = <num> ;
System . out . println ( " ) ;
int result = ex . <unk> ( ) ;
System . out . println ( " ) ;
System . out . println ( " + result ) ;
}
public void <unk> ( ) {
System . out . println ( " ) ;
}
public native int <unk> ( ) ;
static {
System . load ( new File ( " ) . getAbsolutePath ( ) ) ;
}
}
package com . <unk> . <unk> . test ;
import android . app . Activity ;
import android . content . Context ;
import android . graphics . Canvas ;
import android . graphics . Color ;
import android . graphics . Paint ;
import android . hardware . Camera ;
import android . hardware . Camera . PreviewCallback ;
import android . os . Bundle ;
import android . view . SurfaceHolder ;
import android . view . SurfaceView ;
import android . view . View ;
import android . view . ViewGroup . LayoutParams ;
import java . io . IOException ;
class <unk> extends View {
int [ ] <unk> ;
int [ ] <unk> ;
int [ ] <unk> ;
Paint <unk> ;
Paint <unk> ;
Paint <unk> ;
public long <unk> ;
public native void <unk> ( long <unk> , byte [ ] yuv , int width , int height ) ;
private native void <unk> ( long <unk> , int [ ] <unk> , int [ ] <unk> , int [ ] <unk> ) ;
private native void <unk> ( long <unk> ) ;
private native long <unk> ( ) ;
private native int <unk> ( long <unk> ) ;
private native int getHeight ( long <unk> ) ;
private native int getWidth ( long <unk> ) ;
public <unk> ( Context context ) {
super ( context ) ;
<unk> = <unk> ( ) ;
<unk> = new Paint ( ) ;
<unk> . setStyle ( Paint . Style . FILL ) ;
<unk> . setColor ( Color . RED ) ;
<unk> . setAntiAlias ( true ) ;
<unk> = new Paint ( ) ;
<unk> . setStyle ( Paint . Style . FILL ) ;
<unk> . setColor ( Color . GREEN ) ;
<unk> . setAntiAlias ( true ) ;
<unk> = new Paint ( ) ;
<unk> . setStyle ( Paint . Style . FILL ) ;
<unk> . setColor ( Color . BLUE ) ;
<unk> . setAntiAlias ( true ) ;
<unk> = new int [ <num> ] ;
<unk> = new int [ <num> ] ;
<unk> = new int [ <num> ] ;
}
@Override
protected void onDraw ( Canvas canvas ) {
int canvasWidth = canvas . getWidth ( ) ;
int canvasHeight = canvas . getHeight ( ) ;
int <unk> = canvasWidth ;
int marginWidth = ( canvasWidth  <unk> ) / <num> ;
<unk> ( <unk> , <unk> , <unk> , <unk> ) ;
final float barWidth = ( ( float ) <unk> ) / <num> ;
final float norm = <unk> ( <unk> ) / ( canvasHeight / <num> ) ;
float <unk> = canvasHeight ;
float <unk> = canvasHeight ;
float <unk> = canvasHeight ;
float <unk> = marginWidth ;
for ( int bin = <num> ; bin < <num> ; bin ++ ) {
final float <unk> = canvasHeight  <unk> [ bin ] / norm ;
canvas . drawLine ( <unk> , <unk> , <unk> + barWidth , <unk> , <unk> ) ;
final float <unk> = canvasHeight  <unk> [ bin ] / norm ;
canvas . drawLine ( <unk> , <unk> , <unk> + barWidth , <unk> , <unk> ) ;
final float <unk> = canvasHeight  <unk> [ bin ] / norm ;
canvas . drawLine ( <unk> , <unk> , <unk> + barWidth , <unk> , <unk> ) ;
<unk> += barWidth ;
<unk> = <unk> ;
<unk> = <unk> ;
<unk> = <unk> ;
}
super . onDraw ( canvas ) ;
}
}
class <unk> extends SurfaceView implements SurfaceHolder . Callback {
Camera <unk> ;
boolean <unk> ;
SurfaceHolder <unk> ;
<unk> <unk> ;
<unk> ( Context context , <unk> hv ) {
super ( context ) ;
<unk> = hv ;
<unk> = false ;
<unk> = getHolder ( ) ;
<unk> . addCallback ( this ) ;
<unk> . setType ( SurfaceHolder . SURFACE_TYPE_PUSH_BUFFERS ) ;
}
public void surfaceChanged ( SurfaceHolder holder , int format , int w , int h ) {
Camera . Parameters parameters = <unk> . getParameters ( ) ;
parameters . setPreviewSize ( <num> , <num> ) ;
parameters . <unk> ( <num> ) ;
parameters . setFocusMode ( Camera . Parameters . FOCUS_MODE_AUTO ) ;
<unk> . setParameters ( parameters ) ;
<unk> . startPreview ( ) ;
}
public void surfaceCreated ( SurfaceHolder holder ) {
<unk> = Camera . open ( ) ;
try {
<unk> . setPreviewDisplay ( holder ) ;
<unk> . setPreviewCallback ( new PreviewCallback ( ) {
public void onPreviewFrame ( byte [ ] data , Camera camera ) {
if ( <unk> )
return ;
Camera . Parameters params = camera . getParameters ( ) ;
<unk> . <unk> ( <unk> . <unk> , data , params . getPreviewSize ( ) . width , params . getPreviewSize ( ) . height ) ;
<unk> . invalidate ( ) ;
}
} ) ;
} catch ( IOException exception ) {
<unk> . release ( ) ;
<unk> = null ;
}
}
public void surfaceDestroyed ( SurfaceHolder holder ) {
<unk> = true ;
<unk> . setPreviewCallback ( null ) ;
<unk> . stopPreview ( ) ;
<unk> . release ( ) ;
<unk> = null ;
}
}
public class <unk> extends Activity {
static {
System . loadLibrary ( " ) ;
}
private <unk> <unk> ;
private <unk> <unk> ;
private native String <unk> ( ) ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
setTitle ( <unk> ( ) ) ;
<unk> = new <unk> ( this ) ;
<unk> = new <unk> ( this , <unk> ) ;
setContentView ( <unk> ) ;
addContentView ( <unk> , new LayoutParams ( LayoutParams . WRAP_CONTENT , LayoutParams . WRAP_CONTENT ) ) ;
}
import java . io . File ;
public class <unk> {
private native void showMessage ( String msg ) ;
static {
System . load ( new File ( " ) . getAbsolutePath ( ) ) ;
}
public static void main ( String [ ] args ) {
<unk> app = new <unk> ( ) ;
app . showMessage ( " ) ;
}
}
package com . example ;
import android . app . Activity ;
import android . os . Bundle ;
import android . widget . TextView ;
public class MyActivity extends Activity {
static {
System . loadLibrary ( " ) ;
}
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
final TextView textView = ( TextView ) findViewById ( R . id . <unk> ) ;
textView . setText ( getString ( ) ) ;
}
native String getString ( ) ;
}
package com . example ;
public final class R {
public static final class attr {
}
public static final class drawable {
public static final int icon = <num> ;
}
public static final class layout {
public static final int main = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
}
}
package com . example ;
import android . app . Activity ;
import android . os . Bundle ;
import android . util . Log ;
public class MyActivity extends Activity {
final static String TAG = " ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
final String s = function ( " . getBytes ( ) ) ;
Log . d ( TAG , s ) ;
}
static {
System . loadLibrary ( " ) ;
}
native String function ( byte [ ] string ) ;
}
package com . example ;
public final class R {
public static final class attr {
}
public static final class id {
public static final int <unk> = <num> ;
}
public static final class layout {
public static final int main = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
}
}
package com . <unk> . <unk> . test ;
public final class R {
public static final class attr {
}
public static final class drawable {
public static final int icon = <num> ;
}
public static final class layout {
public static final int main = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int hello = <num> ;
}
}
package com . <unk> . cli ;
import java . io . * ;
import java . net . MalformedURLException ;
import java . net . URL ;
import java . net . URLEncoder ;
import java . util . * ;
import java . util . Map . Entry ;
import java . util . regex . Matcher ;
import java . util . regex . Pattern ;
import <unk> . <unk> ;
import <unk> . <unk> ;
import org . apache . http . Header ;
import org . apache . http . HttpHost ;
import org . apache . http . NameValuePair ;
import org . apache . http . auth . AuthScope ;
import org . apache . http . auth . UsernamePasswordCredentials ;
import org . apache . http . client . ResponseHandler ;
import org . apache . http . client . entity . UrlEncodedFormEntity ;
import org . apache . http . client . methods . HttpDelete ;
import org . apache . http . client . methods . HttpGet ;
import org . apache . http . client . methods . HttpPost ;
import org . apache . http . client . methods . HttpPut ;
import org . apache . http . conn . params . ConnRoutePNames ;
import org . apache . http . impl . auth . <unk> ;
import org . apache . http . impl . client . BasicResponseHandler ;
import org . apache . http . impl . client . DefaultHttpClient ;
import org . apache . http . message . BasicNameValuePair ;
public class Client {
public enum Method {
GET , DELETE , PUT , POST
}
static class Parameter {
String name , description , value = " ;
Parameter ( String name ) {
this . name = name ;
}
Parameter ( String name , String description ) {
this . name = name ;
this . description = description ;
}
}
static class Command {
String resource ;
String name , <unk> , uri ;
Method method ;
Pattern pattern = Pattern . compile ( " ) ;
List < String > parameterNames = new ArrayList < String > ( ) ;
Map < String , Parameter > parameters = new HashMap < String , Parameter > ( ) ;
Command ( String resource , String name , String <unk> , Method method , String uri ) {
this . resource = resource ;
this . name = name ;
this . <unk> = <unk> ;
this . method = method ;
this . uri = parseUri ( uri ) ;
}
private String parseUri ( String uri ) {
Matcher matcher = pattern . matcher ( uri ) ;
while ( matcher . find ( ) )
addParameter ( matcher . group ( <num> ) ) ;
return uri ;
}
boolean <unk> ( ) { return parameters . size ( ) > <num> ; }
void addParameter ( String <unk> ) {
parameterNames . add ( <unk> ) ;
parameters . put ( <unk> , new Parameter ( <unk> ) ) ;
}
void addParameter ( String <unk> , String <unk> ) {
parameterNames . add ( <unk> ) ;
parameters . put ( <unk> , new Parameter ( <unk> , <unk> ) ) ;
}
void <unk> ( String <unk> , String <unk> ) {
parameters . get ( <unk> ) . value = <unk> ;
}
Collection < Parameter > getParameters ( ) {
Collection < Parameter > params = new ArrayList < Parameter > ( ) ;
for ( String <unk> : parameterNames )
params . add ( parameters . get ( <unk> ) ) ;
return params ;
}
public String uri ( ) throws UnsupportedEncodingException {
StringBuilder builder = new StringBuilder ( ) ;
Matcher matcher = pattern . matcher ( uri ) ;
int i = <num> ;
while ( matcher . find ( ) ) {
String replacement = parameters . get ( matcher . group ( <num> ) ) . value ;
builder . append ( uri . substring ( i , matcher . start ( ) ) ) ;
builder . append ( URLEncoder . encode ( replacement , " ) ) ;
i = matcher . end ( ) ;
}
builder . append ( uri . substring ( i , uri . length ( ) ) ) ;
return builder . toString ( ) ;
}
public void <unk> ( ) {
for ( String <unk> : parameterNames )
parameters . get ( <unk> ) . value = " ;
}
public String <unk> ( ) {
StringBuilder sb = new StringBuilder ( ) ;
int i = <num> ;
for ( String <unk> : parameterNames ) {
if ( i > <num> ) sb . append ( " ) ;
sb . append ( " ) . append ( <unk> ) . append ( " ) ;
i ++ ;
}
return sb . toString ( ) ;
}
}
<unk> <unk> ;
DefaultHttpClient httpClient ;
String username , password ;
String host ;
Map < String , Command > <unk> = new HashMap < String , Command > ( ) ;
public static void main ( String [ ] args ) throws Exception {
Client client = null ;
if ( args . length == <num> ) {
String host = args [ <num> ] ;
if ( ! host . endsWith ( " ) )
host += " ;
if ( ! host . startsWith ( " ) )
host = " + host ;
client = new Client ( host , args [ <num> ] ) ;
}
else
client = new Client ( ) ;
client . run ( ) ;
}
public Client ( ) { }
public static final String <unk> ( String s ) {
<unk> buffer = new <unk> ( ) ;
buffer . green ( s ) ;
return buffer . toString ( true ) ;
}
public Client ( String host , String username ) throws IOException {
this . username = username ;
this . host = host ;
reload ( ) ;
}
private void loadProperties ( ) throws IOException {
Properties props = new Properties ( ) ;
final InputStream inputStream = ClassLoader . getSystemResourceAsStream ( " ) ;
props . load ( inputStream ) ;
String proxyHost = props . getProperty ( " ) ;
if ( proxyHost != null ) {
getHttpClient ( ) ;
String proxyPort = props . getProperty ( " ) ;
setProxy ( proxyHost , proxyPort ) ;
}
}
private void reload ( ) throws IOException {
<unk> . clear ( ) ;
<unk> ( " ) ;
<unk> ( " ) ;
<unk> ( " ) ;
<unk> ( " ) ;
<unk> ( " ) ;
<unk> ( " ) ;
}
private void <unk> ( String <unk> ) throws IOException {
Properties props = new Properties ( ) ;
final InputStream inputStream = ClassLoader . getSystemResourceAsStream ( <unk> + " ) ;
props . load ( inputStream ) ;
String resource = <unk> . substring ( <num> , <unk> . indexOf ( " ) ) ;
for ( Entry < Object , Object > entry : props . entrySet ( ) ) {
final String key = ( String ) entry . getKey ( ) ;
if ( key . endsWith ( " ) ) {
String commandName = key . split ( " ) [ <num> ] ;
String <unk> = props . getProperty ( key ) ;
Pattern pattern = Pattern . compile ( " ) ;
final Matcher matcher = pattern . matcher ( <unk> ) ;
matcher . find ( <num> ) ;
String <unk> = matcher . group ( <num> ) ;
String uri = <unk> . substring ( <unk> . length ( ) + <num> ) ;
String <unk> = props . getProperty ( commandName + " ) ;
Method method = getMethod ( <unk> ) ;
Command command = new Command ( resource , commandName , <unk> , method , uri ) ;
<unk> ( command , props ) ;
<unk> . put ( <unk> , command ) ;
}
}
}
private void <unk> ( Command command , Properties props ) {
final String parameters = props . getProperty ( command . name + " ) ;
if ( parameters == null )
return ;
StringTokenizer st = new StringTokenizer ( parameters , " ) ;
while ( st . hasMoreTokens ( ) ) {
String <unk> = st . nextToken ( ) . trim ( ) ;
String [ ] parts = <unk> . split ( " ) ;
if ( parts . length == <num> )
command . addParameter ( parts [ <num> ] . trim ( ) ) ;
else
command . addParameter ( parts [ <num> ] . trim ( ) , parts [ <num> ] . trim ( ) ) ;
}
}
private Method getMethod ( String <unk> ) {
final Method [ ] values = Method . values ( ) ;
for ( Method value : values )
if ( <unk> . equals ( value . toString ( ) ) )
return value ;
return null ;
}
public void run ( ) throws IOException {
String line = null ;
this . <unk> = new <unk> ( System . in , new PrintWriter ( System . out ) ) ;
loadProperties ( ) ;
if ( this . host != null && this . username != null )
prompt ( this . host , this . username ) ;
while ( true ) {
if ( line != null ) parseLine ( line ) ;
line = <unk> . readLine ( " ) ;
}
}
public void parseLine ( String input ) throws IOException {
input = input . trim ( ) ;
if ( input . startsWith ( " ) )
System . exit ( <num> ) ;
else if ( input . startsWith ( " ) )
help ( ) ;
else if ( input . startsWith ( " ) )
setProxy ( ) ;
else if ( input . startsWith ( " ) )
reload ( ) ;
else {
String command = <unk> ( input ) ;
if ( command != null ) {
String arguments = input . substring ( command . length ( ) ) ;
executeCommand ( <unk> . get ( command ) , arguments . trim ( ) ) ;
} else
System . out . println ( <unk> ( " + username + " ) ) ;
}
}
private String <unk> ( String input ) {
for ( String command : <unk> . keySet ( ) ) {
if ( input . startsWith ( command ) )
return command ;
}
return null ;
}
private void setProxy ( ) throws IOException {
<unk> . <unk> ( false ) ;
String ip = <unk> . readLine ( " ) ;
String port = <unk> . readLine ( " ) ;
setProxy ( ip , port ) ;
}
private void setProxy ( String ip , String port ) {
HttpHost proxy = new HttpHost ( ip , Integer . valueOf ( port ) , " ) ;
httpClient . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , proxy ) ;
<unk> . <unk> ( true ) ;
}
private void help ( ) {
System . out . println ( <unk> ( " ) ) ;
System . out . println ( <unk> ( " ) ) ;
System . out . println ( <unk> ( " ) ) ;
System . out . println ( ) ;
Map < String , List < Command >> <unk> = new HashMap < String , List < Command >> ( ) ;
for ( String s : <unk> . keySet ( ) ) {
Command command = <unk> . get ( s ) ;
if ( <unk> . get ( command . resource ) == null )
<unk> . put ( command . resource , new ArrayList < Command > ( ) ) ;
<unk> . get ( command . resource ) . add ( command ) ;
}
for ( String resource : <unk> . keySet ( ) ) {
System . out . println ( <unk> ( resource ) ) ;
for ( int i = <num> ; i < resource . length ( ) ; i ++ )
System . out . print ( <unk> ( " ) ) ;
System . out . println ( ) ;
final List < Command > <unk> = <unk> . get ( resource ) ;
for ( Command <unk> : <unk> ) {
System . out . println ( <unk> ( <unk> . <unk> + " + <unk> . <unk> ( ) ) ) ;
}
System . out . println ( ) ;
}
}
private void executeCommand ( Command command , String arguments ) throws IOException {
if ( arguments . length ( ) > <num> ) {
List < String > <unk> = <unk> ( arguments ) ;
final Collection < Parameter > <unk> = command . getParameters ( ) ;
if ( <unk> . size ( ) != <unk> . size ( ) ) {
System . out . println ( <unk> ( " ) ) ;
System . out . println ( <unk> ( " + command . <unk> ( ) ) ) ;
return ;
}
int i = <num> ;
for ( Parameter <unk> : <unk> )
<unk> . value = <unk> . get ( i ++ ) ;
} else
<unk> ( command ) ;
final Map < String , String > params = <unk> ( command . getParameters ( ) ) ;
switch ( command . method ) {
case GET :
get ( " + command . uri ( ) ) ;
break ;
case POST :
post ( " + command . uri ( ) , params ) ;
break ;
case DELETE :
delete ( " + command . uri ( ) ) ;
break ;
case PUT :
put ( " + command . uri ( ) ) ;
break ;
}
}
private List < String > <unk> ( String input ) {
List < String > <unk> = new ArrayList < String > ( ) ;
Pattern regex = Pattern . compile ( " ) ;
Matcher <unk> = regex . matcher ( input ) ;
while ( <unk> . find ( ) ) {
if ( <unk> . group ( <num> ) != null ) {
<unk> . add ( <unk> . group ( <num> ) ) ;
} else if ( <unk> . group ( <num> ) != null ) {
<unk> . add ( <unk> . group ( <num> ) ) ;
} else {
<unk> . add ( <unk> . group ( ) ) ;
}
}
return <unk> ;
}
private Map < String , String > <unk> ( Collection < Parameter > parameters ) {
Map < String , String > params = new HashMap < String , String > ( ) ;
for ( Parameter parameter : parameters )
params . put ( parameter . name , parameter . value ) ;
return params ;
}
private void <unk> ( Command command ) throws IOException {
command . <unk> ( ) ;
final Collection < Parameter > parameters = command . getParameters ( ) ;
<unk> . <unk> ( false ) ;
for ( Parameter parameter : parameters ) {
String value = " ;
if ( parameter . description != null )
value = <unk> . readLine ( parameter . description + " ) ;
else
value = <unk> . readLine ( parameter . name + " ) ;
command . <unk> ( parameter . name , value ) ;
}
<unk> . <unk> ( true ) ;
}
public void log ( ) {
System . out . println ( " ) ;
}
public void prompt ( String url , String username ) {
String password ;
try {
password = <unk> . readLine ( " , new Character ( *' ) ) ;
this . host = url ;
this . username = username ;
this . password = password ;
<unk> . <unk> ( " ) ;
getHttpClient ( ) ;
if ( url . endsWith ( " ) )
get ( url . endsWith ( " ) ? " : " ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
}
private void getHttpClient ( ) throws MalformedURLException {
if ( this . httpClient == null ) {
httpClient = new DefaultHttpClient ( ) ;
URL hostUrl = new URL ( this . host ) ;
httpClient . <unk> ( ) . setCredentials (
new AuthScope ( hostUrl . getHost ( ) , hostUrl . getPort ( ) ) ,
new UsernamePasswordCredentials ( username , password ) ) ;
}
}
public void put ( String url ) {
try {
HttpPut httpPut = new HttpPut ( host + url ) ;
UsernamePasswordCredentials credentials = new UsernamePasswordCredentials ( username , password ) ;
<unk> scheme = new <unk> ( ) ;
Header <unk> = scheme . authenticate ( credentials , httpPut ) ;
httpPut . addHeader ( <unk> ) ;
ResponseHandler < String > responseHandler = new BasicResponseHandler ( ) ;
String response = httpClient . execute ( httpPut , responseHandler ) ;
System . out . println ( <unk> ( response ) ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public void post ( String url , Map < String , String > params ) {
try {
HttpPost httppost = new HttpPost ( host + url ) ;
UsernamePasswordCredentials credentials = new UsernamePasswordCredentials ( username , password ) ;
<unk> scheme = new <unk> ( ) ;
Header <unk> = scheme . authenticate ( credentials , httppost ) ;
httppost . addHeader ( <unk> ) ;
Iterator < Entry < String , String >> iterator = params . entrySet ( ) . iterator ( ) ;
List < NameValuePair > nameValuePairs = new ArrayList < NameValuePair > ( params . size ( ) ) ;
while ( iterator . hasNext ( ) ) {
Entry < String , String > entry = iterator . next ( ) ;
nameValuePairs . add ( new BasicNameValuePair ( entry . getKey ( ) , entry . getValue ( ) ) ) ;
}
httppost . setEntity ( new UrlEncodedFormEntity ( nameValuePairs ) ) ;
ResponseHandler < String > responseHandler = new BasicResponseHandler ( ) ;
String response = httpClient . execute ( httppost , responseHandler ) ;
System . out . println ( <unk> ( response ) ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public void get ( String url ) {
try {
HttpGet httpget = new HttpGet ( host + url ) ;
UsernamePasswordCredentials credentials = new UsernamePasswordCredentials ( username , password ) ;
<unk> scheme = new <unk> ( ) ;
Header <unk> = scheme . authenticate ( credentials , httpget ) ;
httpget . addHeader ( <unk> ) ;
ResponseHandler < String > responseHandler = new BasicResponseHandler ( ) ;
String response = httpClient . execute ( httpget , responseHandler ) ;
<unk> buffer = new <unk> ( ) ;
System . out . println ( buffer . green ( response ) . toString ( true ) ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public void delete ( String url ) {
try {
HttpDelete <unk> = new HttpDelete ( host + url ) ;
UsernamePasswordCredentials credentials = new UsernamePasswordCredentials ( username , password ) ;
<unk> scheme = new <unk> ( ) ;
Header <unk> = scheme . authenticate ( credentials , <unk> ) ;
<unk> . addHeader ( <unk> ) ;
ResponseHandler < String > responseHandler = new BasicResponseHandler ( ) ;
String response = httpClient . execute ( <unk> , responseHandler ) ;
System . out . println ( <unk> ( response ) ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
}
package <unk> . edu . <unk> . <unk> . audio ;
import java . io . BufferedWriter ;
import java . io . File ;
import java . io . FileWriter ;
import java . io . <unk> ;
import java . io . Writer ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
import javax . sound . sampled . <unk> ;
import javax . sound . sampled . AudioInputStream ;
import javax . sound . sampled . AudioSystem ;
import <unk> . edu . <unk> . <unk> . config . <unk> ;
public class <unk> {
private <unk> <unk> ;
private ProcessBuilder <unk> ;
private Map < String , String > <unk> ;
public <unk> ( ) {
try {
<unk> = new ProcessBuilder ( " ) ;
<unk> . directory ( new File ( <unk> . <unk> ( ) ) ) ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public Map < String , String > <unk> ( String extension ) {
try {
File folder = new File ( <unk> . <unk> ( ) + extension ) ;
File [ ] <unk> = folder . listFiles ( ) ;
<unk> = new HashMap < String , String > ( ) ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
if ( <unk> [ i ] . isFile ( ) ) {
<unk> . put ( <unk> [ i ] . getName ( ) , <unk> [ i ] . getAbsolutePath ( ) ) ;
}
}
System . out . println ( <unk> ) ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return <unk> ;
}
public void <unk> ( List < String > <unk> , String fileName ) {
try {
if ( <unk> != null ) {
String files = " ;
for ( String path : <unk> ) {
files += " + path + " ;
}
files = files . substring ( <num> , files . length ( )  <num> ) ;
StringBuilder script = new StringBuilder ( ) ;
script . append ( " ) ;
script . append ( " + fileName + " ) ;
script . append ( " + fileName + " ) ;
script . append ( " + files + " ) ;
script . append ( " ) ;
script . append ( " + fileName + " ) ;
script . append ( " ) ;
Writer output = new BufferedWriter ( new FileWriter ( <unk> . <unk> ( ) + " ) ) ;
output . write ( script . toString ( ) ) ;
output . close ( ) ;
Runtime . getRuntime ( ) . exec ( " + <unk> . <unk> ( ) + " ) ;
<unk> . start ( ) ;
System . out . println ( " ) ;
}
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public void <unk> ( List < String > <unk> , String fileName ) {
try {
if ( <unk> != null ) {
if ( <unk> . size ( ) == <num> ) {
AudioInputStream <unk> = AudioSystem . getAudioInputStream ( new File ( <unk> . get ( <num> ) ) ) ;
AudioSystem . write ( <unk> ,
<unk> . Type . <unk> ,
new File ( <unk> . <unk> ( ) + fileName + " ) ) ;
}
else if ( <unk> . size ( ) > <num> ) {
AudioInputStream <unk> = AudioSystem . getAudioInputStream ( new File ( <unk> . get ( <num> ) ) ) ;
AudioInputStream clip ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ ) {
clip = AudioSystem . getAudioInputStream ( new File ( <unk> . get ( i ) ) ) ;
<unk> = new AudioInputStream (
new <unk> ( <unk> , clip ) ,
<unk> . getFormat ( ) , <unk> . <unk> ( )
+ clip . <unk> ( ) ) ;
}
AudioSystem . write ( <unk> ,
<unk> . Type . <unk> ,
new File ( <unk> . <unk> ( ) + fileName + " ) ) ;
}
System . out . println ( " ) ;
}
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
}
package <unk> . edu . <unk> . <unk> ;
import java . util . ArrayList ;
import java . util . List ;
import java . util . Map ;
import <unk> . edu . <unk> . <unk> . audio . <unk> ;
import <unk> . edu . <unk> . <unk> . audio . AudioPlayer ;
import <unk> . edu . <unk> . <unk> . divisor . <unk> ;
import <unk> . edu . <unk> . <unk> . divisor . domain . <unk> ;
import <unk> . edu . <unk> . <unk> . divisor . domain . Text ;
import <unk> . edu . <unk> . <unk> . divisor . domain . Word ;
public class <unk> {
private <unk> divisor ;
private <unk> <unk> ;
private AudioPlayer audioPlayer ;
private String <unk> ;
public <unk> ( ) {
divisor = new <unk> ( ) ;
<unk> = new <unk> ( ) ;
}
public List < <unk> > <unk> ( String inputString ) {
List < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
try {
Text <unk> = new Text ( inputString ) ;
divisor . setText ( <unk> ) ;
divisor . <unk> ( ) ;
divisor . <unk> ( ) ;
for ( Word w : divisor . getText ( ) . <unk> ( ) ) {
<unk> . addAll ( w . <unk> ( ) ) ;
}
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return <unk> ;
}
public String make ( String text , String extension ) {
try {
List < <unk> > <unk> = <unk> ( text ) ;
<unk> = " + <unk> . hashCode ( ) ;
Map < String , String > <unk> = <unk> . <unk> ( extension ) ;
List < String > <unk> = new ArrayList < String > ( ) ;
for ( <unk> <unk> : <unk> ) {
if ( <unk> . getPosition ( ) . equals ( <unk> . Position . <unk> ) && <unk> . containsKey ( <unk> . <unk> ( ) + " + extension ) ) {
<unk> . add ( <unk> . get ( <unk> . <unk> ( ) + " + extension ) ) ;
}
else if ( <unk> . containsKey ( <unk> . <unk> ( ) + " + extension ) ) {
<unk> . add ( <unk> . get ( <unk> . <unk> ( ) + " + extension ) ) ;
}
else {
System . out . println ( " ) ;
}
}
if ( extension . equals ( " ) ) {
<unk> . <unk> ( <unk> , <unk> ) ;
}
else if ( extension . equals ( " ) ) {
<unk> . <unk> ( <unk> , <unk> ) ;
}
return <unk> ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return null ;
}
public void <unk> ( ) {
<unk> ( <unk> ) ;
}
public void <unk> ( String fileName ) {
try {
audioPlayer = new AudioPlayer ( ) ;
audioPlayer . play ( fileName ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public void <unk> ( ) {
<unk> ( <unk> ) ;
}
public void <unk> ( String fileName ) {
try {
audioPlayer = new AudioPlayer ( ) ;
audioPlayer . <unk> ( fileName ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public boolean isPlaying ( ) {
try {
return audioPlayer . isPlaying ( ) ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return false ;
}
public void stop ( ) {
try {
if ( audioPlayer != null ) {
audioPlayer . stop ( ) ;
}
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
}
package <unk> . edu . <unk> . <unk> . test ;
import <unk> . edu . <unk> . <unk> . <unk> ;
import <unk> . edu . <unk> . <unk> . config . <unk> ;
import <unk> . edu . <unk> . <unk> . parser . Parser ;
public class <unk> {
public static void main ( String [ ] args ) {
<unk> xml = new <unk> ( ) ;
<unk> <unk> = new <unk> ( ) ;
String fileName = <unk> . make ( " , " ) ;
<unk> . <unk> ( fileName ) ;
try {
Thread . sleep ( <num> l ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
}
}
package <unk> . edu . <unk> . <unk> . config ;
import java . io . InputStream ;
import org . dom4j . Document ;
import org . dom4j . Node ;
import org . dom4j . io . SAXReader ;
public class <unk> {
private static String <unk> ;
private static String <unk> ;
private static String <unk> ;
public <unk> ( ) {
<unk> ( ) ;
}
public void <unk> ( ) {
try {
InputStream is = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( " ) ;
SAXReader reader = new SAXReader ( ) ;
Document document = reader . read ( is ) ;
Node <unk> = document . selectSingleNode ( " ) ;
Node <unk> = document . selectSingleNode ( " ) ;
Node <unk> = document . selectSingleNode ( " ) ;
<unk> = <unk> . getText ( ) ;
<unk> = <unk> . getText ( ) ;
<unk> = <unk> . getText ( ) ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public static String <unk> ( ) {
return <unk> ;
}
public static String <unk> ( ) {
return <unk> ;
}
public static String <unk> ( ) {
return <unk> ;
}
}
package <unk> . edu . <unk> . <unk> . ui ;
import <unk> . edu . <unk> . <unk> . test . <unk> ;
import edu . cmu . <unk> . <unk> . util . <unk> ;
import edu . cmu . <unk> . <unk> . Recognizer ;
import edu . cmu . <unk> . result . Result ;
import edu . cmu . <unk> . util . props . <unk> ;
public class <unk> implements Runnable {
private <unk> cm ;
private Recognizer <unk> ;
private GUI gui ;
private <unk> <unk> ;
public <unk> ( GUI gui ) {
cm = new <unk> ( <unk> . class . getResource ( " ) ) ;
<unk> = ( Recognizer ) cm . lookup ( " ) ;
<unk> . allocate ( ) ;
<unk> <unk> = ( <unk> ) cm . lookup ( " ) ;
if ( ! <unk> . startRecording ( ) ) {
System . out . println ( " ) ;
<unk> . <unk> ( ) ;
System . exit ( <num> ) ;
}
System . out . println ( " ) ;
this . gui = gui ;
}
public <unk> ( <unk> <unk> ) {
cm = new <unk> ( <unk> . class . getResource ( " ) ) ;
<unk> = ( Recognizer ) cm . lookup ( " ) ;
<unk> . allocate ( ) ;
<unk> <unk> = ( <unk> ) cm . lookup ( " ) ;
if ( ! <unk> . startRecording ( ) ) {
System . out . println ( " ) ;
<unk> . <unk> ( ) ;
System . exit ( <num> ) ;
}
System . out . println ( " ) ;
this . <unk> = <unk> ;
}
public void run ( ) {
while ( true ) {
try {
System . out . println ( " ) ;
Result result = <unk> . <unk> ( ) ;
if ( result != null ) {
String <unk> = result . <unk> ( ) ;
System . out . println ( " + <unk> + \n' ) ;
if ( <unk> . equals ( " ) ) {
if ( ! gui . <unk> ( ) . isPlaying ( ) )
gui . play ( ) ;
}
else if ( <unk> . equals ( " ) ) {
gui . stop ( ) ;
}
} else {
System . out . println ( " ) ;
}
Thread . sleep ( <num> l ) ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
}
public static void main ( String [ ] args ) {
}
}
package <unk> . edu . <unk> . <unk> . parser . format ;
import java . io . FileInputStream ;
import org . apache . poi . <unk> . <unk> ;
import org . apache . poi . <unk> . extractor . <unk> ;
public class <unk> {
public String <unk> ( FileInputStream fis ) {
try {
<unk> document = new <unk> ( fis ) ;
<unk> extractor = new <unk> ( document ) ;
String [ ] fileData = extractor . <unk> ( ) ;
String contentText = " ;
for ( int i = <num> ; i < fileData . length ; i ++ ) {
if ( fileData [ i ] != null ) {
contentText += fileData [ i ] ;
}
}
return contentText ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return null ;
}
public String <unk> ( FileInputStream fis ) {
try {
<unk> document = new <unk> ( fis ) ;
<unk> extractor = new <unk> ( document ) ;
String [ ] fileData = extractor . <unk> ( ) ;
String contentText = " ;
for ( int i = <num> ; i < fileData . length ; i ++ ) {
if ( fileData [ i ] != null ) {
contentText += fileData [ i ] + " ;
}
}
return contentText ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return null ;
}
}
package <unk> . edu . <unk> . <unk> . divisor . domain ;
import java . util . ArrayList ;
import java . util . List ;
public class Text {
private String text ;
private List < Word > wordList ;
public Text ( String text ) {
text = <unk> ( text ) ;
this . text = text ;
if ( wordList == null ) {
wordList = new ArrayList < Word > ( ) ;
}
if ( this . text . indexOf ( " ) >  <num> ) {
String <unk> [ ] = this . text . trim ( ) . replaceAll ( " , " ) . split ( " ) ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
Word word = new Word ( <unk> [ i ] ) ;
wordList . add ( word ) ;
}
}
else {
wordList . add ( new Word ( this . text ) ) ;
}
}
public Text ( String text , List < Word > wordList ) {
this . text = text ;
this . wordList = wordList ;
}
public String getText ( ) {
return text ;
}
public void setText ( String text ) {
this . text = text ;
}
public List < Word > <unk> ( ) {
return wordList ;
}
public void <unk> ( List < Word > wordList ) {
this . wordList = wordList ;
}
public void addWord ( Word word ) {
this . wordList . add ( word ) ;
}
private String <unk> ( String text ) {
char <unk> [ ] = { ,' , .' , !' , <unk> } ;
text = text . toLowerCase ( ) ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
}
return text ;
}
}
package <unk> . edu . <unk> . <unk> . divisor . domain ;
import java . util . ArrayList ;
import java . util . List ;
public class Word {
private String word ;
private List < <unk> > <unk> ;
public Word ( String word ) {
this . word = word ;
}
public Word ( String word , List < <unk> > <unk> ) {
this . word = word ;
this . <unk> = <unk> ;
}
public String <unk> ( ) {
return word ;
}
public void <unk> ( String word ) {
this . word = word ;
}
public List < <unk> > <unk> ( ) {
return <unk> ;
}
public void <unk> ( List < <unk> > <unk> ) {
this . <unk> = <unk> ;
}
public void <unk> ( <unk> <unk> ) {
if ( this . <unk> == null ) {
this . <unk> = new ArrayList < <unk> > ( ) ;
}
this . <unk> . add ( <unk> ) ;
}
public void <unk> ( String <unk> ) {
<unk> <unk> = new <unk> ( <unk> ) ;
<unk> ( <unk> ) ;
}
public int <unk> ( ) {
if ( this . <unk> != null )
return this . <unk> . get ( this . <unk> . size ( )  <num> ) . <unk> ( ) . length ( ) ;
return  <num> ;
}
public <unk> <unk> ( ) {
if ( this . <unk> != null )
return ( ( this . <unk> . size ( ) != <num> ) ? this . <unk> . get ( this . <unk> . size ( )  <num> ) : null ) ;
return null ;
}
}
package <unk> . edu . <unk> . <unk> . audio ;
import java . io . File ;
import javax . media . Format ;
import javax . media . Manager ;
import javax . media . <unk> ;
import javax . media . Player ;
import javax . media . <unk> ;
import javax . media . format . AudioFormat ;
import javax . sound . sampled . AudioInputStream ;
import javax . sound . sampled . AudioSystem ;
import javax . sound . sampled . Clip ;
import <unk> . edu . <unk> . <unk> . config . <unk> ;
public class AudioPlayer {
private <unk> <unk> ;
private Player player ;
private Clip clip ;
public AudioPlayer ( ) {
}
public void play ( String fileName ) {
Format <unk> = new AudioFormat ( AudioFormat . <unk> ) ;
Format <unk> = new AudioFormat ( AudioFormat . <unk> ) ;
Format output = new AudioFormat ( AudioFormat . LINEAR ) ;
<unk> . <unk> (
" ,
new Format [ ] { <unk> , <unk> } ,
new Format [ ] { output } ,
<unk> . CODEC
) ;
try {
player = Manager . <unk> ( new <unk> ( new File ( <unk> . <unk> ( ) + fileName + " ) . toURI ( ) . toURL ( ) ) ) ;
player . start ( ) ;
System . out . println ( player . <unk> ( ) . <unk> ( ) ) ;
}
catch ( Exception ex ) {
ex . printStackTrace ( ) ;
}
}
public void <unk> ( String fileName ) {
try {
AudioInputStream <unk> = AudioSystem . getAudioInputStream ( new File ( <unk> . <unk> ( ) + fileName + " ) ) ;
clip = AudioSystem . <unk> ( ) ;
clip . open ( <unk> ) ;
clip . start ( ) ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public boolean isPlaying ( ) {
try {
return clip . isRunning ( ) ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return false ;
}
public void stop ( ) {
try {
if ( player != null ) {
player . stop ( ) ;
}
if ( clip != null ) {
clip . stop ( ) ;
}
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
}
package <unk> . edu . <unk> . <unk> . divisor . domain ;
public class <unk> {
private String chunk ;
private Position position ;
public enum Position {
FIRST , <unk>
}
public <unk> ( String chunk ) {
<unk> ( chunk ) ;
}
public String <unk> ( ) {
return chunk ;
}
public void <unk> ( String chunk ) {
chunk = chunk . replaceAll ( " , " ) ;
this . chunk = chunk . replaceAll ( " , " ) ;
}
public Position getPosition ( ) {
return position ;
}
public void setPosition ( Position position ) {
this . position = position ;
}
@Override
public int hashCode ( ) {
final int prime = <num> ;
int result = <num> ;
result = prime * result + ( ( chunk == null ) ? <num> : chunk . hashCode ( ) ) ;
result = prime * result
+ ( ( position == null ) ? <num> : position . hashCode ( ) ) ;
return result ;
}
@Override
public boolean equals ( Object obj ) {
if ( this == obj )
return true ;
if ( obj == null )
return false ;
if ( getClass ( ) != obj . getClass ( ) )
return false ;
<unk> other = ( <unk> ) obj ;
if ( chunk == null ) {
if ( other . chunk != null )
return false ;
} else if ( ! chunk . equals ( other . chunk ) )
return false ;
if ( position != other . position )
return false ;
return true ;
}
}
package <unk> . edu . <unk> . <unk> . test ;
import <unk> . edu . <unk> . <unk> . ui . <unk> ;
public class <unk> {
public <unk> ( ) {
}
public void read ( ) {
System . out . println ( " ) ;
}
public void stop ( ) {
System . out . println ( " ) ;
}
public static void main ( String [ ] args ) {
<unk> gui = new <unk> ( ) ;
Thread t = new Thread ( new <unk> ( gui ) ) ;
t . start ( ) ;
}
}
package <unk> . edu . <unk> . <unk> . divisor ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
import <unk> . edu . <unk> . <unk> . divisor . domain . <unk> ;
import <unk> . edu . <unk> . <unk> . divisor . domain . Text ;
import <unk> . edu . <unk> . <unk> . divisor . domain . Word ;
public class <unk> {
private Text text ;
private char [ ] <unk> = { а' , <unk> , е' , о' , <unk> , <unk> , <unk> , <unk> , ы' , и' , ю' , я' , <num>  } ;
public <unk> ( ) {
}
public <unk> ( Text text ) {
this . text = text ;
}
public Text getText ( ) {
return text ;
}
public void setText ( Text text ) {
this . text = text ;
}
public void <unk> ( ) {
String <unk> = " ;
for ( Word w : text . <unk> ( ) ) {
String word = w . <unk> ( ) ;
if ( word . length ( ) != <num> ) {
List < Integer > <unk> = <unk> ( word ) ;
int <unk> [ ] = <unk> ( word ) ;
if ( ! <unk> . isEmpty ( ) ) {
for ( Integer i : <unk> ) {
if ( i . intValue ( ) == <num> && word . length ( ) == <num> ) {
word = word . replaceFirst ( " , " ) ;
}
else if ( i . intValue ( ) == <num> && <unk> [ i + <num> ] == <num> ) {
word = word . replaceFirst ( " , " ) ;
}
else if ( i . intValue ( ) == <num> && <unk> [ i + <num> ] != <num> ) {
word = word . replaceFirst ( " , " ) ;
}
else if ( i . intValue ( ) == ( word . length ( )  <num> ) && <unk> [ i  <num> ] == <num> ) {
word = word . replaceFirst ( " , " ) ;
}
else if ( i . intValue ( ) == ( word . length ( )  <num> ) && <unk> [ i  <num> ] != <num> ) {
word = word . replaceFirst ( " , " ) ;
}
else if ( <unk> [ i  <num> ] == <num> && <unk> [ i + <num> ] == <num> ) {
word = word . replaceFirst ( " , " ) ;
}
else if ( <unk> [ i  <num> ] != <num> && <unk> [ i + <num> ] != <num> ) {
word = word . replaceFirst ( " , " ) ;
}
else if ( <unk> [ i  <num> ] == <num> && <unk> [ i + <num> ] != <num> ) {
word = word . replaceFirst ( " , " ) ;
}
else if ( <unk> [ i  <num> ] != <num> && <unk> [ i + <num> ] == <num> ) {
word = word . replaceFirst ( " , " ) ;
}
else {
new Exception ( " ) . printStackTrace ( ) ;
}
}
}
<unk> += word + " ;
}
}
<unk> = <unk> . trim ( ) ;
this . text = new Text ( <unk> ) ;
}
public void <unk> ( ) {
for ( Word w : text . <unk> ( ) ) {
String word = w . <unk> ( ) ;
while ( word . length ( ) != <num> ) {
int <unk> [ ] = <unk> ( word ) ;
if ( word . length ( ) == <num> ) {
w . <unk> ( word ) ;
}
else if ( word . length ( ) == <num> && <unk> [ <num> ] == <num> && <unk> [ <num> ] != <num> ) {
w . <unk> ( word ) ;
}
else if ( word . length ( ) == <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] == <num> ) {
w . <unk> ( word ) ;
}
else if ( word . length ( ) == <num> && <unk> [ <num> ] == <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] != <num> ) {
w . <unk> ( word ) ;
}
else if ( word . length ( ) == <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] == <num> && <unk> [ <num> ] != <num> ) {
w . <unk> ( word ) ;
}
else if ( word . length ( ) == <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] == <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] != <num> ) {
w . <unk> ( word ) ;
}
else if ( <unk> [ <num> ] == <num> && <unk> [ <num> ] == <num> ) {
w . <unk> ( word . substring ( <num> , <num> ) ) ;
}
else if ( <unk> [ <num> ] != <num> && <unk> [ <num> ] == <num> && <unk> [ <num> ] == <num> ) {
w . <unk> ( word . substring ( <num> , <num> ) ) ;
}
else if ( <unk> [ <num> ] == <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] == <num> ) {
w . <unk> ( word . substring ( <num> , <num> ) ) ;
}
else if ( <unk> [ <num> ] == <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] != <num> ) {
w . <unk> ( word . substring ( <num> , <num> ) ) ;
}
else if ( <unk> [ <num> ] == <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] != <num> ) {
w . <unk> ( word . substring ( <num> , <num> ) ) ;
}
else if ( <unk> [ <num> ] != <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] == <num> ) {
w . <unk> ( word . substring ( <num> , <num> ) ) ;
}
else if ( <unk> [ <num> ] != <num> && <unk> [ <num> ] == <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] == <num> ) {
w . <unk> ( word . substring ( <num> , <num> ) ) ;
}
else if ( <unk> [ <num> ] != <num> && <unk> [ <num> ] == <num> && <unk> [ <num> ] != <num> && <unk> [ <num> ] != <num> ) {
w . <unk> ( word . substring ( <num> , <num> ) ) ;
}
else {
Exception e = new Exception ( " ) ;
e . printStackTrace ( ) ;
}
if ( word . length ( ) == w . <unk> ( ) ) {
word = " ;
w . <unk> ( ) . setPosition ( <unk> . Position . <unk> ) ;
}
else {
word = word . substring ( w . <unk> ( ) ) ;
w . <unk> ( ) . setPosition ( <unk> . Position . FIRST ) ;
}
}
}
}
public Map < <unk> , Word > <unk> ( ) {
Map < <unk> , Word > <unk> = new HashMap < <unk> , Word > ( ) ;
for ( Word word : text . <unk> ( ) ) {
for ( <unk> <unk> : word . <unk> ( ) ) {
<unk> . put ( <unk> , word ) ;
}
}
return <unk> ;
}
private List < Integer > <unk> ( String word ) {
List < Integer > <unk> = new ArrayList < Integer > ( ) ;
for ( int i = <num> ; i < word . length ( ) ; i ++ ) {
if ( word . charAt ( i ) == у' ) {
<unk> . add ( i ) ;
}
}
return <unk> ;
}
private int [ ] <unk> ( String word ) {
int <unk> [ ] = new int [ word . length ( ) ] ;
for ( int i = <num> ; i < word . length ( ) ; i ++ ) {
for ( int j = <num> ; j < <unk> . length ; j ++ ) {
if ( word . charAt ( i ) == <unk> [ j ] ) {
<unk> [ i ] = <num> ;
break ;
}
}
}
return <unk> ;
}
}
package <unk> . edu . <unk> . <unk> . parser ;
import java . io . File ;
import java . io . FileInputStream ;
import <unk> . edu . <unk> . <unk> . parser . format . <unk> ;
import <unk> . edu . <unk> . <unk> . parser . format . <unk> ;
public class Parser {
private <unk> <unk> ;
private <unk> pdf ;
public String <unk> ( String path ) {
try {
File file = new File ( path ) ;
FileInputStream fis = new FileInputStream ( file . getAbsolutePath ( ) ) ;
String fileContent = " ;
if ( path . endsWith ( " ) || path . endsWith ( " ) ) {
<unk> = new <unk> ( ) ;
fileContent = <unk> . <unk> ( fis ) ;
}
else if ( path . endsWith ( " ) ) {
pdf = new <unk> ( ) ;
fileContent = pdf . <unk> ( fis ) ;
}
else {
Exception <unk> = new Exception ( " + path ) ;
<unk> . printStackTrace ( ) ;
}
return fileContent ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return null ;
}
public String <unk> ( String path ) {
try {
File file = new File ( path ) ;
FileInputStream fis = new FileInputStream ( file . getAbsolutePath ( ) ) ;
String fileContent = " ;
if ( path . endsWith ( " ) || path . endsWith ( " ) ) {
<unk> = new <unk> ( ) ;
fileContent = <unk> . <unk> ( fis ) ;
}
else if ( path . endsWith ( " ) ) {
pdf = new <unk> ( ) ;
fileContent = pdf . <unk> ( fis ) ;
}
else {
Exception <unk> = new Exception ( " + path ) ;
<unk> . printStackTrace ( ) ;
}
return fileContent ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return null ;
}
}
package <unk> . edu . <unk> . <unk> . ui ;
import <unk> . edu . <unk> . <unk> . <unk> ;
import <unk> . edu . <unk> . <unk> . config . <unk> ;
import <unk> . edu . <unk> . <unk> . parser . Parser ;
import com . <unk> . qt . core . <unk> ;
import com . <unk> . qt . gui . <unk> ;
import com . <unk> . qt . gui . <unk> ;
import com . <unk> . qt . gui . <unk> ;
import com . <unk> . qt . gui . <unk> ;
import com . <unk> . qt . gui . <unk> ;
import com . <unk> . qt . gui . <unk> ;
import com . <unk> . qt . gui . <unk> ;
import com . <unk> . qt . gui . <unk> ;
import com . <unk> . qt . gui . <unk> ;
import com . <unk> . qt . gui . <unk> ;
import com . <unk> . qt . webkit . <unk> ;
public class GUI extends <unk> {
private <unk> fileMenu ;
private <unk> helpMenu ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> mainLayout ;
private <unk> topLayout ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> webView ;
private <unk> <unk> ;
private <unk> playButton ;
private <unk> stopButton ;
private <unk> generateButton ;
private <unk> <unk> ;
private Parser parser ;
private <unk> <unk> ;
private String content ;
private String <unk> ;
public GUI ( <unk> parent ) {
super ( parent ) ;
createActions ( ) ;
createMenus ( ) ;
<unk> ( ) ;
<unk> = new <unk> ( ) ;
<unk> = new <unk> ( ) ;
}
private void createMenus ( ) {
fileMenu = menuBar ( ) . <unk> ( tr ( " ) ) ;
fileMenu . addAction ( <unk> ) ;
fileMenu . addAction ( <unk> ) ;
helpMenu = menuBar ( ) . <unk> ( tr ( " ) ) ;
helpMenu . addAction ( <unk> ) ;
helpMenu . addAction ( <unk> ) ;
}
private void createActions ( ) {
<unk> = new <unk> ( tr ( " ) , this ) ;
<unk> . setShortcut ( tr ( " ) ) ;
<unk> . <unk> ( tr ( " ) ) ;
<unk> . <unk> . connect ( this , " ) ;
<unk> = new <unk> ( tr ( " ) , this ) ;
<unk> . setShortcut ( tr ( " ) ) ;
<unk> . <unk> ( tr ( " ) ) ;
<unk> . <unk> . connect ( this , " ) ;
<unk> = new <unk> ( tr ( " ) , this ) ;
<unk> . <unk> ( tr ( " ) ) ;
<unk> . <unk> . connect ( this , " ) ;
<unk> = new <unk> ( tr ( " ) , this ) ;
<unk> . <unk> ( tr ( " ) ) ;
<unk> . <unk> . connect ( <unk> . instance ( ) , " ) ;
}
private void <unk> ( ) {
<unk> = new <unk> ( ) ;
<unk> ( <unk> ) ;
mainLayout = new <unk> ( ) ;
<unk> . setLayout ( mainLayout ) ;
topLayout = new <unk> ( ) ;
<unk> = new <unk> ( ) ;
<unk> = new <unk> ( ) ;
mainLayout . <unk> ( topLayout ) ;
mainLayout . <unk> ( <unk> ) ;
mainLayout . <unk> ( <unk> ) ;
<unk> <unk> = new <unk> ( ) ;
playButton = new <unk> ( tr ( " ) ) ;
stopButton = new <unk> ( tr ( " ) ) ;
generateButton = new <unk> ( tr ( " ) ) ;
playButton . setToolTip ( tr ( " ) ) ;
stopButton . setToolTip ( tr ( " ) ) ;
generateButton . setToolTip ( tr ( " ) ) ;
<unk> . <unk> ( generateButton ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( playButton ) ;
<unk> . <unk> ( stopButton ) ;
topLayout . <unk> ( <unk> ) ;
webView = new <unk> ( ) ;
<unk> . <unk> ( webView ) ;
resize ( <num> , <num> ) ;
playButton . clicked . connect ( this , " ) ;
stopButton . clicked . connect ( this , " ) ;
generateButton . clicked . connect ( this , " ) ;
}
protected void open ( ) {
String path = <unk> . <unk> ( this , tr ( " ) ,
<unk> . currentPath ( ) , new <unk> . Filter (
tr ( " ) ) ) ;
if ( path . length ( ) != <num> ) {
parser = new Parser ( ) ;
content = parser . <unk> ( path ) ;
String <unk> = parser . <unk> ( path ) ;
webView . setHtml ( <unk> ) ;
}
}
protected void generate ( ) {
if ( content != null && content . length ( ) != <num> ) {
<unk> = <unk> . make ( content , " ) ;
}
else {
<unk> . warning ( this , " , " ) ;
}
}
protected void play ( ) {
if ( content != null && content . length ( ) != <num> ) {
if ( <unk> == null ) {
<unk> = <unk> . make ( content , " ) ;
}
<unk> . <unk> ( <unk> ) ;
}
else {
<unk> . warning ( this , " , " ) ;
}
}
protected void stop ( ) {
if ( <unk> != null ) {
<unk> . stop ( ) ;
}
}
protected void about ( ) {
<unk> . information ( this , " , " ) ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public static void main ( String [ ] args ) {
<unk> . initialize ( args ) ;
GUI gui = new GUI ( null ) ;
gui . setWindowTitle ( " ) ;
gui . show ( ) ;
Thread t = new Thread ( new <unk> ( gui ) ) ;
t . start ( ) ;
<unk> . exec ( ) ;
}
}
package <unk> . edu . <unk> . <unk> . parser . format ;
import java . io . FileInputStream ;
import com . <unk> . text . pdf . <unk> ;
import com . <unk> . text . pdf . parser . <unk> ;
public class <unk> {
public String <unk> ( FileInputStream fis ) {
try {
String contentText = " ;
<unk> pdf = new <unk> ( fis ) ;
<unk> <unk> = new <unk> ( pdf ) ;
for ( int i = <num> ; i <= pdf . <unk> ( ) ; i ++ ) {
contentText += <unk> . <unk> ( i ) ;
}
return contentText ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return null ;
}
public String <unk> ( FileInputStream fis ) {
try {
String contentText = " ;
<unk> pdf = new <unk> ( fis ) ;
<unk> <unk> = new <unk> ( pdf ) ;
for ( int i = <num> ; i <= pdf . <unk> ( ) ; i ++ ) {
contentText += <unk> . <unk> ( i ) + " ;
}
return contentText ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return null ;
}
}
package com . <unk> . storm ;
import backtype . storm . Config ;
import backtype . storm . LocalCluster ;
import backtype . storm . generated . StormTopology ;
import backtype . storm . topology . <unk> ;
import backtype . storm . topology . IRichBolt ;
import backtype . storm . topology . <unk> ;
import backtype . storm . topology . OutputFieldsDeclarer ;
import backtype . storm . topology . TopologyBuilder ;
import backtype . storm . tuple . Fields ;
import java . io . File ;
import java . io . FileNotFoundException ;
import java . io . FileReader ;
import java . io . IOException ;
import java . util . Collections ;
import java . util . List ;
import java . util . Map ;
import java . util . Map . Entry ;
import java . util . Set ;
import org . json . simple . JSONArray ;
import org . json . simple . JSONObject ;
import org . json . simple . JSONValue ;
public class <unk> {
@SuppressWarnings({"unchecked"})
public static void main ( String [ ] args ) throws FileNotFoundException , IOException {
if ( args . length == <num> ) throw new RuntimeException ( " ) ;
File <unk> = new File ( args [ <num> ] ) ;
String <unk> = new File ( <unk> . getParent ( ) ) . getCanonicalPath ( ) ;
JSONObject <unk> = ( JSONObject ) JSONValue . parse ( new FileReader ( <unk> ) ) ;
TopologyBuilder <unk> = new TopologyBuilder ( ) ;
Config conf = new Config ( ) ;
String <unk> = ( String ) <unk> . get ( " ) ;
JSONObject components = ( JSONObject ) <unk> . get ( " ) ;
JSONObject <unk> = ( JSONObject ) components . get ( " ) ;
JSONObject <unk> = ( JSONObject ) components . get ( " ) ;
for ( Entry < String , Object > spout : ( Set < Entry < String , Object >> ) <unk> . entrySet ( ) ) {
String <unk> = spout . getKey ( ) ;
JSONObject <unk> = ( JSONObject ) spout . getValue ( ) ;
String command = ( String ) <unk> . get ( " ) ;
String <unk> = <unk> ( ( String ) <unk> . get ( " ) , <unk> ) ;
List < String > fields = ( List < String > ) <unk> . get ( " ) ;
<unk> . setSpout ( <unk> , new <unk> ( command , <unk> , fields ) ) ;
}
for ( Entry < String , Object > <unk> : ( Set < Entry < String , Object >> ) <unk> . entrySet ( ) ) {
String <unk> = <unk> . getKey ( ) ;
JSONObject <unk> = ( JSONObject ) <unk> . getValue ( ) ;
String command = ( String ) <unk> . get ( " ) ;
String <unk> = <unk> ( ( String ) <unk> . get ( " ) , <unk> ) ;
List < String > fields = ( List < String > ) <unk> . get ( " ) ;
<unk> <unk> = <unk> . setBolt ( <unk> , new <unk> ( command , <unk> , fields ) ) ;
JSONArray <unk> = ( JSONArray ) <unk> . get ( " ) ;
for ( Object <unk> : <unk> ) {
String <unk> = ( String ) ( ( JSONObject ) <unk> ) . get ( " ) ;
String <unk> = ( String ) ( ( JSONObject ) <unk> ) . get ( " ) ;
if ( <unk> . equals ( " ) ) {
<unk> . shuffleGrouping ( <unk> ) ;
}
if ( <unk> . equals ( " ) ) {
List < String > <unk> = ( List < String > ) ( ( JSONObject ) <unk> ) . get ( " ) ;
<unk> . fieldsGrouping ( <unk> , new Fields ( <unk> ) ) ;
}
}
}
conf . setDebug ( true ) ;
conf . putAll ( ( Map < String , Object > ) <unk> . get ( " ) ) ;
StormTopology topology = <unk> . createTopology ( ) ;
final LocalCluster cluster = new LocalCluster ( ) ;
cluster . submitTopology ( <unk> , conf , topology ) ;
Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( new Runnable ( ) {
@Override
public void run ( ) {
cluster . shutdown ( ) ;
}
} ) ) ;
}
private static String <unk> ( String <unk> , String <unk> ) {
File <unk> ;
if ( <unk> . startsWith ( " ) ) {
<unk> = new File ( <unk> ) ;
} else {
<unk> = new File ( <unk> . replaceAll ( " , " ) + " + <unk> ) ;
}
if ( <unk> . exists ( ) ) return <unk> . getAbsolutePath ( ) ;
else return <unk> ;
}
private static class <unk> extends ShellBolt implements IRichBolt {
private static final long serialVersionUID = <num> ;
protected List < String > fields ;
public <unk> ( String command , String <unk> , List < String > fields ) {
super ( command , <unk> ) ;
this . fields = fields ;
}
@Override
public void declareOutputFields ( OutputFieldsDeclarer declarer ) {
declarer . declare ( new Fields ( fields ) ) ;
}
@Override
public Map < String , Object > getComponentConfiguration ( ) {
return Collections . emptyMap ( ) ;
}
}
private static class <unk> extends <unk> implements <unk> {
private static final long serialVersionUID = <num> ;
protected List < String > fields ;
public <unk> ( String command , String <unk> , List < String > fields ) {
super ( command , <unk> ) ;
this . fields = fields ;
}
@Override
public void declareOutputFields ( OutputFieldsDeclarer declarer ) {
declarer . declare ( new Fields ( fields ) ) ;
}
@Override
public Map < String , Object > getComponentConfiguration ( ) {
return Collections . emptyMap ( ) ;
}
}
}
package com . <unk> . storm ;
import backtype . storm . generated . <unk> ;
import backtype . storm . spout . <unk> ;
import backtype . storm . spout . SpoutOutputCollector ;
import backtype . storm . task . TopologyContext ;
import backtype . storm . utils . Utils ;
import java . io . BufferedReader ;
import java . io . DataOutputStream ;
import java . io . File ;
import java . io . IOException ;
import java . io . InputStreamReader ;
import java . nio . charset . Charset ;
import java . util . List ;
import java . util . Map ;
import org . apache . log4j . Logger ;
import org . json . simple . JSONObject ;
import org . json . simple . JSONValue ;
public class <unk> implements <unk> {
public static Logger LOG = Logger . getLogger ( <unk> . class ) ;
private static final long serialVersionUID = <num> ;
private JSONObject _next ;
Process <unk> ;
String <unk> ;
DataOutputStream <unk> ;
BufferedReader <unk> ;
SpoutOutputCollector _collector ;
String [ ] command ;
public <unk> ( <unk> component ) {
this ( component . <unk> ( ) , component . get_script ( ) ) ;
}
public <unk> ( String . . . command ) {
this . command = command ;
}
private String <unk> ( TopologyContext context ) {
ProcessBuilder builder = new ProcessBuilder ( command ) ;
try {
<unk> = builder . start ( ) ;
<unk> = new DataOutputStream ( <unk> . getOutputStream ( ) ) ;
<unk> = new BufferedReader ( new InputStreamReader (
<unk> . getInputStream ( ) , Charset . forName ( " ) ) ) ;
<unk> ( context . <unk> ( ) ) ;
<unk> = <unk> . readLine ( ) ;
LOG . info ( " + <unk> ) ;
return <unk> ;
} catch ( IOException e ) {
throw new RuntimeException ( e ) ;
}
}
@Override
public void open ( Map <unk> , TopologyContext context ,
SpoutOutputCollector collector ) {
<unk> ( context ) ;
_collector = collector ;
<unk> ( JSONValue . toJSONString ( <unk> ) ) ;
<unk> ( context . toJSONString ( ) ) ;
}
@Override
public void nextTuple ( ) {
if ( _next == null ) {
_next = new JSONObject ( ) ;
_next . put ( " , " ) ;
}
this . <unk> ( JSONValue . toJSONString ( _next ) ) ;
try {
while ( true ) {
String line = " ;
while ( true ) {
String <unk> = <unk> . readLine ( ) ;
if ( <unk> == null ) {
throw new RuntimeException (
" ) ;
}
if ( <unk> . equals ( " ) ) {
line = <unk> ;
break ;
}
if ( <unk> . equals ( " ) ) {
break ;
}
if ( line . length ( ) != <num> ) {
line += " ;
}
line += <unk> ;
}
if ( line . equals ( " ) ) {
break ;
} else {
Map action = ( Map ) JSONValue . parse ( line ) ;
String cmd = ( String ) action . get ( " ) ;
if ( cmd . equals ( " ) ) {
Object id = action . get ( " ) ;
String stream = ( String ) action . get ( " ) ;
if ( stream == null ) {
stream = Utils . <unk> ;
}
Long task = ( Long ) action . get ( " ) ;
@SuppressWarnings("unchecked")
List < Object > tuple = ( List ) action . get ( " ) ;
if ( task == null ) {
List < Integer > <unk> = _collector . emit ( stream , tuple , id ) ;
<unk> ( JSONValue . toJSONString ( <unk> ) ) ;
} else {
_collector . <unk> ( ( int ) task . longValue ( ) , stream , tuple , id ) ;
}
} else if ( cmd . equals ( " ) ) {
String msg = ( String ) action . get ( " ) ;
LOG . info ( " + msg ) ;
}
}
}
} catch ( IOException e ) {
throw new RuntimeException ( " , e ) ;
}
}
@Override
@SuppressWarnings("unchecked")
public void ack ( Object o ) {
JSONObject obj = new JSONObject ( ) ;
obj . put ( " , " ) ;
obj . put ( " , o ) ;
this . <unk> ( obj . toString ( ) ) ;
}
@Override
@SuppressWarnings("unchecked")
public void fail ( Object o ) {
JSONObject obj = new JSONObject ( ) ;
obj . put ( " , " ) ;
obj . put ( " , o ) ;
this . <unk> ( obj . toString ( ) ) ;
}
@Override
public void close ( ) {
<unk> . destroy ( ) ;
<unk> = null ;
<unk> = null ;
_collector = null ;
}
private void <unk> ( String str ) {
try {
<unk> . writeBytes ( str + " ) ;
<unk> . writeBytes ( " ) ;
<unk> . flush ( ) ;
} catch ( IOException ex ) {
LOG . warn ( " + <unk> , ex ) ;
}
}
package com . <unk> . storm ;
import junit . framework . Test ;
import junit . framework . TestCase ;
import junit . framework . TestSuite ;
public class AppTest
extends TestCase
{
public AppTest ( String testName )
{
super ( testName ) ;
}
public static Test suite ( )
{
return new TestSuite ( AppTest . class ) ;
}
public void testApp ( )
{
assertTrue ( true ) ;
}
}
package com . <unk> . storm ;
import backtype . storm . generated . <unk> ;
import backtype . storm . task . <unk> ;
import backtype . storm . task . OutputCollector ;
import backtype . storm . task . TopologyContext ;
import backtype . storm . tuple . <unk> ;
import backtype . storm . tuple . Tuple ;
import backtype . storm . utils . Utils ;
import java . io . BufferedReader ;
import java . io . DataOutputStream ;
import java . io . IOException ;
import java . io . InputStreamReader ;
import java . nio . charset . Charset ;
import java . util . ArrayList ;
import java . util . Arrays ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
import org . apache . log4j . Logger ;
import org . json . simple . JSONObject ;
import org . json . simple . JSONValue ;
public class ShellBolt implements <unk> {
public static Logger LOG = Logger . getLogger ( ShellBolt . class ) ;
Process <unk> ;
DataOutputStream <unk> ;
BufferedReader <unk> ;
OutputCollector _collector ;
Map < Long , Tuple > <unk> = new HashMap < Long , Tuple > ( ) ;
String [ ] command ;
public ShellBolt ( <unk> component ) {
this ( component . <unk> ( ) , component . get_script ( ) ) ;
}
public ShellBolt ( String . . . command ) {
this . command = command ;
}
private String <unk> ( TopologyContext context ) {
ProcessBuilder builder = new ProcessBuilder ( command ) ;
try {
<unk> = builder . start ( ) ;
<unk> = new DataOutputStream ( <unk> . getOutputStream ( ) ) ;
<unk> = new BufferedReader ( new InputStreamReader ( <unk> . getInputStream ( ) , Charset . forName ( " ) ) ) ;
<unk> ( context . <unk> ( ) ) ;
String <unk> = <unk> . readLine ( ) ;
LOG . info ( " + <unk> ) ;
return <unk> ;
} catch ( IOException e ) {
throw new RuntimeException ( e ) ;
}
}
public void prepare ( Map <unk> , TopologyContext context , OutputCollector collector ) {
try {
<unk> ( context ) ;
_collector = collector ;
<unk> ( JSONValue . toJSONString ( <unk> ) ) ;
<unk> ( context . toJSONString ( ) ) ;
} catch ( IOException e ) {
throw new RuntimeException ( " , e ) ;
}
}
public void execute ( Tuple input ) {
long <unk> = <unk> . generateId ( ) ;
<unk> . put ( <unk> , input ) ;
try {
JSONObject obj = new JSONObject ( ) ;
obj . put ( " , Long . toString ( <unk> ) ) ;
obj . put ( " , input . getSourceComponent ( ) ) ;
obj . put ( " , input . getSourceStreamId ( ) ) ;
obj . put ( " , input . <unk> ( ) ) ;
obj . put ( " , input . getValues ( ) ) ;
<unk> ( obj . toString ( ) ) ;
while ( true ) {
String line = " ;
while ( true ) {
String <unk> = <unk> . readLine ( ) ;
if ( <unk> == null )
throw new RuntimeException ( " ) ;
if ( <unk> . equals ( " ) ) {
line = <unk> ;
break ;
}
if ( <unk> . equals ( " ) ) {
break ;
}
if ( line . length ( ) != <num> ) {
line += " ;
}
line += <unk> ;
}
if ( line . equals ( " ) ) {
break ;
} else {
Map action = ( Map ) JSONValue . parse ( line ) ;
String command = ( String ) action . get ( " ) ;
if ( command . equals ( " ) ) {
Long id = Long . parseLong ( ( String ) action . get ( " ) , <num> ) ;
Tuple <unk> = <unk> . remove ( id ) ;
if ( <unk> == null ) {
throw new RuntimeException ( " + id ) ;
}
_collector . ack ( <unk> ) ;
} else if ( command . equals ( " ) ) {
Long id = Long . parseLong ( ( String ) action . get ( " ) , <num> ) ;
Tuple failed = <unk> . remove ( id ) ;
if ( failed == null ) {
throw new RuntimeException ( " + id ) ;
}
_collector . fail ( failed ) ;
} else if ( command . equals ( " ) ) {
String msg = ( String ) action . get ( " ) ;
LOG . info ( " + msg ) ;
} else if ( command . equals ( " ) ) {
String stream = ( String ) action . get ( " ) ;
if ( stream == null ) stream = Utils . <unk> ;
Long task = ( Long ) action . get ( " ) ;
List < Object > tuple = ( List ) action . get ( " ) ;
List < Tuple > <unk> = new ArrayList < Tuple > ( ) ;
Object <unk> = action . get ( " ) ;
if ( <unk> != null ) {
if ( <unk> instanceof Long ) {
<unk> = Arrays . asList ( <unk> ) ;
}
for ( Object o : ( List ) <unk> ) {
<unk> . add ( <unk> . get ( Long . parseLong ( ( String ) o , <num> ) ) ) ;
}
}
if ( task == null ) {
List < Integer > <unk> = _collector . emit ( stream , <unk> , tuple ) ;
<unk> ( JSONValue . toJSONString ( <unk> ) ) ;
} else {
_collector . <unk> ( ( int ) task . longValue ( ) , stream , <unk> , tuple ) ;
}
}
}
}
} catch ( IOException e ) {
throw new RuntimeException ( " , e ) ;
}
}
public void cleanup ( ) {
<unk> . destroy ( ) ;
<unk> . clear ( ) ;
<unk> = null ;
<unk> = null ;
_collector = null ;
}
private void <unk> ( String str ) throws IOException {
<unk> . writeBytes ( str + " ) ;
<unk> . writeBytes ( " ) ;
<unk> . flush ( ) ;
}
}
package uk . ac . cam . cl . <unk> . <unk> ;
import java . io . IOException ;
import java . util . Vector ;
import android . app . Activity ;
import android . os . Bundle ;
import android . util . Log ;
import android . view . View ;
import android . widget . AdapterView ;
import android . widget . AdapterView . OnItemClickListener ;
import android . widget . ArrayAdapter ;
import android . widget . CheckBox ;
import android . widget . CompoundButton ;
import android . widget . ListView ;
import android . widget . TextView ;
import android . widget . Toast ;
import android . widget . CompoundButton . OnCheckedChangeListener ;
public class <unk> extends Activity {
public static final String TAG = " ;
public static final String <unk> = " ;
public static final String <unk> = <unk> + " ;
public static final String <unk> = <unk> + " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
private String <unk> ;
private TextView <unk> ;
private ListView <unk> ;
private CheckBox <unk> ;
private <unk> su ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
try {
su = new <unk> ( ) ;
<unk> ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
this . finish ( ) ;
}
<unk> ( ) ;
}
@Override
protected void onDestroy ( ) {
super . onDestroy ( ) ;
if ( su != null ) {
su . finish ( ) ;
}
}
private void <unk> ( ) {
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( ListView ) findViewById ( R . id . <unk> ) ;
Vector < String > files = <unk> ( ) ;
ArrayAdapter < String > adp = new ArrayAdapter < String > ( this , android . R . layout . simple_list_item_1 , files ) ;
<unk> . setAdapter ( adp ) ;
<unk> . setOnItemClickListener ( new OnItemClickListener ( ) {
public void onItemClick ( AdapterView < ? > arg0 , View arg1 , int arg2 , long arg3 ) {
<unk> ( <unk> + ( String ) <unk> . getItemAtPosition ( arg2 ) ) ;
}
} ) ;
if ( ! files . isEmpty ( ) ) {
<unk> ( <unk> + files . get ( <num> ) ) ;
}
<unk> = ( CheckBox ) findViewById ( R . id . <unk> ) ;
if ( <unk> ( ) ) {
<unk> . setChecked ( true ) ;
}
<unk> . setOnCheckedChangeListener ( new OnCheckedChangeListener ( ) {
@Override
public void onCheckedChanged ( CompoundButton buttonView ,
boolean isChecked ) {
<unk> . setEnabled ( ! isChecked ) ;
if ( isChecked ) {
if ( <unk> ( ) ) {
<unk> ( ) ;
} else {
toastMessage ( " ) ;
<unk> . setChecked ( false ) ;
}
} else {
<unk> ( ) ;
}
}
} ) ;
}
private Vector < String > <unk> ( ) {
Vector < String > files = null ;
try {
files = su . <unk> ( " ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
return files ;
}
private boolean <unk> ( ) {
try {
Vector < String > <unk> = su . <unk> ( " ) ;
for ( String ps : <unk> ) {
Log . i ( TAG , " + ps ) ;
if ( ps . trim ( ) . endsWith ( <unk> + " + <unk> ) ) {
Log . i ( TAG , " ) ;
return true ;
}
}
return false ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
return false ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
return false ;
}
}
private boolean <unk> ( ) {
try {
Vector < String > out = su . <unk> ( " + <unk> ) ;
return ! out . isEmpty ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
return false ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
return false ;
}
}
private void <unk> ( ) {
try {
su . <unk> ( <unk> + " + <unk> + " ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
toastMessage ( " ) ;
}
private void <unk> ( ) {
try {
su . <unk> ( " ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
toastMessage ( " ) ;
}
private void <unk> ( ) {
try {
su . <unk> ( " ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
}
private void <unk> ( String path ) {
<unk> = path ;
<unk> . setText ( path ) ;
}
private void toastMessage ( String msg ) {
Toast . makeText ( getApplicationContext ( ) , msg , Toast . LENGTH_SHORT ) . show ( ) ;
}
package uk . ac . cam . cl . <unk> . <unk> ;
import java . io . DataInputStream ;
import java . io . DataOutputStream ;
import java . io . IOException ;
import java . util . Vector ;
import java . util . concurrent . BlockingQueue ;
import java . util . concurrent . LinkedBlockingQueue ;
import android . util . Log ;
public class <unk> extends Thread {
public static final String TAG = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
private Process p ;
private DataOutputStream os ;
private DataInputStream is ;
private BlockingQueue < String > <unk> ;
private boolean finished ;
private Thread <unk> ;
private Object <unk> ;
private boolean processing = true ;
public <unk> ( ) throws IOException {
p = Runtime . getRuntime ( ) . exec ( " ) ;
os = new DataOutputStream ( p . getOutputStream ( ) ) ;
is = new DataInputStream ( p . getInputStream ( ) ) ;
<unk> = new LinkedBlockingQueue < String > ( ) ;
<unk> = new Object ( ) ;
<unk> = new Thread ( new Runnable ( ) {
public void run ( ) {
Log . i ( TAG , " ) ;
while ( ! finished ) {
String line ;
try {
line = is . readLine ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
break ;
}
if ( line != null ) {
Log . i ( TAG , " + line ) ;
if ( line . endsWith ( <unk> ) ) {
synchronized ( <unk> ) {
processing = false ;
<unk> . notifyAll ( ) ;
}
} else {
try {
<unk> . put ( line ) ;
} catch ( InterruptedException e ) {
e . printStackTrace ( ) ;
}
}
}
}
}
} ) ;
<unk> . start ( ) ;
}
private void exec ( String cmd ) throws IOException {
Log . i ( TAG , " + cmd ) ;
processing = true ;
<unk> . clear ( ) ;
os . writeBytes ( cmd + " ) ;
os . writeBytes ( " + <unk> + " ) ;
os . flush ( ) ;
}
public Vector < String > <unk> ( String cmd ) throws IOException , InterruptedException {
exec ( cmd ) ;
waitFor ( ) ;
return getOutput ( ) ;
}
public void waitFor ( ) throws InterruptedException {
if ( processing ) {
synchronized ( <unk> ) {
Log . i ( TAG , " ) ;
<unk> . wait ( ) ;
}
}
}
public Vector < String > getOutput ( ) {
Vector < String > <unk> = new Vector < String > ( ) ;
<unk> . drainTo ( <unk> ) ;
Log . i ( TAG , " + <unk> . size ( ) ) ;
return <unk> ;
}
public void finish ( ) {
if ( ! finished ) {
finished = true ;
p . destroy ( ) ;
interrupt ( ) ;
}
}
}
package <unk> . <unk> ;
public final class R {
public static final class attr {
}
public static final class drawable {
public static final int ic_launcher = <num> ;
}
public static final class layout {
public static final int main = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int hello = <num> ;
}
}
package <unk> . <unk> ;
import android . app . Activity ;
import android . os . Bundle ;
import android . view . Window ;
import android . view . WindowManager ;
import android . webkit . WebView ;
public class <unk> extends Activity {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
requestWindowFeature ( Window . FEATURE_NO_TITLE ) ;
getWindow ( ) . setFlags ( WindowManager . LayoutParams . FLAG_FULLSCREEN ,
WindowManager . LayoutParams . FLAG_FULLSCREEN ) ;
WebView webview = new WebView ( this ) ;
webview . getSettings ( ) . <unk> ( true ) ;
webview . getSettings ( ) . setJavaScriptEnabled ( true ) ;
webview . loadUrl ( " ) ;
setContentView ( webview ) ;
}
package <unk> . inet . weather . util ;
import java . text . DecimalFormat ;
import java . util . Calendar ;
import java . util . List ;
import <unk> . inet . weather . R ;
import <unk> . inet . weather . <unk> ;
import <unk> . inet . weather . business . <unk> ;
import android . content . Context ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . ArrayAdapter ;
import android . widget . ImageView ;
import android . widget . TextView ;
public class <unk> extends ArrayAdapter < <unk> > {
private List < <unk> > <unk> ;
public <unk> ( Context context , int textViewResourceId , List < <unk> > objects ) {
super ( context , textViewResourceId , objects ) ;
<unk> = objects ;
}
@Override
public View getView ( int position , View convertView , ViewGroup parent ) {
View v = convertView ;
if ( v == null ) {
LayoutInflater li = ( LayoutInflater ) this . getContext ( ) . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ;
v = li . inflate ( R . layout . <unk> , null ) ;
}
<unk> forecast = <unk> . get ( position ) ;
Calendar <unk> = forecast . <unk> ( ) ;
TextView <unk> = ( TextView ) v . findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) v . findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) v . findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) v . findViewById ( R . id . <unk> ) ;
ImageView <unk> = ( ImageView ) v . findViewById ( R . id . <unk> ) ;
DecimalFormat formatter = new DecimalFormat ( " ) ;
String <unk> = formatter . format ( <unk> . get ( Calendar . DAY_OF_MONTH ) ) ;
String <unk> = formatter . format ( <unk> . get ( Calendar . MONTH ) + <num> ) ;
<unk> . setText ( <unk> + " + <unk> ) ;
<unk> . setText ( Math . round ( forecast . <unk> ( ) ) + " ) ;
<unk> . setText ( Math . round ( forecast . <unk> ( ) ) + " ) ;
<unk> . setText ( forecast . <unk> ( ) ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . setImageResource ( <unk> . <unk> ( forecast . <unk> ( ) , true ) ) ;
return v ;
}
}
package <unk> . inet . weather ;
import <unk> . inet . weather . business . <unk> ;
import <unk> . inet . weather . business . <unk> . <unk> ;
import android . app . Application ;
import android . util . Log ;
public class <unk> extends Application {
private static final String TAG = " ;
private <unk> wo ;
public <unk> <unk> ( ) {
return wo ;
}
public void <unk> ( <unk> wo ) {
Log . d ( TAG , " ) ;
this . wo = wo ;
}
}
package <unk> . inet . weather ;
import java . util . HashMap ;
import java . util . Map ;
import <unk> . inet . weather . R ;
public class <unk> {
public static Map < String , Integer > <unk> ;
public static Map < String , Integer > <unk> ;
public static Map < String , Integer > <unk> ;
public <unk> ( ) {
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
}
private void <unk> ( ) {
<unk> = new HashMap < String , Integer > ( ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
}
private void <unk> ( ) {
<unk> = new HashMap < String , Integer > ( ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
}
private void <unk> ( ) {
<unk> = new HashMap < String , Integer > ( ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . unknown2 ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . <unk> ) ;
<unk> . put ( " , R . drawable . unknown ) ;
}
public int <unk> ( String <unk> , boolean small ) {
Integer <unk> = <num> ;
if ( ! small ) {
<unk> = <unk> . get ( <unk> ) ;
} else {
<unk> = <unk> . get ( <unk> ) ;
}
if ( <unk> == null ) {
return <unk> . get ( " ) ;
} else {
return <unk> ;
}
}
public int <unk> ( String <unk> ) {
Integer <unk> = <num> ;
<unk> = <unk> . get ( <unk> ) ;
if ( <unk> == null ) {
return <unk> . get ( " ) ;
} else {
return <unk> ;
}
}
}
package <unk> . inet . weather . ui ;
import <unk> . inet . weather . R ;
import android . app . Activity ;
import android . os . Bundle ;
import android . util . Log ;
public class LauncherActivity extends Activity {
private static final String TAG = " ;
@Override
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
Log . d ( TAG , " ) ;
}
}
package <unk> . inet . weather ;
import java . text . DecimalFormat ;
import java . util . Calendar ;
import java . util . List ;
import <unk> . inet . weather . business . <unk> ;
import <unk> . inet . weather . business . <unk> ;
import <unk> . inet . weather . business . <unk> ;
import <unk> . inet . weather . business . <unk> . <unk> ;
import <unk> . inet . weather . util . <unk> ;
import android . app . Activity ;
import android . os . Bundle ;
import android . util . Log ;
import android . widget . ImageView ;
import android . widget . LinearLayout ;
import android . widget . ListView ;
import android . widget . TextView ;
public class <unk> extends Activity {
private static final String TAG = " ;
private <unk> <unk> ;
@Override
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
Log . d ( TAG , " ) ;
<unk> ( ) ;
setContentView ( R . layout . <unk> ) ;
<unk> ( ) ;
<unk> ( ) ;
}
private void <unk> ( ) {
Log . d ( TAG , " ) ;
<unk> = ( ( <unk> ) getApplicationContext ( ) ) . <unk> ( ) ;
if ( <unk> != null ) {
Log . d ( TAG , " + <unk> . getLocation ( ) ) ;
}
}
private void <unk> ( ) {
<unk> <unk> = <unk> . <unk> ( ) . get ( <num> ) ;
ImageView imageView = ( ImageView ) findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
LinearLayout ll = ( LinearLayout ) findViewById ( R . id . <unk> ) ;
String <unk> = <unk> . <unk> ( ) ;
<unk> <unk> = new <unk> ( ) ;
imageView . setImageResource ( <unk> . <unk> ( <unk> , false ) ) ;
<unk> . setText ( <unk> . <unk> ( ) ) ;
<unk> . setText ( Math . round ( <unk> . <unk> ( ) ) + " ) ;
<unk> <unk> = <unk> . <unk> ( ) ;
String <unk> = <unk> . <unk> ( <unk> . <unk> ( ) ) ;
<unk> . setText ( <unk> + " + <unk> . <unk> ( ) + " ) ;
<unk> . setText ( " + Math . round ( <unk> . <unk> ( ) ) + " ) ;
Calendar <unk> = <unk> . <unk> ( ) ;
DecimalFormat formatter = new DecimalFormat ( " ) ;
String <unk> = formatter . format ( <unk> . get ( Calendar . HOUR_OF_DAY ) ) ;
String <unk> = formatter . format ( <unk> . get ( Calendar . MINUTE ) ) ;
<unk> . setText ( " + <unk> + " + <unk> ) ;
ll . setBackgroundResource ( <unk> . <unk> ( <unk> ) ) ;
}
private void <unk> ( ) {
ListView <unk> = ( ListView ) findViewById ( R . id . <unk> ) ;
List < <unk> > <unk> = <unk> . <unk> ( ) ;
List < <unk> > <unk> = <unk> . subList ( <num> , <unk> . size ( ) ) ;
<unk> <unk> = new <unk> ( getApplicationContext ( ) , <num> , <unk> ) ;
<unk> . setAdapter ( <unk> ) ;
}
}
package <unk> . inet . weather ;
import <unk> . inet . weather . business . <unk> ;
import <unk> . inet . weather . business . <unk> ;
import <unk> . inet . weather . business . <unk> ;
import <unk> . inet . weather . business . <unk> . <unk> ;
import <unk> . inet . weather . exceptions . <unk> ;
import <unk> . inet . weather . service . WeatherService ;
import <unk> . inet . weather . service . <unk> . <unk> ;
import <unk> . inet . weather . R ;
import android . app . PendingIntent ;
import android . app . Service ;
import android . appwidget . AppWidgetManager ;
import android . appwidget . AppWidgetProvider ;
import android . content . ComponentName ;
import android . content . Context ;
import android . content . Intent ;
import android . location . Criteria ;
import android . location . Location ;
import android . location . LocationListener ;
import android . location . LocationManager ;
import android . os . Bundle ;
import android . os . IBinder ;
import android . util . Log ;
import android . widget . RemoteViews ;
public class <unk>
extends AppWidgetProvider {
private static final String TAG = " ;
private static Location currentLocation ;
private static LocationManager locationManager ;
@Override
public void onEnabled ( Context context ) {
Log . i ( TAG , " ) ;
RemoteViews <unk> = new RemoteViews ( context . getPackageName ( ) , R . layout . <unk> ) ;
Intent intent = new Intent ( context , <unk> . class ) ;
PendingIntent pendingIntent = PendingIntent . getActivity ( context , <num> , intent , <num> ) ;
<unk> . setOnClickPendingIntent ( R . id . widget , pendingIntent ) ;
ComponentName thisWidget = new ComponentName ( context , <unk> . class ) ;
AppWidgetManager widgetManager = AppWidgetManager . getInstance ( context ) ;
widgetManager . updateAppWidget ( thisWidget , <unk> ) ;
super . onEnabled ( context ) ;
}
@Override
public void onUpdate ( Context context , AppWidgetManager appWidgetManager ,
int [ ] appWidgetIds ) {
Log . i ( TAG , " ) ;
context . startService ( new Intent ( context , <unk> . class ) ) ;
}
public static class <unk> extends Service {
LocationListener ll = new LocationListener ( ) {
@Override
public void onStatusChanged ( String provider , int status , Bundle extras ) {
}
@Override
public void onProviderEnabled ( String provider ) {
}
@Override
public void onProviderDisabled ( String provider ) {
}
@Override
public void onLocationChanged ( Location location ) {
Log . i ( TAG , " + location . getLatitude ( ) + " + location . getLongitude ( ) ) ;
Log . i ( TAG , " ) ;
currentLocation = location ;
Log . i ( TAG , " ) ;
RemoteViews <unk> ;
try {
<unk> = <unk> ( <unk> . this ) ;
ComponentName thisWidget = new ComponentName ( <unk> . this , <unk> . class ) ;
AppWidgetManager widgetManager = AppWidgetManager . getInstance ( <unk> . this ) ;
widgetManager . updateAppWidget ( thisWidget , <unk> ) ;
Log . i ( TAG , " ) ;
Log . i ( TAG , " ) ;
} catch ( <unk> e ) {
Log . i ( TAG , " ) ;
e . printStackTrace ( ) ;
}
locationManager . removeUpdates ( ll ) ;
}
} ;
private RemoteViews <unk> ( Context context ) throws <unk> {
Log . i ( TAG , " ) ;
WeatherService <unk> = new <unk> ( ) ;
Log . i ( TAG , " ) ;
<unk> <unk> ;
if ( currentLocation == null ) {
Log . i ( TAG , " ) ;
<unk> = ( <unk> ) <unk> . <unk> ( ) ;
} else {
Log . i ( TAG , " ) ;
<unk> = ( <unk> ) <unk> . <unk> ( currentLocation . getLatitude ( ) , currentLocation . getLongitude ( ) ) ;
}
<unk> applicationContext = ( <unk> ) getApplicationContext ( ) ;
applicationContext . <unk> ( <unk> ) ;
Log . i ( TAG , " ) ;
RemoteViews views = new RemoteViews ( context . getPackageName ( ) , R . layout . <unk> ) ;
double temperature = <unk> . getTemperature ( ) ;
String location = <unk> . getLocation ( ) ;
<unk> <unk> = <unk> . <unk> ( ) ;
String <unk> = <unk> . <unk> ( ) ;
if ( location . equals ( <unk> . <unk> ) ) {
location = " ;
}
<unk> <unk> = <unk> . <unk> ( ) . get ( <num> ) ;
int <unk> = ( ( Double ) <unk> . <unk> ( ) ) . intValue ( ) ;
int <unk> = ( ( Double ) <unk> . <unk> ( ) ) . intValue ( ) ;
String <unk> = <unk> + " + <unk> + " ;
views . setTextViewText ( R . id . temperature , " + Math . round ( temperature ) + " ) ;
views . setTextViewText ( R . id . location , location ) ;
views . setTextViewText ( R . id . <unk> , <unk> ) ;
views . setTextViewText ( R . id . <unk> , <unk> ) ;
String <unk> = <unk> . <unk> ( ) ;
Log . i ( TAG , " + <unk> ) ;
<unk> <unk> = new <unk> ( ) ;
try {
views . setImageViewResource ( R . id . <unk> , <unk> . <unk> ( <unk> , false ) ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return views ;
}
@Override
public IBinder onBind ( Intent arg0 ) {
return null ;
}
@Override
public void onStart ( Intent intent , int startId ) {
Log . d ( TAG , " ) ;
locationManager = ( LocationManager ) getSystemService ( Context . LOCATION_SERVICE ) ;
Criteria criteria = new Criteria ( ) ;
criteria . setAccuracy ( Criteria . ACCURACY_COARSE ) ;
criteria . <unk> ( Criteria . <unk> ) ;
criteria . <unk> ( false ) ;
criteria . <unk> ( false ) ;
criteria . <unk> ( false ) ;
criteria . setCostAllowed ( true ) ;
String <unk> = locationManager . getBestProvider ( criteria , true ) ;
Log . i ( TAG , " + <unk> + " ) ;
locationManager . requestLocationUpdates ( <unk> , <num> , <num> , ll ) ;
}
}
}
package <unk> . inet . weather ;
import java . util . Calendar ;
import <unk> . inet . weather . business . <unk> ;
import <unk> . inet . weather . business . <unk> ;
import <unk> . inet . weather . business . <unk> ;
import <unk> . inet . weather . business . <unk> . <unk> ;
import <unk> . inet . weather . exceptions . <unk> ;
import <unk> . inet . weather . service . WeatherService ;
import <unk> . inet . weather . service . <unk> . <unk> ;
import <unk> . inet . weather . R ;
import android . app . PendingIntent ;
import android . app . Service ;
import android . appwidget . AppWidgetManager ;
import android . appwidget . AppWidgetProvider ;
import android . content . BroadcastReceiver ;
import android . content . ComponentName ;
import android . content . Context ;
import android . content . Intent ;
import android . content . IntentFilter ;
import android . location . Criteria ;
import android . location . Location ;
import android . location . LocationListener ;
import android . location . LocationManager ;
import android . os . AsyncTask ;
import android . os . Bundle ;
import android . os . IBinder ;
import android . text . format . DateFormat ;
import android . util . Log ;
import android . widget . RemoteViews ;
public class <unk>
extends AppWidgetProvider {
private static final String TAG = " ;
private static Location currentLocation ;
private static LocationManager locationManager ;
private boolean <unk> ;
private Intent <unk> ;
private LocationListener ll ;
private class <unk> implements LocationListener
{
private Context context ;
public <unk> ( Context context ) {
this . context = context ;
}
@Override
public void onLocationChanged ( Location location ) {
Log . i ( TAG , " + location . getLatitude ( ) + " + location . getLongitude ( ) ) ;
Log . i ( TAG , " ) ;
currentLocation = location ;
Log . i ( TAG , " ) ;
new <unk> ( ) . execute ( context ) ;
locationManager . removeUpdates ( this ) ;
}
@Override
public void onProviderDisabled ( String provider ) {
}
@Override
public void onProviderEnabled ( String provider ) {
}
@Override
public void onStatusChanged ( String provider , int status , Bundle extras ) {
}
}
@Override
public void onEnabled ( Context context ) {
Log . d ( TAG , " ) ;
super . onEnabled ( context ) ;
}
@Override
public void onDisabled ( Context context ) {
Log . d ( TAG , " ) ;
if ( <unk> ) {
context . stopService ( <unk> ) ;
Log . d ( TAG , " ) ;
}
super . onDisabled ( context ) ;
}
@Override
public void onUpdate ( Context context , AppWidgetManager appWidgetManager ,
int [ ] appWidgetIds ) {
Log . d ( TAG , " ) ;
<unk> ( context ) ;
if ( ! <unk> ) {
<unk> = true ;
<unk> ( context ) ;
}
}
@Override
public void onDeleted ( Context context , int [ ] appWidgetIds ) {
Log . d ( TAG , " ) ;
super . onDeleted ( context , appWidgetIds ) ;
}
@Override
public void onReceive ( Context context , Intent intent ) {
Log . d ( TAG , " ) ;
super . onReceive ( context , intent ) ;
}
private void <unk> ( Context context ) {
locationManager = ( LocationManager ) context . getSystemService ( Context . LOCATION_SERVICE ) ;
Criteria criteria = new Criteria ( ) ;
criteria . setAccuracy ( Criteria . ACCURACY_COARSE ) ;
criteria . <unk> ( Criteria . <unk> ) ;
criteria . <unk> ( false ) ;
criteria . <unk> ( false ) ;
criteria . <unk> ( false ) ;
criteria . setCostAllowed ( true ) ;
String <unk> = locationManager . getBestProvider ( criteria , true ) ;
Log . i ( TAG , " + <unk> + " ) ;
ll = new <unk> ( context ) ;
locationManager . requestLocationUpdates ( <unk> , <num> , <num> , ll ) ;
}
private void <unk> ( Context context ) {
<unk> = new Intent ( context , <unk> . class ) ;
context . startService ( <unk> ) ;
RemoteViews <unk> = new RemoteViews ( context . getPackageName ( ) , R . layout . widget_layout ) ;
Calendar cal = Calendar . getInstance ( ) ;
<unk> . setTextViewText ( R . id . <unk> , new StringBuilder ( ) . append ( cal . get ( Calendar . HOUR_OF_DAY ) ) ) ;
<unk> . setTextViewText ( R . id . <unk> , new StringBuilder ( ) . append ( DateFormat . format ( " , cal ) ) ) ;
Intent intent = new Intent ( context , <unk> . class ) ;
PendingIntent pendingIntent = PendingIntent . getActivity ( context , <num> , intent , <num> ) ;
<unk> . setOnClickPendingIntent ( R . id . widget , pendingIntent ) ;
ComponentName thisWidget = new ComponentName ( context , <unk> . class ) ;
AppWidgetManager widgetManager = AppWidgetManager . getInstance ( context ) ;
widgetManager . updateAppWidget ( thisWidget , <unk> ) ;
}
public static class <unk> extends Service {
private static final String TAG = " ;
@Override
public void onStart ( Intent intent , int startId ) {
Log . i ( TAG , " ) ;
registerReceiver ( <unk> , new IntentFilter ( Intent . <unk> ) ) ;
}
private BroadcastReceiver <unk> = new BroadcastReceiver ( ) {
@Override
public void onReceive ( Context context , Intent intent ) {
Log . i ( TAG , " ) ;
if ( intent . getAction ( ) . equals ( Intent . <unk> ) ) {
RemoteViews <unk> = new RemoteViews ( context . getPackageName ( ) , R . layout . widget_layout ) ;
Calendar cal = Calendar . getInstance ( ) ;
<unk> . setTextViewText ( R . id . <unk> , new StringBuilder ( ) . append ( cal . get ( Calendar . HOUR_OF_DAY ) ) ) ;
<unk> . setTextViewText ( R . id . <unk> , new StringBuilder ( ) . append ( DateFormat . format ( " , cal ) ) ) ;
ComponentName thisWidget = new ComponentName ( <unk> . this , <unk> . class ) ;
AppWidgetManager widgetManager = AppWidgetManager . getInstance ( <unk> . this ) ;
widgetManager . updateAppWidget ( thisWidget , <unk> ) ;
}
}
} ;
@Override
public IBinder onBind ( Intent arg0 ) {
return null ;
}
}
private class <unk> extends AsyncTask < Context , Void , RemoteViews >
{
private Context context ;
@Override
protected RemoteViews doInBackground ( Context . . . params ) {
this . context = params [ <num> ] ;
Log . i ( TAG , " ) ;
RemoteViews views = new RemoteViews ( params [ <num> ] . getPackageName ( ) , R . layout . widget_layout ) ;
Log . i ( TAG , " ) ;
WeatherService <unk> = new <unk> ( ) ;
Log . i ( TAG , " ) ;
<unk> <unk> ;
if ( currentLocation == null ) {
Log . i ( TAG , " ) ;
try {
<unk> = ( <unk> ) <unk> . <unk> ( ) ;
} catch ( <unk> e ) {
e . printStackTrace ( ) ;
return views ;
}
} else {
Log . i ( TAG , " ) ;
try {
<unk> = ( <unk> ) <unk> . <unk> ( currentLocation . getLatitude ( ) , currentLocation . getLongitude ( ) ) ;
} catch ( <unk> e ) {
e . printStackTrace ( ) ;
return views ;
}
}
<unk> applicationContext = ( <unk> ) context . getApplicationContext ( ) ;
applicationContext . <unk> ( <unk> ) ;
double temperature = <unk> . getTemperature ( ) ;
String location = <unk> . getLocation ( ) ;
<unk> <unk> = <unk> . <unk> ( ) ;
String <unk> = <unk> . <unk> ( ) ;
if ( location . equals ( <unk> . <unk> ) ) {
location = " ;
}
<unk> <unk> = <unk> . <unk> ( ) . get ( <num> ) ;
int <unk> = ( ( Double ) <unk> . <unk> ( ) ) . intValue ( ) ;
int <unk> = ( ( Double ) <unk> . <unk> ( ) ) . intValue ( ) ;
String <unk> = <unk> + " + <unk> + " ;
views . setTextViewText ( R . id . temperature , " + Math . round ( temperature ) + " ) ;
views . setTextViewText ( R . id . location , location ) ;
views . setTextViewText ( R . id . <unk> , <unk> ) ;
views . setTextViewText ( R . id . <unk> , <unk> ) ;
String <unk> = <unk> . <unk> ( ) ;
Log . i ( TAG , " + <unk> ) ;
<unk> <unk> = new <unk> ( ) ;
try {
views . setImageViewResource ( R . id . <unk> , <unk> . <unk> ( <unk> , false ) ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return views ;
}
@Override
protected void onPostExecute ( RemoteViews result ) {
ComponentName thisWidget = new ComponentName ( context , <unk> . class ) ;
AppWidgetManager widgetManager = AppWidgetManager . getInstance ( context ) ;
widgetManager . updateAppWidget ( thisWidget , result ) ;
Log . i ( TAG , " ) ;
Log . i ( TAG , " ) ;
}
}
}
package upnp ;
import java . math . BigInteger ;
import java . util . ArrayList ;
import java . util . Collections ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
public class FSM {
static Map < String , Integer > <unk> = new HashMap < String , Integer > ( ) ;
public static void main ( String [ ] args ) throws Exception {
<unk> . put ( " , ( int ) " . getBytes ( ) [ <num> ] ) ;
<unk> . put ( " , ( int ) " . getBytes ( ) [ <num> ] ) ;
<unk> . put ( " , ( int ) " . getBytes ( ) [ <num> ] ) ;
<unk> . put ( " , ( int ) " . getBytes ( ) [ <num> ] ) ;
<unk> . put ( " , ( int ) " . getBytes ( ) [ <num> ] ) ;
<unk> . put ( new String ( " . getBytes ( " ) , " ) , <num> ) ;
<unk> . put ( new String ( " . getBytes ( " ) , " ) , <num> ) ;
<unk> . put ( new String ( " . getBytes ( " ) , " ) , <num> ) ;
<unk> . put ( new String ( " . getBytes ( " ) , " ) , <num> ) ;
<unk> . put ( new String ( " . getBytes ( " ) , " ) , <num> ) ;
<unk> . put ( new String ( " . getBytes ( " ) , " ) , <num> ) ;
<unk> . put ( new String ( " . getBytes ( " ) , " ) , <num> ) ;
<unk> . put ( new String ( " . getBytes ( " ) , " ) , <num> ) ;
<unk> . put ( new String ( " . getBytes ( " ) , " ) , <num> ) ;
<unk> . put ( new String ( " . getBytes ( " ) , " ) , <num> ) ;
String t = <unk> ( <unk> ) ;
System . out . println ( " + t + " ) ;
}
private static String <unk> ( Map < String , Integer > <unk> ) {
Tree t = new Tree ( " ) ;
for ( String key : <unk> . keySet ( ) ) {
Tree . Node <unk> = t . root ;
for ( char c : key . toCharArray ( ) ) {
Tree . Node next = <unk> . <unk> ( c ) ;
if ( next == null )
next = <unk> . addChild ( c ) ;
<unk> = next ;
}
<unk> . setRes ( <unk> . get ( key ) ) ;
}
StringBuilder sb = new StringBuilder ( ) ;
int c = <num> ;
for ( int i : t . fill ( ) )
switch ( c ++ % <num> ) {
case <num> :
case <num> :
case <num> :
sb . append ( " + new BigInteger ( " + i ) . toString ( <num> ) ) ;
break ;
}
return sb . toString ( ) ;
}
public static class Tree {
private Node root ;
public Tree ( String <unk> ) {
root = new Node ( <unk> , null , new ArrayList < Node > ( ) ) ;
}
public List < Integer > fill ( ) {
List < Integer > res = root . fill ( ) ;
return res . subList ( <num> , res . size ( ) ) ;
}
private static class Node implements Comparable < Node > {
private Node ( String data , Node parent , List < Node > children ) {
this . data = data ;
this . parent = parent ;
this . children = children ;
}
private String data ;
private Node parent ;
private List < Node > children ;
private Integer res ;
public String getData ( ) {
return data ;
}
public Node getParent ( ) {
return parent ;
}
public List < Node > getChildren ( ) {
return children ;
}
public Node addChild ( String data ) {
Node n = new Node ( data , this , new ArrayList < Node > ( ) ) ;
children . add ( n ) ;
Collections . sort ( children ) ;
return n ;
}
public Node addChild ( char data ) {
return addChild ( " + data ) ;
}
public Node <unk> ( String data ) {
for ( Node n : children )
if ( data . equals ( n . data ) )
return n ;
return null ;
}
public Node <unk> ( char data ) {
return <unk> ( " + data ) ;
}
public Integer getRes ( ) {
return res ;
}
public void setRes ( Integer res ) {
this . res = res ;
}
public List < Integer > fill ( ) {
List < Integer > me = new ArrayList < Integer > ( ) ;
me . add ( ( int ) data . charAt ( <num> ) ) ;
me . add ( <num> ) ;
me . add ( res == null ? <num> : res ) ;
int c = <num> ;
for ( Node n : children ) {
List < Integer > ch = n . fill ( ) ;
if ( ++ c == children . size ( ) )
ch . set ( <num> , <num> ) ;
me . addAll ( ch ) ;
}
me . set ( <num> , me . size ( ) ) ;
return me ;
}
@Override
public int compareTo ( Node o ) {
return data . compareTo ( o . data ) ;
}
}
}
}
package production . <unk> . <unk> ;
import java . util . ArrayList ;
import org . eclipse . swt . widgets . Composite ;
import org . eclipse . swt . widgets . Group ;
import org . eclipse . swt . SWT ;
import org . eclipse . swt . layout . FillLayout ;
import <unk> . production . backend . models . <unk> ;
import <unk> . production . backend . services . <unk> ;
import production . <unk> . <unk> ;
import org . eclipse . swt . widgets . List ;
import org . eclipse . swt . widgets . Button ;
import org . eclipse . swt . layout . GridLayout ;
import org . eclipse . swt . layout . GridData ;
import org . eclipse . swt . events . SelectionAdapter ;
import org . eclipse . swt . events . SelectionEvent ;
public class <unk> extends Composite {
private <unk> <unk> = <unk> . <unk> . getBean ( <unk> . class ) ;
private List <unk> ;
private List <unk> ;
public <unk> ( Composite parent , int style ) {
super ( parent , style ) ;
GridLayout <unk> = new GridLayout ( <num> , true ) ;
setLayout ( <unk> ) ;
Group <unk> = new Group ( this , SWT . NONE ) ;
<unk> . setLayout ( new FillLayout ( SWT . HORIZONTAL ) ) ;
GridData <unk> = new GridData ( SWT . FILL , SWT . FILL , true , true , <num> , <num> ) ;
<unk> . widthHint = <num> ;
<unk> . heightHint = <num> ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> = new List ( <unk> , SWT . BORDER | SWT . V_SCROLL ) ;
Group <unk> = new Group ( this , SWT . NONE ) ;
GridData <unk> = new GridData ( SWT . FILL , SWT . FILL , true , true , <num> , <num> ) ;
<unk> . widthHint = <num> ;
<unk> . heightHint = <num> ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> . setLayout ( new FillLayout ( SWT . HORIZONTAL ) ) ;
<unk> = new List ( <unk> , SWT . BORDER | SWT . V_SCROLL ) ;
Composite composite = new Composite ( this , SWT . NONE ) ;
composite . setLayout ( new FillLayout ( SWT . HORIZONTAL ) ) ;
GridData <unk> = new GridData ( SWT . CENTER , SWT . CENTER , true , false , <num> , <num> ) ;
<unk> . heightHint = <num> ;
composite . setLayoutData ( <unk> ) ;
Button refresh = new Button ( composite , SWT . NONE ) ;
refresh . addSelectionListener ( new SelectionAdapter ( ) {
@Override
public void widgetSelected ( SelectionEvent arg0 ) {
<unk> . removeAll ( ) ;
<unk> . removeAll ( ) ;
<unk> ( ) ;
}
} ) ;
refresh . setText ( " ) ;
<unk> ( ) ;
}
@Override
public boolean <unk> ( ) {
<unk> ( ) ;
<unk> . <unk> . layout ( ) ;
return super . <unk> ( ) ;
}
private void <unk> ( )
{
getDisplay ( ) . asyncExec ( new Runnable ( ) {
public void run ( ) {
ArrayList < <unk> > jobs = new ArrayList < <unk> > ( ) ;
jobs . addAll ( <unk> . <unk> ( ) ) ;
for ( <unk> j : jobs )
{
<unk> . add ( j . getName ( ) + " + j . <unk> ( ) . toString ( ) ) ;
<unk> . add ( j . getName ( ) + " + j . <unk> ( ) . toString ( ) ) ;
}
}
} ) ;
}
}
package production . <unk> . <unk> ;
import java . util . ArrayList ;
import org . eclipse . swt . widgets . Composite ;
import org . eclipse . swt . layout . <unk> ;
import org . eclipse . swt . widgets . Label ;
import org . eclipse . swt . SWT ;
import org . eclipse . swt . layout . <unk> ;
import org . eclipse . swt . layout . <unk> ;
import org . eclipse . swt . widgets . Dialog ;
import org . eclipse . swt . widgets . Group ;
import org . eclipse . swt . widgets . Text ;
import org . eclipse . swt . layout . GridLayout ;
import org . eclipse . swt . layout . GridData ;
import org . eclipse . swt . widgets . Button ;
import org . eclipse . swt . widgets . List ;
import org . eclipse . swt . events . SelectionAdapter ;
import org . eclipse . swt . events . SelectionEvent ;
import org . eclipse . swt . events . SelectionListener ;
import org . eclipse . <unk> . swt . <unk> ;
import org . springframework . beans . factory . annotation . <unk> ;
import org . springframework . beans . factory . annotation . Autowired ;
import org . springframework . beans . factory . annotation . <unk> ;
import production . <unk> . <unk> ;
import <unk> . production . backend . models . <unk> ;
import <unk> . production . backend . models . <unk> ;
import <unk> . production . backend . services . <unk> ;
import org . eclipse . swt . widgets . ProgressBar ;
import org . eclipse . swt . layout . FillLayout ;
public class <unk> extends Composite {
private Text <unk> ;
private Text keyId ;
private Label <unk> ;
private List <unk> ;
private List <unk> ;
private ProgressBar progressBar ;
private <unk> <unk> = <unk> . <unk> . getBean ( <unk> . class ) ;
public <unk> ( Composite parent , int style ) {
super ( parent , style ) ;
setLayout ( new GridLayout ( <num> , false ) ) ;
Group <unk> = new Group ( this , SWT . NONE ) ;
<unk> . setLayout ( new <unk> ( ) ) ;
GridData <unk> = new GridData ( SWT . FILL , SWT . CENTER , true , false , <num> , <num> ) ;
<unk> . heightHint = <num> ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . setText ( " ) ;
Label <unk> = new Label ( <unk> , SWT . NONE ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . top = new <unk> ( <num> , <num> ) ;
<unk> . left = new <unk> ( <num> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . setText ( " ) ;
Label <unk> = new Label ( <unk> , SWT . NONE ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . top = new <unk> ( <unk> , <num> ) ;
<unk> . left = new <unk> ( <unk> , <num> , SWT . LEFT ) ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . setText ( " ) ;
<unk> = new Text ( <unk> , SWT . BORDER ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . right = new <unk> ( <unk> , <num> , SWT . RIGHT ) ;
<unk> . left = new <unk> ( <unk> , <num> ) ;
<unk> . setLayoutData ( <unk> ) ;
keyId = new Text ( <unk> , SWT . BORDER ) ;
<unk> . top = new <unk> ( keyId , <num> ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . top = new <unk> ( <unk> ,  <num> , SWT . TOP ) ;
<unk> . right = new <unk> ( <unk> , <num> , SWT . RIGHT ) ;
<unk> . left = new <unk> ( <unk> , <num> , SWT . LEFT ) ;
keyId . setLayoutData ( <unk> ) ;
progressBar = new ProgressBar ( this , SWT . NONE ) ;
progressBar . setLayoutData ( new GridData ( SWT . FILL , SWT . CENTER , false , false , <num> , <num> ) ) ;
progressBar . setVisible ( false ) ;
Button btnSubmit = new Button ( <unk> , SWT . NONE ) ;
btnSubmit . addSelectionListener ( new SelectionAdapter ( ) {
@Override
public void widgetSelected ( SelectionEvent event ) {
progressBar . setVisible ( true ) ;
getDisplay ( ) . asyncExec ( new Runnable ( ) {
public void run ( ) {
<unk> . setText ( " ) ;
if ( keyId . getText ( ) . isEmpty ( ) || <unk> . getText ( ) . isEmpty ( ) )
{
<unk> . setText ( " ) ;
}
else
{
<unk> <unk> = new <unk> ( ) ;
<unk> . <unk> ( keyId . getText ( ) ) ;
<unk> . <unk> ( <unk> . getText ( ) ) ;
if ( <unk> . <unk> ( <unk> ) )
{
<unk> . add ( keyId . getText ( ) ) ;
}
else
{
<unk> . setText ( " ) ;
}
}
}
} ) ;
progressBar . setVisible ( false ) ;
}
} ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . top = new <unk> ( <unk> , <num> ) ;
<unk> . right = new <unk> ( <num> ,  <num> ) ;
btnSubmit . setLayoutData ( <unk> ) ;
btnSubmit . setText ( " ) ;
<unk> = new Label ( <unk> , SWT . NONE ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . right = new <unk> ( btnSubmit ,  <num> ) ;
<unk> . left = new <unk> ( <unk> , <num> , SWT . LEFT ) ;
<unk> . bottom = new <unk> ( <num> ,  <num> ) ;
<unk> . width = <num> ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . setForeground ( <unk> . getColor ( SWT . <unk> ) ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . left = new <unk> ( btnSubmit ,  <num> , SWT . LEFT ) ;
<unk> . bottom = new <unk> ( <num> ,  <num> ) ;
<unk> . right = new <unk> ( btnSubmit ,  <num> ) ;
Group <unk> = new Group ( this , SWT . NONE ) ;
<unk> . setLayout ( new GridLayout ( <num> , false ) ) ;
<unk> . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , true , <num> , <num> ) ) ;
<unk> . setText ( " ) ;
Label <unk> = new Label ( <unk> , SWT . NONE ) ;
<unk> . setText ( " ) ;
Group <unk> = new Group ( <unk> , SWT . NONE ) ;
<unk> . setText ( " ) ;
<unk> . setLayout ( new FillLayout ( SWT . HORIZONTAL ) ) ;
<unk> . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , true , false , <num> , <num> ) ) ;
<unk> . setVisible ( true ) ;
Composite composite = new Composite ( <unk> , SWT . NONE ) ;
composite . setLayout ( new GridLayout ( <num> , false ) ) ;
Label <unk> = new Label ( composite , SWT . NONE ) ;
<unk> . setLayoutData ( new GridData ( SWT . CENTER , SWT . CENTER , false , false , <num> , <num> ) ) ;
<unk> . setText ( " ) ;
<unk> = new List ( composite , SWT . BORDER | SWT . V_SCROLL ) ;
GridData <unk> = new GridData ( SWT . CENTER , SWT . FILL , false , false , <num> , <num> ) ;
<unk> . heightHint = <num> ;
<unk> . widthHint = <num> ;
<unk> . setLayoutData ( <unk> ) ;
<unk> = new List ( <unk> , SWT . BORDER | SWT . V_SCROLL ) ;
GridData <unk> = new GridData ( SWT . LEFT , SWT . FILL , false , true , <num> , <num> ) ;
<unk> . widthHint = <num> ;
<unk> . setLayoutData ( <unk> ) ;
<unk> . addSelectionListener ( new SelectionListener ( ) {
public void widgetDefaultSelected ( SelectionEvent arg0 ) {
}
public void widgetSelected ( SelectionEvent event ) {
getDisplay ( ) . asyncExec ( new Runnable ( ) {
public void run ( ) {
String [ ] <unk> = <unk> . getSelection ( ) ;
ArrayList < <unk> > characters = new ArrayList < <unk> > ( ) ;
characters . addAll ( <unk> . <unk> ( <unk> [ <num> ] ) ) ;
<unk> . removeAll ( ) ;
for ( <unk> c : characters )
{
<unk> . add ( c . getName ( ) ) ;
}
}
} ) ;
}
} ) ;
Button <unk> = new Button ( <unk> , SWT . NONE ) ;
<unk> . addSelectionListener ( new SelectionAdapter ( ) {
@Override
public void widgetSelected ( SelectionEvent event ) {
String [ ] <unk> = <unk> . getSelection ( ) ;
for ( String api : <unk> )
{
<unk> . <unk> ( api ) ;
<unk> . remove ( api ) ;
}
}
} ) ;
<unk> . setLayoutData ( new GridData ( SWT . CENTER , SWT . CENTER , false , false , <num> , <num> ) ) ;
<unk> . setText ( " ) ;
ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
<unk> . addAll ( <unk> . <unk> ( ) ) ;
for ( <unk> c : <unk> )
{
<unk> . add ( c . <unk> ( ) ) ;
}
}
}
package production . <unk> ;
import org . springframework . context . ApplicationContext ;
import org . springframework . context . support . ClassPathXmlApplicationContext ;
public class <unk> {
public static <unk> <unk> ;
public static final ApplicationContext <unk> = new ClassPathXmlApplicationContext ( " ) ;
public static void <unk> ( <unk> <unk> ) {
<unk> = <unk> ;
}
}
package org . eclipse . <unk> . swt ;
import java . io . FileInputStream ;
import java . io . IOException ;
import java . io . InputStream ;
import java . util . HashMap ;
import java . util . Map ;
import org . eclipse . swt . SWT ;
import org . eclipse . swt . graphics . Color ;
import org . eclipse . swt . graphics . Cursor ;
import org . eclipse . swt . graphics . Font ;
import org . eclipse . swt . graphics . <unk> ;
import org . eclipse . swt . graphics . <unk> ;
import org . eclipse . swt . graphics . Image ;
import org . eclipse . swt . graphics . ImageData ;
import org . eclipse . swt . graphics . RGB ;
import org . eclipse . swt . graphics . Rectangle ;
import org . eclipse . swt . widgets . Display ;
public class <unk> {
private static Map < RGB , Color > <unk> = new HashMap < RGB , Color > ( ) ;
public static Color getColor ( int <unk> ) {
Display display = Display . getCurrent ( ) ;
return display . <unk> ( <unk> ) ;
}
public static Color getColor ( int r , int g , int b ) {
return getColor ( new RGB ( r , g , b ) ) ;
}
public static Color getColor ( RGB rgb ) {
Color color = <unk> . get ( rgb ) ;
if ( color == null ) {
Display display = Display . getCurrent ( ) ;
color = new Color ( display , rgb ) ;
<unk> . put ( rgb , color ) ;
}
return color ;
}
public static void <unk> ( ) {
for ( Color color : <unk> . values ( ) ) {
color . dispose ( ) ;
}
<unk> . clear ( ) ;
}
private static Map < String , Image > <unk> = new HashMap < String , Image > ( ) ;
protected static Image getImage ( InputStream stream ) throws IOException {
try {
Display display = Display . getCurrent ( ) ;
ImageData data = new ImageData ( stream ) ;
if ( data . <unk> > <num> ) {
return new Image ( display , data , data . <unk> ( ) ) ;
}
return new Image ( display , data ) ;
} finally {
stream . close ( ) ;
}
}
public static Image getImage ( String path ) {
Image image = <unk> . get ( path ) ;
if ( image == null ) {
try {
image = getImage ( new FileInputStream ( path ) ) ;
<unk> . put ( path , image ) ;
} catch ( Exception e ) {
image = <unk> ( ) ;
<unk> . put ( path , image ) ;
}
}
return image ;
}
public static Image getImage ( Class < ? > clazz , String path ) {
String key = clazz . getName ( ) + |' + path ;
Image image = <unk> . get ( key ) ;
if ( image == null ) {
try {
image = getImage ( clazz . getResourceAsStream ( path ) ) ;
<unk> . put ( key , image ) ;
} catch ( Exception e ) {
image = <unk> ( ) ;
<unk> . put ( key , image ) ;
}
}
return image ;
}
private static final int <unk> = <num> ;
private static Image <unk> ( ) {
Image image = new Image ( Display . getCurrent ( ) , <unk> , <unk> ) ;
<unk> gc = new <unk> ( image ) ;
gc . setBackground ( getColor ( SWT . <unk> ) ) ;
gc . <unk> ( <num> , <num> , <unk> , <unk> ) ;
gc . dispose ( ) ;
return image ;
}
public static final int <unk> = <num> ;
public static final int TOP_RIGHT = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
protected static final int <unk> = <num> ;
@SuppressWarnings("unchecked")
private static Map < Image , Map < Image , Image >> [ ] <unk> = new Map [ <unk> ] ;
public static Image <unk> ( Image <unk> , Image <unk> ) {
return <unk> ( <unk> , <unk> , <unk> ) ;
}
public static Image <unk> ( final Image <unk> , final Image <unk> , final int corner ) {
if ( corner <= <num> || corner >= <unk> ) {
throw new IllegalArgumentException ( " ) ;
}
Map < Image , Map < Image , Image >> <unk> = <unk> [ corner ] ;
if ( <unk> == null ) {
<unk> = new HashMap < Image , Map < Image , Image >> ( ) ;
<unk> [ corner ] = <unk> ;
}
Map < Image , Image > <unk> = <unk> . get ( <unk> ) ;
if ( <unk> == null ) {
<unk> = new HashMap < Image , Image > ( ) ;
<unk> . put ( <unk> , <unk> ) ;
}
Image result = <unk> . get ( <unk> ) ;
if ( result == null ) {
Rectangle <unk> = <unk> . getBounds ( ) ;
Rectangle <unk> = <unk> . getBounds ( ) ;
result = new Image ( Display . getCurrent ( ) , <unk> . width , <unk> . height ) ;
<unk> gc = new <unk> ( result ) ;
gc . drawImage ( <unk> , <num> , <num> ) ;
if ( corner == <unk> ) {
gc . drawImage ( <unk> , <num> , <num> ) ;
} else if ( corner == TOP_RIGHT ) {
gc . drawImage ( <unk> , <unk> . width  <unk> . width , <num> ) ;
} else if ( corner == <unk> ) {
gc . drawImage ( <unk> , <num> , <unk> . height  <unk> . height ) ;
} else if ( corner == <unk> ) {
gc . drawImage ( <unk> , <unk> . width  <unk> . width , <unk> . height  <unk> . height ) ;
}
gc . dispose ( ) ;
<unk> . put ( <unk> , result ) ;
}
return result ;
}
public static void <unk> ( ) {
{
for ( Image image : <unk> . values ( ) ) {
image . dispose ( ) ;
}
<unk> . clear ( ) ;
}
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
Map < Image , Map < Image , Image >> <unk> = <unk> [ i ] ;
if ( <unk> != null ) {
for ( Map < Image , Image > <unk> : <unk> . values ( ) ) {
for ( Image image : <unk> . values ( ) ) {
image . dispose ( ) ;
}
<unk> . clear ( ) ;
}
<unk> . clear ( ) ;
}
}
}
private static Map < String , Font > <unk> = new HashMap < String , Font > ( ) ;
private static Map < Font , Font > <unk> = new HashMap < Font , Font > ( ) ;
public static Font getFont ( String name , int height , int style ) {
return getFont ( name , height , style , false , false ) ;
}
public static Font getFont ( String name , int size , int style , boolean <unk> , boolean underline ) {
String fontName = name + |' + size + |' + style + |' + <unk> + |' + underline ;
Font font = <unk> . get ( fontName ) ;
if ( font == null ) {
<unk> <unk> = new <unk> ( name , size , style ) ;
if ( <unk> || underline ) {
try {
Class < ? > <unk> = Class . forName ( " ) ;
Object <unk> = <unk> . class . getField ( " ) . get ( <unk> ) ;
if ( <unk> != null && <unk> != null ) {
if ( <unk> ) {
<unk> . getField ( " ) . set ( <unk> , Byte . valueOf ( ( byte ) <num> ) ) ;
}
if ( underline ) {
<unk> . getField ( " ) . set ( <unk> , Byte . valueOf ( ( byte ) <num> ) ) ;
}
}
} catch ( Throwable e ) {
System . err . println ( " + " + e ) ;
}
}
font = new Font ( Display . getCurrent ( ) , <unk> ) ;
<unk> . put ( fontName , font ) ;
}
return font ;
}
public static Font <unk> ( Font <unk> ) {
Font font = <unk> . get ( <unk> ) ;
if ( font == null ) {
<unk> <unk> [ ] = <unk> . <unk> ( ) ;
<unk> data = <unk> [ <num> ] ;
font = new Font ( Display . getCurrent ( ) , data . getName ( ) , data . getHeight ( ) , SWT . BOLD ) ;
<unk> . put ( <unk> , font ) ;
}
return font ;
}
public static void <unk> ( ) {
for ( Font font : <unk> . values ( ) ) {
font . dispose ( ) ;
}
<unk> . clear ( ) ;
for ( Font font : <unk> . values ( ) ) {
font . dispose ( ) ;
}
<unk> . clear ( ) ;
}
private static Map < Integer , Cursor > <unk> = new HashMap < Integer , Cursor > ( ) ;
public static Cursor getCursor ( int id ) {
Integer key = Integer . valueOf ( id ) ;
Cursor cursor = <unk> . get ( key ) ;
if ( cursor == null ) {
cursor = new Cursor ( Display . getDefault ( ) , id ) ;
<unk> . put ( key , cursor ) ;
}
return cursor ;
}
public static void <unk> ( ) {
for ( Cursor cursor : <unk> . values ( ) ) {
cursor . dispose ( ) ;
}
<unk> . clear ( ) ;
}
public static void dispose ( ) {
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
}
package production . <unk> ;
import static org . junit . Assert . * ;
import org . junit . Test ;
import org . junit . runner . RunWith ;
import org . springframework . beans . factory . annotation . Autowired ;
import org . springframework . test . context . ContextConfiguration ;
import org . springframework . test . context . junit4 . SpringJUnit4ClassRunner ;
import <unk> . production . backend . services . <unk> ;
<unk>
@RunWith(SpringJUnit4ClassRunner.class)
public class <unk> {
@Autowired
private <unk> <unk> ;
@Test
public void <unk> ( )
{
assertNotNull ( <unk> ) ;
}
}
package production . <unk> . enums ;
public enum <unk> {
MAIN , <unk> , <unk>
}
package production . <unk> ;
import org . eclipse . swt . widgets . Composite ;
import org . eclipse . swt . widgets . Display ;
import org . eclipse . swt . widgets . Shell ;
import org . eclipse . swt . layout . FillLayout ;
import org . eclipse . swt . SWT ;
import org . springframework . beans . factory . annotation . Autowired ;
import org . springframework . stereotype . Component ;
import production . <unk> . <unk> . <unk> ;
import production . <unk> . <unk> . <unk> ;
import production . <unk> . enums . <unk> ;
public class <unk> extends Shell {
private <unk> <unk> = new <unk> ( this , SWT . None ) ;
public <unk> ( Display display )
{
super ( display ) ;
setText ( " ) ;
setLayout ( new FillLayout ( SWT . HORIZONTAL ) ) ;
}
@Override
protected void <unk> ( ) {
}
}
package production . <unk> . <unk> ;
import org . eclipse . swt . widgets . Composite ;
import org . eclipse . swt . widgets . Event ;
import org . eclipse . swt . widgets . Listener ;
import org . eclipse . swt . SWT ;
import org . eclipse . swt . layout . <unk> ;
import org . eclipse . swt . widgets . Label ;
import org . eclipse . swt . layout . <unk> ;
import org . eclipse . swt . layout . <unk> ;
import org . eclipse . swt . widgets . Button ;
import org . eclipse . swt . events . SelectionAdapter ;
import org . eclipse . swt . events . SelectionEvent ;
import production . <unk> . <unk> ;
import production . <unk> . enums . <unk> ;
import org . eclipse . swt . layout . FillLayout ;
import org . eclipse . swt . widgets . <unk> ;
import org . eclipse . swt . widgets . <unk> ;
import org . springframework . beans . factory . annotation . Autowired ;
import org . springframework . beans . factory . annotation . <unk> ;
import org . springframework . stereotype . Component ;
public class <unk> extends Composite {
private <unk> <unk> ;
private <unk> <unk> ;
public <unk> ( <unk> parent , int style ) {
super ( parent , SWT . NONE ) ;
setLayout ( new FillLayout ( SWT . HORIZONTAL ) ) ;
<unk> <unk> = new <unk> ( this , SWT . NONE ) ;
<unk> = new <unk> ( <unk> , SWT . None ) ;
<unk> = new <unk> ( <unk> , SWT . None ) ;
<unk> <unk> = new <unk> ( <unk> , SWT . NONE ) ;
<unk> . setText ( " ) ;
<unk> . setControl ( <unk> ) ;
<unk> <unk> = new <unk> ( <unk> , SWT . NONE ) ;
<unk> . setControl ( <unk> ) ;
<unk> . setText ( " ) ;
}
}
package production . <unk> ;
import org . eclipse . swt . widgets . Display ;
import org . springframework . beans . factory . BeanFactory ;
import org . springframework . context . support . ClassPathXmlApplicationContext ;
public class Entry {
public static void main ( String [ ] args ) {
BeanFactory bf = new ClassPathXmlApplicationContext ( " ) ;
Display display = new Display ( ) ;
<unk> <unk> = new <unk> ( display ) ;
<unk> . <unk> ( <unk> ) ;
<unk> . open ( ) ;
while ( ! <unk> . isDisposed ( ) ) {
if ( ! <unk> . getDisplay ( ) . readAndDispatch ( ) ) {
<unk> . getDisplay ( ) . sleep ( ) ;
}
}
}
}
package org . <unk> . <unk> ;
class <unk> implements <unk> {
private State [ ] array ;
public <unk> ( ) {
this . array = new State [ <num> ] ;
for ( int i = <num> ; i < array . length ; i ++ )
this . array [ i ] = null ;
}
public static <unk> <unk> ( <unk> list ) {
byte [ ] keys = list . keys ( ) ;
<unk> newInstance = new <unk> ( ) ;
for ( int i = <num> ; i < keys . length ; i ++ ) {
newInstance . put ( keys [ i ] , list . get ( keys [ i ] ) ) ;
}
return newInstance ;
}
public State get ( byte b ) {
return this . array [ ( int ) b & <num> ] ;
}
public void put ( byte b , State s ) {
this . array [ ( int ) b & <num> ] = s ;
}
public byte [ ] keys ( ) {
int length = <num> ;
for ( int i = <num> ; i < array . length ; i ++ ) {
if ( array [ i ] != null )
length ++ ;
}
byte [ ] result = new byte [ length ] ;
int j = <num> ;
for ( int i = <num> ; i < array . length ; i ++ ) {
if ( array [ i ] != null ) {
result [ j ] = ( byte ) i ;
j ++ ;
}
}
return result ;
}
}
package org . <unk> . <unk> ;
import junit . framework . * ;
public class TestAll extends TestCase {
public static Test suite ( ) {
TestSuite suite = new TestSuite ( ) ;
suite . <unk> ( <unk> . class ) ;
suite . <unk> ( <unk> . class ) ;
suite . <unk> ( <unk> . class ) ;
return suite ;
}
}
package org . <unk> . <unk> ;
import junit . framework . TestCase ;
public class <unk> extends TestCase {
public void testSimple ( ) {
Queue q = new Queue ( ) ;
State s1 = new State ( <num> ) ;
State s2 = new State ( <num> ) ;
State s3 = new State ( <num> ) ;
State s4 = new State ( <num> ) ;
State <unk> = new State ( <num> ) ;
assertTrue ( q . isEmpty ( ) ) ;
q . add ( s1 ) ;
assertFalse ( q . isEmpty ( ) ) ;
assertEquals ( s1 , q . pop ( ) ) ;
q . add ( s2 ) ;
q . add ( s3 ) ;
assertEquals ( s2 , q . pop ( ) ) ;
q . add ( s4 ) ;
q . add ( <unk> ) ;
assertEquals ( s3 , q . pop ( ) ) ;
assertEquals ( s4 , q . pop ( ) ) ;
assertEquals ( <unk> , q . pop ( ) ) ;
assertTrue ( q . isEmpty ( ) ) ;
}
}
package org . <unk> . <unk> ;
import java . util . HashSet ;
import java . util . Set ;
class State {
private static final int <unk> = <num> ;
private int depth ;
private <unk> <unk> ;
private State fail ;
private Set outputs ;
public State ( int depth ) {
this . depth = depth ;
if ( depth > <unk> )
this . <unk> = new <unk> ( ) ;
else
this . <unk> = new <unk> ( ) ;
this . fail = null ;
this . outputs = new HashSet < State > ( ) ;
}
public State extend ( byte b ) {
if ( this . <unk> . get ( b ) != null )
return this . <unk> . get ( b ) ;
State nextState = new State ( this . depth + <num> ) ;
this . <unk> . put ( b , nextState ) ;
return nextState ;
}
public State <unk> ( byte [ ] bytes ) {
State state = this ;
for ( int i = <num> ; i < bytes . length ; i ++ ) {
if ( state . <unk> . get ( bytes [ i ] ) != null )
state = state . <unk> . get ( bytes [ i ] ) ;
else
state = state . extend ( bytes [ i ] ) ;
}
return state ;
}
public int size ( ) {
byte [ ] keys = <unk> . keys ( ) ;
int result = <num> ;
for ( int i = <num> ; i < keys . length ; i ++ )
result += <unk> . get ( keys [ i ] ) . size ( ) ;
return result ;
}
public State get ( byte b ) {
return this . <unk> . get ( b ) ;
}
public void put ( byte b , State s ) {
this . <unk> . put ( b , s ) ;
}
public byte [ ] keys ( ) {
return this . <unk> . keys ( ) ;
}
public State <unk> ( ) {
return this . fail ;
}
public void <unk> ( State f ) {
this . fail = f ;
}
public void addOutput ( Object o ) {
this . outputs . add ( o ) ;
}
public Set <unk> ( ) {
return this . outputs ;
}
}
package org . <unk> . <unk> ;
import junit . framework . TestCase ;
import java . util . Iterator ;
import java . util . Arrays ;
import java . util . NoSuchElementException ;
import java . util . Set ;
import java . util . HashSet ;
import java . util . Iterator ;
public class <unk> extends TestCase {
private <unk> tree ;
public void setUp ( ) {
this . tree = new <unk> ( ) ;
}
public void <unk> ( ) {
tree . add ( " . getBytes ( ) , " . getBytes ( ) ) ;
tree . add ( " . getBytes ( ) , " . getBytes ( ) ) ;
tree . prepare ( ) ;
State s0 = tree . getRoot ( ) ;
State s1 = s0 . get ( ( byte ) h' ) ;
State s2 = s1 . get ( ( byte ) e' ) ;
State s3 = s2 . get ( ( byte ) l' ) ;
State s4 = s3 . get ( ( byte ) l' ) ;
State <unk> = s4 . get ( ( byte ) o' ) ;
State <unk> = s1 . get ( ( byte ) i' ) ;
assertEquals ( s0 , s1 . <unk> ( ) ) ;
assertEquals ( s0 , s2 . <unk> ( ) ) ;
assertEquals ( s0 , s3 . <unk> ( ) ) ;
assertEquals ( s0 , s4 . <unk> ( ) ) ;
assertEquals ( s0 , <unk> . <unk> ( ) ) ;
assertEquals ( s0 , <unk> . <unk> ( ) ) ;
assertEquals ( <num> , s0 . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , s1 . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , s2 . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , s3 . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , s4 . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , <unk> . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , <unk> . <unk> ( ) . size ( ) ) ;
assertTrue ( <unk> != null ) ;
}
public void <unk> ( ) {
tree . add ( " . getBytes ( ) , " . getBytes ( ) ) ;
tree . add ( " . getBytes ( ) , " . getBytes ( ) ) ;
tree . add ( " . getBytes ( ) , " . getBytes ( ) ) ;
tree . add ( " . getBytes ( ) , " . getBytes ( ) ) ;
assertEquals ( <num> , tree . getRoot ( ) . size ( ) ) ;
tree . prepare ( ) ;
State s0 = tree . getRoot ( ) ;
State s1 = s0 . get ( ( byte ) h' ) ;
State s2 = s1 . get ( ( byte ) e' ) ;
State s3 = s0 . get ( ( byte ) s' ) ;
State s4 = s3 . get ( ( byte ) h' ) ;
State <unk> = s4 . get ( ( byte ) e' ) ;
State <unk> = s1 . get ( ( byte ) i' ) ;
State <unk> = <unk> . get ( ( byte ) s' ) ;
State <unk> = s2 . get ( ( byte ) r' ) ;
State <unk> = <unk> . get ( ( byte ) s' ) ;
assertEquals ( s0 , s1 . <unk> ( ) ) ;
assertEquals ( s0 , s2 . <unk> ( ) ) ;
assertEquals ( s0 , s3 . <unk> ( ) ) ;
assertEquals ( s0 , <unk> . <unk> ( ) ) ;
assertEquals ( s0 , <unk> . <unk> ( ) ) ;
assertEquals ( s1 , s4 . <unk> ( ) ) ;
assertEquals ( s2 , <unk> . <unk> ( ) ) ;
assertEquals ( s3 , <unk> . <unk> ( ) ) ;
assertEquals ( s3 , <unk> . <unk> ( ) ) ;
assertEquals ( <num> , s1 . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , s3 . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , s4 . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , <unk> . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , <unk> . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , s2 . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , <unk> . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , <unk> . <unk> ( ) . size ( ) ) ;
assertEquals ( <num> , <unk> . <unk> ( ) . size ( ) ) ;
}
public void <unk> ( ) {
tree . add ( " . getBytes ( ) , " . getBytes ( ) ) ;
tree . prepare ( ) ;
SearchResult result =
tree . startSearch ( " . getBytes ( ) ) ;
assertEquals ( <num> , result . <unk> ( ) . size ( ) ) ;
assertEquals ( " ,
new String ( ( byte [ ] )
result . <unk> ( ) . iterator ( ) . next ( ) ) ) ;
assertEquals ( <num> , result . <unk> ( ) ) ;
assertEquals ( null , tree . <unk> ( result ) ) ;
}
public void <unk> ( ) {
tree . add ( " . getBytes ( ) , " . getBytes ( ) ) ;
tree . add ( " . getBytes ( ) , " . getBytes ( ) ) ;
tree . prepare ( ) ;
SearchResult <unk> =
tree . startSearch ( " . getBytes ( ) ) ;
SearchResult <unk> =
tree . <unk> ( <unk> ) ;
assertEquals ( null , tree . <unk> ( <unk> ) ) ;
}
public void <unk> ( ) {
tree . add ( " . getBytes ( ) , new Integer ( <num> ) ) ;
tree . add ( " . getBytes ( ) , new Integer ( <num> ) ) ;
tree . add ( " . getBytes ( ) , new Integer ( <num> ) ) ;
tree . prepare ( ) ;
SearchResult result = tree . startSearch ( " . getBytes ( ) ) ;
assertEquals ( null , result ) ;
}
public void <unk> ( ) {
tree . add ( " . getBytes ( ) , " ) ;
tree . add ( " . getBytes ( ) , " ) ;
tree . add ( " . getBytes ( ) , " ) ;
tree . prepare ( ) ;
SearchResult result = tree . startSearch ( " . getBytes ( ) ) ;
assertEquals ( <num> , result . <unk> ( ) ) ;
assertEquals ( new HashSet ( Arrays . asList ( new String [ ] { " } ) ) ,
result . <unk> ( ) ) ;
result = tree . <unk> ( result ) ;
assertEquals ( <num> , result . <unk> ( ) ) ;
assertEquals ( new HashSet ( Arrays . asList ( new String [ ] { " , " } ) ) ,
result . <unk> ( ) ) ;
result = tree . <unk> ( result ) ;
assertEquals ( <num> , result . <unk> ( ) ) ;
assertEquals ( new HashSet ( Arrays . asList ( new String [ ] { " , " , " } ) ) ,
result . <unk> ( ) ) ;
assertEquals ( null , tree . <unk> ( result ) ) ;
}
public void <unk> ( ) {
tree . add ( " . getBytes ( ) , " ) ;
tree . add ( " . getBytes ( ) , " ) ;
tree . add ( " . getBytes ( ) , " ) ;
tree . add ( " . getBytes ( ) , " ) ;
tree . prepare ( ) ;
Iterator iter = tree . search ( " . getBytes ( ) ) ;
assertTrue ( iter . hasNext ( ) ) ;
SearchResult r = ( SearchResult ) iter . next ( ) ;
assertEquals ( new HashSet ( Arrays . asList ( new String [ ] { " } ) ) ,
r . <unk> ( ) ) ;
assertEquals ( <num> , r . <unk> ( ) ) ;
assertTrue ( iter . hasNext ( ) ) ;
r = ( SearchResult ) iter . next ( ) ;
assertEquals ( new HashSet ( Arrays . asList ( new String [ ] { " , " } ) ) ,
r . <unk> ( ) ) ;
assertEquals ( <num> , r . <unk> ( ) ) ;
assertTrue ( iter . hasNext ( ) ) ;
r = ( SearchResult ) iter . next ( ) ;
assertEquals ( new HashSet ( Arrays . asList ( new String [ ] { " } ) ) ,
r . <unk> ( ) ) ;
assertEquals ( <num> , r . <unk> ( ) ) ;
assertTrue ( iter . hasNext ( ) ) ;
r = ( SearchResult ) iter . next ( ) ;
assertEquals ( new HashSet ( Arrays . asList ( new String [ ] { " } ) ) ,
r . <unk> ( ) ) ;
assertEquals ( <num> , r . <unk> ( ) ) ;
assertFalse ( iter . hasNext ( ) ) ;
try {
iter . next ( ) ;
fail ( ) ;
} catch ( NoSuchElementException e ) {
}
}
public void <unk> ( ) {
String text = " ;
String [ ] <unk> = {
" ,
" ,
" ,
" ,
" ,
" ,
" ,
" ,
" ,
" ,
" ,
" ,
" ,
" ,
" ,
} ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
tree . add ( <unk> [ i ] . getBytes ( ) , <unk> [ i ] ) ;
}
tree . prepare ( ) ;
Set <unk> = new HashSet ( ) ;
for ( Iterator iter = tree . search ( text . getBytes ( ) ) ; iter . hasNext ( ) ; ) {
SearchResult result = ( SearchResult ) iter . next ( ) ;
<unk> . addAll ( result . <unk> ( ) ) ;
}
assertEquals
( new HashSet ( Arrays . asList ( new String [ ] {
" ,
" ,
" ,
" ,
" ,
" ,
" ,
" ,
" ,
" ,
} ) ) , <unk> ) ;
}
}
package org . <unk> . <unk> ;
import java . util . ArrayList ;
class Queue {
ArrayList < State > l1 ;
ArrayList < State > l2 ;
public Queue ( ) {
l1 = new ArrayList < State > ( ) ;
l2 = new ArrayList < State > ( ) ;
}
public void add ( State s ) {
l2 . add ( s ) ;
}
public boolean isEmpty ( ) {
return l1 . isEmpty ( ) && l2 . isEmpty ( ) ;
}
public State pop ( ) {
if ( isEmpty ( ) )
throw new IllegalStateException ( ) ;
if ( l1 . isEmpty ( ) ) {
for ( int i = l2 . size ( )  <num> ; i >= <num> ; i  )
l1 . add ( l2 . remove ( i ) ) ;
assert l2 . isEmpty ( ) ;
assert ! l1 . isEmpty ( ) ;
}
return ( State ) l1 . remove ( l1 . size ( )  <num> ) ;
}
}
package org . <unk> . <unk> ;
import java . util . Iterator ;
public class <unk> {
private State root ;
private boolean prepared ;
public <unk> ( ) {
this . root = new State ( <num> ) ;
this . prepared = false ;
}
public void add ( byte [ ] keyword , Object output ) {
if ( this . prepared )
throw new IllegalStateException (
" ) ;
State lastState = this . root . <unk> ( keyword ) ;
lastState . addOutput ( output ) ;
}
public void prepare ( ) {
this . <unk> ( ) ;
this . prepared = true ;
}
public Iterator < SearchResult > search ( byte [ ] bytes ) {
return new Searcher ( this , this . startSearch ( bytes ) ) ;
}
private void <unk> ( ) {
Queue q = new Queue ( ) ;
for ( int i = <num> ; i < <num> ; i ++ )
if ( this . root . get ( ( byte ) i ) != null ) {
this . root . get ( ( byte ) i ) . <unk> ( this . root ) ;
q . add ( this . root . get ( ( byte ) i ) ) ;
}
this . <unk> ( ) ;
while ( ! q . isEmpty ( ) ) {
State state = q . pop ( ) ;
byte [ ] keys = state . keys ( ) ;
for ( int i = <num> ; i < keys . length ; i ++ ) {
State r = state ;
byte a = keys [ i ] ;
State s = r . get ( a ) ;
q . add ( s ) ;
r = r . <unk> ( ) ;
while ( r . get ( a ) == null )
r = r . <unk> ( ) ;
s . <unk> ( r . get ( a ) ) ;
s . <unk> ( ) . addAll ( r . get ( a ) . <unk> ( ) ) ;
}
}
}
private void <unk> ( ) {
for ( int i = <num> ; i < <num> ; i ++ )
if ( this . root . get ( ( byte ) i ) == null )
this . root . put ( ( byte ) i , this . root ) ;
}
State getRoot ( ) {
return this . root ;
}
SearchResult startSearch ( byte [ ] bytes ) {
if ( ! this . prepared )
throw new IllegalStateException (
" ) ;
return <unk> ( new SearchResult ( this . root , bytes , <num> ) ) ;
}
SearchResult <unk> ( SearchResult lastResult ) {
byte [ ] bytes = lastResult . bytes ;
State state = lastResult . <unk> ;
for ( int i = lastResult . lastIndex ; i < bytes . length ; i ++ ) {
byte b = bytes [ i ] ;
while ( state . get ( b ) == null )
state = state . <unk> ( ) ;
state = state . get ( b ) ;
if ( state . <unk> ( ) . size ( ) > <num> )
return new SearchResult ( state , bytes , i + <num> ) ;
}
return null ;
}
}
package org . <unk> . <unk> ;
import java . util . Iterator ;
import java . util . NoSuchElementException ;
class Searcher implements Iterator < SearchResult > {
private SearchResult <unk> ;
private <unk> tree ;
Searcher ( <unk> tree , SearchResult result ) {
this . tree = tree ;
this . <unk> = result ;
}
public boolean hasNext ( ) {
return ( this . <unk> != null ) ;
}
public SearchResult next ( ) {
if ( ! hasNext ( ) )
throw new NoSuchElementException ( ) ;
SearchResult result = <unk> ;
<unk> = tree . <unk> ( <unk> ) ;
return result ;
}
public void remove ( ) {
throw new UnsupportedOperationException ( ) ;
}
}
package org . <unk> . <unk> ;
interface <unk> {
State get ( byte ch ) ;
void put ( byte ch , State state ) ;
byte [ ] keys ( ) ;
}
package org . <unk> . <unk> ;
class <unk> implements <unk> {
private Cons head ;
public <unk> ( ) {
head = null ;
}
public State get ( byte b ) {
Cons c = head ;
while ( c != null ) {
if ( c . b == b )
return c . s ;
c = c . next ;
}
return null ;
}
public void put ( byte b , State s ) {
this . head = new Cons ( b , s , head ) ;
}
public byte [ ] keys ( ) {
int length = <num> ;
Cons c = head ;
while ( c != null ) {
length ++ ;
c = c . next ;
}
byte [ ] result = new byte [ length ] ;
c = head ;
int j = <num> ;
while ( c != null ) {
result [ j ] = c . b ;
j ++ ;
c = c . next ;
}
return result ;
}
static private class Cons {
byte b ;
State s ;
Cons next ;
public Cons ( byte b , State s , Cons next ) {
this . b = b ;
this . s = s ;
this . next = next ;
}
}
}
package org . <unk> . <unk> ;
import junit . framework . TestCase ;
public class <unk> extends TestCase {
public void <unk> ( ) {
State s = new State ( <num> ) ;
State s2 = s . extend ( " . getBytes ( ) [ <num> ] ) ;
assertTrue ( s2 != s && s2 != null ) ;
assertEquals ( <num> , s . size ( ) ) ;
}
public void <unk> ( ) {
State s = new State ( <num> ) ;
State s2 = s . extend ( ( byte ) <num> ) ;
assertTrue ( s2 != s && s2 != null ) ;
assertEquals ( <num> , s . size ( ) ) ;
}
public void <unk> ( ) {
State s = new State ( <num> ) ;
assertEquals ( <num> , s . size ( ) ) ;
}
public void <unk> ( ) {
State s = new State ( <num> ) ;
assertEquals ( <num> , s . size ( ) ) ;
}
public void <unk> ( ) {
State s = new State ( <num> ) ;
State s2 = s . <unk> ( " . getBytes ( ) ) ;
assertEquals ( <num> , s . size ( ) ) ;
}
public void <unk> ( ) {
State s = new State ( <num> ) ;
State s2 = s . <unk> ( " . getBytes ( ) ) ;
State s3 = s . <unk> ( " . getBytes ( ) ) ;
assertEquals ( <num> , s . size ( ) ) ;
assertTrue ( s2 == s3 ) ;
}
public void <unk> ( ) {
State s = new State ( <num> ) ;
State s2 = s . <unk> ( " . getBytes ( ) ) ;
State s3 = s . <unk> ( " . getBytes ( ) ) ;
assertEquals ( <num> , s . size ( ) ) ;
assertTrue ( s2 == s3 ) ;
}
public void <unk> ( ) {
State s = new State ( <num> ) ;
for ( int i = <num> ; i < <num> ; i ++ )
s . extend ( ( byte ) i ) ;
assertEquals ( <num> , s . size ( ) ) ;
}
public void <unk> ( ) {
State s = new State ( <num> ) ;
for ( int i = <num> ; i < <num> ; i ++ )
s . extend ( ( byte ) i ) ;
assertEquals ( <num> , s . size ( ) ) ;
}
}
package org . <unk> . <unk> ;
import java . util . Set ;
public class SearchResult {
State <unk> ;
byte [ ] bytes ;
int lastIndex ;
SearchResult ( State s , byte [ ] bs , int i ) {
this . <unk> = s ;
this . bytes = bs ;
this . lastIndex = i ;
}
public Set <unk> ( ) {
return <unk> . <unk> ( ) ;
}
public int <unk> ( ) {
return lastIndex ;
}
}
package org . <unk> . <unk> ;
import java . io . IOException ;
import java . io . FileInputStream ;
import java . io . InputStreamReader ;
import java . io . BufferedReader ;
public class <unk> {
static public void main ( String [ ] args ) throws IOException {
long startTime = System . currentTimeMillis ( ) ;
<unk> tree = new <unk> ( ) ;
BufferedReader reader = new BufferedReader
( new InputStreamReader
( new FileInputStream ( " ) ) ) ;
String line ;
while ( ( line = reader . readLine ( ) ) != null ) {
tree . add ( line . getBytes ( ) , null ) ;
}
tree . prepare ( ) ;
long endTime = System . currentTimeMillis ( ) ;
System . out . println ( " +
( endTime  startTime ) +
" ) ;
}
}
package <unk> ;
import java . io . File ;
import java . io . IOException ;
import java . util . HashSet ;
import java . util . Iterator ;
import java . util . List ;
import java . util . Set ;
import org . apache . commons . io . FileUtils ;
import org . <unk> . <unk> . <unk> ;
import org . <unk> . <unk> . SearchResult ;
import org . junit . Test ;
public class <unk> {
@Test
public void <unk> ( ) throws IOException {
String source = FileUtils . readFileToString ( new File (
" ) ) ;
List < String > keywords = FileUtils . readLines ( new File (
" ) ) ;
<unk> tree = new <unk> ( ) ;
for ( String keyword : keywords ) {
if ( ! keyword . isEmpty ( ) ) {
tree . add ( keyword . getBytes ( ) , keyword ) ;
}
}
tree . prepare ( ) ;
Set < String > <unk> = new HashSet < String > ( ) ;
Iterator < SearchResult > searcher = tree . search ( source . getBytes ( ) ) ;
while ( searcher . hasNext ( ) ) {
SearchResult result = searcher . next ( ) ;
Set < ? > r = result . <unk> ( ) ;
for ( Object o : r ) {
<unk> . add ( ( String ) o ) ;
}
System . out . println ( result . <unk> ( ) ) ;
System . out . println ( " + result . <unk> ( ) ) ;
}
for ( String <unk> : <unk> ) {
source = source . replaceAll ( <unk> , "
+ <unk> + " ) ;
}
FileUtils . <unk> ( new File (
" ) , source ) ;
}
}
package com . <unk> ;
import android . os . Bundle ;
import android . support . v4 . app . Fragment ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . LinearLayout ;
import android . widget . TextView ;
public class TestFragment extends Fragment
{
@Override
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) {
super . onCreateView ( inflater , container , savedInstanceState ) ;
LinearLayout ll = new LinearLayout ( getActivity ( ) ) ;
TextView tv = new TextView ( getActivity ( ) ) ;
tv . setText ( " ) ;
ll . addView ( tv ) ;
return ll ;
}
}
package com . <unk> ;
import java . util . ArrayList ;
import android . content . Context ;
import android . os . Bundle ;
import android . support . v4 . app . FragmentActivity ;
import android . support . v4 . app . FragmentPagerAdapter ;
import android . support . v4 . app . Fragment ;
import android . support . v4 . view . ViewPager ;
import android . util . Log ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . TabHost ;
import android . widget . TabWidget ;
public class <unk> extends FragmentActivity
{
private final String TAG = this . getClass ( ) . getName ( ) ;
TabHost <unk> ;
ViewPager mViewPager ;
TabsAdapter ta ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
Log . d ( TAG , " ) ;
setContentView ( R . layout . <unk> ) ;
<unk> = ( TabHost ) findViewById ( android . R . id . tabhost ) ;
<unk> . setup ( ) ;
mViewPager = ( ViewPager ) findViewById ( R . id . pager ) ;
ta = new TabsAdapter ( this , <unk> , mViewPager ) ;
Log . d ( TAG , " ) ;
}
protected void <unk> ( Bundle savedInstanceState )
{
if ( savedInstanceState != null )
{
<unk> . setCurrentTabByTag ( savedInstanceState . getString ( " ) ) ;
}
}
public void addTab ( String id , String label , Class < ? > c )
{
ta . addTab ( <unk> . newTabSpec ( id ) . setIndicator ( label ) , c , null ) ;
}
@Override
protected void onSaveInstanceState ( Bundle outState ) {
super . onSaveInstanceState ( outState ) ;
outState . putString ( " , <unk> . getCurrentTabTag ( ) ) ;
}
public static class TabsAdapter extends FragmentPagerAdapter
implements TabHost . OnTabChangeListener , ViewPager . OnPageChangeListener {
private final Context mContext ;
private final TabHost <unk> ;
private final ViewPager mViewPager ;
private final ArrayList < TabInfo > mTabs = new ArrayList < TabInfo > ( ) ;
static final class TabInfo {
@SuppressWarnings("unused")
private final String tag ;
private final Class < ? > clss ;
private final Bundle args ;
TabInfo ( String <unk> , Class < ? > _class , Bundle _args ) {
tag = <unk> ;
clss = _class ;
args = _args ;
}
}
static class <unk> implements TabHost . TabContentFactory {
private final Context mContext ;
public <unk> ( Context context ) {
mContext = context ;
}
@Override
public View createTabContent ( String tag ) {
View v = new View ( mContext ) ;
v . setMinimumWidth ( <num> ) ;
v . setMinimumHeight ( <num> ) ;
return v ;
}
}
public TabsAdapter ( FragmentActivity activity , TabHost tabHost , ViewPager pager ) {
super ( activity . getSupportFragmentManager ( ) ) ;
mContext = activity ;
<unk> = tabHost ;
mViewPager = pager ;
<unk> . setOnTabChangedListener ( this ) ;
mViewPager . setAdapter ( this ) ;
mViewPager . setOnPageChangeListener ( this ) ;
}
public void addTab ( TabHost . TabSpec tabSpec , Class < ? > clss , Bundle args ) {
tabSpec . setContent ( new <unk> ( mContext ) ) ;
String tag = tabSpec . getTag ( ) ;
TabInfo info = new TabInfo ( tag , clss , args ) ;
mTabs . add ( info ) ;
<unk> . addTab ( tabSpec ) ;
notifyDataSetChanged ( ) ;
}
@Override
public int getCount ( ) {
return mTabs . size ( ) ;
}
@Override
public Fragment getItem ( int position ) {
TabInfo info = mTabs . get ( position ) ;
return Fragment . instantiate ( mContext , info . clss . getName ( ) , info . args ) ;
}
@Override
public void onTabChanged ( String tabId ) {
int position = <unk> . getCurrentTab ( ) ;
mViewPager . setCurrentItem ( position ) ;
}
@Override
public void onPageSelected ( int position ) {
TabWidget widget = <unk> . getTabWidget ( ) ;
int <unk> = widget . getDescendantFocusability ( ) ;
widget . setDescendantFocusability ( ViewGroup . FOCUS_BLOCK_DESCENDANTS ) ;
<unk> . setCurrentTab ( position ) ;
widget . setDescendantFocusability ( <unk> ) ;
}
@Override
public void onPageScrollStateChanged ( int state ) {
}
@Override
public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) {
}
}
}
package com . <unk> ;
import android . os . Bundle ;
public class MainActivity extends <unk> {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
this . addTab ( " , " , TestFragment . class ) ;
this . addTab ( " , " , TestFragment . class ) ;
this . addTab ( " , " , TestFragment . class ) ;
<unk> ( savedInstanceState ) ;
}
}
package com . <unk> . <unk> ;
import static org . junit . Assert . assertTrue ;
import java . io . File ;
import java . io . FileNotFoundException ;
import org . junit . After ;
import org . junit . AfterClass ;
import org . junit . Before ;
import org . junit . BeforeClass ;
import org . junit . Ignore ;
import org . junit . Test ;
public class <unk>
{
static final File <unk> = new File ( " ) ;
private static <unk> <unk> ( long chunkSize , long chunks ) throws FileNotFoundException
{
return new <unk> ( new <unk> ( new File ( <unk> , " ) ) ,
new <unk> ( new File ( <unk> , " ) ) ,
chunkSize ,
( int ) chunks ) ;
}
@BeforeClass
public static void <unk> ( ) throws Exception
{
}
@AfterClass
public static void <unk> ( ) throws Exception
{
}
@Before
public void setUp ( ) throws Exception
{
}
@After
public void tearDown ( ) throws Exception
{
}
@Test
<unk>
public void <unk> ( ) throws Exception
{
assertTrue ( <unk> ( <num> * <num> * <num> , <num> ) . <unk> ( ) ) ;
}
@Test
<unk>
public void <unk> ( ) throws Exception
{
assertTrue ( <unk> ( <num> * <num> * <num> , <num> ) . <unk> ( ) ) ;
}
@Test
<unk>
public void <unk> ( ) throws Exception
{
assertTrue ( <unk> ( <num> * <num> * <num> , <num> ) . <unk> ( ) ) ;
}
@Test
public void <unk> ( ) throws Exception
{
final int chunkSize = <num> * <num> ;
final int chunks = <num> ;
final int size = chunks * chunkSize ;
final <unk> start = new <unk> ( size ) ;
final <unk> finish = new <unk> ( size ) ;
final <unk> <unk> = new <unk> ( start , finish , chunkSize , chunks ) ;
assertTrue ( <unk> . <unk> ( ) ) ;
}
@Test
public void <unk> ( ) throws Exception
{
final int chunkSize = <num> * <num> ;
final int chunks = <num> ;
final int size = chunks * chunkSize ;
final <unk> start = new <unk> ( size ) ;
final <unk> finish = new <unk> ( size ) ;
final <unk> <unk> = new <unk> ( start , finish , chunkSize , chunks ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
assertTrue ( <unk> . <unk> ( ) ) ;
}
@Test
public void <unk> ( ) throws Exception
{
for ( int chunks = <num> ; chunks < <num> ; chunks ++ )
{
for ( int chunkSize = <num> ; chunkSize < <num> ; chunkSize ++ )
{
final int size = chunks * chunkSize ;
final <unk> start = new <unk> ( size ) ;
final <unk> finish = new <unk> ( size ) ;
final <unk> <unk> = new <unk> ( start , finish , chunkSize , chunks ) ;
assertTrue ( " + chunks + " + chunkSize , <unk> . <unk> ( ) ) ;
}
}
}
}
package com . <unk> . <unk> ;
import java . io . IOException ;
import java . util . Arrays ;
public final class <unk> implements <unk>
{
private final int [ ] mData ;
public <unk> ( int <unk> )
{
mData = new int [ <unk> ] ;
}
@Override
public void close ( ) throws IOException
{
}
@Override
public int [ ] get ( long index , int length ) throws IOException
{
return Arrays . copyOfRange ( mData , ( int ) index , ( int ) index + length ) ;
}
@Override
public void put ( int [ ] data , long index ) throws IOException
{
System . arraycopy ( data , <num> , mData , ( int ) index , data . length ) ;
}
package com . <unk> . <unk> ;
import java . io . IOException ;
import java . util . Arrays ;
import java . util . Collection ;
import java . util . Iterator ;
import java . util . concurrent . ConcurrentLinkedQueue ;
import java . util . concurrent . ExecutionException ;
import java . util . concurrent . ExecutorService ;
import java . util . concurrent . Future ;
public final class <unk> extends <unk>
{
private final ExecutorService mExecutor ;
private final Collection < Future < ? >> <unk> = new ConcurrentLinkedQueue < Future < ? >> ( ) ;
<unk> ( ExecutorService executor , <unk> dataStore , long <unk> ,
long length , int chunkSize )
{
super ( dataStore , <unk> , length , chunkSize ) ;
this . mExecutor = executor ;
}
@Override
public void flush ( ) throws IOException , InterruptedException , ExecutionException
{
super . flush ( ) ;
for ( Future < ? > pending : <unk> )
{
pending . get ( ) ;
}
}
@Override
protected void writeBuffer ( ) throws IOException
{
final int [ ] data = <unk> ;
final int index = <unk> ;
final long <unk> = <unk> ;
if ( data != null && <num> < index )
{
<unk> . add ( mExecutor . submit ( new Runnable ( )
{
@Override
public void run ( )
{
try
{
<unk> . put ( ( data . length <= index ) ? data : Arrays . copyOf ( data ,
index ) ,
<unk> ) ;
}
catch ( IOException ex )
{
ex . printStackTrace ( ) ;
}
for ( Iterator < Future < ? >> iterator = <unk> . iterator ( ) ; iterator . hasNext ( ) ; )
{
if ( iterator . next ( ) . isDone ( ) )
iterator . remove ( ) ;
}
}
} ) ) ;
<unk> += <unk> ;
}
<unk> = new int [ <unk> ( ) ] ;
<unk> = <num> ;
}
package com . <unk> . <unk> ;
import java . io . IOException ;
import java . util . Comparator ;
public final class <unk> implements Comparator < <unk> >
{
@Override
public int compare ( <unk> first , <unk> second )
{
try
{
final int val1 = first . <unk> ( ) ;
final int val2 = second . <unk> ( ) ;
if ( val1 == val2 )
return first . hashCode ( )  second . hashCode ( ) ;
else if ( val1 < val2 )
return  <num> ;
else
return <num> ;
}
catch ( IOException ex )
{
ex . printStackTrace ( ) ;
throw new IllegalStateException ( ex ) ;
}
}
package com . <unk> . <unk> ;
import java . io . IOException ;
import java . util . Arrays ;
import java . util . PriorityQueue ;
import java . util . Random ;
public class <unk>
{
protected final int <unk> ;
protected final long <unk> ;
protected final <unk> <unk> ;
private long <unk> ;
protected final <unk> <unk> ;
private long mStartTime ;
protected final long <unk> ;
public <unk> ( <unk> <unk> , <unk> <unk> , long chunkSize ,
int totalChunks )
{
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = chunkSize ;
this . <unk> = totalChunks ;
this . <unk> = chunkSize * totalChunks ;
}
protected int <unk> ( )
{
if ( <unk> <= <unk> )
return ( int ) <unk> ;
else
return ( int ) ( <unk> / <unk> ) ;
}
public boolean <unk> ( ) throws Exception
{
this . <unk> ( ) ;
this . <unk> ( ) ;
this . <unk> ( ) ;
return this . <unk> ( ) ;
}
public final void <unk> ( ) throws Exception
{
print ( " ) ;
this . <unk> ( ) ;
print ( " ) ;
}
protected void <unk> ( ) throws Exception
{
for ( int <unk> = <num> ; <unk> < <unk> ; <unk> ++ )
{
this . <unk> ( <unk> * <unk> ) ;
}
}
public void <unk> ( ) throws Exception
{
System . out . println ( <unk> / ( <num> * <num> ) + " ) ;
print ( " ) ;
this . <unk> ( ) ;
print ( " ) ;
}
protected void <unk> ( ) throws Exception
{
<unk> ( <num> , <unk> ) ;
}
public void <unk> ( ) throws Exception
{
print ( " ) ;
this . <unk> ( new <unk> ( <unk> ,
0 ,
<unk> ,
( int ) <unk> ) ) ;
print ( " ) ;
}
protected void <unk> ( <unk> <unk> ) throws Exception
{
PriorityQueue < <unk> > queue = new PriorityQueue < <unk> > ( <unk> ,
new <unk> ( ) ) ;
final int chunkSize = this . <unk> ( ) ;
for ( int <unk> = <num> ; <unk> < <unk> ; <unk> ++ )
{
queue . add ( new <unk> ( <unk> ,
<unk> * <unk> ,
<unk> ,
chunkSize ) ) ;
}
while ( ! queue . isEmpty ( ) )
{
final <unk> smallest = queue . remove ( ) ;
<unk> . write ( smallest . getNext ( ) ) ;
if ( smallest . hasNext ( ) )
queue . add ( smallest ) ;
}
<unk> . flush ( ) ;
}
public boolean <unk> ( ) throws IOException
{
print ( " ) ;
<unk> <unk> = new <unk> ( <unk> ,
0 ,
<unk> ,
( int ) <unk> ) ;
int lastValue = Integer . MIN_VALUE ;
for ( long count = <num> ; count < <unk> ; count ++ )
{
final int value = <unk> . getNext ( ) ;
if ( value < lastValue )
return false ;
lastValue = value ;
}
print ( " ) ;
return true ;
}
protected final void <unk> ( long start , long size ) throws Exception
{
final Random rand = new Random ( ) ;
<unk> writer = new <unk> ( <unk> , start , size , ( int ) <unk> ) ;
for ( long count = <num> ; count < size ; count ++ )
{
writer . write ( rand . nextInt ( ) ) ;
}
writer . flush ( ) ;
}
protected void print ( String message )
{
final long now = System . currentTimeMillis ( ) ;
if ( mStartTime == <num> )
mStartTime = now ;
final StringBuilder sb = new StringBuilder ( ) ;
sb . append ( ( now  mStartTime ) / <num> ) . append ( " ) ;
if ( <unk> == <num> )
{
<unk> = now ;
}
else
{
sb . append ( " )
. append ( ( now  <unk> ) / <num> )
. append ( " ) ;
<unk> = <num> ;
}
sb . append ( message ) ;
System . out . println ( sb . toString ( ) ) ;
}
final void <unk> ( long index ) throws IOException
{
int [ ] <unk> = <unk> . get ( index , ( int ) <unk> ) ;
Arrays . sort ( <unk> ) ;
<unk> . put ( <unk> , index ) ;
}
package com . <unk> . <unk> ;
import java . io . Closeable ;
import java . io . IOException ;
public interface <unk> extends Closeable
{
int [ ] get ( long index , int length ) throws IOException ;
void put ( int [ ] data , long index ) throws IOException ;
package com . <unk> . <unk> ;
import java . io . IOException ;
import java . util . ArrayList ;
import java . util . List ;
import java . util . concurrent . ExecutorService ;
import java . util . concurrent . Executors ;
import java . util . concurrent . Future ;
public final class <unk> extends <unk>
{
private final ExecutorService mExecutor ;
public <unk> ( ExecutorService executor , <unk> <unk> ,
<unk> <unk> , long chunkSize , int totalChunks )
{
super ( <unk> , <unk> , chunkSize , totalChunks ) ;
this . mExecutor = executor ;
}
public <unk> ( <unk> <unk> , <unk> <unk> , long chunkSize ,
int totalChunks )
{
super ( <unk> , <unk> , chunkSize , totalChunks ) ;
mExecutor = Executors . newFixedThreadPool ( <num> ) ;
}
public void close ( )
{
mExecutor . shutdown ( ) ;
}
@Override
protected void <unk> ( ) throws Exception
{
final List < Future < ? >> futures = new ArrayList < Future < ? >> ( ) ;
for ( int <unk> = <num> ; <unk> < <unk> ; <unk> ++ )
{
final long startIndex = <unk> * <unk> ;
futures . add ( mExecutor . submit ( new Runnable ( )
{
@Override
public void run ( )
{
try
{
<unk> ( startIndex ) ;
}
catch ( IOException ex )
{
ex . printStackTrace ( ) ;
}
}
} ) ) ;
}
for ( Future < ? > future : futures )
{
future . get ( ) ;
}
}
@Override
protected void <unk> ( ) throws Exception
{
final List < Future < ? >> futures = new ArrayList < Future < ? >> ( ) ;
final long <unk> ;
if ( <unk> == ( <unk> & ( ~ <num> ) ) )
<unk> = ( <unk> / <num> ) ;
else
<unk> = <unk> ;
for ( long index = <num> ; index < <unk> ; index += <unk> )
{
final long startIndex = index ;
futures . add ( mExecutor . submit ( new Runnable ( )
{
@Override
public void run ( )
{
try
{
<unk> ( startIndex , <unk> ) ;
}
catch ( Exception e )
{
e . printStackTrace ( ) ;
}
}
} ) ) ;
}
for ( Future < ? > future : futures )
{
future . get ( ) ;
}
}
@Override
protected void <unk> ( <unk> <unk> ) throws Exception
{
super . <unk> ( new <unk> ( mExecutor ,
<unk> ,
0 ,
<unk> ,
( int ) <unk> ) ) ;
}
}
package com . <unk> . <unk> ;
import static org . junit . Assert . assertEquals ;
import java . util . Random ;
import org . junit . Before ;
import org . junit . Test ;
public class <unk>
{
private static final int <unk> = <num> * <num> ;
private int [ ] data = new int [ <unk> ] ;
private final Random random = new Random ( ) ;
@Before
public void setUp ( ) throws Exception
{
for ( int index = <num> ; index < data . length ; index ++ )
{
data [ index ] = random . nextInt ( ) ;
}
}
@Test
public void <unk> ( ) throws Exception
{
for ( int run = <num> ; run < <num> ; run ++ )
{
final <unk> store = new <unk> ( <unk> ) ;
final <unk> writer = new <unk> ( store ,
0 ,
<unk> ,
random . nextInt ( <unk> ) + <num> ) ;
for ( int index = <num> ; index < data . length ; index ++ )
{
writer . write ( data [ index ] ) ;
}
writer . flush ( ) ;
<unk> reader = new <unk> ( store ,
0 ,
<unk> ,
random . nextInt ( <unk> ) + <num> ) ;
for ( int index = <num> ; index < data . length ; index ++ )
{
assertEquals ( data [ index ] , reader . getNext ( ) ) ;
}
}
}
package com . <unk> . <unk> ;
import static org . junit . Assert . assertTrue ;
import java . io . File ;
import java . io . FileNotFoundException ;
import java . util . concurrent . ExecutorService ;
import java . util . concurrent . Executors ;
import org . junit . After ;
import org . junit . AfterClass ;
import org . junit . Before ;
import org . junit . BeforeClass ;
import org . junit . Ignore ;
import org . junit . Test ;
public class <unk>
{
private static final ExecutorService <unk> = Executors . newFixedThreadPool ( <num> ) ;
private static <unk> <unk> ( long chunkSize , long chunks ) throws FileNotFoundException
{
return new <unk> ( new <unk> ( new File ( <unk> . <unk> ,
" ) ) ,
new <unk> ( new File ( <unk> . <unk> ,
" ) ) ,
chunkSize ,
( int ) chunks ) ;
}
@BeforeClass
public static void <unk> ( ) throws Exception
{
}
@AfterClass
public static void <unk> ( ) throws Exception
{
<unk> . shutdown ( ) ;
}
@Before
public void setUp ( ) throws Exception
{
}
@After
public void tearDown ( ) throws Exception
{
}
@Test
<unk>
public void <unk> ( ) throws Exception
{
final <unk> <unk> = <unk> ( <num> * <num> * <num> , <num> ) ;
assertTrue ( <unk> . <unk> ( ) ) ;
}
@Test
<unk>
public void <unk> ( ) throws Exception
{
assertTrue ( <unk> ( <num> * <num> * <num> , <num> ) . <unk> ( ) ) ;
}
@Test
public void <unk> ( ) throws Exception
{
final int chunkSize = <num> * <num> ;
final int chunks = <num> ;
final int size = chunks * chunkSize ;
final <unk> <unk> = new <unk> ( new <unk> ( size ) ,
new <unk> ( size ) ,
chunkSize ,
chunks ) ;
assertTrue ( <unk> . <unk> ( ) ) ;
}
@Test
<unk>
public void <unk> ( ) throws Exception
{
assertTrue ( <unk> ( <num> * <num> * <num> , <num> ) . <unk> ( ) ) ;
}
@Test
public void <unk> ( ) throws Exception
{
for ( int chunks = <num> ; chunks < <num> ; chunks ++ )
{
for ( int chunkSize = <num> ; chunkSize < <num> ; chunkSize ++ )
{
final int size = chunks * chunkSize ;
final <unk> start = new <unk> ( size ) ;
final <unk> finish = new <unk> ( size ) ;
final <unk> <unk> = new <unk> ( <unk> ,
start ,
finish ,
chunkSize ,
chunks ) ;
assertTrue ( " + chunks + " + chunkSize , <unk> . <unk> ( ) ) ;
}
}
}
package com . <unk> . <unk> ;
import java . io . File ;
import java . io . FileNotFoundException ;
import java . io . IOException ;
import java . io . RandomAccessFile ;
import java . nio . ByteBuffer ;
import java . nio . channels . FileChannel ;
import java . nio . channels . FileChannel . MapMode ;
public class <unk> implements <unk>
{
private static final String <unk> = " ;
private final File mFile ;
private final FileChannel <unk> ;
private final RandomAccessFile <unk> ;
public <unk> ( File file ) throws FileNotFoundException
{
this . mFile = file ;
new File ( mFile , " ) . mkdirs ( ) ;
<unk> = new RandomAccessFile ( mFile , " ) ;
this . <unk> = <unk> . getChannel ( ) ;
}
public <unk> ( String fileName ) throws FileNotFoundException
{
this ( new File ( <unk> , fileName + " ) ) ;
}
@Override
public void close ( ) throws IOException
{
<unk> . close ( ) ;
<unk> . close ( ) ;
}
@Override
public int [ ] get ( long index , int length ) throws IOException
{
if ( index < <num> || length <= <num> )
throw new IllegalArgumentException ( ) ;
final ByteBuffer buffer = <unk> . map ( MapMode . READ_ONLY , index * <num> , length * <num> ) ;
int [ ] data = new int [ length ] ;
for ( int i = <num> ; i < data . length ; i ++ )
{
data [ i ] = buffer . getInt ( ) ;
}
return data ;
}
@Override
public void put ( final int [ ] data , final long index ) throws IOException
{
if ( data == null || data . length == <num> || index < <num> )
throw new IllegalArgumentException ( ) ;
final int <unk> = data . length * <num> ;
final ByteBuffer buffer = ByteBuffer . allocate ( <unk> ) ;
for ( int i = <num> ; i < data . length ; i ++ )
{
buffer . putInt ( data [ i ] ) ;
}
buffer . flip ( ) ;
final long written = <unk> . write ( buffer , index * <num> ) ;
if ( written != <unk> )
throw new IOException ( " ) ;
}
package com . <unk> . <unk> ;
import java . io . IOException ;
import java . util . Arrays ;
import java . util . concurrent . ExecutionException ;
public class <unk>
{
int <unk> ;
final int <unk> ;
int [ ] <unk> ;
final <unk> <unk> ;
long <unk> ;
final long <unk> ;
<unk> ( <unk> dataStore , long <unk> , long length , int chunkSize )
{
this . <unk> = dataStore ;
this . <unk> = ( <unk> + length )  <num> ;
this . <unk> = <unk> ;
this . <unk> = chunkSize ;
this . <unk> = Integer . MAX_VALUE ;
}
final int <unk> ( )
{
return ( int ) Math . min ( <unk> , ( <unk>  <unk> ) + <num> ) ;
}
public void flush ( ) throws IOException , InterruptedException , ExecutionException
{
if ( <unk> != null && <num> < <unk> )
{
int [ ] data ;
if ( <unk> . length <= <unk> )
data = <unk> ;
else
data = Arrays . copyOf ( <unk> , <unk> ) ;
<unk> . put ( data , <unk> ) ;
<unk> += data . length ;
}
<unk> = <num> ;
}
public int getNext ( ) throws IOException
{
this . <unk> ( ) ;
return <unk> [ <unk> ++ ] ;
}
public boolean hasNext ( )
{
return <unk> < <unk> . length || <unk> <= <unk> ;
}
private void <unk> ( ) throws IOException
{
if ( <unk> <= <unk> )
{
this . <unk> = <unk> . get ( <unk> , <unk> ( ) ) ;
this . <unk> += <unk> . length ;
this . <unk> = <num> ;
}
}
public int <unk> ( ) throws IOException
{
this . <unk> ( ) ;
return <unk> [ <unk> ] ;
}
public void write ( int value ) throws Exception
{
if ( <unk> == null || <unk> . length <= <unk> )
{
this . writeBuffer ( ) ;
}
<unk> [ <unk> ++ ] = value ;
}
protected void writeBuffer ( ) throws Exception
{
this . flush ( ) ;
final int chunkSize = <unk> ( ) ;
if ( <unk> == null || <unk> . length != chunkSize )
<unk> = new int [ chunkSize ] ;
}
package com . <unk> . <unk> ;
import static org . junit . Assert . assertArrayEquals ;
import java . util . Arrays ;
import java . util . Random ;
import org . junit . BeforeClass ;
import org . junit . Test ;
public class <unk>
{
private static final int [ ] <unk> = new int [ <num> ] ;
private static final int [ ] RANDOM = new int [ <num> ] ;
private static final int [ ] <unk> = new int [ <num> ] ;
@BeforeClass
public static void <unk> ( ) throws Exception
{
for ( int index = <num> ; index < <unk> . length ; index ++ )
{
<unk> [ index ] = index ;
}
Random random = new Random ( ) ;
for ( int index = <num> ; index < RANDOM . length ; index ++ )
{
RANDOM [ index ] = random . nextInt ( ) ;
}
Arrays . fill ( <unk> , <num> ) ;
}
@Test
public void testSmall1 ( ) throws Exception
{
final <unk> dataStore = new <unk> ( " ) ;
for ( int index = <num> ; index < <num> ; index ++ )
{
dataStore . put ( <unk> , index ) ;
final int [ ] readData = dataStore . get ( index , <unk> . length ) ;
assertArrayEquals ( <unk> , readData ) ;
}
dataStore . close ( ) ;
}
@Test
public void testSmall2 ( ) throws Exception
{
final <unk> dataStore = new <unk> ( " ) ;
dataStore . put ( <unk> , <num> ) ;
dataStore . put ( RANDOM , <unk> . length ) ;
final int [ ] readData = dataStore . get ( <num> , <unk> . length ) ;
assertArrayEquals ( <unk> , readData ) ;
dataStore . close ( ) ;
}
package com . <unk> . <unk> ;
import org . bukkit . plugin . java . JavaPlugin ;
public class <unk> extends JavaPlugin {
private <unk> executor ;
public void onEnable ( ) {
getLogger ( ) . info ( " ) ;
executor = new <unk> ( this ) ;
getCommand ( " ) . setExecutor ( executor ) ;
}
public void onDisable ( ) {
getLogger ( ) . info ( " ) ;
}
}
package com . <unk> . <unk> ;
import org . bukkit . ChatColor ;
import org . bukkit . command . Command ;
import org . bukkit . command . CommandExecutor ;
import org . bukkit . command . CommandSender ;
public class <unk> implements CommandExecutor {
<unk> plugin ;
public <unk> ( <unk> plugin ) {
this . plugin = plugin ;
}
@Override
public boolean onCommand ( CommandSender sender , Command cmd , String label , String [ ] args ) {
if ( args . length == <num> ) {
sender . sendMessage ( ChatColor . RED + " ) ;
return true ;
}
if ( args [ <num> ] . equalsIgnoreCase ( " ) ) {
if ( ! sender . hasPermission ( " ) ) {
sender . sendMessage ( ChatColor . RED + " ) ;
return true ;
}
}
sender . sendMessage ( ChatColor . RED + " ) ;
return true ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
com . <unk> . <unk> . <unk> [ ] <unk> ,
int [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( int [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private float <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
float <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private short <unk> ;
private short <unk> ;
private short <unk> ;
public <unk> ( ) {
}
public <unk> (
short <unk> ,
short <unk> ,
short <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public short <unk> ( ) {
return <unk> ;
}
public void <unk> ( short <unk> ) {
this . <unk> = <unk> ;
}
public short <unk> ( ) {
return <unk> ;
}
public void <unk> ( short <unk> ) {
this . <unk> = <unk> ;
}
public short <unk> ( ) {
return <unk> ;
}
public void <unk> ( short <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private long <unk> ;
private int <unk> ;
private float <unk> ;
private float <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
long <unk> ,
int <unk> ,
float <unk> ,
float <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private long <unk> ;
private float <unk> ;
private float <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
float <unk> ,
long <unk> ,
float <unk> ,
float <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public interface <unk> extends java . rmi . Remote {
public void <unk> ( java . lang . String <unk> , long [ ] <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long transactionId , com . <unk> . <unk> . <unk> [ ] packageInfo ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long [ ] itemIds ) throws java . rmi . RemoteException ;
public java . lang . String <unk> ( java . lang . String <unk> , long <unk> , float <unk> , long <unk> , long <unk> , com . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , long <unk> , int [ ] <unk> , java . lang . String <unk> , long <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException ;
public int <unk> ( java . lang . String sessionId , long transactionId ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long itemId , com . <unk> . <unk> . <unk> [ ] <unk> , int [ ] <unk> , int <unk> ) throws java . rmi . RemoteException ;
public java . lang . String <unk> ( java . lang . String <unk> , javax . xml . rpc . <unk> . <unk> itemId , float <unk> , float <unk> , float <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , javax . xml . rpc . <unk> . <unk> itemId , int <unk> , javax . xml . rpc . <unk> . <unk> itemInfo , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public int <unk> ( java . lang . String <unk> , long userId , long itemId , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] fields , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] fields , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException ;
public int <unk> ( java . lang . String <unk> , long <unk> , int <unk> , int <unk> , java . lang . String <unk> , java . lang . String <unk> , int <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException ;
public int <unk> ( java . lang . String <unk> , long <unk> , int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public float <unk> ( java . lang . String <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long itemId ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , int categoryId ) throws java . rmi . RemoteException ;
public void <unk> ( int <unk> , long <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( int <unk> , long <unk> , java . lang . String <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( int <unk> , long <unk> , java . lang . String <unk> , int offset , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( int countryCode , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long itemId , int <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , int <unk> , int <unk> , int <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , int <unk> , int <unk> , long <unk> , long <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , long itemId ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , int [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> , int <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , long [ ] <unk> , int <unk> , int getImageUrl , int <unk> , int <unk> , int <unk> , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long itemId ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> userData , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int <unk> , long itemId , long <unk> , long <unk> , int <unk> , int <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int <unk> , long itemId , int limit , int offset ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , int <unk> , long itemId , long <unk> , long <unk> , int pageSize , int <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int <unk> , long itemId , int limit , int offset ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long <unk> , long <unk> , int <unk> , int <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , long [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , long [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int countryCode ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , int offset , int limit , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long [ ] itemIds ) throws java . rmi . RemoteException ;
public void <unk> ( int <unk> , java . lang . String <unk> , long <unk> , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( int countryCode , long <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( int countryCode , long <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( int countryCode , long <unk> , java . lang . String <unk> , int offset , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String <unk> , int <unk> , int categoryId ) throws java . rmi . RemoteException ;
public void <unk> ( int countryCode , long <unk> , java . lang . String <unk> , int offset , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int countryCode ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( int countryCode , int <unk> , long <unk> , int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( int countryCode , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( int countryCode , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , int countryCode , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( int <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long [ ] itemIds ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long <unk> , int infoType ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , long <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String <unk> , long <unk> , int infoType ) throws java . rmi . RemoteException ;
public void <unk> ( int countryCode , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( int countryCode , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int <unk> , int <unk> , int offset , int <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( int countryCode , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public long <unk> ( int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public long [ ] <unk> ( java . lang . String <unk> , long [ ] <unk> , java . lang . String <unk> , long [ ] <unk> ) throws java . rmi . RemoteException ;
public int <unk> ( int <unk> , java . lang . String userLogin , java . lang . String <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( int userId , java . lang . String <unk> , int <unk> , int offset , int limit , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public float <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException ;
public java . lang . String <unk> ( int <unk> , int userId , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int offset , int packageSize ) throws java . rmi . RemoteException ;
public int <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException ;
public int <unk> ( java . lang . String <unk> , long userId , long <unk> , java . lang . String actionType , long <unk> , long <unk> ) throws java . rmi . RemoteException ;
public int <unk> ( java . lang . String <unk> , int userId , int <unk> , java . lang . String [ ] <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String userLogin , java . lang . String userPassword , int countryCode , java . lang . String <unk> , long <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> userId , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String userLogin , java . lang . String <unk> , int countryCode , java . lang . String <unk> , long <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> userId , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public float <unk> ( java . lang . String <unk> , long <unk> , float <unk> , float <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , java . lang . String accountType , int offset , long [ ] <unk> , int limit ) throws java . rmi . RemoteException ;
public int <unk> ( java . lang . String <unk> , java . lang . String accountType , long [ ] <unk> ) throws java . rmi . RemoteException ;
public java . lang . String <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , long itemId , java . lang . String option , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long [ ] <unk> , int offset , int desc ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , java . lang . String <unk> , int offset , int desc , long [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , java . lang . String <unk> , int offset , int desc , long [ ] <unk> , int <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] fields , int <unk> , int <unk> , javax . xml . rpc . <unk> . <unk> itemId , javax . xml . rpc . <unk> . <unk> itemInfo ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] fields , int <unk> , int <unk> , com . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> itemId , javax . xml . rpc . <unk> . <unk> itemInfo , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( int <unk> , int <unk> , java . lang . String <unk> , javax . xml . rpc . <unk> . <unk> info , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , int [ ] <unk> ) throws java . rmi . RemoteException ;
public int <unk> ( java . lang . String <unk> , long <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId ) throws java . rmi . RemoteException ;
public int <unk> ( java . lang . String <unk> , long transactionId , float <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public void doSearch ( java . lang . String <unk> , com . <unk> . <unk> . <unk> searchQuery , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , long [ ] <unk> , long <unk> , int <unk> , int <unk> , int [ ] <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , long [ ] <unk> , long <unk> , int <unk> , int <unk> , int <unk> , long <unk> , int [ ] <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public java . lang . String <unk> ( java . lang . String <unk> , long <unk> , javax . xml . rpc . <unk> . <unk> <unk> , int <unk> , int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> [ ] <unk> , com . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException ;
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException ;
public int <unk> ( java . lang . String <unk> , java . lang . String <unk> , int <unk> , float <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , int <unk> , int <unk> , int <unk> , com . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> [ ] <unk> , int <unk> , com . <unk> . <unk> . <unk> <unk> , int <unk> , int <unk> , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , long itemId , int <unk> , int getImageUrl , int <unk> , int <unk> , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , long itemId , int <unk> , int getImageUrl , int <unk> , int <unk> , int <unk> , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , int <unk> , javax . xml . rpc . <unk> . <unk> userId , javax . xml . rpc . <unk> . <unk> userLogin , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , int <unk> , long userId , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
public void <unk> ( java . lang . String <unk> , int <unk> , javax . xml . rpc . <unk> . <unk> itemId , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException ;
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long userId ;
private int result ;
public <unk> ( ) {
}
public <unk> (
long userId ,
int result ) {
this . userId = userId ;
this . result = result ;
}
public long getUserId ( ) {
return userId ;
}
public void setUserId ( long userId ) {
this . userId = userId ;
}
public int getResult ( ) {
return result ;
}
public void setResult ( int result ) {
this . result = result ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . userId == other . getUserId ( ) &&
this . result == other . getResult ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getUserId ( ) ) . hashCode ( ) ;
_hashCode += getResult ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private long [ ] <unk> ;
private int <unk> ;
private float <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
long [ ] <unk> ,
int <unk> ,
float <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( long [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
com . <unk> . <unk> . <unk> [ ] <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long userId ;
private java . lang . String userLogin ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long userId ,
java . lang . String userLogin ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . userId = userId ;
this . userLogin = userLogin ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getUserId ( ) {
return userId ;
}
public void setUserId ( long userId ) {
this . userId = userId ;
}
public java . lang . String <unk> ( ) {
return userLogin ;
}
public void <unk> ( java . lang . String userLogin ) {
this . userLogin = userLogin ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String getUserEmail ( ) {
return <unk> ;
}
public void setUserEmail ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . userId == other . getUserId ( ) &&
( ( this . userLogin == null && other . <unk> ( ) == null ) ||
( this . userLogin != null &&
this . userLogin . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . getUserEmail ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . getUserEmail ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getUserId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( getUserEmail ( ) != null ) {
_hashCode += getUserEmail ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String itemTitle ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String itemTitle ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . itemTitle = itemTitle ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return itemTitle ;
}
public void <unk> ( java . lang . String itemTitle ) {
this . itemTitle = itemTitle ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . itemTitle == null && other . <unk> ( ) == null ) ||
( this . itemTitle != null &&
this . itemTitle . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private byte [ ] <unk> ;
private int <unk> ;
private long <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
byte [ ] <unk> ,
int <unk> ,
long <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public byte [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( byte [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String searchString ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private float <unk> ;
private float <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String searchString ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
float <unk> ,
float <unk> ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . searchString = searchString ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String getSearchString ( ) {
return searchString ;
}
public void <unk> ( java . lang . String searchString ) {
this . searchString = searchString ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . searchString == null && other . getSearchString ( ) == null ) ||
( this . searchString != null &&
this . searchString . equals ( other . getSearchString ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( getSearchString ( ) != null ) {
_hashCode += getSearchString ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class ItemInfo implements java . io . Serializable {
private long <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private int <unk> ;
private long <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private long <unk> ;
private float <unk> ;
private int <unk> ;
private int <unk> ;
private float <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public ItemInfo ( ) {
}
public ItemInfo (
long <unk> ,
int <unk> ,
java . lang . String <unk> ,
float <unk> ,
int <unk> ,
long <unk> ,
long <unk> ,
java . lang . String <unk> ,
int <unk> ,
long <unk> ,
float <unk> ,
int <unk> ,
int <unk> ,
float <unk> ,
java . lang . String <unk> ,
float <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
java . lang . String <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof ItemInfo ) ) return false ;
ItemInfo other = ( ItemInfo ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( ItemInfo . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long userId ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long userId ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . userId = userId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getUserId ( ) {
return userId ;
}
public void setUserId ( long userId ) {
this . userId = userId ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . userId == other . getUserId ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getUserId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int addressType ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
int addressType ,
com . <unk> . <unk> . <unk> <unk> ) {
this . addressType = addressType ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return addressType ;
}
public void <unk> ( int addressType ) {
this . addressType = addressType ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . addressType == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private float <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private float <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
float <unk> ,
long <unk> ,
java . lang . String <unk> ,
int <unk> ,
float <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long userId ;
private java . lang . String userLogin ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long userId ,
java . lang . String userLogin ,
int <unk> ,
int <unk> ) {
this . userId = userId ;
this . userLogin = userLogin ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getUserId ( ) {
return userId ;
}
public void setUserId ( long userId ) {
this . userId = userId ;
}
public java . lang . String <unk> ( ) {
return userLogin ;
}
public void <unk> ( java . lang . String userLogin ) {
this . userLogin = userLogin ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . userId == other . getUserId ( ) &&
( ( this . userLogin == null && other . <unk> ( ) == null ) ||
( this . userLogin != null &&
this . userLogin . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getUserId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private com . <unk> . <unk> . <unk> userData ;
private com . <unk> . <unk> . <unk> <unk> ;
private java . lang . String [ ] <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
com . <unk> . <unk> . <unk> userData ,
com . <unk> . <unk> . <unk> <unk> ,
java . lang . String [ ] <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . userData = userData ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return userData ;
}
public void setUserData ( com . <unk> . <unk> . <unk> userData ) {
this . userData = userData ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . userData == null && other . <unk> ( ) == null ) ||
( this . userData != null &&
this . userData . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private float <unk> ;
private byte [ ] <unk> ;
private float <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
float <unk> ,
byte [ ] <unk> ,
float <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public byte [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( byte [ ] <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
java . lang . String <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String siteName ;
private java . lang . String siteUrl ;
private int <unk> ;
private java . lang . String <unk> ;
private byte [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String siteName ,
java . lang . String siteUrl ,
int <unk> ,
java . lang . String <unk> ,
byte [ ] <unk> ) {
this . siteName = siteName ;
this . siteUrl = siteUrl ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String getSiteName ( ) {
return siteName ;
}
public void <unk> ( java . lang . String siteName ) {
this . siteName = siteName ;
}
public java . lang . String getSiteUrl ( ) {
return siteUrl ;
}
public void <unk> ( java . lang . String siteUrl ) {
this . siteUrl = siteUrl ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public byte [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( byte [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . siteName == null && other . getSiteName ( ) == null ) ||
( this . siteName != null &&
this . siteName . equals ( other . getSiteName ( ) ) ) ) &&
( ( this . siteUrl == null && other . getSiteUrl ( ) == null ) ||
( this . siteUrl != null &&
this . siteUrl . equals ( other . getSiteUrl ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( getSiteName ( ) != null ) {
_hashCode += getSiteName ( ) . hashCode ( ) ;
}
if ( getSiteUrl ( ) != null ) {
_hashCode += getSiteUrl ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String itemTitle ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String itemTitle ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . itemId = itemId ;
this . itemTitle = itemTitle ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return itemTitle ;
}
public void <unk> ( java . lang . String itemTitle ) {
this . itemTitle = itemTitle ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . itemTitle == null && other . <unk> ( ) == null ) ||
( this . itemTitle != null &&
this . itemTitle . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
long [ ] <unk> ) {
this . <unk> = <unk> ;
}
public long [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( long [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private float <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String <unk> ,
float <unk> ,
float <unk> ,
int <unk> ,
long <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private long <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
long <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . ItemInfo value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . ItemInfo value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private long <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
long <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public long [ ] value ;
public <unk> ( ) {
}
public <unk> ( long [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private float <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
float <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String itemTitle ;
private java . lang . String <unk> ;
private float <unk> ;
private int <unk> ;
private float <unk> ;
private int <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String itemTitle ,
java . lang . String <unk> ,
float <unk> ,
int <unk> ,
float <unk> ,
int <unk> ,
long <unk> ,
java . lang . String <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . itemTitle = itemTitle ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return itemTitle ;
}
public void <unk> ( java . lang . String itemTitle ) {
this . itemTitle = itemTitle ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . itemTitle == null && other . <unk> ( ) == null ) ||
( this . itemTitle != null &&
this . itemTitle . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private int result ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
int result ) {
this . itemId = itemId ;
this . result = result ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public int getResult ( ) {
return result ;
}
public void setResult ( int result ) {
this . result = result ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
this . result == other . getResult ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
_hashCode += getResult ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
int <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private int <unk> ;
private long [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
float <unk> ,
int <unk> ,
long [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( long [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public interface <unk> extends javax . xml . rpc . Service {
public java . lang . String <unk> ( ) ;
public com . <unk> . <unk> . <unk> <unk> ( ) throws javax . xml . rpc . ServiceException ;
public com . <unk> . <unk> . <unk> <unk> ( java . net . URL <unk> ) throws javax . xml . rpc . ServiceException ;
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String itemTitle ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String itemTitle ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . itemTitle = itemTitle ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return itemTitle ;
}
public void <unk> ( java . lang . String itemTitle ) {
this . itemTitle = itemTitle ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . itemTitle == null && other . <unk> ( ) == null ) ||
( this . itemTitle != null &&
this . itemTitle . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long transactionId ;
private long [ ] <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
long transactionId ,
long [ ] <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . transactionId = transactionId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getTransactionId ( ) {
return transactionId ;
}
public void setTransactionId ( long transactionId ) {
this . transactionId = transactionId ;
}
public long [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( long [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . transactionId == other . getTransactionId ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getTransactionId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
int <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private float <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
float <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String itemTitle ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String itemTitle ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
long <unk> ,
java . lang . String <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . itemTitle = itemTitle ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return itemTitle ;
}
public void <unk> ( java . lang . String itemTitle ) {
this . itemTitle = itemTitle ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . itemTitle == null && other . <unk> ( ) == null ) ||
( this . itemTitle != null &&
this . itemTitle . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
int <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private float <unk> ;
private float <unk> ;
public <unk> ( ) {
}
public <unk> (
float <unk> ,
float <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private com . <unk> . <unk> . <unk> <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
com . <unk> . <unk> . <unk> <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int sortOrder ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int sortOrder ) {
this . <unk> = <unk> ;
this . sortOrder = sortOrder ;
}
public int <unk> ( ) {
return <unk> ;
}
public void setSortType ( int <unk> ) {
this . <unk> = <unk> ;
}
public int getSortOrder ( ) {
return sortOrder ;
}
public void setSortOrder ( int sortOrder ) {
this . sortOrder = sortOrder ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . sortOrder == other . getSortOrder ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += getSortOrder ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private long <unk> ;
private long <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String <unk> ,
float <unk> ,
long <unk> ,
long <unk> ,
long <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String imageUrl ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String imageUrl ) {
this . <unk> = <unk> ;
this . imageUrl = imageUrl ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String getImageUrl ( ) {
return imageUrl ;
}
public void setImageUrl ( java . lang . String imageUrl ) {
this . imageUrl = imageUrl ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . imageUrl == null && other . getImageUrl ( ) == null ) ||
( this . imageUrl != null &&
this . imageUrl . equals ( other . getImageUrl ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( getImageUrl ( ) != null ) {
_hashCode += getImageUrl ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int getReminderTime ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . getReminderTime ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += getReminderTime ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private float <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private java . lang . String <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
float <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
java . lang . String <unk> ,
long <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
float <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
private float <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private long [ ] <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ,
float <unk> ,
java . lang . String <unk> ,
float <unk> ,
long [ ] <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
java . lang . String <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public long [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( long [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private long <unk> ;
private int <unk> ;
private float <unk> ;
private java . lang . String <unk> ;
private long <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
long <unk> ,
int <unk> ,
float <unk> ,
java . lang . String <unk> ,
long <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String itemTitle ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String itemTitle ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
long <unk> ,
java . lang . String <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . itemTitle = itemTitle ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return itemTitle ;
}
public void <unk> ( java . lang . String itemTitle ) {
this . itemTitle = itemTitle ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . itemTitle == null && other . <unk> ( ) == null ) ||
( this . itemTitle != null &&
this . itemTitle . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String [ ] <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String [ ] <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private float <unk> ;
public <unk> ( ) {
}
public <unk> (
com . <unk> . <unk> . <unk> [ ] <unk> ,
float <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String <unk> ;
private long <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String <unk> ,
long <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private float <unk> ;
private float <unk> ;
public <unk> ( ) {
}
public <unk> (
float <unk> ,
float <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private float <unk> ;
private int <unk> ;
private float <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private long <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private float <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String <unk> ,
float <unk> ,
float <unk> ,
int <unk> ,
float <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
long <unk> ,
long <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
float <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private long <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private long <unk> ;
private long <unk> ;
private float <unk> ;
private int <unk> ;
private float <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
private long <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
long <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
float <unk> ,
long <unk> ,
long <unk> ,
float <unk> ,
int <unk> ,
float <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ,
long <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String <unk> ;
private long <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private long <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String <unk> ,
long <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
long <unk> ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private float <unk> ;
private float <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
float <unk> ,
float <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long [ ] <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
long [ ] <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( long [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private int <unk> ;
private java . lang . String messageBody ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
int <unk> ,
java . lang . String messageBody ,
int <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
this . messageBody = messageBody ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String getMessageBody ( ) {
return messageBody ;
}
public void <unk> ( java . lang . String messageBody ) {
this . messageBody = messageBody ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . messageBody == null && other . getMessageBody ( ) == null ) ||
( this . messageBody != null &&
this . messageBody . equals ( other . getMessageBody ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( getMessageBody ( ) != null ) {
_hashCode += getMessageBody ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> extends org . apache . axis . client . Service implements com . <unk> . <unk> . <unk> {
public <unk> ( ) {
}
public <unk> ( org . apache . axis . <unk> config ) {
super ( config ) ;
}
public <unk> ( java . lang . String <unk> , javax . xml . namespace . QName sName ) throws javax . xml . rpc . ServiceException {
super ( <unk> , sName ) ;
}
private java . lang . String <unk> = " ;
public java . lang . String <unk> ( ) {
return <unk> ;
}
private java . lang . String <unk> = " ;
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String name ) {
<unk> = name ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) throws javax . xml . rpc . ServiceException {
java . net . URL endpoint ;
try {
endpoint = new java . net . URL ( <unk> ) ;
}
catch ( java . net . MalformedURLException e ) {
throw new javax . xml . rpc . ServiceException ( e ) ;
}
return <unk> ( endpoint ) ;
}
public com . <unk> . <unk> . <unk> <unk> ( java . net . URL <unk> ) throws javax . xml . rpc . ServiceException {
try {
com . <unk> . <unk> . <unk> <unk> = new com . <unk> . <unk> . <unk> ( <unk> , this ) ;
<unk> . <unk> ( <unk> ( ) ) ;
return <unk> ;
}
catch ( org . apache . axis . <unk> e ) {
return null ;
}
}
public void <unk> ( java . lang . String address ) {
<unk> = address ;
}
public java . rmi . Remote getPort ( Class <unk> ) throws javax . xml . rpc . ServiceException {
try {
if ( com . <unk> . <unk> . <unk> . class . isAssignableFrom ( <unk> ) ) {
com . <unk> . <unk> . <unk> <unk> = new com . <unk> . <unk> . <unk> ( new java . net . URL ( <unk> ) , this ) ;
<unk> . <unk> ( <unk> ( ) ) ;
return <unk> ;
}
}
catch ( java . lang . Throwable t ) {
throw new javax . xml . rpc . ServiceException ( t ) ;
}
throw new javax . xml . rpc . ServiceException ( " + ( <unk> == null ? " : <unk> . getName ( ) ) ) ;
}
public java . rmi . Remote getPort ( javax . xml . namespace . QName <unk> , Class <unk> ) throws javax . xml . rpc . ServiceException {
if ( <unk> == null ) {
return getPort ( <unk> ) ;
}
java . lang . String <unk> = <unk> . <unk> ( ) ;
if ( " . equals ( <unk> ) ) {
return <unk> ( ) ;
}
else {
java . rmi . Remote <unk> = getPort ( <unk> ) ;
( ( org . apache . axis . client . Stub ) <unk> ) . <unk> ( <unk> ) ;
return <unk> ;
}
}
public javax . xml . namespace . QName getServiceName ( ) {
return new javax . xml . namespace . QName ( " , " ) ;
}
private java . util . HashSet ports = null ;
public java . util . Iterator getPorts ( ) {
if ( ports == null ) {
ports = new java . util . HashSet ( ) ;
ports . add ( new javax . xml . namespace . QName ( " , " ) ) ;
}
return ports . iterator ( ) ;
}
public void <unk> ( java . lang . String <unk> , java . lang . String address ) throws javax . xml . rpc . ServiceException {
if ( " . equals ( <unk> ) ) {
<unk> ( address ) ;
}
else
{
throw new javax . xml . rpc . ServiceException ( " + <unk> ) ;
}
}
public void <unk> ( javax . xml . namespace . QName <unk> , java . lang . String address ) throws javax . xml . rpc . ServiceException {
<unk> ( <unk> . <unk> ( ) , address ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
com . <unk> . <unk> . <unk> [ ] <unk> ,
long <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private float <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private long <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private float <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String <unk> ,
float <unk> ,
float <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
long <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
float <unk> ,
int <unk> ,
long <unk> ,
int <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public int [ ] value ;
public <unk> ( ) {
}
public <unk> ( int [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private long <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
long <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int [ ] <unk> ;
private int [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
int [ ] <unk> ,
int [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( int [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( int [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String [ ] <unk> ;
private java . lang . String [ ] <unk> ;
private java . lang . String [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String [ ] <unk> ,
java . lang . String [ ] <unk> ,
java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private float <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
float <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
int <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private float <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String <unk> ,
int <unk> ,
float <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> extends org . apache . axis . client . Stub implements com . <unk> . <unk> . <unk> {
private java . util . Vector <unk> = new java . util . Vector ( ) ;
private java . util . Vector <unk> = new java . util . Vector ( ) ;
private java . util . Vector <unk> = new java . util . Vector ( ) ;
private java . util . Vector <unk> = new java . util . Vector ( ) ;
static org . apache . axis . description . <unk> [ ] <unk> ;
static {
<unk> = new org . apache . axis . description . <unk> [ <num> ] ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , float . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( java . lang . String . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . <unk> , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , float . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , float . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , float . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( java . lang . String . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . <unk> , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( float . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( long . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( long [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( float . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( java . lang . String . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , float . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , float . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( float . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( java . lang . String . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , float . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . <unk> , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( java . lang . String . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( com . <unk> . <unk> . <unk> [ ] . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , float . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . <unk> ( int . class ) ;
oper . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . ItemInfo . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
private static void <unk> ( ) {
org . apache . axis . description . <unk> oper ;
org . apache . axis . description . <unk> param ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . <unk> , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . <unk> , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , com . <unk> . <unk> . <unk> [ ] . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
oper = new org . apache . axis . description . <unk> ( ) ;
oper . setName ( " ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , java . lang . String . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . IN , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , int . class , false , false ) ;
oper . addParameter ( param ) ;
param = new org . apache . axis . description . <unk> ( new javax . xml . namespace . QName ( " , " ) , org . apache . axis . description . <unk> . OUT , new javax . xml . namespace . QName ( " , " ) , long . class , false , false ) ;
oper . addParameter ( param ) ;
oper . <unk> ( org . apache . axis . encoding . <unk> . <unk> ) ;
oper . setStyle ( org . apache . axis . constants . Style . <unk> ) ;
oper . <unk> ( org . apache . axis . constants . <unk> . <unk> ) ;
<unk> [ <num> ] = oper ;
}
public <unk> ( ) throws org . apache . axis . <unk> {
this ( null ) ;
}
public <unk> ( java . net . URL <unk> , javax . xml . rpc . Service service ) throws org . apache . axis . <unk> {
this ( service ) ;
super . <unk> = <unk> ;
}
public <unk> ( javax . xml . rpc . Service service ) throws org . apache . axis . <unk> {
if ( service == null ) {
super . service = new org . apache . axis . client . Service ( ) ;
} else {
super . service = service ;
}
( ( org . apache . axis . client . Service ) super . service ) . <unk> ( " ) ;
java . lang . Class cls ;
javax . xml . namespace . QName qName ;
javax . xml . namespace . QName <unk> ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
<unk> ( ) ;
}
private void <unk> ( ) {
java . lang . Class cls ;
javax . xml . namespace . QName qName ;
javax . xml . namespace . QName <unk> ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = java . lang . String [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = java . lang . String [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = long [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = java . lang . String [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = int [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = java . lang . String [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = int [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = long [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = long [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = long [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = int [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = java . lang . String [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = long [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = java . lang . String [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = java . lang . String [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
}
private void <unk> ( ) {
java . lang . Class cls ;
javax . xml . namespace . QName qName ;
javax . xml . namespace . QName <unk> ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = long [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = int [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = long [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = long [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = java . lang . String [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . ItemInfo . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = java . lang . String [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = java . lang . String [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
}
private void <unk> ( ) {
java . lang . Class cls ;
javax . xml . namespace . QName qName ;
javax . xml . namespace . QName <unk> ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> [ ] . class ;
<unk> . add ( cls ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> = null ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( qName , <unk> ) ) ;
<unk> . add ( new org . apache . axis . encoding . <unk> . <unk> ( ) ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
}
private void <unk> ( ) {
java . lang . Class cls ;
javax . xml . namespace . QName qName ;
javax . xml . namespace . QName <unk> ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
java . lang . Class <unk> = org . apache . axis . encoding . <unk> . <unk> . class ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
qName = new javax . xml . namespace . QName ( " , " ) ;
<unk> . add ( qName ) ;
cls = com . <unk> . <unk> . <unk> . class ;
<unk> . add ( cls ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
}
protected org . apache . axis . client . <unk> <unk> ( ) throws java . rmi . RemoteException {
try {
org . apache . axis . client . <unk> <unk> = super . <unk> ( ) ;
if ( super . <unk> ) {
<unk> . <unk> ( super . <unk> ) ;
}
if ( super . <unk> != null ) {
<unk> . setUsername ( super . <unk> ) ;
}
if ( super . <unk> != null ) {
<unk> . setPassword ( super . <unk> ) ;
}
if ( super . <unk> != null ) {
<unk> . <unk> ( super . <unk> ) ;
}
if ( super . <unk> != null ) {
<unk> . setTimeout ( super . <unk> ) ;
}
if ( super . <unk> != null ) {
<unk> . <unk> ( super . <unk> ) ;
}
java . util . Enumeration keys = super . <unk> . keys ( ) ;
while ( keys . hasMoreElements ( ) ) {
java . lang . String key = ( java . lang . String ) keys . nextElement ( ) ;
<unk> . setProperty ( key , super . <unk> . get ( key ) ) ;
}
synchronized ( this ) {
if ( <unk> ( ) ) {
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( org . apache . axis . Constants . <unk> ) ;
for ( int i = <num> ; i < <unk> . size ( ) ; ++ i ) {
java . lang . Class cls = ( java . lang . Class ) <unk> . get ( i ) ;
javax . xml . namespace . QName qName =
( javax . xml . namespace . QName ) <unk> . get ( i ) ;
java . lang . Object x = <unk> . get ( i ) ;
if ( x instanceof Class ) {
java . lang . Class sf = ( java . lang . Class )
<unk> . get ( i ) ;
java . lang . Class df = ( java . lang . Class )
<unk> . get ( i ) ;
<unk> . <unk> ( cls , qName , sf , df , false ) ;
}
else if ( x instanceof javax . xml . rpc . encoding . <unk> ) {
org . apache . axis . encoding . <unk> sf = ( org . apache . axis . encoding . <unk> )
<unk> . get ( i ) ;
org . apache . axis . encoding . <unk> df = ( org . apache . axis . encoding . <unk> )
<unk> . get ( i ) ;
<unk> . <unk> ( cls , qName , sf , df , false ) ;
}
}
}
}
return <unk> ;
}
catch ( java . lang . Throwable _t ) {
throw new org . apache . axis . <unk> ( " , _t ) ;
}
}
public void <unk> ( java . lang . String <unk> , long [ ] <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( long [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( long [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long [ ] . class ) ;
}
try {
<unk> . value = ( long [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( long [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long [ ] . class ) ;
}
try {
<unk> . value = ( long [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( long [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long transactionId , com . <unk> . <unk> . <unk> [ ] packageInfo ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , new java . lang . Long ( transactionId ) , packageInfo } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long [ ] itemIds ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , itemIds } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public java . lang . String <unk> ( java . lang . String <unk> , long <unk> , float <unk> , long <unk> , long <unk> , com . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( <unk> ) , new java . lang . Float ( <unk> ) , new java . lang . Long ( <unk> ) , new java . lang . Long ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( java . lang . String ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , long <unk> , int [ ] <unk> , java . lang . String <unk> , long <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( <unk> ) , <unk> , <unk> , new java . lang . Long ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( int [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( int [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int [ ] . class ) ;
}
try {
<unk> . value = ( int [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( int [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( java . lang . String sessionId , long transactionId ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , new java . lang . Long ( transactionId ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long itemId , com . <unk> . <unk> . <unk> [ ] <unk> , int [ ] <unk> , int <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , new java . lang . Long ( itemId ) , <unk> , <unk> , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public java . lang . String <unk> ( java . lang . String <unk> , javax . xml . rpc . <unk> . <unk> itemId , float <unk> , float <unk> , float <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( itemId . value ) , new java . lang . Float ( <unk> ) , new java . lang . Float ( <unk> ) , new java . lang . Float ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
itemId . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
itemId . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
return ( java . lang . String ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , javax . xml . rpc . <unk> . <unk> itemId , int <unk> , javax . xml . rpc . <unk> . <unk> itemInfo , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( itemId . value ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
itemId . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
itemId . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
itemInfo . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
itemInfo . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( java . lang . String <unk> , long userId , long itemId , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( userId ) , new java . lang . Long ( itemId ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] fields , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , fields } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] fields , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , fields } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( java . lang . String <unk> , long <unk> , int <unk> , int <unk> , java . lang . String <unk> , java . lang . String <unk> , int <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , <unk> , <unk> , new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( java . lang . String <unk> , long <unk> , int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( <unk> ) , new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( long [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( long [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public float <unk> ( java . lang . String <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Float ) <unk> ) . floatValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Float ) org . apache . axis . utils . <unk> . convert ( <unk> , float . class ) ) . floatValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long itemId ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( itemId ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , int categoryId ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , new java . lang . Integer ( categoryId ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int <unk> , long <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( <unk> ) , new java . lang . Long ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int <unk> , long <unk> , java . lang . String <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( <unk> ) , new java . lang . Long ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int <unk> , long <unk> , java . lang . String <unk> , int offset , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( <unk> ) , new java . lang . Long ( <unk> ) , <unk> , new java . lang . Integer ( offset ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( int countryCode , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( countryCode ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long itemId , int <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( itemId ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , int <unk> , int <unk> , int <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , int <unk> , int <unk> , long <unk> , long <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Long ( <unk> ) , new java . lang . Long ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , long itemId ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , new java . lang . Long ( itemId ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , int [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> , int <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , long [ ] <unk> , int <unk> , int getImageUrl , int <unk> , int <unk> , int <unk> , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( getImageUrl ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( long [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( long [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long [ ] . class ) ;
}
try {
<unk> . value = ( long [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( long [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long itemId ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , new java . lang . Long ( itemId ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> , <unk> , new java . lang . Integer ( categoryId ) , itemIds , new java . lang . Integer ( pageSize ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> userData , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
userData . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
userData . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> , <unk> , new java . lang . Integer ( categoryId ) , itemIds , new java . lang . Integer ( pageSize ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int <unk> , long itemId , long <unk> , long <unk> , int <unk> , int <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Long ( itemId ) , new java . lang . Long ( <unk> ) , new java . lang . Long ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int <unk> , long itemId , int limit , int offset ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Long ( itemId ) , new java . lang . Integer ( limit ) , new java . lang . Integer ( offset ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> , <unk> , <unk> , new java . lang . Integer ( categoryId ) , itemIds , new java . lang . Integer ( pageSize ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> , <unk> , new java . lang . Integer ( categoryId ) , itemIds , new java . lang . Integer ( pageSize ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , int <unk> , long itemId , long <unk> , long <unk> , int pageSize , int <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , new java . lang . Integer ( <unk> ) , new java . lang . Long ( itemId ) , new java . lang . Long ( <unk> ) , new java . lang . Long ( <unk> ) , new java . lang . Integer ( pageSize ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int <unk> , long itemId , int limit , int offset ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Long ( itemId ) , new java . lang . Integer ( limit ) , new java . lang . Integer ( offset ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long <unk> , long <unk> , int <unk> , int <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( <unk> ) , new java . lang . Long ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> , <unk> , <unk> , new java . lang . Integer ( categoryId ) , itemIds , new java . lang . Integer ( pageSize ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> , <unk> , <unk> , new java . lang . Integer ( categoryId ) , itemIds , new java . lang . Integer ( pageSize ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> , <unk> , new java . lang . Integer ( categoryId ) , itemIds , new java . lang . Integer ( pageSize ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> , <unk> , new java . lang . Integer ( categoryId ) , itemIds , new java . lang . Integer ( pageSize ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> , java . lang . String <unk> , int categoryId , long [ ] itemIds , int pageSize , int <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> , <unk> , new java . lang . Integer ( categoryId ) , itemIds , new java . lang . Integer ( pageSize ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , long [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , long [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int countryCode ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( countryCode ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , int offset , int limit , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( offset ) , new java . lang . Integer ( limit ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long [ ] itemIds ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , itemIds } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int <unk> , java . lang . String <unk> , long <unk> , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( <unk> ) , <unk> , new java . lang . Long ( <unk> ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int countryCode , long <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( countryCode ) , new java . lang . Long ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int countryCode , long <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( countryCode ) , new java . lang . Long ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int countryCode , long <unk> , java . lang . String <unk> , int offset , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( countryCode ) , new java . lang . Long ( <unk> ) , <unk> , new java . lang . Integer ( offset ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String <unk> , int <unk> , int categoryId ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( categoryId ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int countryCode , long <unk> , java . lang . String <unk> , int offset , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( countryCode ) , new java . lang . Long ( <unk> ) , <unk> , new java . lang . Integer ( offset ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int countryCode ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( countryCode ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( int countryCode , int <unk> , long <unk> , int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( countryCode ) , new java . lang . Integer ( <unk> ) , new java . lang . Long ( <unk> ) , new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( int countryCode , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( countryCode ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( int countryCode , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( countryCode ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , int countryCode , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( countryCode ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int <unk> , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long [ ] itemIds ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , itemIds } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long <unk> , int infoType ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( <unk> ) , new java . lang . Integer ( infoType ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String sessionId , long <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , new java . lang . Long ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , long <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , new java . lang . Long ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String <unk> , long <unk> , int infoType ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( <unk> ) , new java . lang . Integer ( infoType ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int countryCode , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( countryCode ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int countryCode , java . lang . String <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( countryCode ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int <unk> , int <unk> , int offset , int <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( offset ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( int countryCode , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( countryCode ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public long <unk> ( int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Long ) <unk> ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> , long . class ) ) . longValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public long [ ] <unk> ( java . lang . String <unk> , long [ ] <unk> , java . lang . String <unk> , long [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> , <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( long [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( long [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , long [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( int <unk> , java . lang . String userLogin , java . lang . String <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( <unk> ) , userLogin , <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int userId , java . lang . String <unk> , int <unk> , int offset , int limit , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( userId ) , <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( offset ) , new java . lang . Integer ( limit ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public float <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Float ) <unk> ) . floatValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Float ) org . apache . axis . utils . <unk> . convert ( <unk> , float . class ) ) . floatValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public java . lang . String <unk> ( int <unk> , int userId , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( <unk> ) , new java . lang . Integer ( userId ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( java . lang . String ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , int offset , int packageSize ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( offset ) , new java . lang . Integer ( packageSize ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( java . lang . String <unk> , long userId , long <unk> , java . lang . String actionType , long <unk> , long <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( userId ) , new java . lang . Long ( <unk> ) , actionType , new java . lang . Long ( <unk> ) , new java . lang . Long ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( java . lang . String <unk> , int userId , int <unk> , java . lang . String [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( userId ) , new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String userLogin , java . lang . String userPassword , int countryCode , java . lang . String <unk> , long <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> userId , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { userLogin , userPassword , new java . lang . Integer ( countryCode ) , <unk> , new java . lang . Long ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
userId . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
userId . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String userLogin , java . lang . String <unk> , int countryCode , java . lang . String <unk> , long <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> userId , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { userLogin , <unk> , new java . lang . Integer ( countryCode ) , <unk> , new java . lang . Long ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
userId . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
userId . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public float <unk> ( java . lang . String <unk> , long <unk> , float <unk> , float <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( <unk> ) , new java . lang . Float ( <unk> ) , new java . lang . Float ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Float ) <unk> ) . floatValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Float ) org . apache . axis . utils . <unk> . convert ( <unk> , float . class ) ) . floatValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , java . lang . String accountType , int offset , long [ ] <unk> , int limit ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , accountType , new java . lang . Integer ( offset ) , <unk> , new java . lang . Integer ( limit ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( java . lang . String <unk> , java . lang . String accountType , long [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , accountType , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public java . lang . String <unk> ( java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( java . lang . String ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , long itemId , java . lang . String option , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( itemId ) , option } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long [ ] <unk> , int offset , int desc ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> , new java . lang . Integer ( offset ) , new java . lang . Integer ( desc ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , java . lang . String <unk> , int offset , int desc , long [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> , new java . lang . Integer ( offset ) , new java . lang . Integer ( desc ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , java . lang . String <unk> , int offset , int desc , long [ ] <unk> , int <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> , new java . lang . Integer ( offset ) , new java . lang . Integer ( desc ) , <unk> , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] fields , int <unk> , int <unk> , javax . xml . rpc . <unk> . <unk> itemId , javax . xml . rpc . <unk> . <unk> itemInfo ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , fields , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
itemId . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
itemId . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
itemInfo . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
itemInfo . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] fields , int <unk> , int <unk> , com . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> itemId , javax . xml . rpc . <unk> . <unk> itemInfo , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , fields , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
itemId . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
itemId . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
itemInfo . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
itemInfo . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( int <unk> , int <unk> , java . lang . String <unk> , javax . xml . rpc . <unk> . <unk> info , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
info . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
info . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , long [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , int [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( java . lang . String <unk> , long <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( java . lang . String <unk> , long transactionId , float <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( transactionId ) , new java . lang . Float ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void doSearch ( java . lang . String <unk> , com . <unk> . <unk> . <unk> searchQuery , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , searchQuery } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( java . lang . String [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , long [ ] <unk> , long <unk> , int <unk> , int <unk> , int [ ] <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> , new java . lang . Long ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( long [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( long [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , long [ ] <unk> , long <unk> , int <unk> , int <unk> , int <unk> , long <unk> , int [ ] <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> , new java . lang . Long ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Long ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( long [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( long [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public java . lang . String <unk> ( java . lang . String <unk> , long <unk> , javax . xml . rpc . <unk> . <unk> <unk> , int <unk> , int <unk> , java . lang . String <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( <unk> ) , new java . lang . Long ( <unk> . value ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
return ( java . lang . String ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> <unk> ( java . lang . String sessionId , com . <unk> . <unk> . <unk> [ ] <unk> , com . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { sessionId , <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( java . lang . String <unk> , com . <unk> . <unk> . <unk> [ ] <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( com . <unk> . <unk> . <unk> [ ] ) <unk> ;
} catch ( java . lang . Exception <unk> ) {
return ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public int <unk> ( java . lang . String <unk> , java . lang . String <unk> , int <unk> , float <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Float ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
try {
return ( ( java . lang . Integer ) <unk> ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
return ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , int <unk> , int <unk> , int <unk> , com . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> [ ] <unk> , int <unk> , com . <unk> . <unk> . <unk> <unk> , int <unk> , int <unk> , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , <unk> , <unk> , new java . lang . Integer ( <unk> ) , <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , long itemId , int <unk> , int getImageUrl , int <unk> , int <unk> , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( itemId ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( getImageUrl ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . ItemInfo ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . ItemInfo ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . ItemInfo . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , long itemId , int <unk> , int getImageUrl , int <unk> , int <unk> , int <unk> , int <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Long ( itemId ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( getImageUrl ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , int <unk> , javax . xml . rpc . <unk> . <unk> userId , javax . xml . rpc . <unk> . <unk> userLogin , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , com . <unk> . <unk> . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Long ( userId . value ) , userLogin . value } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
userId . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
userId . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
userLogin . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
userLogin . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> . class ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( com . <unk> . <unk> . <unk> [ ] ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , com . <unk> . <unk> . <unk> [ ] . class ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , int <unk> , long userId , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( <unk> ) , new java . lang . Long ( userId ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
try {
<unk> . value = ( java . lang . String ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( java . lang . String ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , java . lang . String . class ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
public void <unk> ( java . lang . String <unk> , int <unk> , javax . xml . rpc . <unk> . <unk> itemId , javax . xml . rpc . <unk> . <unk> <unk> , javax . xml . rpc . <unk> . <unk> <unk> ) throws java . rmi . RemoteException {
if ( super . <unk> == null ) {
throw new org . apache . axis . <unk> ( ) ;
}
org . apache . axis . client . <unk> <unk> = <unk> ( ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( true ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( org . apache . axis . soap . <unk> . <unk> ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
try { java . lang . Object <unk> = <unk> . invoke ( new java . lang . Object [ ] { <unk> , new java . lang . Integer ( <unk> ) } ) ;
if ( <unk> instanceof java . rmi . RemoteException ) {
throw ( java . rmi . RemoteException ) <unk> ;
}
else {
<unk> ( <unk> ) ;
java . util . Map <unk> ;
<unk> = <unk> . <unk> ( ) ;
try {
itemId . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
itemId . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Integer ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . intValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Integer ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , int . class ) ) . intValue ( ) ;
}
try {
<unk> . value = ( ( java . lang . Long ) <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) ) . longValue ( ) ;
} catch ( java . lang . Exception <unk> ) {
<unk> . value = ( ( java . lang . Long ) org . apache . axis . utils . <unk> . convert ( <unk> . get ( new javax . xml . namespace . QName ( " , " ) ) , long . class ) ) . longValue ( ) ;
}
}
} catch ( org . apache . axis . <unk> <unk> ) {
throw <unk> ;
}
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private long <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
long <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
long <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
long <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int userId ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int userId ,
java . lang . String <unk> ) {
this . userId = userId ;
this . <unk> = <unk> ;
}
public int getUserId ( ) {
return userId ;
}
public void setUserId ( int userId ) {
this . userId = userId ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . userId == other . getUserId ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += getUserId ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long rowId ;
private long itemId ;
private java . lang . String <unk> ;
private long <unk> ;
private float <unk> ;
private long <unk> ;
public <unk> ( ) {
}
public <unk> (
long rowId ,
long itemId ,
java . lang . String <unk> ,
long <unk> ,
float <unk> ,
long <unk> ) {
this . rowId = rowId ;
this . itemId = itemId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getRowId ( ) {
return rowId ;
}
public void <unk> ( long rowId ) {
this . rowId = rowId ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . rowId == other . getRowId ( ) &&
this . itemId == other . getItemId ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getRowId ( ) ) . hashCode ( ) ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String itemTitle ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String itemTitle ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . itemTitle = itemTitle ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return itemTitle ;
}
public void <unk> ( java . lang . String itemTitle ) {
this . itemTitle = itemTitle ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . itemTitle == null && other . <unk> ( ) == null ) ||
( this . itemTitle != null &&
this . itemTitle . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public java . lang . String [ ] value ;
public <unk> ( ) {
}
public <unk> ( java . lang . String [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private float <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
float <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String siteName ;
private java . lang . String siteUrl ;
private int <unk> ;
private java . lang . String <unk> ;
private byte [ ] <unk> ;
private byte [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String siteName ,
java . lang . String siteUrl ,
int <unk> ,
java . lang . String <unk> ,
byte [ ] <unk> ,
byte [ ] <unk> ) {
this . siteName = siteName ;
this . siteUrl = siteUrl ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String getSiteName ( ) {
return siteName ;
}
public void <unk> ( java . lang . String siteName ) {
this . siteName = siteName ;
}
public java . lang . String getSiteUrl ( ) {
return siteUrl ;
}
public void <unk> ( java . lang . String siteUrl ) {
this . siteUrl = siteUrl ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public byte [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( byte [ ] <unk> ) {
this . <unk> = <unk> ;
}
public byte [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( byte [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . siteName == null && other . getSiteName ( ) == null ) ||
( this . siteName != null &&
this . siteName . equals ( other . getSiteName ( ) ) ) ) &&
( ( this . siteUrl == null && other . getSiteUrl ( ) == null ) ||
( this . siteUrl != null &&
this . siteUrl . equals ( other . getSiteUrl ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( getSiteName ( ) != null ) {
_hashCode += getSiteName ( ) . hashCode ( ) ;
}
if ( getSiteUrl ( ) != null ) {
_hashCode += getSiteUrl ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private long <unk> ;
private int <unk> ;
private float <unk> ;
private java . lang . String <unk> ;
private long <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
long <unk> ,
int <unk> ,
float <unk> ,
java . lang . String <unk> ,
long <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private float <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
float <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
long <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private long <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
long <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private com . <unk> . <unk> . ItemInfo itemInfo ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
public <unk> ( ) {
}
public <unk> (
com . <unk> . <unk> . ItemInfo itemInfo ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
com . <unk> . <unk> . <unk> <unk> ) {
this . itemInfo = itemInfo ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . ItemInfo getItemInfo ( ) {
return itemInfo ;
}
public void <unk> ( com . <unk> . <unk> . ItemInfo itemInfo ) {
this . itemInfo = itemInfo ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . itemInfo == null && other . getItemInfo ( ) == null ) ||
( this . itemInfo != null &&
this . itemInfo . equals ( other . getItemInfo ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( getItemInfo ( ) != null ) {
_hashCode += getItemInfo ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int categoryId ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int categoryId ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ) {
this . categoryId = categoryId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return categoryId ;
}
public void <unk> ( int categoryId ) {
this . categoryId = categoryId ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . categoryId == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int userId ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int userId ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . userId = userId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int getUserId ( ) {
return userId ;
}
public void setUserId ( int userId ) {
this . userId = userId ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . userId == other . getUserId ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += getUserId ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
int <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private int <unk> ;
private long <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private long <unk> ;
private float <unk> ;
private int <unk> ;
private int <unk> ;
private float <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private float <unk> ;
private float <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
int <unk> ,
java . lang . String <unk> ,
float <unk> ,
int <unk> ,
long <unk> ,
long <unk> ,
java . lang . String <unk> ,
int <unk> ,
long <unk> ,
float <unk> ,
int <unk> ,
int <unk> ,
float <unk> ,
java . lang . String <unk> ,
float <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
float <unk> ,
float <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
java . lang . String <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private float <unk> ;
private float <unk> ;
public <unk> ( ) {
}
public <unk> (
float <unk> ,
float <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private float <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
float <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ) {
this . itemId = itemId ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String itemTitle ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String itemTitle ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . itemTitle = itemTitle ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return itemTitle ;
}
public void <unk> ( java . lang . String itemTitle ) {
this . itemTitle = itemTitle ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . itemTitle == null && other . <unk> ( ) == null ) ||
( this . itemTitle != null &&
this . itemTitle . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private float <unk> ;
private long <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
float <unk> ,
long <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private java . lang . String <unk> ;
private float <unk> ;
public <unk> ( ) {
}
public <unk> (
java . lang . String <unk> ,
float <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public long [ ] value ;
public <unk> ( ) {
}
public <unk> ( long [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String messageContent ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String messageContent ) {
this . <unk> = <unk> ;
this . messageContent = messageContent ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return messageContent ;
}
public void <unk> ( java . lang . String messageContent ) {
this . messageContent = messageContent ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . messageContent == null && other . <unk> ( ) == null ) ||
( this . messageContent != null &&
this . messageContent . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String itemTitle ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String itemTitle ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . itemTitle = itemTitle ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return itemTitle ;
}
public void <unk> ( java . lang . String itemTitle ) {
this . itemTitle = itemTitle ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . itemTitle == null && other . <unk> ( ) == null ) ||
( this . itemTitle != null &&
this . itemTitle . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private java . lang . String <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
java . lang . String <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long itemId ;
private java . lang . String itemTitle ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private long <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long itemId ,
java . lang . String itemTitle ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
long <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
int <unk> ,
int <unk> ,
int <unk> ,
java . lang . String <unk> ,
int <unk> ,
int <unk> ,
long <unk> ,
int <unk> ) {
this . itemId = itemId ;
this . itemTitle = itemTitle ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long getItemId ( ) {
return itemId ;
}
public void setItemId ( long itemId ) {
this . itemId = itemId ;
}
public java . lang . String <unk> ( ) {
return itemTitle ;
}
public void <unk> ( java . lang . String itemTitle ) {
this . itemTitle = itemTitle ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . itemId == other . getItemId ( ) &&
( ( this . itemTitle == null && other . <unk> ( ) == null ) ||
( this . itemTitle != null &&
this . itemTitle . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( getItemId ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private byte [ ] <unk> ;
private byte [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
byte [ ] <unk> ,
byte [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public byte [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( byte [ ] <unk> ) {
this . <unk> = <unk> ;
}
public byte [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( byte [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private int <unk> ;
private long <unk> ;
private long <unk> ;
private long <unk> ;
private int <unk> ;
private long <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
int <unk> ,
long <unk> ,
long <unk> ,
long <unk> ,
int <unk> ,
long <unk> ,
int <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private long <unk> ;
private float <unk> ;
private float <unk> ;
private int <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private java . lang . String <unk> ;
private long <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private java . lang . String <unk> ;
private int <unk> ;
private com . <unk> . <unk> . <unk> <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
private long [ ] <unk> ;
private java . lang . String <unk> ;
private float <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
long <unk> ,
float <unk> ,
float <unk> ,
int <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
java . lang . String <unk> ,
long <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
java . lang . String <unk> ,
int <unk> ,
com . <unk> . <unk> . <unk> <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ,
long [ ] <unk> ,
java . lang . String <unk> ,
float <unk> ,
int <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public long [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( long [ ] <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public float <unk> ( ) {
return <unk> ;
}
public void <unk> ( float <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += new Float ( <unk> ( ) ) . hashCode ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> [ ] value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> [ ] value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int userId ;
private java . lang . String userLogin ;
private int <unk> ;
private int <unk> ;
private int <unk> ;
public <unk> ( ) {
}
public <unk> (
int userId ,
java . lang . String userLogin ,
int <unk> ,
int <unk> ,
int <unk> ) {
this . userId = userId ;
this . userLogin = userLogin ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int getUserId ( ) {
return userId ;
}
public void setUserId ( int userId ) {
this . userId = userId ;
}
public java . lang . String <unk> ( ) {
return userLogin ;
}
public void <unk> ( java . lang . String userLogin ) {
this . userLogin = userLogin ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . userId == other . getUserId ( ) &&
( ( this . userLogin == null && other . <unk> ( ) == null ) ||
( this . userLogin != null &&
this . userLogin . equals ( other . <unk> ( ) ) ) ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) &&
this . <unk> == other . <unk> ( ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += getUserId ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
_hashCode += <unk> ( ) ;
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private long <unk> ;
private java . lang . String productName ;
private java . lang . String <unk> ;
private java . lang . String [ ] <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
long <unk> ,
java . lang . String productName ,
java . lang . String <unk> ,
java . lang . String [ ] <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
this . productName = productName ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String getProductName ( ) {
return productName ;
}
public void setProductName ( java . lang . String productName ) {
this . productName = productName ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String [ ] <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . productName == null && other . getProductName ( ) == null ) ||
( this . productName != null &&
this . productName . equals ( other . getProductName ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += new Long ( <unk> ( ) ) . hashCode ( ) ;
if ( getProductName ( ) != null ) {
_hashCode += getProductName ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package com . <unk> . <unk> . <unk> ;
public final class <unk> implements javax . xml . rpc . <unk> . Holder {
public com . <unk> . <unk> . <unk> value ;
public <unk> ( ) {
}
public <unk> ( com . <unk> . <unk> . <unk> value ) {
this . value = value ;
}
}
package com . <unk> . <unk> ;
public class <unk> implements java . io . Serializable {
private int <unk> ;
private java . lang . String <unk> ;
private com . <unk> . <unk> . <unk> [ ] <unk> ;
public <unk> ( ) {
}
public <unk> (
int <unk> ,
java . lang . String <unk> ,
com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public java . lang . String <unk> ( ) {
return <unk> ;
}
public void <unk> ( java . lang . String <unk> ) {
this . <unk> = <unk> ;
}
public com . <unk> . <unk> . <unk> [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( com . <unk> . <unk> . <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
private java . lang . Object <unk> = null ;
public synchronized boolean equals ( java . lang . Object obj ) {
if ( ! ( obj instanceof <unk> ) ) return false ;
<unk> other = ( <unk> ) obj ;
if ( obj == null ) return false ;
if ( this == obj ) return true ;
if ( <unk> != null ) {
return ( <unk> == obj ) ;
}
<unk> = obj ;
boolean _equals ;
_equals = true &&
this . <unk> == other . <unk> ( ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
this . <unk> . equals ( other . <unk> ( ) ) ) ) &&
( ( this . <unk> == null && other . <unk> ( ) == null ) ||
( this . <unk> != null &&
java . util . Arrays . equals ( this . <unk> , other . <unk> ( ) ) ) ) ;
<unk> = null ;
return _equals ;
}
private boolean <unk> = false ;
public synchronized int hashCode ( ) {
if ( <unk> ) {
return <num> ;
}
<unk> = true ;
int _hashCode = <num> ;
_hashCode += <unk> ( ) ;
if ( <unk> ( ) != null ) {
_hashCode += <unk> ( ) . hashCode ( ) ;
}
if ( <unk> ( ) != null ) {
for ( int i = <num> ;
i < java . lang . reflect . Array . getLength ( <unk> ( ) ) ;
i ++ ) {
java . lang . Object obj = java . lang . reflect . Array . get ( <unk> ( ) , i ) ;
if ( obj != null &&
! obj . getClass ( ) . isArray ( ) ) {
_hashCode += obj . hashCode ( ) ;
}
}
}
<unk> = false ;
return _hashCode ;
}
private static org . apache . axis . description . <unk> <unk> =
new org . apache . axis . description . <unk> ( <unk> . class , true ) ;
static {
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
org . apache . axis . description . <unk> <unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
<unk> = new org . apache . axis . description . <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( new javax . xml . namespace . QName ( " , " ) ) ;
<unk> . <unk> ( false ) ;
<unk> . <unk> ( <unk> ) ;
}
public static org . apache . axis . description . <unk> <unk> ( ) {
return <unk> ;
}
public static org . apache . axis . encoding . Serializer getSerializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
public static org . apache . axis . encoding . Deserializer getDeserializer (
java . lang . String <unk> ,
java . lang . Class <unk> ,
javax . xml . namespace . QName <unk> ) {
return
new org . apache . axis . encoding . <unk> . <unk> (
<unk> , <unk> , <unk> ) ;
}
}
package no . <unk> . <unk> . <unk> ;
public class Constants
{
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String <unk> = " ;
public static String FAIL = " ;
}
package no . <unk> . <unk> . <unk> ;
public interface <unk>
{
public String <unk> ( String propertyName ) throws <unk> ;
}
package no . <unk> . <unk> . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import java . util . ArrayList ;
import java . util . List ;
public class <unk>
{
private String <unk> = null ;
private String <unk> = null ;
private String <unk> = null ;
private <unk> <unk> = null ;
private <unk> <unk> = null ;
public <unk> ( ) { }
public <unk> ( String <unk> , String <unk> ,
String <unk> , <unk> <unk> ,
<unk> <unk> )
{
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public <unk> <unk> ( )
{
return <unk> ;
}
public void <unk> ( <unk> <unk> )
{
this . <unk> = <unk> ;
}
public <unk> <unk> ( )
{
return <unk> ;
}
public void <unk> ( <unk> <unk> )
{
this . <unk> = <unk> ;
}
public List < <unk> > <unk> ( )
throws <unk> , <unk> , <unk> , <unk>
{
if ( this . <unk> == null && this . <unk> == null )
{
throw new <unk> ( " ) ;
}
if ( this . <unk> == null )
{
this . <unk> = this . <unk> ( ) ;
}
List < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
List < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
try
{
<unk> client = new <unk> ( ) ;
<unk> sd = client . <unk> ( this . <unk> , this . <unk> ) ;
if ( sd == null )
{
throw new <unk> ( " ) ;
}
for ( <unk> workspace : sd . <unk> ( ) )
{
<unk> . addAll ( workspace . <unk> ( ) ) ;
for ( <unk> collection : workspace . <unk> ( ) )
{
if ( this . <unk> != null && collection . <unk> ( ) . toString ( ) . equals ( this . <unk> ) )
{
<unk> . add ( collection ) ;
return <unk> ;
}
}
}
}
catch ( <unk> e )
{
throw new <unk> ( e ) ;
}
return <unk> ;
}
private String <unk> ( )
throws <unk> , <unk>
{
if ( this . <unk> == null )
{
throw new <unk> ( " ) ;
}
if ( this . <unk> == null )
{
throw new <unk> ( " ) ;
}
String t = this . <unk> ;
while ( true )
{
int a = t . indexOf ( " ) ;
if ( a ==  <num> ) { break ; }
int b = t . indexOf ( " , a + <num> ) ;
if ( b ==  <num> )
{
throw new <unk> ( " ) ;
}
String key = t . substring ( a + <num> , b ) ;
String substitute = " ;
if ( ! " . equals ( key ) )
{
substitute = this . <unk> . <unk> ( key ) ;
}
t = t . substring ( <num> , a ) + substitute + t . substring ( b + <num> ) ;
}
return t ;
}
}
package no . <unk> . <unk> . <unk> ;
public class <unk> extends <unk>
{
public <unk> ( )
{
super ( ) ;
}
public <unk> ( String message )
{
super ( message ) ;
}
public <unk> ( String message , Throwable cause )
{
super ( message , cause ) ;
}
public <unk> ( Throwable cause )
{
super ( cause ) ;
}
}
package no . <unk> . <unk> . <unk> ;
import no . <unk> . <unk> . <unk> . Metadata ;
import nu . <unk> . Builder ;
import nu . <unk> . Document ;
import nu . <unk> . ParsingException ;
import org . apache . <unk> . model . Element ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . Content ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . ServerResource ;
import org . <unk> . client . Statement ;
import org . <unk> . client . <unk> ;
import javax . xml . namespace . QName ;
import java . io . ByteArrayInputStream ;
import java . io . IOException ;
import java . io . StringWriter ;
import java . util . List ;
public class <unk>
{
private <unk> client = new <unk> ( ) ;
private String <unk> = null ;
private <unk> auth = null ;
private <unk> <unk> = null ;
private Statement statement = null ;
public <unk> ( String <unk> , <unk> auth )
{
this . <unk> = <unk> ;
this . auth = auth ;
}
public <unk> <unk> ( )
throws <unk> , <unk>
{
try
{
if ( this . <unk> == null )
{
<unk> <unk> = this . client . <unk> ( this . <unk> , this . auth ) ;
if ( <unk> . getStatusCode ( ) == <num> )
{
this . <unk> = <unk> ;
}
else
{
throw new <unk> ( <unk> . getStatusCode ( ) , <unk> . getEntry ( ) . toString ( ) ) ;
}
}
return this . <unk> ;
}
catch ( <unk> e )
{
throw new <unk> ( e ) ;
}
}
public Statement getStatement ( )
throws <unk> , <unk> , <unk>
{
try
{
if ( this . statement == null )
{
<unk> <unk> = this . <unk> ( ) ;
Statement statement = this . client . getStatement ( <unk> , " , this . auth ) ;
this . statement = statement ;
}
return this . statement ;
}
catch ( <unk> e )
{
throw new <unk> ( e ) ;
}
}
public List < ServerResource > getFiles ( )
throws <unk> , <unk> , <unk>
{
Statement statement = this . getStatement ( ) ;
List < ServerResource > resources = statement . getParts ( ) ;
return resources ;
}
public Content getFile ( String url )
throws <unk> , <unk>
{
try
{
return this . client . getContent ( url , null , null , this . auth ) ;
}
catch ( <unk> e )
{
throw new <unk> ( e ) ;
}
}
public Metadata getMetadata ( )
throws <unk> , <unk>
{
try
{
<unk> <unk> = this . <unk> ( ) ;
Element <unk> = <unk> . getEntry ( ) . getExtension ( new QName ( Constants . <unk> , Constants . <unk> ) ) ;
StringWriter writer = new StringWriter ( ) ;
<unk> . writeTo ( writer ) ;
Builder parser = new Builder ( ) ;
Document doc = parser . build ( new ByteArrayInputStream ( writer . toString ( ) . getBytes ( " ) ) ) ;
nu . <unk> . Element root = doc . getRootElement ( ) ;
nu . <unk> . Element clone = ( nu . <unk> . Element ) root . copy ( ) ;
Metadata metadata = new Metadata ( clone ) ;
return metadata ;
}
catch ( IOException e )
{
throw new <unk> ( e ) ;
}
catch ( ParsingException e )
{
throw new <unk> ( e ) ;
}
}
}
package no . <unk> . <unk> . <unk> ;
public class <unk> extends <unk>
{
public <unk> ( )
{
super ( ) ;
}
public <unk> ( String message )
{
super ( message ) ;
}
public <unk> ( String message , Throwable cause )
{
super ( message , cause ) ;
}
public <unk> ( Throwable cause )
{
super ( cause ) ;
}
}
package no . <unk> . <unk> . <unk> ;
public class <unk> implements <unk>
{
public String <unk> ( String propertyName ) throws <unk>
{
if ( " . equals ( propertyName ) )
{
return " ;
}
else if ( " . equals ( propertyName ) )
{
return " ;
}
throw new <unk> ( " + propertyName ) ;
}
}
package no . <unk> . <unk> . <unk> ;
public class <unk> extends Exception
{
public <unk> ( )
{
super ( ) ;
}
public <unk> ( String message )
{
super ( message ) ;
}
public <unk> ( String message , Throwable cause )
{
super ( message , cause ) ;
}
public <unk> ( Throwable cause )
{
super ( cause ) ;
}
}
package no . <unk> . <unk> . <unk> ;
import no . <unk> . <unk> . <unk> . <unk> ;
import no . <unk> . <unk> . <unk> . Metadata ;
import org . apache . <unk> . model . Element ;
import org . junit . Test ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . Content ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . ServerResource ;
import org . <unk> . client . Statement ;
import org . <unk> . client . <unk> ;
import java . io . File ;
import java . text . SimpleDateFormat ;
import java . util . Date ;
import java . util . List ;
public class <unk>
{
private String <unk> = " ;
private <unk> <unk> = new <unk> ( " , " ) ;
private String <unk> = " ;
private String <unk> = " ;
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
File <unk> = new File ( <unk> ) ;
<unk> bi = new <unk> ( <unk> ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String metadata = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( metadata ) ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
System . out . print ( out . getAbsolutePath ( ) ) ;
}
@Test
public void create ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String metadata = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , " , <num> ) ;
bi . <unk> ( new File ( <unk> ) , " , <num> ) ;
bi . <unk> ( new File ( <unk> ) , " , <num> ) ;
bi . <unk> ( new File ( <unk> ) , " , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , " , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , " , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , " , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , " , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , " , <num> , " ) ;
bi . <unk> ( new File ( metadata ) ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
}
@Test
public void update ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String metadata = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( metadata ) ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
String location = <unk> . getLocation ( ) ;
<unk> update = new <unk> ( out ) ;
update . <unk> ( new File ( <unk> ) , <num> ) ;
update . <unk> ( new File ( <unk> ) , <num> ) ;
update . <unk> ( new File ( <unk> ) , <num> ) ;
update . <unk> ( new File ( <unk> ) , <num> ) ;
update . <unk> ( new File ( <unk> ) , <num> , " ) ;
update . <unk> ( new File ( <unk> ) , <num> , " ) ;
update . <unk> ( new File ( <unk> ) , <num> , " ) ;
update . <unk> ( new File ( <unk> ) , <num> , " ) ;
update . <unk> ( new File ( <unk> ) , <num> , " ) ;
update . <unk> ( new File ( metadata ) ) ;
update . <unk> ( new File ( <unk> ) ) ;
update . writeToFile ( ) ;
<unk> response = <unk> . update ( location , this . <unk> , update ) ;
System . out . println ( response . getLocation ( ) ) ;
out . delete ( ) ;
}
@Test
public void delete ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String metadata = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( metadata ) ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
<unk> response = <unk> . delete ( <unk> . getLocation ( ) , this . <unk> ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String metadata = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( metadata ) ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
<unk> response = <unk> . <unk> ( <unk> . getLocation ( ) , this . <unk> , " ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String metadata = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( metadata ) ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
<unk> response = <unk> . <unk> ( <unk> . getLocation ( ) , this . <unk> , " , null , null ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String metadata = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( metadata ) ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
Date <unk> = new Date ( ( new Date ( ) ) . getTime ( ) + <num> ) ;
<unk> response = <unk> . <unk> ( <unk> . getLocation ( ) , this . <unk> , " , <unk> , " ) ;
<unk> ri = new <unk> ( <unk> . getLocation ( ) , this . <unk> ) ;
<unk> nr = ri . <unk> ( ) ;
List < Element > extensions = nr . getEntry ( ) . <unk> ( ) ;
Metadata md = ri . getMetadata ( ) ;
List < String > <unk> = md . getField ( Metadata . <unk> ) ;
assert <unk> . size ( ) == <num> ;
assert <unk> . get ( <num> ) . equals ( " ) ;
SimpleDateFormat sdf = new SimpleDateFormat ( " ) ;
String <unk> = sdf . format ( <unk> ) ;
List < String > <unk> = md . getField ( Metadata . <unk> ) ;
assert <unk> . size ( ) == <num> ;
assert <unk> . get ( <num> ) . equals ( <unk> ) ;
List < String > <unk> = md . getField ( Metadata . <unk> ) ;
assert <unk> . size ( ) == <num> ;
assert <unk> . get ( <num> ) . equals ( " ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String metadata = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( metadata ) ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
Date <unk> = new Date ( ( new Date ( ) ) . getTime ( ) + <num> ) ;
<unk> response = <unk> . <unk> ( <unk> . getLocation ( ) , this . <unk> , <unk> , " ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String metadata = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( metadata ) ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
Date <unk> = new Date ( ( new Date ( ) ) . getTime ( ) + <num> ) ;
<unk> response = <unk> . <unk> ( <unk> . getLocation ( ) , this . <unk> , " , <unk> , " ) ;
}
@Test
public void getMetadata ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
Metadata metadata = new Metadata ( ) ;
metadata . addField ( Metadata . NAME , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . UID , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . EMAIL , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . <unk> ( " , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . TITLE , " ) ;
metadata . addField ( Metadata . TITLE , " , " ) ;
metadata . addField ( Metadata . LANGUAGE , " ) ;
metadata . addField ( Metadata . <unk> , " +
" , " ) ;
metadata . addField ( Metadata . <unk> , " +
" +
" ) ;
metadata . addField ( Metadata . TYPE , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . addMetadata ( metadata ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
<unk> item = new <unk> ( <unk> . getLocation ( ) , this . <unk> ) ;
<unk> entry = item . <unk> ( ) ;
Metadata md = item . getMetadata ( ) ;
System . out . println ( md . toXML ( ) ) ;
}
@Test
public void getFiles ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
Metadata metadata = new Metadata ( ) ;
metadata . addField ( Metadata . NAME , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . UID , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . EMAIL , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . <unk> ( " , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . TITLE , " ) ;
metadata . addField ( Metadata . TITLE , " , " ) ;
metadata . addField ( Metadata . LANGUAGE , " ) ;
metadata . addField ( Metadata . <unk> , " +
" , " ) ;
metadata . addField ( Metadata . <unk> , " +
" +
" ) ;
metadata . addField ( Metadata . TYPE , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . addMetadata ( metadata ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
<unk> item = new <unk> ( <unk> . getLocation ( ) , this . <unk> ) ;
Statement statement = item . getStatement ( ) ;
List < ServerResource > files = item . getFiles ( ) ;
for ( ServerResource file : files )
{
System . out . println ( file . getUri ( ) ) ;
}
}
@Test
public void getFile ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
Metadata metadata = new Metadata ( ) ;
metadata . addField ( Metadata . NAME , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . UID , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . EMAIL , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . <unk> ( " , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . TITLE , " ) ;
metadata . addField ( Metadata . TITLE , " , " ) ;
metadata . addField ( Metadata . LANGUAGE , " ) ;
metadata . addField ( Metadata . <unk> , " +
" , " ) ;
metadata . addField ( Metadata . <unk> , " +
" +
" ) ;
metadata . addField ( Metadata . TYPE , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
metadata . addField ( Metadata . <unk> , " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . addMetadata ( metadata ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
<unk> item = new <unk> ( <unk> . getLocation ( ) , this . <unk> ) ;
List < ServerResource > files = item . getFiles ( ) ;
for ( ServerResource file : files )
{
System . out . println ( file . getUri ( ) ) ;
Content content = item . getFile ( file . getUri ( ) . toString ( ) ) ;
assert content . getInputStream ( ) != null ;
}
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> ( this . <unk> , null , null , null , this . <unk> ) ;
List < <unk> > cols = ed . <unk> ( ) ;
<unk> col = cols . get ( <num> ) ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String <unk> = <unk> + " ;
String metadata = <unk> + " ;
String <unk> = <unk> + " ;
File out = new File ( System . getProperty ( " ) + File . separator + " ) ;
<unk> bi = new <unk> ( out ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( <unk> ) , <num> , " ) ;
bi . <unk> ( new File ( metadata ) ) ;
bi . <unk> ( new File ( <unk> ) ) ;
bi . writeToFile ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = <unk> . create ( col . <unk> ( ) . toString ( ) , this . <unk> , bi ) ;
System . out . println ( <unk> . getLocation ( ) ) ;
out . delete ( ) ;
Date <unk> = new Date ( ( new Date ( ) ) . getTime ( ) + <num> ) ;
<unk> response = <unk> . <unk> ( <unk> . getLocation ( ) , this . <unk> , " , <unk> , " ) ;
<unk> = new Date ( ( new Date ( ) ) . getTime ( ) + <num> ) ;
response = <unk> . <unk> ( <unk> . getLocation ( ) , this . <unk> , " , <unk> , " ) ;
}
}
package no . <unk> . <unk> . <unk> ;
import org . junit . * ;
import org . <unk> . client . <unk> ;
import java . lang . reflect . InvocationTargetException ;
import java . lang . reflect . Method ;
import static org . junit . Assert . * ;
public class <unk>
{
private String <unk> = null ;
private String <unk> = null ;
private String <unk> = null ;
private <unk> <unk> = null ;
private <unk> <unk> = null ;
private String <unk> = null ;
private String <unk> = null ;
private String <unk> = null ;
private String <unk> = null ;
private String <unk> = null ;
private String <unk> = null ;
@Before
public void setUp ( )
throws Exception
{
this . <unk> = " ;
this . <unk> = " ;
this . <unk> = " ;
this . <unk> = new <unk> ( ) ;
this . <unk> = new <unk> ( " , " ) ;
this . <unk> = " ;
this . <unk> = " ;
this . <unk> = " ;
this . <unk> = " ;
this . <unk> = " ;
this . <unk> = " ;
}
@Test
public void <unk> ( )
{
<unk> ed = new <unk> ( ) ;
assertNull ( ed . <unk> ( ) ) ;
assertNull ( ed . <unk> ( ) ) ;
assertNull ( ed . <unk> ( ) ) ;
assertNull ( ed . <unk> ( ) ) ;
assertNull ( ed . <unk> ( ) ) ;
<unk> <unk> = new <unk> (
this . <unk> , this . <unk> ,
this . <unk> , this . <unk> ,
this . <unk>
) ;
assertEquals ( this . <unk> , <unk> . <unk> ( ) ) ;
assertEquals ( this . <unk> , <unk> . <unk> ( ) ) ;
assertEquals ( this . <unk> , <unk> . <unk> ( ) ) ;
assertEquals ( this . <unk> , <unk> . <unk> ( ) ) ;
assertEquals ( this . <unk> , <unk> . <unk> ( ) ) ;
}
@Test
public void <unk> ( )
throws Exception
{
Method method = <unk> . class . getDeclaredMethod ( " , new Class [ <num> ] ) ;
method . setAccessible ( true ) ;
<unk> ed = new <unk> ( null , this . <unk> , null , this . <unk> , null ) ;
String newUrl = ( String ) method . invoke ( ed , new Class [ <num> ] ) ;
assertEquals ( this . <unk> , newUrl ) ;
<unk> <unk> = new <unk> ( null , this . <unk> , null , this . <unk> , null ) ;
newUrl = ( String ) method . invoke ( <unk> , new Class [ <num> ] ) ;
assertEquals ( this . <unk> , newUrl ) ;
}
@Test
public void <unk> ( )
throws Exception
{
Method method = <unk> . class . getDeclaredMethod ( " , new Class [ <num> ] ) ;
method . setAccessible ( true ) ;
<unk> <unk> = new <unk> ( ) ;
boolean <unk> = false ;
try
{
method . invoke ( <unk> , new Class [ <num> ] ) ;
}
catch ( InvocationTargetException e )
{
assertTrue ( e . <unk> ( ) instanceof <unk> ) ;
<unk> = true ;
}
assertTrue ( <unk> ) ;
<unk> <unk> = new <unk> ( null , null , null , this . <unk> , null ) ;
<unk> = false ;
try
{
method . invoke ( <unk> , new Class [ <num> ] ) ;
}
catch ( InvocationTargetException e )
{
assertTrue ( e . <unk> ( ) instanceof <unk> ) ;
<unk> = true ;
}
assertTrue ( <unk> ) ;
<unk> <unk> = new <unk> ( null , this . <unk> , null , this . <unk> , null ) ;
<unk> = false ;
try
{
method . invoke ( <unk> , new Class [ <num> ] ) ;
}
catch ( InvocationTargetException e )
{
assertTrue ( e . <unk> ( ) instanceof <unk> ) ;
<unk> = true ;
}
assertTrue ( <unk> ) ;
<unk> <unk> = new <unk> ( null , this . <unk> , null , this . <unk> , null ) ;
String newUrl = ( String ) method . invoke ( <unk> , new Class [ <num> ] ) ;
assertEquals ( this . <unk> , newUrl ) ;
<unk> <unk> = new <unk> ( null , this . <unk> , null , this . <unk> , null ) ;
newUrl = ( String ) method . invoke ( <unk> , new Class [ <num> ] ) ;
assertEquals ( this . <unk> , newUrl ) ;
<unk> <unk> = new <unk> ( null , this . <unk> , null , this . <unk> , null ) ;
<unk> = false ;
try
{
method . invoke ( <unk> , new Class [ <num> ] ) ;
}
catch ( InvocationTargetException e )
{
assertTrue ( e . <unk> ( ) instanceof <unk> ) ;
<unk> = true ;
}
assertTrue ( <unk> ) ;
}
}
package no . <unk> . <unk> . <unk> ;
public class <unk> extends <unk>
{
public <unk> ( )
{
super ( ) ;
}
public <unk> ( String message )
{
super ( message ) ;
}
public <unk> ( String message , Throwable cause )
{
super ( message , cause ) ;
}
public <unk> ( Throwable cause )
{
super ( cause ) ;
}
}
package no . <unk> . <unk> . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import no . <unk> . <unk> . <unk> . <unk> ;
import javax . xml . namespace . QName ;
import java . io . IOException ;
import java . text . SimpleDateFormat ;
import java . util . Date ;
public class <unk>
{
public <unk> create ( String <unk> , <unk> auth , <unk> <unk> )
throws <unk> , <unk> , IOException
{
<unk> client = new <unk> ( ) ;
<unk> deposit = new <unk> ( ) ;
deposit . <unk> ( true ) ;
deposit . setFile ( <unk> . getFile ( ) ) ;
deposit . setFilename ( <unk> . getName ( ) ) ;
deposit . <unk> ( <unk> . <unk> ( ) ) ;
deposit . setMimeType ( <unk> . <unk> ( ) ) ;
deposit . <unk> ( <unk> . <unk> ( ) ) ;
try
{
<unk> <unk> = client . deposit ( <unk> , deposit , auth ) ;
return <unk> ;
}
catch ( <unk> e )
{
throw new <unk> ( e ) ;
}
}
public <unk> update ( String <unk> , <unk> auth , <unk> <unk> )
throws <unk> , <unk> , IOException
{
try
{
<unk> client = new <unk> ( ) ;
<unk> <unk> = client . <unk> ( <unk> , auth ) ;
<unk> deposit = new <unk> ( ) ;
deposit . <unk> ( true ) ;
deposit . setFile ( <unk> . getFile ( ) ) ;
deposit . setFilename ( <unk> . getName ( ) ) ;
deposit . <unk> ( <unk> . <unk> ( ) ) ;
deposit . setMimeType ( <unk> . <unk> ( ) ) ;
deposit . <unk> ( <unk> . <unk> ( ) ) ;
<unk> resp = client . <unk> ( <unk> , deposit , auth ) ;
return resp ;
}
catch ( <unk> e )
{
throw new <unk> ( e ) ;
}
}
public <unk> delete ( String <unk> , <unk> auth )
throws <unk> , <unk>
{
try
{
<unk> client = new <unk> ( ) ;
<unk> resp = client . delete ( <unk> , auth ) ;
return resp ;
}
catch ( <unk> e )
{
throw new <unk> ( e ) ;
}
}
public <unk> <unk> ( String <unk> , <unk> auth , String grade )
throws <unk> , <unk>
{
Date <unk> = this . <unk> ( ) ;
return this . <unk> ( <unk> , auth , grade , <unk> , Constants . <unk> ) ;
}
public <unk> <unk> ( String <unk> , <unk> auth , String grade , Date <unk> , String <unk> )
throws <unk> , <unk>
{
try
{
<unk> client = new <unk> ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . <unk> ( new QName ( Constants . <unk> , Constants . <unk> ) , grade ) ;
this . <unk> ( <unk> , <unk> , <unk> ) ;
<unk> deposit = new <unk> ( ) ;
deposit . <unk> ( <unk> ) ;
deposit . <unk> ( false ) ;
<unk> <unk> = client . <unk> ( <unk> , deposit , auth ) ;
return <unk> ;
}
catch ( <unk> e )
{
throw new <unk> ( e ) ;
}
}
public <unk> <unk> ( String <unk> , <unk> auth , String grade , Date <unk> , String <unk> )
throws <unk> , <unk>
{
return this . <unk> ( <unk> , auth , grade , <unk> , <unk> ) ;
}
public <unk> <unk> ( String <unk> , <unk> auth , Date <unk> , String <unk> )
throws <unk> , <unk>
{
return this . <unk> ( <unk> , auth , <unk> , <unk> ) ;
}
public <unk> <unk> ( String <unk> , <unk> auth , String grade )
throws <unk> , <unk>
{
return this . <unk> ( <unk> , auth , grade ) ;
}
public <unk> <unk> ( String <unk> , <unk> auth )
throws <unk> , <unk>
{
Date <unk> = this . <unk> ( ) ;
return this . <unk> ( <unk> , auth , <unk> , Constants . <unk> ) ;
}
public <unk> <unk> ( String <unk> , <unk> auth , Date <unk> , String <unk> )
throws <unk> , <unk>
{
try
{
<unk> client = new <unk> ( ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> deposit = new <unk> ( ) ;
this . <unk> ( <unk> , <unk> , <unk> ) ;
deposit . <unk> ( <unk> ) ;
deposit . <unk> ( false ) ;
<unk> <unk> = client . <unk> ( <unk> , deposit , auth ) ;
return <unk> ;
}
catch ( <unk> e )
{
throw new <unk> ( e ) ;
}
}
private void <unk> ( <unk> <unk> , Date <unk> , String <unk> )
{
if ( <unk> != null )
{
SimpleDateFormat sdf = new SimpleDateFormat ( " ) ;
String <unk> = sdf . format ( <unk> ) ;
<unk> . <unk> ( new QName ( Constants . <unk> , Constants . <unk> ) , <unk> ) ;
}
if ( <unk> != null )
{
<unk> . <unk> ( new QName ( Constants . <unk> , Constants . <unk> ) , <unk> ) ;
}
}
private Date <unk> ( )
{
Date future = new Date ( ( new Date ( ) ) . getTime ( ) + <num> ) ;
return future ;
}
}
package no . <unk> . <unk> . <unk> ;
import org . junit . * ;
import static org . junit . Assert . * ;
import org . <unk> . client . <unk> ;
import org . <unk> . client . <unk> ;
import java . util . List ;
public class <unk>
{
private String <unk> = null ;
private String <unk> = null ;
private String <unk> = null ;
private <unk> <unk> = null ;
private <unk> <unk> = null ;
@Before
public void setUp ( )
throws Exception
{
this . <unk> = " ;
this . <unk> = " ;
this . <unk> = " ;
this . <unk> = new <unk> ( ) ;
this . <unk> = new <unk> ( " , " ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> (
this . <unk> , this . <unk> ,
this . <unk> , this . <unk> , this . <unk>
) ;
List < <unk> > cols = ed . <unk> ( ) ;
assertEquals ( <num> , cols . size ( ) ) ;
<unk> col = cols . get ( <num> ) ;
assertEquals ( this . <unk> , col . <unk> ( ) . toString ( ) ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> (
this . <unk> , this . <unk> ,
" , this . <unk> , this . <unk>
) ;
List < <unk> > cols = ed . <unk> ( ) ;
assertEquals ( <num> , cols . size ( ) ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> (
this . <unk> , this . <unk> ,
null , this . <unk> , this . <unk>
) ;
List < <unk> > cols = ed . <unk> ( ) ;
assertEquals ( <num> , cols . size ( ) ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> (
null , null ,
this . <unk> , this . <unk> , this . <unk>
) ;
boolean <unk> = false ;
try
{
List < <unk> > cols = ed . <unk> ( ) ;
}
catch ( <unk> e )
{
<unk> = true ;
}
assertTrue ( <unk> ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> (
null , this . <unk> ,
this . <unk> , this . <unk> , this . <unk>
) ;
List < <unk> > cols = ed . <unk> ( ) ;
assertEquals ( this . <unk> , ed . <unk> ( ) ) ;
}
@Test
public void <unk> ( )
throws Exception
{
<unk> ed = new <unk> (
this . <unk> , null ,
this . <unk> , this . <unk> , null
) ;
boolean <unk> = false ;
try
{
List < <unk> > cols = ed . <unk> ( ) ;
}
catch ( <unk> e )
{
<unk> = true ;
}
assertTrue ( <unk> ) ;
}
}
package org . android . <unk> ;
import android . app . Activity ;
import android . content . Intent ;
import android . os . Bundle ;
import android . view . Menu ;
import android . view . MenuInflater ;
import android . view . MenuItem ;
import android . widget . EditText ;
import android . widget . TextView ;
public class <unk> extends Activity {
String [ ] <unk> = new String [ <num> ] ;
Bundle extras = null ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
EditText <unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
EditText <unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
EditText <unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
EditText <unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
Bundle extras = getIntent ( ) . getExtras ( ) ;
if ( extras != null ) {
String <unk> = null ;
String date = null ;
String [ ] numbers = new String [ <num> ] ;
String <unk> = null ;
String <unk> = null ;
<unk> = extras . get ( " ) . toString ( ) ;
date = extras . getString ( " ) . toString ( ) ;
numbers = extras . getStringArray ( " ) ;
<unk> = extras . getString ( " ) . toString ( ) ;
<unk> = extras . getString ( " ) . toString ( ) ;
<unk> . setText ( <unk> + " + date + " ) ;
for ( int i = <num> ; i < numbers . length ; i ++ ) {
<unk> . append ( numbers [ i ] + " ) ;
}
<unk> . setText ( <unk> ) ;
<unk> . setText ( <unk> ) ;
<unk> . setVisibility ( TextView . GONE ) ;
<unk> . setVisibility ( EditText . GONE ) ;
} else {
<unk> task = new <unk> ( this , <unk> , <unk> , <unk> , <unk> , <unk> ) ;
task . execute ( " ) ;
}
}
@Override
public boolean onCreateOptionsMenu ( Menu menu ) {
super . onCreateOptionsMenu ( menu ) ;
MenuInflater mi = getMenuInflater ( ) ;
mi . inflate ( R . menu . <unk> , menu ) ;
return true ;
}
@Override
public boolean onMenuItemSelected ( int featureId , MenuItem item ) {
switch ( item . getItemId ( ) ) {
case R . id . <unk> :
Intent i = new Intent ( <unk> . this , <unk> . class ) ;
startActivity ( i ) ;
}
return true ;
}
package org . android . <unk> ;
public final class BuildConfig {
public final static boolean DEBUG = true ;
package org . android . <unk> ;
import java . io . IOException ;
import org . jsoup . Jsoup ;
import org . jsoup . nodes . Document ;
import org . jsoup . nodes . Element ;
import org . jsoup . select . Elements ;
import android . app . ProgressDialog ;
import android . content . Context ;
import android . os . AsyncTask ;
import android . widget . EditText ;
import android . widget . TextView ;
public class <unk> extends AsyncTask < String , Void , String [ ] > {
TextView <unk> = null ;
EditText <unk> = null ;
EditText <unk> = null ;
EditText <unk> = null ;
Context context = null ;
Elements <unk> = null ;
Elements date = null ;
String numbers = null ;
String [ ] number = new String [ <num> ] ;
String <unk> = null ;
String [ ] <unk> = new String [ <num> ] ;
ProgressDialog <unk> ;
public <unk> ( Context context , TextView <unk> , EditText <unk> , EditText <unk> , EditText <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . context = context ;
}
@Override
protected String [ ] doInBackground ( String . . . urls ) {
for ( String url : urls ) {
try {
Document doc = Jsoup . connect ( url ) . get ( ) ;
Element element = doc . getElementById ( " ) ;
<unk> = element . <unk> ( " ) ;
numbers = <unk> . text ( ) ;
number = numbers . split ( " ) ;
Element <unk> = doc . getElementById ( " ) ;
date = <unk> . <unk> ( " ) ;
<unk> = element . getElementById ( " ) . text ( ) ;
<unk> = <unk> . split ( " ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
}
return number ;
}
@Override
protected void onPreExecute ( ) {
<unk> = new ProgressDialog ( context ) ;
<unk> . <unk> ( ProgressDialog . <unk> ) ;
<unk> . setMessage ( " ) ;
<unk> . setCancelable ( false ) ;
<unk> . show ( ) ;
}
@Override
protected void onPostExecute ( String [ ] result ) {
<unk> . setText ( date . text ( ) ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
<unk> . append ( result [ i ] + " ) ;
}
<unk> . setText ( result [ <num> ] ) ;
<unk> . setText ( <unk> [ <num> ] ) ;
<unk> . dismiss ( ) ;
}
}
package org . android . <unk> ;
import android . app . ListActivity ;
import android . content . Intent ;
import android . net . ConnectivityManager ;
import android . net . NetworkInfo ;
import android . os . Bundle ;
import android . view . View ;
import android . widget . ArrayAdapter ;
import android . widget . ListView ;
import android . widget . Toast ;
public class MainActivity extends ListActivity {
@Override
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
ConnectivityManager connection = ( ConnectivityManager ) getSystemService ( CONNECTIVITY_SERVICE ) ;
if ( connection != null && ( connection . getNetworkInfo ( <num> ) . getState ( ) == NetworkInfo . State . CONNECTED ) || ( connection . getNetworkInfo ( <num> ) . getState ( ) == NetworkInfo . State . CONNECTED ) ) {
setContentView ( R . layout . main ) ;
String [ ] rows = new String [ ] { " , " } ;
ArrayAdapter < String > adapter = new ArrayAdapter < String > ( this , R . layout . <unk> , rows ) ;
setListAdapter ( adapter ) ;
} else if ( connection . getNetworkInfo ( <num> ) . getState ( ) == NetworkInfo . State . DISCONNECTED || connection . getNetworkInfo ( <num> ) . getState ( ) == NetworkInfo . State . DISCONNECTED ) {
Toast . makeText ( this , " , Toast . LENGTH_LONG ) . show ( ) ;
}
}
@Override
protected void onListItemClick ( ListView l , View v , int position , long id ) {
super . onListItemClick ( l , v , position , id ) ;
Intent i = null ;
switch ( position ) {
case <num> :
i = new Intent ( this , <unk> . class ) ;
startActivity ( i ) ;
break ;
case <num> :
i = new Intent ( this , <unk> . class ) ;
startActivity ( i ) ;
break ;
}
}
}
package org . android . <unk> ;
import java . io . IOException ;
import org . jsoup . Jsoup ;
import org . jsoup . nodes . Document ;
import org . jsoup . nodes . Element ;
import org . jsoup . select . Elements ;
import android . app . ProgressDialog ;
import android . content . Context ;
import android . os . AsyncTask ;
import android . widget . EditText ;
import android . widget . TextView ;
public class <unk> extends AsyncTask < String , Void , String [ ] > {
TextView <unk> = null ;
EditText <unk> = null ;
EditText <unk> = null ;
EditText <unk> = null ;
EditText <unk> = null ;
Context context = null ;
Elements <unk> = null ;
Elements date = null ;
String numbers = null ;
String [ ] number = new String [ <num> ] ;
String <unk> = null ;
String [ ] <unk> = new String [ <num> ] ;
String <unk> = null ;
String [ ] <unk> = new String [ <num> ] ;
ProgressDialog <unk> ;
public <unk> ( Context context , TextView <unk> , EditText <unk> , EditText <unk> , EditText <unk> , EditText <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . context = context ;
}
@Override
protected String [ ] doInBackground ( String . . . urls ) {
for ( String url : urls ) {
try {
Document doc = Jsoup . connect ( url ) . get ( ) ;
Element element = doc . getElementById ( " ) ;
<unk> = element . <unk> ( " ) ;
numbers = <unk> . text ( ) ;
number = numbers . split ( " ) ;
Element <unk> = doc . getElementById ( " ) ;
date = <unk> . <unk> ( " ) ;
<unk> = element . getElementById ( " ) . text ( ) ;
<unk> = <unk> . split ( " ) ;
<unk> = element . getElementById ( " ) . text ( ) ;
<unk> = <unk> . split ( " ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
}
return number ;
}
@Override
protected void onPreExecute ( ) {
<unk> = new ProgressDialog ( context ) ;
<unk> . <unk> ( ProgressDialog . <unk> ) ;
<unk> . setMessage ( " ) ;
<unk> . setCancelable ( false ) ;
<unk> . show ( ) ;
}
@Override
protected void onPostExecute ( String [ ] result ) {
<unk> . setText ( date . text ( ) ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
<unk> . append ( result [ i ] + " ) ;
}
<unk> . setText ( result [ <num> ] ) ;
<unk> . setText ( <unk> [ <num> ] ) ;
<unk> . setText ( <unk> [ <num> ] ) ;
<unk> . dismiss ( ) ;
}
}
package org . android . <unk> ;
import android . app . Activity ;
import android . content . Intent ;
import android . os . Bundle ;
import android . view . Menu ;
import android . view . MenuInflater ;
import android . view . MenuItem ;
import android . widget . EditText ;
import android . widget . TextView ;
public class <unk> extends Activity {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
EditText <unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
EditText <unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
EditText <unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
EditText <unk> = ( EditText ) findViewById ( R . id . <unk> ) ;
<unk> . setVisibility ( EditText . GONE ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> . setVisibility ( TextView . GONE ) ;
Bundle extras = getIntent ( ) . getExtras ( ) ;
if ( extras != null ) {
String <unk> = null ;
String date = null ;
String [ ] numbers = new String [ <num> ] ;
String <unk> = null ;
<unk> = extras . get ( " ) . toString ( ) ;
date = extras . getString ( " ) . toString ( ) ;
numbers = extras . getStringArray ( " ) ;
<unk> = extras . getString ( " ) . toString ( ) ;
<unk> . setText ( <unk> + " + date + " ) ;
for ( int i = <num> ; i < numbers . length ; i ++ ) {
<unk> . append ( numbers [ i ] + " ) ;
}
<unk> . setText ( <unk> ) ;
<unk> . setVisibility ( EditText . GONE ) ;
<unk> . setVisibility ( TextView . GONE ) ;
<unk> . setVisibility ( EditText . GONE ) ;
} else {
<unk> task = new <unk> ( this , <unk> , <unk> , <unk> , <unk> ) ;
task . execute ( " ) ;
}
}
@Override
public boolean onCreateOptionsMenu ( Menu menu ) {
super . onCreateOptionsMenu ( menu ) ;
MenuInflater mi = getMenuInflater ( ) ;
mi . inflate ( R . menu . <unk> , menu ) ;
return true ;
}
@Override
public boolean onMenuItemSelected ( int featureId , MenuItem item ) {
switch ( item . getItemId ( ) ) {
case R . id . <unk> :
Intent i = new Intent ( this , <unk> . class ) ;
startActivity ( i ) ;
}
return true ;
}
}
package org . android . <unk> ;
import java . io . IOException ;
import java . util . ArrayList ;
import org . jsoup . Jsoup ;
import org . jsoup . nodes . Document ;
import org . jsoup . nodes . Element ;
import org . jsoup . select . Elements ;
import android . app . ListActivity ;
import android . app . ProgressDialog ;
import android . content . Context ;
import android . content . Intent ;
import android . os . AsyncTask ;
import android . os . Bundle ;
import android . view . View ;
import android . widget . ArrayAdapter ;
import android . widget . ListView ;
public class <unk> extends ListActivity {
ArrayList < String > <unk> = new ArrayList < String > ( ) ;
ArrayList < String > date = new ArrayList < String > ( ) ;
ArrayList < String > numbers = new ArrayList < String > ( ) ;
ArrayList < String > <unk> = new ArrayList < String > ( ) ;
ProgressDialog <unk> ;
@Override
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
<unk> async = new <unk> ( this ) ;
async . execute ( " ) ;
}
public class <unk> extends AsyncTask < String , Void , Void > {
Context context ;
String [ ] message = null ;
public <unk> ( Context context ) {
this . context = context ;
}
@Override
protected void onPreExecute ( ) {
<unk> = new ProgressDialog ( context ) ;
<unk> . <unk> ( ProgressDialog . <unk> ) ;
<unk> . setMessage ( " ) ;
<unk> . setCancelable ( false ) ;
<unk> . show ( ) ;
}
@Override
protected Void doInBackground ( String . . . urls ) {
int i = <num> ;
for ( String url : urls ) {
try {
Document doc = Jsoup . connect ( url ) . get ( ) ;
Elements table = doc . <unk> ( " ) ;
Element <unk> = table . get ( <num> ) ;
Elements tags = <unk> . <unk> ( " ) ;
while ( i < tags . size ( ) ) {
<unk> . add ( tags . get ( i ) . text ( ) ) ;
date . add ( tags . get ( i + <num> ) . text ( ) ) ;
numbers . add ( tags . get ( i + <num> ) . text ( ) ) ;
<unk> . add ( tags . get ( i + <num> ) . text ( ) ) ;
i += <num> ;
}
message = new String [ <unk> . size ( ) ] ;
for ( int j = <num> ; j < <unk> . size ( ) ; j ++ ) {
message [ j ] = <unk> . get ( j ) + " + date . get ( j ) + " ;
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
}
return null ;
}
@Override
protected void onPostExecute ( Void result ) {
ArrayAdapter < String > adapter = new ArrayAdapter < String > ( context , R . layout . <unk> , message ) ;
setListAdapter ( adapter ) ;
<unk> . dismiss ( ) ;
}
}
@Override
protected void onListItemClick ( ListView l , View v , int position , long id ) {
super . onListItemClick ( l , v , position , id ) ;
Intent i = new Intent ( this , <unk> . class ) ;
String [ ] number = new String [ <num> ] ;
String [ ] <unk> = new String [ <num> ] ;
String [ ] <unk> = new String [ <num> ] ;
number = numbers . get ( position ) . split ( " ) ;
for ( int j = <num> ; j < <num> ; j ++ ) {
<unk> [ j ] = number [ j ] ;
}
<unk> = number [ <num> ] . split ( " ) ;
<unk> = <unk> [ <num> ] . split ( " ) ;
i . putExtra ( " , <unk> . get ( position ) ) ;
i . putExtra ( " , date . get ( position ) ) ;
i . putExtra ( " , <unk> ) ;
i . putExtra ( " , <unk> [ <num> ] ) ;
i . putExtra ( " , <unk> . get ( position ) ) ;
startActivity ( i ) ;
}
}
package org . android . <unk> ;
public final class R {
public static final class attr {
}
public static final class drawable {
public static final int ic_launcher = <num> ;
}
public static final class id {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int text1 = <num> ;
}
public static final class layout {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int main = <num> ;
public static final int <unk> = <num> ;
}
public static final class menu {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int <unk> = <num> ;
public static final int hello = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
}
}
package org . android . <unk> ;
import java . io . IOException ;
import java . util . ArrayList ;
import org . jsoup . Jsoup ;
import org . jsoup . nodes . Document ;
import org . jsoup . nodes . Element ;
import org . jsoup . select . Elements ;
import android . app . ListActivity ;
import android . app . ProgressDialog ;
import android . content . Context ;
import android . content . Intent ;
import android . os . AsyncTask ;
import android . os . Bundle ;
import android . view . View ;
import android . widget . ArrayAdapter ;
import android . widget . ListView ;
public class <unk> extends ListActivity {
ArrayList < String > <unk> = new ArrayList < String > ( ) ;
ArrayList < String > date = new ArrayList < String > ( ) ;
ArrayList < String > numbers = new ArrayList < String > ( ) ;
ProgressDialog <unk> ;
@Override
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
<unk> async = new <unk> ( this ) ;
async . execute ( " ) ;
}
public class <unk> extends AsyncTask < String , Void , Void > {
Context context ;
String [ ] message = null ;
public <unk> ( Context context ) {
this . context = context ;
}
@Override
protected void onPreExecute ( ) {
<unk> = new ProgressDialog ( context ) ;
<unk> . <unk> ( ProgressDialog . <unk> ) ;
<unk> . setMessage ( " ) ;
<unk> . setCancelable ( false ) ;
<unk> . show ( ) ;
}
@Override
protected Void doInBackground ( String . . . urls ) {
int i = <num> ;
for ( String url : urls ) {
try {
Document doc = Jsoup . connect ( url ) . get ( ) ;
Elements table = doc . <unk> ( " ) ;
Element <unk> = table . get ( <num> ) ;
Elements tags = <unk> . <unk> ( " ) ;
while ( i < tags . size ( ) ) {
<unk> . add ( tags . get ( i ) . text ( ) ) ;
date . add ( tags . get ( i + <num> ) . text ( ) ) ;
numbers . add ( tags . get ( i + <num> ) . text ( ) ) ;
i += <num> ;
}
message = new String [ <unk> . size ( ) ] ;
for ( int j = <num> ; j < <unk> . size ( ) ; j ++ ) {
message [ j ] = <unk> . get ( j ) + " + date . get ( j ) + " ;
}
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
}
return null ;
}
@Override
protected void onPostExecute ( Void result ) {
ArrayAdapter < String > adapter = new ArrayAdapter < String > ( context , R . layout . <unk> , message ) ;
setListAdapter ( adapter ) ;
<unk> . dismiss ( ) ;
}
}
@Override
protected void onListItemClick ( ListView l , View v , int position , long id ) {
super . onListItemClick ( l , v , position , id ) ;
Intent i = new Intent ( this , <unk> . class ) ;
String [ ] number = new String [ <num> ] ;
String [ ] <unk> = new String [ <num> ] ;
String [ ] <unk> = new String [ <num> ] ;
number = numbers . get ( position ) . split ( " ) ;
for ( int j = <num> ; j < <num> ; j ++ ) {
<unk> [ j ] = number [ j ] ;
}
<unk> = number [ <num> ] . split ( " ) ;
<unk> = <unk> [ <num> ] . split ( " ) ;
i . putExtra ( " , <unk> . get ( position ) ) ;
i . putExtra ( " , date . get ( position ) ) ;
i . putExtra ( " , <unk> ) ;
i . putExtra ( " , <unk> [ <num> ] ) ;
startActivity ( i ) ;
}
package de . <unk> . jira . plugins . <unk> ;
import com . atlassian . jira . issue . <unk> . <unk> . <unk> ;
import com . atlassian . jira . issue . <unk> . <unk> . <unk> ;
import com . atlassian . jira . issue . <unk> . <unk> . transformer . <unk> ;
import com . atlassian . jira . jql . operand . <unk> ;
public class <unk> extends <unk> {
public <unk> ( <unk> <unk> , <unk> <unk> , <unk> <unk> ) {
super ( <unk> , <unk> , <unk> ) ;
}
}
package de . <unk> . jira . plugins . <unk> ;
import com . atlassian . jira . issue . comments . Comment ;
import com . atlassian . jira . issue . comments . <unk> ;
import com . atlassian . jira . security . JiraAuthenticationContext ;
import com . atlassian . jira . user . util . UserManager ;
import org . slf4j . Logger ;
import org . slf4j . LoggerFactory ;
import com . atlassian . jira . issue . <unk> . impl . <unk> ;
import com . atlassian . jira . issue . <unk> . impl . <unk> ;
import com . atlassian . jira . issue . Issue ;
import com . atlassian . jira . issue . fields . <unk> ;
import com . atlassian . jira . issue . fields . config . <unk> ;
import com . atlassian . jira . issue . fields . layout . field . <unk> ;
import java . util . Map ;
public class <unk> extends <unk> {
private static final Logger log = LoggerFactory . getLogger ( <unk> . class ) ;
private JiraAuthenticationContext authenticationContext = null ;
private <unk> <unk> = null ;
private UserManager userManager = null ;
public <unk> ( JiraAuthenticationContext authenticationContext , <unk> <unk> , UserManager userManager ) {
this . authenticationContext = authenticationContext ;
this . <unk> = <unk> ;
this . userManager = userManager ;
}
<unk>
public String <unk> ( java . lang . Object object ) {
return null ;
}
<unk>
public Object <unk> ( java . lang . String string ) throws <unk> {
return null ;
}
<unk>
public Object <unk> ( <unk> customField , Issue issue ) {
double <unk> = <num> ;
for ( Comment c : <unk> . <unk> ( issue ) ) {
String body = c . getBody ( ) ;
if ( body . contains ( " ) ) {
<unk> ++ ;
}
}
return <unk> ;
}
@Override
public Map < String , Object > <unk> ( final Issue issue ,
final <unk> field ,
final <unk> <unk> ) {
final Map < String , Object > map = super . <unk> ( issue , field , <unk> ) ;
if ( issue == null ) {
return map ;
}
<unk> <unk> = field . <unk> ( issue ) ;
return map ;
}
import java . util . * ;
import java . io . * ;
import javax . imageio . * ;
import java . awt . Rectangle ;
import java . awt . Graphics2D ;
import java . awt . image . * ;
public class <unk>
{
public static void main ( String args [ ] )
{
if ( args . length < <num> )
{
System . out . println ( " ) ;
System . out . println ( " ) ;
System . out . println ( " ) ;
System . out . println ( " ) ;
System . out . println ( " ) ;
System . out . println ( " ) ;
return ;
}
<unk> <unk> = new <unk> ( ) ;
List < File > dirs = new ArrayList < File > ( ) ;
for ( int i = <num> ; i < args . length ; ++ i )
{
dirs . add ( new File ( args [ i ] ) ) ;
}
<unk> . Run ( args [ <num> ] , Integer . parseInt ( args [ <num> ] ) , Integer . parseInt ( args [ <num> ] ) , Integer . parseInt ( args [ <num> ] ) , Integer . parseInt ( args [ <num> ] ) != <num> , Integer . parseInt ( args [ <num> ] ) != <num> , dirs ) ;
}
public void Run ( String name , int width , int height , int padding , boolean <unk> , boolean <unk> , List < File > dirs )
{
List < File > <unk> = new ArrayList < File > ( ) ;
for ( File file : dirs )
{
if ( ! file . exists ( ) || ! file . isDirectory ( ) )
{
System . out . println ( " + file . getPath ( ) + " ) ;
return ;
}
<unk> ( file , <unk> ) ;
}
System . out . println ( " + <unk> . size ( ) + " ) ;
Set < <unk> > <unk> = new TreeSet < <unk> > ( new <unk> ( ) ) ;
for ( File f : <unk> )
{
try
{
BufferedImage image = ImageIO . read ( f ) ;
if ( image . getWidth ( ) > width || image . getHeight ( ) > height )
{
System . out . println ( " + f . getPath ( ) + " + image . getWidth ( ) + " + image . getHeight ( ) + " + width + " + height + " ) ;
return ;
}
String path = f . getPath ( ) . substring ( <num> , f . getPath ( ) . lastIndexOf ( " ) ) . replace ( " , " ) ;
<unk> . add ( new <unk> ( image , path ) ) ;
}
catch ( IOException e )
{
System . out . println ( " + f . getAbsoluteFile ( ) + " ) ;
}
}
List < Texture > textures = new ArrayList < Texture > ( ) ;
textures . add ( new Texture ( width , height ) ) ;
int count = <num> ;
for ( <unk> imageName : <unk> )
{
boolean added = false ;
System . out . println ( " + imageName . name + " + ( ++ count ) + " ) ;
for ( Texture texture : textures )
{
if ( texture . <unk> ( imageName . image , imageName . name , padding ) )
{
added = true ;
break ;
}
}
if ( ! added )
{
Texture texture = new Texture ( width , height ) ;
texture . <unk> ( imageName . image , imageName . name , padding ) ;
textures . add ( texture ) ;
}
}
count = <num> ;
for ( Texture texture : textures )
{
System . out . println ( " + name + ( ++ count ) ) ;
texture . Write ( name + count , <unk> , <unk> , width , height ) ;
}
}
private void <unk> ( File file , List < File > <unk> )
{
if ( file . isDirectory ( ) )
{
File [ ] files = file . listFiles ( new <unk> ( ) ) ;
File [ ] directories = file . listFiles ( new <unk> ( ) ) ;
<unk> . addAll ( Arrays . asList ( files ) ) ;
for ( File d : directories )
{
<unk> ( d , <unk> ) ;
}
}
}
private class <unk>
{
public BufferedImage image ;
public String name ;
public <unk> ( BufferedImage image , String name )
{
this . image = image ;
this . name = name ;
}
}
private class <unk> implements Comparator < <unk> >
{
public int compare ( <unk> image1 , <unk> image2 )
{
int <unk> = image1 . image . getWidth ( ) * image1 . image . getHeight ( ) ;
int <unk> = image2 . image . getWidth ( ) * image2 . image . getHeight ( ) ;
if ( <unk> != <unk> )
{
return <unk>  <unk> ;
}
else
{
return image1 . name . compareTo ( image2 . name ) ;
}
}
}
private class <unk> implements FilenameFilter
{
public boolean accept ( File dir , String name )
{
return name . toLowerCase ( ) . endsWith ( " ) ;
}
}
private class <unk> implements FileFilter
{
public boolean accept ( File pathname )
{
return pathname . isDirectory ( ) ;
}
}
public class Texture
{
private class Node
{
public Rectangle rect ;
public Node child [ ] ;
public BufferedImage image ;
public Node ( int x , int y , int width , int height )
{
rect = new Rectangle ( x , y , width , height ) ;
child = new Node [ <num> ] ;
child [ <num> ] = null ;
child [ <num> ] = null ;
image = null ;
}
public boolean <unk> ( )
{
return child [ <num> ] == null && child [ <num> ] == null ;
}
public Node Insert ( BufferedImage image , int padding )
{
if ( ! <unk> ( ) )
{
Node newNode = child [ <num> ] . Insert ( image , padding ) ;
if ( newNode != null )
{
return newNode ;
}
return child [ <num> ] . Insert ( image , padding ) ;
}
else
{
if ( this . image != null )
{
return null ;
}
if ( image . getWidth ( ) > rect . width || image . getHeight ( ) > rect . height )
{
return null ;
}
if ( image . getWidth ( ) == rect . width && image . getHeight ( ) == rect . height )
{
this . image = image ;
return this ;
}
int dw = rect . width  image . getWidth ( ) ;
int dh = rect . height  image . getHeight ( ) ;
if ( dw > dh )
{
child [ <num> ] = new Node ( rect . x , rect . y , image . getWidth ( ) , rect . height ) ;
child [ <num> ] = new Node ( padding + rect . x + image . getWidth ( ) , rect . y , rect . width  image . getWidth ( )  padding , rect . height ) ;
}
else
{
child [ <num> ] = new Node ( rect . x , rect . y , rect . width , image . getHeight ( ) ) ;
child [ <num> ] = new Node ( rect . x , padding + rect . y + image . getHeight ( ) , rect . width , rect . height  image . getHeight ( )  padding ) ;
}
return child [ <num> ] . Insert ( image , padding ) ;
}
}
}
private BufferedImage image ;
private Graphics2D graphics ;
private Node root ;
private Map < String , Rectangle > <unk> ;
public Texture ( int width , int height )
{
image = new BufferedImage ( width , height , BufferedImage . TYPE_4BYTE_ABGR ) ;
graphics = image . createGraphics ( ) ;
root = new Node ( <num> , <num> , width , height ) ;
<unk> = new TreeMap < String , Rectangle > ( ) ;
}
public boolean <unk> ( BufferedImage image , String name , int padding )
{
Node node = root . Insert ( image , padding ) ;
if ( node == null )
{
return false ;
}
<unk> . put ( name , node . rect ) ;
graphics . drawImage ( image , null , node . rect . x , node . rect . y ) ;
return true ;
}
public void Write ( String name , boolean <unk> , boolean <unk> , int width , int height )
{
try
{
ImageIO . write ( image , " , new File ( name + " ) ) ;
BufferedWriter atlas = new BufferedWriter ( new FileWriter ( name + " ) ) ;
for ( Map . Entry < String , Rectangle > e : <unk> . entrySet ( ) )
{
Rectangle r = e . getValue ( ) ;
String keyVal = e . getKey ( ) ;
if ( <unk> )
keyVal = keyVal . substring ( keyVal . lastIndexOf ( /' ) + <num> ) ;
if ( <unk> )
{
atlas . write ( keyVal + " + r . x / ( float ) width + " + r . y / ( float ) height + " + r . width / ( float ) width + " + r . height / ( float ) height ) ;
}
else
atlas . write ( keyVal + " + r . x + " + r . y + " + r . width + " + r . height ) ;
atlas . newLine ( ) ;
}
atlas . close ( ) ;
}
catch ( IOException e )
{
}
}
}
}
package ch . <unk> . sounds ;
public class <unk> {
private double c ;
private double l ;
private double <unk> ;
private int k ;
private double <unk> ;
public <unk> ( String <unk> , double <unk> , int k , double <unk> ) {
if ( <unk> == " ) {
this . c = <num> ;
} else if ( <unk> == " ) {
this . c = <num> ;
} else if ( <unk> == " ) {
this . c = <num> ;
} else if ( <unk> == " ) {
this . c = <num> ;
} else if ( <unk> == " ) {
this . c = <num> ;
} else if ( <unk> == " ) {
this . c = <num> ;
}
this . l = <unk> . <unk> ;
this . <unk> = <unk> ;
this . k = k ;
this . <unk> = <unk> ;
}
private double <unk> ( double t ) {
double <unk> = <num> * <unk> / Math . PI * Math . cos ( c * k * Math . PI * t / l ) * Math . exp (  t * <unk> ) ;
return <unk> ;
}
public double <unk> ( double t , double x ) {
double <unk> = <unk> * Math . cos ( c * k * Math . PI * t / l ) * Math . sin ( k * Math . PI * x / l ) * Math . exp (  t * <unk> ) ;
return <unk> ;
}
public double [ ] <unk> ( int duration ) {
double [ ] wave = new double [ duration * <unk> . sampleRate ] ;
for ( int i = <num> ; i < wave . length ; i ++ ) {
wave [ i ] = <unk> ( ( double ) i / <unk> . sampleRate ) ;
}
return wave ;
}
public double getLength ( ) {
return l ;
}
public double <unk> ( ) {
return <unk> ;
}
public int getK ( ) {
return k ;
}
}
package ch . <unk> . sounds . gui ;
import java . awt . Color ;
import javax . swing . JPanel ;
import org . jfree . chart . ChartFactory ;
import org . jfree . chart . ChartPanel ;
import org . jfree . chart . JFreeChart ;
import org . jfree . chart . axis . NumberAxis ;
import org . jfree . chart . axis . <unk> ;
import org . jfree . chart . plot . PlotOrientation ;
import org . jfree . chart . plot . XYPlot ;
import org . jfree . chart . renderer . xy . XYLineAndShapeRenderer ;
import org . jfree . data . xy . <unk> ;
import org . jfree . data . xy . XYSeries ;
import org . jfree . data . xy . XYSeriesCollection ;
public class <unk> {
private JPanel panel ;
private double [ ] <unk> ;
private double length ;
private XYSeries series ;
private XYSeriesCollection <unk> ;
private <unk> dataSet ;
private JFreeChart chart ;
private XYPlot plot ;
private XYLineAndShapeRenderer renderer ;
private ChartPanel chartPanel ;
public <unk> ( double [ ] [ ] <unk> , double length ) {
<unk> = new double [ <unk> . length ] ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
<unk> [ i ] = <unk> [ i ] [ <num> ] ;
}
this . length = length ;
this . series = new XYSeries ( " ) ;
this . <unk> = new XYSeriesCollection ( ) ;
double x = <num> ;
for ( int i = <num> ; i < this . <unk> . length ; i ++ ) {
this . series . add ( x , this . <unk> [ i ] ) ;
x += length / ( this . <unk> . length  <num> ) ;
}
<unk> . addSeries ( series ) ;
this . dataSet = <unk> ;
this . chart = ChartFactory . <unk> ( " ,
" , " , dataSet , PlotOrientation . VERTICAL , false ,
true , false ) ;
this . plot = chart . <unk> ( ) ;
plot . setBackgroundPaint ( Color . lightGray ) ;
plot . <unk> ( Color . white ) ;
plot . setRangeGridlinePaint ( Color . white ) ;
NumberAxis xAxis = ( NumberAxis ) plot . <unk> ( ) ;
xAxis . <unk> ( new <unk> ( <num> ) ) ;
xAxis . setRange ( <num> , <num> ) ;
NumberAxis yAxis = ( NumberAxis ) plot . getRangeAxis ( ) ;
yAxis . setRange (  <num> , <num> ) ;
this . renderer = new XYLineAndShapeRenderer ( ) ;
renderer . <unk> ( <num> , true ) ;
renderer . <unk> ( <num> , false ) ;
renderer . <unk> ( <num> , Color . black ) ;
plot . setRenderer ( renderer ) ;
this . chartPanel = new ChartPanel ( chart ) ;
chartPanel . setPreferredSize ( new java . awt . Dimension ( <num> , <num> ) ) ;
this . panel = new JPanel ( ) ;
panel . add ( chartPanel ) ;
}
public void <unk> ( double [ ] [ ] <unk> ) {
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
<unk> [ i ] = <unk> [ i ] [ <num> ] ;
}
series . delete ( <num> , series . getItemCount ( )  <num> ) ;
double x = <num> ;
for ( int i = <num> ; i < this . <unk> . length ; i ++ ) {
this . series . add ( x , this . <unk> [ i ] ) ;
x += length / ( this . <unk> . length  <num> ) ;
}
<unk> . <unk> ( ) ;
<unk> . addSeries ( series ) ;
dataSet = <unk> ;
chart . <unk> ( ) . <unk> ( dataSet ) ;
plot = chart . <unk> ( ) ;
chartPanel . <unk> ( chart ) ;
}
public JPanel <unk> ( ) {
return panel ;
}
public XYPlot <unk> ( ) {
return plot ;
}
public double [ ] <unk> ( ) {
return <unk> ;
}
}
package ch . <unk> . sounds ;
import java . util . ArrayList ;
import java . util . Arrays ;
public class <unk> {
private double length ;
private String <unk> ;
private double <unk> ;
private double <unk> ;
private double [ ] <unk> = new double [ <num> ] ;
private double xStart ;
private double yStart ;
private ArrayList < <unk> > <unk> ;
private int duration ;
public <unk> ( String <unk> , double <unk> , double xStart ,
double yStart , double <unk> , double [ ] <unk> ) {
this . length = <unk> . <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . xStart = xStart ;
this . yStart = yStart ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = new ArrayList < <unk> > ( ) ;
<unk> ( ) ;
}
public void <unk> ( ) {
<unk> . clear ( ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
<unk> <unk> = new <unk> ( xStart , yStart ,
( i + <num> ) ) ;
<unk> . <unk> ( ) ;
<unk> wave = new <unk> ( <unk> , <unk> . <unk> ( ) ,
( i + <num> ) , <unk> ) ;
<unk> . add ( wave ) ;
}
}
public void <unk> ( ) {
<unk> . clear ( ) ;
<unk> <unk> = new <unk> ( <unk> , <unk> , <num> , <unk> ) ;
<unk> . add ( <unk> ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
<unk> wave = new <unk> ( <unk> , <unk> [ i ] , ( i + <num> ) , <unk> ) ;
<unk> . add ( wave ) ;
}
}
public ArrayList < <unk> > <unk> ( ) {
return <unk> ;
}
public void <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
public void <unk> ( double <unk> ) {
this . <unk> = <unk> ;
}
public void <unk> ( double xStart ) {
this . xStart = xStart ;
}
public void <unk> ( double yStart ) {
this . yStart = yStart ;
}
public void <unk> ( double <unk> ) {
this . <unk> = <unk> ;
}
public void <unk> ( double [ ] <unk> ) {
this . <unk> = <unk> ;
}
public void <unk> ( ) {
if ( <unk> == <num> ) {
this . duration = <num> ;
} else {
this . duration = ( int ) Math . ceil ( (  ( Math . log ( <num> ) ) / this . <unk> ) ) ;
}
}
public int getDuration ( ) {
return duration ;
}
public double <unk> ( ) {
return yStart ;
}
public double <unk> ( ) {
return <unk> ;
}
@Override
public String toString ( ) {
return " + length + " + <unk>
+ " + <unk> + " + <unk>
+ " + Arrays . toString ( <unk> ) + "
+ xStart + " + yStart + " ;
}
package ch . <unk> . sounds . gui ;
import java . awt . Color ;
import java . awt . Font ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import java . text . DecimalFormat ;
import java . text . NumberFormat ;
import javax . swing . ImageIcon ;
import javax . swing . JButton ;
import javax . swing . JComboBox ;
import javax . swing . JFormattedTextField ;
import javax . swing . JLabel ;
import javax . swing . JOptionPane ;
import javax . swing . JPanel ;
import javax . swing . JTextField ;
import javax . swing . <unk> ;
import javax . swing . Timer ;
import org . jfree . chart . axis . NumberAxis ;
import org . jfree . chart . axis . <unk> ;
import ch . <unk> . sounds . <unk> ;
import ch . <unk> . sounds . Player ;
import ch . <unk> . sounds . <unk> ;
import ch . <unk> . sounds . <unk> ;
import ch . <unk> . sounds . <unk> ;
public class <unk> {
private JComboBox < String > <unk> ;
private JTextField <unk> ;
private JTextField <unk> ;
private JTextField <unk> ;
private JButton <unk> ;
private JButton <unk> ;
private JTextField <unk> ;
private JTextField <unk> ;
private JTextField <unk> ;
private JTextField <unk> ;
private JTextField <unk> ;
private JTextField <unk> ;
private JTextField <unk> ;
private JTextField <unk> ;
private JTextField <unk> ;
private JButton <unk> ;
private JPanel panel ;
private <unk> <unk> ;
private Player player ;
private Timer timer ;
private MainWindow mainWindow ;
private <unk> <unk> ;
private DecimalFormat df ;
Thread <unk> ;
Thread playSound ;
public <unk> ( MainWindow mainWindow ) throws <unk> {
<unk> ( ) ;
this . <unk> = this ;
this . player = new Player ( ) ;
this . mainWindow = mainWindow ;
this . <unk> = new <unk> ( <unk> . <unk> ( ) . <unk> ( ) , <unk> . <unk> ( ) . <unk> ( ) , <unk> . <unk> ( ) . <unk> ( ) , <unk> . <unk> ( ) . <unk> ( ) , <unk> . <unk> ( ) . <unk> ( ) , <unk> . <unk> ( ) . <unk> ( ) ) ;
this . df = new DecimalFormat ( " ) ;
addActionListener ( ) ;
}
private void <unk> ( ) {
panel = new JPanel ( new <unk> ( ) ) ;
<unk> = new JComboBox < String > ( new String [ ] { " , " , " , " , " , " } ) ;
<unk> = new JFormattedTextField ( NumberFormat . getInstance ( ) ) ;
<unk> . setText ( " ) ;
<unk> . setHorizontalAlignment ( JTextField . RIGHT ) ;
<unk> = new JFormattedTextField ( NumberFormat . getInstance ( ) ) ;
<unk> . setText ( " ) ;
<unk> = new JFormattedTextField ( NumberFormat . getInstance ( ) ) ;
<unk> . setText ( " ) ;
<unk> = new JButton ( new ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
<unk> = new JButton ( " ) ;
<unk> = new JFormattedTextField ( df ) ;
<unk> . setText ( " ) ;
<unk> = new JFormattedTextField ( df ) ;
<unk> . setText ( " ) ;
<unk> = new JFormattedTextField ( df ) ;
<unk> . setText ( " ) ;
<unk> = new JFormattedTextField ( df ) ;
<unk> . setText ( " ) ;
<unk> = new JFormattedTextField ( df ) ;
<unk> . setText ( " ) ;
<unk> = new JFormattedTextField ( df ) ;
<unk> . setText ( " ) ;
<unk> = new JFormattedTextField ( df ) ;
<unk> . setText ( " ) ;
<unk> = new JFormattedTextField ( df ) ;
<unk> . setText ( " ) ;
<unk> = new JFormattedTextField ( df ) ;
<unk> . setText ( " ) ;
<unk> = new JButton ( new ImageIcon ( getClass ( ) . getResource ( " ) ) ) ;
Font f1 = new Font ( " , Font . BOLD , <num> ) ;
JLabel <unk> = new JLabel ( " ) ;
<unk> . setFont ( f1 ) ;
<unk> . setForeground ( new Color ( <num> , <num> , <num> ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
JLabel <unk> = new JLabel ( " ) ;
<unk> . setForeground ( new Color ( <num> , <num> , <num> ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( new JLabel ( " ) ) ;
JLabel <unk> = new JLabel ( " ) ;
<unk> . setFont ( f1 ) ;
<unk> . setForeground ( new Color ( <num> , <num> , <num> ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
JLabel <unk> = new JLabel ( " ) ;
<unk> . setForeground ( new Color ( <num> , <num> , <num> ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( new JLabel ( " ) ) ;
JLabel <unk> = new JLabel ( " ) ;
<unk> . setFont ( f1 ) ;
<unk> . setForeground ( new Color ( <num> , <num> , <num> ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
JLabel <unk> = new JLabel ( " ) ;
<unk> . setForeground ( new Color ( <num> , <num> , <num> ) ) ;
panel . add ( <unk> ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
panel . add ( new JLabel ( " ) ) ;
panel . add ( <unk> ) ;
<unk> . <unk> ( panel , <num> , <num> , <num> , <num> , <num> , <num> ) ;
}
public JPanel <unk> ( ) {
return panel ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
private class <unk> implements Runnable {
@Override
public void run ( ) {
timer . start ( ) ;
}
}
private class <unk> implements Runnable {
@Override
public void run ( ) {
player . play ( ) ;
}
}
private void addActionListener ( ) {
<unk> . addActionListener ( new ActionListener ( ) {
int <unk> = <num> ;
@Override
public void actionPerformed ( ActionEvent arg0 ) {
try {
<unk> <unk> = <unk> . <unk> ( ) ;
<unk> . <unk> ( <unk> . <unk> ( ) ) ;
<unk> . <unk> ( <unk> . <unk> ( ) ) ;
<unk> . <unk> ( <unk> . <unk> ( ) ) ;
<unk> . <unk> ( <unk> . <unk> ( ) ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
player . <unk> ( <unk> . <unk> ( ) ) ;
player . <unk> ( <unk> . getDuration ( ) ) ;
NumberAxis yAxis = ( NumberAxis ) mainWindow . <unk> ( ) . <unk> ( ) . getRangeAxis ( ) ;
double yStart = <num> ;
if ( <unk> . <unk> ( ) < <num> ) {
yStart = <unk> . <unk> ( ) *  <num> ;
} else {
yStart = <unk> . <unk> ( ) ;
}
yAxis . setRange ( yStart *  <num> , yStart ) ;
NumberAxis xAxis = ( NumberAxis ) mainWindow . <unk> ( ) . <unk> ( ) . <unk> ( ) ;
xAxis . <unk> ( new <unk> ( <num> ) ) ;
xAxis . setRange ( <num> , <num> ) ;
mainWindow . getPlot ( ) . <unk> ( player . <unk> ( <unk> . getDuration ( ) ) ) ;
mainWindow . <unk> ( ) . <unk> ( mainWindow . getPlot ( ) . <unk> ( ) ) ;
<unk> . setEnabled ( false ) ;
<unk> . setEnabled ( false ) ;
<unk> . setEnabled ( false ) ;
for ( int i = <num> ; i < <unk> . <unk> ( ) . size ( ) ; i ++ ) {
double k = <unk> . <unk> ( ) . get ( i ) . getK ( ) ;
if ( k == <num> ) {
<unk> . setText ( df . format ( <unk> . <unk> ( ) . get ( i ) . <unk> ( ) ) + " ) ;
} else if ( k == <num> ) {
<unk> . setText ( df . format ( <unk> . <unk> ( ) . get ( i ) . <unk> ( ) ) + " ) ;
} else if ( k == <num> ) {
<unk> . setText ( df . format ( <unk> . <unk> ( ) . get ( i ) . <unk> ( ) ) + " ) ;
} else if ( k == <num> ) {
<unk> . setText ( df . format ( <unk> . <unk> ( ) . get ( i ) . <unk> ( ) ) + " ) ;
} else if ( k == <num> ) {
<unk> . setText ( df . format ( <unk> . <unk> ( ) . get ( i ) . <unk> ( ) ) + " ) ;
} else if ( k == <num> ) {
<unk> . setText ( df . format ( <unk> . <unk> ( ) . get ( i ) . <unk> ( ) ) + " ) ;
} else if ( k == <num> ) {
<unk> . setText ( df . format ( <unk> . <unk> ( ) . get ( i ) . <unk> ( ) ) + " ) ;
} else if ( k == <num> ) {
<unk> . setText ( df . format ( <unk> . <unk> ( ) . get ( i ) . <unk> ( ) ) + " ) ;
} else if ( k == <num> ) {
<unk> . setText ( df . format ( <unk> . <unk> ( ) . get ( i ) . <unk> ( ) ) + " ) ;
}
}
<unk> . requestFocus ( ) ;
timer = new Timer ( ( int ) Math . ceil ( <num> / <unk> . <unk> ) , new ActionListener ( ) {
@Override
public void actionPerformed ( ActionEvent e ) {
NumberAxis yAxis = ( NumberAxis ) mainWindow . getPlot ( ) . <unk> ( ) . getRangeAxis ( ) ;
double <unk> = <num> ;
if ( <unk> . <unk> ( ) < <num> ) {
<unk> = <unk> . <unk> ( ) *  <num> ;
} else {
<unk> = <unk> . <unk> ( ) ;
}
yAxis . setRange ( <unk> *  <num> , <unk> ) ;
NumberAxis xAxis = ( NumberAxis ) mainWindow . getPlot ( ) . <unk> ( ) . <unk> ( ) ;
xAxis . <unk> ( new <unk> ( <num> ) ) ;
xAxis . setRange ( <num> , <num> ) ;
mainWindow . getPlot ( ) . <unk> ( <unk> ) ; ;
<unk> ++ ;
if ( <unk> == mainWindow . getPlot ( )
. <unk> ( ) [ <num> ] . length  <num> ) {
timer . stop ( ) ;
<unk> = <num> ;
<unk> . setEnabled ( true ) ;
<unk> . setEnabled ( true ) ;
<unk> . setEnabled ( true ) ;
if ( <unk> . <unk> ( ) == <num> ) {
JOptionPane . showMessageDialog ( null , " ) ;
}
}
try {
Thread . sleep ( <num> ) ;
} catch ( InterruptedException e1 ) {
e1 . printStackTrace ( ) ;
}
}
} ) ;
timer . <unk> ( <num> ) ;
Thread <unk> = new Thread ( new <unk> ( ) ) ;
Thread playSound = new Thread ( new <unk> ( ) ) ;
playSound . start ( ) ;
<unk> . start ( ) ;
} catch ( <unk> e ) {
JOptionPane . showMessageDialog ( null ,
e . <unk> ( ) ) ;
}
}
} ) ;
<unk> . addActionListener ( new ActionListener ( ) {
@Override
public void actionPerformed ( ActionEvent arg0 ) {
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
<unk> . setText ( " ) ;
}
} ) ;
<unk> . addActionListener ( new ActionListener ( ) {
int <unk> = <num> ;
@Override
public void actionPerformed ( ActionEvent arg0 ) {
try {
<unk> <unk> = <unk> . <unk> ( ) ;
<unk> . <unk> ( <unk> . <unk> ( ) ) ;
<unk> . <unk> ( <unk> . <unk> ( ) ) ;
<unk> . <unk> ( <unk> . <unk> ( ) ) ;
<unk> . <unk> ( <unk> . <unk> ( ) ) ;
<unk> . <unk> ( ) ;
<unk> . <unk> ( ) ;
player . <unk> ( <unk> . <unk> ( ) ) ;
player . <unk> ( <unk> . getDuration ( ) ) ;
double [ ] [ ] <unk> = player . <unk> ( <unk> . getDuration ( ) ) ;
double <unk> = <num> ;
for ( int x = <num> ; x < <unk> . length ; x ++ ) {
for ( int t = <num> ; t < <unk> [ <num> ] . length ; t ++ ) {
if ( <unk> [ x ] [ t ] > <unk> ) {
<unk> = <unk> [ x ] [ t ] ;
} else if ( <unk> [ x ] [ t ] < <unk> *  <num> ) {
<unk> = <unk> [ x ] [ t ] *  <num> ;
}
}
}
NumberAxis yAxis = ( NumberAxis ) mainWindow . <unk> ( ) . <unk> ( ) . getRangeAxis ( ) ;
yAxis . setRange ( <unk> *  <num> , <unk> * <num> ) ;
NumberAxis xAxis = ( NumberAxis ) mainWindow . <unk> ( ) . <unk> ( ) . <unk> ( ) ;
xAxis . <unk> ( new <unk> ( <num> ) ) ;
xAxis . setRange ( <num> , <num> ) ;
mainWindow . getPlot ( ) . <unk> ( player . <unk> ( <unk> . getDuration ( ) ) ) ;
mainWindow . <unk> ( ) . <unk> ( mainWindow . getPlot ( ) . <unk> ( ) ) ;
<unk> . setEnabled ( false ) ;
<unk> . setEnabled ( false ) ;
<unk> . setEnabled ( false ) ;
timer = new Timer ( ( int ) Math . ceil ( <num> / <unk> . <unk> ) , new ActionListener ( ) {
@Override
public void actionPerformed ( ActionEvent e ) {
double <unk> = <num> ;
for ( int x = <num> ; x < mainWindow . getPlot ( ) . <unk> ( ) . length ; x ++ ) {
for ( int t = <num> ; t < mainWindow . getPlot ( ) . <unk> ( ) [ <num> ] . length ; t ++ ) {
if ( mainWindow . getPlot ( ) . <unk> ( ) [ x ] [ t ] > <unk> ) {
<unk> = mainWindow . getPlot ( ) . <unk> ( ) [ x ] [ t ] ;
}
}
}
NumberAxis yAxis = ( NumberAxis ) mainWindow . getPlot ( ) . <unk> ( ) . getRangeAxis ( ) ;
yAxis . setRange ( <unk> *  <num> , <unk> * <num> ) ;
NumberAxis xAxis = ( NumberAxis ) mainWindow . getPlot ( ) . <unk> ( ) . <unk> ( ) ;
xAxis . <unk> ( new <unk> ( <num> ) ) ;
xAxis . setRange ( <num> , <num> ) ;
mainWindow . getPlot ( ) . <unk> ( <unk> ) ;
<unk> ++ ;
if ( <unk> == mainWindow . getPlot ( )
. <unk> ( ) [ <num> ] . length  <num> ) {
timer . stop ( ) ;
<unk> = <num> ;
<unk> . setEnabled ( true ) ;
<unk> . setEnabled ( true ) ;
<unk> . setEnabled ( true ) ;
if ( <unk> . <unk> ( ) == <num> ) {
JOptionPane . showMessageDialog ( null , " ) ;
}
}
try {
Thread . sleep ( <num> ) ;
} catch ( InterruptedException e1 ) {
e1 . printStackTrace ( ) ;
}
}
} ) ;
timer . <unk> ( <num> ) ;
Thread <unk> = new Thread ( new <unk> ( ) ) ;
Thread playSound = new Thread ( new <unk> ( ) ) ;
playSound . start ( ) ;
<unk> . start ( ) ;
} catch ( <unk> e ) {
JOptionPane . showMessageDialog ( null ,
e . <unk> ( ) ) ;
}
}
} ) ;
}
public <unk> <unk> ( ) throws <unk> {
<unk> e = new <unk> ( ) ;
String <unk> = ( String ) <unk> . getSelectedItem ( ) ;
String <unk> = <unk> . getText ( ) ;
double <unk> = <num> ;
try {
<unk> = Double . parseDouble ( <unk> ) ;
if ( <unk> < <num> ) {
e . addError ( " ) ;
}
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
String xStart = <unk> . getText ( ) ;
double x0 = <num> ;
try {
x0 = Double . parseDouble ( xStart ) ;
if ( x0 <= <num> || x0 >= <num> ) {
e . addError ( " ) ;
}
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
String yStart = <unk> . getText ( ) ;
double y0 = <num> ;
try {
y0 = Double . parseDouble ( yStart ) ;
if ( y0 <  <num> || y0 > <num> ) {
e . addError ( " ) ;
}
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
if ( e . isError ( ) ) {
throw e ;
} else {
return new <unk> ( <unk> , <unk> , x0 , y0 ) ;
}
}
public <unk> <unk> ( ) throws <unk> {
<unk> e = new <unk> ( ) ;
String <unk> = ( String ) <unk> . getSelectedItem ( ) ;
String <unk> = <unk> . getText ( ) ;
double <unk> = <num> ;
try {
<unk> = Double . parseDouble ( <unk> ) ;
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
String <unk> = <unk> . getText ( ) ;
double <unk> = <num> ;
try {
<unk> = Double . parseDouble ( <unk> ) ;
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
double [ ] <unk> = new double [ <num> ] ;
String <unk> = <unk> . getText ( ) ;
double o0 = <num> ;
try {
o0 = Double . parseDouble ( <unk> ) ;
<unk> [ <num> ] = o0 ;
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
String <unk> = <unk> . getText ( ) ;
double o1 = <num> ;
try {
o1 = Double . parseDouble ( <unk> ) ;
<unk> [ <num> ] = o1 ;
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
String <unk> = <unk> . getText ( ) ;
double o2 = <num> ;
try {
o2 = Double . parseDouble ( <unk> ) ;
<unk> [ <num> ] = o2 ;
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
String <unk> = <unk> . getText ( ) ;
double o3 = <num> ;
try {
o3 = Double . parseDouble ( <unk> ) ;
<unk> [ <num> ] = o3 ;
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
String <unk> = <unk> . getText ( ) ;
double <unk> = <num> ;
try {
<unk> = Double . parseDouble ( <unk> ) ;
<unk> [ <num> ] = <unk> ;
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
String <unk> = <unk> . getText ( ) ;
double <unk> = <num> ;
try {
<unk> = Double . parseDouble ( <unk> ) ;
<unk> [ <num> ] = <unk> ;
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
String <unk> = <unk> . getText ( ) ;
double <unk> = <num> ;
try {
<unk> = Double . parseDouble ( <unk> ) ;
<unk> [ <num> ] = <unk> ;
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
String <unk> = <unk> . getText ( ) ;
double <unk> = <num> ;
try {
<unk> = Double . parseDouble ( <unk> ) ;
<unk> [ <num> ] = <unk> ;
} catch ( NumberFormatException ex ) {
e . addError ( " ) ;
}
if ( e . isError ( ) ) {
throw e ;
} else {
return new <unk> ( <unk> , <unk> , <unk> , <unk> ) ;
}
}
}
package ch . <unk> . sounds ;
import ch . <unk> . sounds . gui . MainWindow ;
import ch . <unk> . sounds . gui . <unk> ;
public class <unk> {
public static void main ( String [ ] args ) throws <unk> {
MainWindow <unk> = new MainWindow ( ) ;
}
}
package ch . <unk> . sounds . gui ;
import java . awt . Color ;
import javax . swing . JPanel ;
import org . jfree . chart . ChartFactory ;
import org . jfree . chart . ChartPanel ;
import org . jfree . chart . JFreeChart ;
import org . jfree . chart . axis . NumberAxis ;
import org . jfree . chart . axis . <unk> ;
import org . jfree . chart . plot . PlotOrientation ;
import org . jfree . chart . plot . XYPlot ;
import org . jfree . chart . renderer . xy . XYLineAndShapeRenderer ;
import org . jfree . data . xy . <unk> ;
import org . jfree . data . xy . XYSeries ;
import org . jfree . data . xy . XYSeriesCollection ;
public class <unk> {
private JPanel panel ;
private double [ ] [ ] <unk> ;
private double length ;
private XYSeries series ;
private XYSeriesCollection <unk> ;
private <unk> dataSet ;
private JFreeChart chart ;
private XYPlot plot ;
private XYLineAndShapeRenderer renderer ;
private ChartPanel chartPanel ;
public <unk> ( double [ ] [ ] <unk> , double length ) {
this . <unk> = <unk> ;
this . length = length ;
this . series = new XYSeries ( " ) ;
this . <unk> = new XYSeriesCollection ( ) ;
double x = <num> ;
for ( int i = <num> ; i < this . <unk> . length ; i ++ ) {
this . series . add ( x , this . <unk> [ i ] [ <num> ] ) ;
x += length / ( this . <unk> . length  <num> ) ;
}
<unk> . addSeries ( series ) ;
this . dataSet = <unk> ;
this . chart = ChartFactory . <unk> ( " ,
" , " , dataSet , PlotOrientation . VERTICAL , false ,
true , false ) ;
this . plot = chart . <unk> ( ) ;
plot . setBackgroundPaint ( Color . lightGray ) ;
plot . <unk> ( Color . white ) ;
plot . setRangeGridlinePaint ( Color . white ) ;
NumberAxis xAxis = ( NumberAxis ) plot . <unk> ( ) ;
xAxis . <unk> ( new <unk> ( <num> ) ) ;
xAxis . setRange ( <num> , <num> ) ;
NumberAxis yAxis = ( NumberAxis ) plot . getRangeAxis ( ) ;
yAxis . setRange (  <num> , <num> ) ;
this . renderer = new XYLineAndShapeRenderer ( ) ;
renderer . <unk> ( <num> , true ) ;
renderer . <unk> ( <num> , false ) ;
renderer . <unk> ( <num> , Color . black ) ;
plot . setRenderer ( renderer ) ;
this . chartPanel = new ChartPanel ( chart ) ;
chartPanel . setPreferredSize ( new java . awt . Dimension ( <num> , <num> ) ) ;
this . panel = new JPanel ( ) ;
panel . add ( chartPanel ) ;
}
public void <unk> ( int <unk> ) {
series . delete ( <num> , series . getItemCount ( )  <num> ) ;
double x = <num> ;
for ( int i = <num> ; i < this . <unk> . length ; i ++ ) {
this . series . add ( x , this . <unk> [ i ] [ <unk> ] ) ;
x += length / ( this . <unk> . length  <num> ) ;
}
<unk> . <unk> ( ) ;
<unk> . addSeries ( series ) ;
dataSet = <unk> ;
chart . <unk> ( ) . <unk> ( dataSet ) ;
plot = chart . <unk> ( ) ;
chartPanel . <unk> ( chart ) ;
}
public JPanel <unk> ( ) {
return panel ;
}
public double [ ] [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( double [ ] [ ] <unk> ) {
this . <unk> = <unk> ;
}
public XYPlot <unk> ( ) {
return plot ;
}
}
package ch . <unk> . sounds ;
public class <unk> {
String <unk> ;
double <unk> ;
double xStart ;
double yStart ;
public <unk> ( String <unk> , double <unk> , double xStart , double yStart ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . xStart = xStart ;
this . yStart = yStart ;
}
public String <unk> ( ) {
return <unk> ;
}
public double <unk> ( ) {
return <unk> ;
}
public double <unk> ( ) {
return xStart ;
}
public double <unk> ( ) {
return yStart ;
}
@Override
public String toString ( ) {
return " + <unk>
+ " + <unk> + " + xStart
+ " + yStart + " ;
}
}
package ch . <unk> . sounds ;
import java . util . ArrayList ;
public class <unk> {
public double [ ] <unk> ( ArrayList < <unk> > <unk> , int duration ) {
double [ ] sound = <unk> . get ( <num> ) . <unk> ( duration ) ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ ) {
double [ ] wave = <unk> . get ( i ) . <unk> ( duration ) ;
for ( int k = <num> ; k < sound . length ; k ++ ) {
sound [ k ] = ( sound [ k ] + wave [ k ] ) ;
}
}
return sound ;
}
public byte [ ] <unk> ( double [ ] sound ) {
int scaleFactor = <unk> . <unk> ;
byte [ ] <unk> = new byte [ sound . length * <unk> . <unk> ] ;
int e ;
do {
e = <num> ;
for ( int i = <num> ; i < sound . length ; ++ i ) {
if ( Math . abs ( scaleFactor * sound [ i ] ) > <num> && scaleFactor > <num> ) {
scaleFactor -= <num> ;
e = <num> ;
}
}
} while ( e == <num> ) ;
for ( int i = <num> , j = <num> ; i < sound . length ; ++ i ) {
int wave = ( int ) ( scaleFactor * sound [ i ] ) ;
byte <unk> = ( byte ) ( wave >>> <num> ) ;
byte <unk> = ( byte ) wave ;
for ( int c = <num> ; c < <unk> . channels ; ++ c ) {
<unk> [ j ++ ] = <unk> ;
if ( <unk> . <unk> > <num> ) {
<unk> [ j ++ ] = <unk> ;
}
}
}
return <unk> ;
}
package ch . <unk> . sounds . gui ;
import java . awt . BorderLayout ;
import java . awt . Color ;
import java . awt . Font ;
import javax . swing . BoxLayout ;
import javax . swing . JFrame ;
import javax . swing . JLabel ;
import javax . swing . JPanel ;
import javax . swing . <unk> ;
import ch . <unk> . sounds . <unk> ;
public class MainWindow {
private JFrame frame ;
private <unk> <unk> ;
private <unk> plot ;
private JPanel <unk> ;
private <unk> <unk> ;
private JPanel <unk> ;
public MainWindow ( ) throws <unk> {
<unk> ( ) ;
}
private void <unk> ( ) throws <unk> {
frame = new JFrame ( " ) ;
frame . setSize ( <num> , <num> ) ;
frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
<unk> = new <unk> ( this ) ;
final double [ ] [ ] <unk> = new double [ <num> ] [ <num> ] ;
plot = new <unk> ( <unk> , <unk> . <unk> ) ;
<unk> = plot . <unk> ( ) ;
<unk> = new <unk> ( <unk> , <unk> . <unk> ) ;
<unk> = <unk> . <unk> ( ) ;
JPanel <unk> = new JPanel ( new BorderLayout ( ) ) ;
JPanel <unk> = new JPanel ( ) ;
<unk> . setLayout ( new BoxLayout ( <unk> , BoxLayout . PAGE_AXIS ) ) ;
<unk> . add ( <unk> . <unk> ( ) , BorderLayout . NORTH ) ;
frame . getContentPane ( ) . add ( <unk> , BorderLayout . WEST ) ;
frame . getContentPane ( ) . add ( <unk> , BorderLayout . SOUTH ) ;
JPanel <unk> = new JPanel ( new <unk> ( ) ) ;
Font f1 = new Font ( " , Font . BOLD , <num> ) ;
JLabel <unk> = new JLabel ( " ) ;
<unk> . setHorizontalAlignment ( JLabel . CENTER ) ;
<unk> . setFont ( f1 ) ;
<unk> . setForeground ( new Color ( <num> , <num> , <num> ) ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
JLabel <unk> = new JLabel ( " ) ;
<unk> . setHorizontalAlignment ( JLabel . CENTER ) ;
<unk> . setFont ( f1 ) ;
<unk> . setForeground ( new Color ( <num> , <num> , <num> ) ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> . <unk> ( <unk> , <num> , <num> , <num> , <num> , <num> , <num> ) ;
frame . getContentPane ( ) . add ( <unk> , BorderLayout . CENTER ) ;
frame . setVisible ( true ) ;
}
public <unk> getPlot ( ) {
return plot ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
}
package ch . <unk> . sounds ;
public final class <unk> {
public final static double <unk> = <num> ;
public final static int sampleRate = <num> ;
public final static int <unk> = <num> ;
public final static int channels = <num> ;
public final static int <unk> = <num> ;
public final static int <unk> = <num> ;
private <unk> ( ) {
throw new AssertionError ( ) ;
}
}
package ch . <unk> . sounds . gui ;
import java . util . LinkedList ;
import java . util . List ;
public class <unk> extends Exception {
private static final long serialVersionUID = <num> ;
private List < String > errorMessages ;
public void addError ( String s ) {
if ( errorMessages == null ) {
errorMessages = new LinkedList < String > ( ) ;
}
errorMessages . add ( s ) ;
}
public List < String > getErrorMessages ( ) {
return errorMessages ;
}
public boolean isError ( ) {
if ( errorMessages != null && errorMessages . size ( ) > <num> ) {
return true ;
} else {
return false ;
}
}
public String <unk> ( ) {
String <unk> = " ;
if ( errorMessages != null ) {
for ( String e : errorMessages ) {
<unk> += " + e
+ System . getProperty ( " ) ;
}
}
return <unk> ;
}
}
package ch . <unk> . sounds . gui ;
import javax . swing . <unk> ;
import javax . swing . <unk> ;
import java . awt . Component ;
import java . awt . Container ;
public class <unk> {
public static void <unk> ( Component c ) {
System . out . println ( " + c . getMinimumSize ( ) ) ;
System . out . println ( " + c . getPreferredSize ( ) ) ;
System . out . println ( " + c . getMaximumSize ( ) ) ;
}
public static void makeGrid ( Container parent ,
int rows , int cols ,
int <unk> , int <unk> ,
int <unk> , int <unk> ) {
<unk> layout ;
try {
layout = ( <unk> ) parent . getLayout ( ) ;
} catch ( ClassCastException exc ) {
System . err . println ( " ) ;
return ;
}
<unk> <unk> = <unk> . constant ( <unk> ) ;
<unk> <unk> = <unk> . constant ( <unk> ) ;
<unk> <unk> = <unk> . constant ( <unk> ) ;
<unk> <unk> = <unk> . constant ( <unk> ) ;
int max = rows * cols ;
<unk> <unk> = layout . <unk> ( parent . getComponent ( <num> ) ) .
getWidth ( ) ;
<unk> <unk> = layout . <unk> ( parent . getComponent ( <num> ) ) .
getHeight ( ) ;
for ( int i = <num> ; i < max ; i ++ ) {
<unk> . <unk> cons = layout . <unk> (
parent . getComponent ( i ) ) ;
<unk> = <unk> . max ( <unk> , cons . getWidth ( ) ) ;
<unk> = <unk> . max ( <unk> , cons . getHeight ( ) ) ;
}
for ( int i = <num> ; i < max ; i ++ ) {
<unk> . <unk> cons = layout . <unk> (
parent . getComponent ( i ) ) ;
cons . setWidth ( <unk> ) ;
cons . setHeight ( <unk> ) ;
}
<unk> . <unk> <unk> = null ;
<unk> . <unk> <unk> = null ;
for ( int i = <num> ; i < max ; i ++ ) {
<unk> . <unk> cons = layout . <unk> (
parent . getComponent ( i ) ) ;
if ( i % cols == <num> ) {
<unk> = <unk> ;
cons . setX ( <unk> ) ;
} else {
cons . setX ( <unk> . sum ( <unk> . <unk> ( <unk> . EAST ) ,
<unk> ) ) ;
}
if ( i / cols == <num> ) {
cons . setY ( <unk> ) ;
} else {
cons . setY ( <unk> . sum ( <unk> . <unk> ( <unk> . SOUTH ) ,
<unk> ) ) ;
}
<unk> = cons ;
}
<unk> . <unk> <unk> = layout . <unk> ( parent ) ;
<unk> . <unk> ( <unk> . SOUTH ,
<unk> . sum (
<unk> . constant ( <unk> ) ,
<unk> . <unk> ( <unk> . SOUTH ) ) ) ;
<unk> . <unk> ( <unk> . EAST ,
<unk> . sum (
<unk> . constant ( <unk> ) ,
<unk> . <unk> ( <unk> . EAST ) ) ) ;
}
private static <unk> . <unk> <unk> (
int row , int col ,
Container parent ,
int cols ) {
<unk> layout = ( <unk> ) parent . getLayout ( ) ;
Component c = parent . getComponent ( row * cols + col ) ;
return layout . <unk> ( c ) ;
}
public static void <unk> ( Container parent ,
int rows , int cols ,
int <unk> , int <unk> ,
int <unk> , int <unk> ) {
<unk> layout ;
try {
layout = ( <unk> ) parent . getLayout ( ) ;
} catch ( ClassCastException exc ) {
System . err . println ( " ) ;
return ;
}
<unk> x = <unk> . constant ( <unk> ) ;
for ( int c = <num> ; c < cols ; c ++ ) {
<unk> width = <unk> . constant ( <num> ) ;
for ( int r = <num> ; r < rows ; r ++ ) {
width = <unk> . max ( width ,
<unk> ( r , c , parent , cols ) .
getWidth ( ) ) ;
}
for ( int r = <num> ; r < rows ; r ++ ) {
<unk> . <unk> constraints =
<unk> ( r , c , parent , cols ) ;
constraints . setX ( x ) ;
constraints . setWidth ( width ) ;
}
x = <unk> . sum ( x , <unk> . sum ( width , <unk> . constant ( <unk> ) ) ) ;
}
<unk> y = <unk> . constant ( <unk> ) ;
for ( int r = <num> ; r < rows ; r ++ ) {
<unk> height = <unk> . constant ( <num> ) ;
for ( int c = <num> ; c < cols ; c ++ ) {
height = <unk> . max ( height ,
<unk> ( r , c , parent , cols ) .
getHeight ( ) ) ;
}
for ( int c = <num> ; c < cols ; c ++ ) {
<unk> . <unk> constraints =
<unk> ( r , c , parent , cols ) ;
constraints . setY ( y ) ;
constraints . setHeight ( height ) ;
}
y = <unk> . sum ( y , <unk> . sum ( height , <unk> . constant ( <unk> ) ) ) ;
}
<unk> . <unk> <unk> = layout . <unk> ( parent ) ;
<unk> . <unk> ( <unk> . SOUTH , y ) ;
<unk> . <unk> ( <unk> . EAST , x ) ;
}
}
package ch . <unk> . sounds ;
import org . apache . commons . math3 . analysis . <unk> ;
import org . apache . commons . math3 . analysis . integration . <unk> ;
public class <unk> {
private double l ;
private double x_start ;
private double <unk> ;
private int k ;
private double coefficient ;
public <unk> ( double x_start , double <unk> , int k ) {
this . l = <unk> . <unk> ;
this . x_start = x_start ;
this . <unk> = <unk> ;
this . k = k ;
}
public void <unk> ( ) {
final int <unk> = <num> ;
final double <unk> = <num> ;
final double <unk> = <num> ;
final int <unk> = Integer . MAX_VALUE ;
<unk> integrator = new <unk> (
<unk> , <unk> , <unk> ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> <unk> = new <unk> ( ) ;
coefficient = <num> / l
* integrator . integrate ( <unk> , <unk> , <num> , x_start ) ;
coefficient += <num> / l
* integrator . integrate ( <unk> , <unk> , x_start , l ) ;
}
public double <unk> ( ) {
return coefficient ;
}
private class <unk> implements <unk> {
@Override
public double value ( double x ) {
double y = <unk> / x_start * x * Math . sin ( k * Math . PI * x / l ) ;
return y ;
}
}
private class <unk> implements <unk> {
@Override
public double value ( double x ) {
double y = (  <num> ) * <unk> / ( l  x_start ) * ( x  l )
* Math . sin ( k * Math . PI * x / l ) ;
return y ;
}
}
}
package ch . <unk> . sounds ;
import java . util . ArrayList ;
import javax . sound . sampled . AudioFormat ;
import javax . sound . sampled . AudioSystem ;
import javax . sound . sampled . SourceDataLine ;
public class Player {
private ArrayList < <unk> > <unk> ;
private <unk> <unk> ;
private byte [ ] <unk> ;
private SourceDataLine line ;
private int <unk> ;
final AudioFormat <unk> = new AudioFormat ( <unk> . sampleRate ,
<unk> . <unk> * <num> , <unk> . channels ,
true , true ) ;
public Player ( ) {
<unk> = <num> ;
this . <unk> = new <unk> ( ) ;
}
public void <unk> ( ArrayList < <unk> > <unk> ) {
this . <unk> = <unk> ;
}
public void <unk> ( int duration ) {
<unk> = <unk> . <unk> ( <unk> . <unk> ( <unk> , duration ) ) ;
}
public void play ( ) {
<unk> ++ ;
try {
this . line = AudioSystem . <unk> ( <unk> ) ;
line . open ( <unk> ) ;
line . start ( ) ;
int <unk> = ( int ) Math . ceil ( ( Math . ceil ( <num> / <unk> . <unk> ) / ( <num> / <num> ) ) ) * <num> ;
for ( int i = <num> ; i < <unk> . length  <unk> ; i = i + <unk> ) {
line . write ( <unk> , i , <unk> ) ;
Thread . sleep ( <num> ) ;
}
line . drain ( ) ;
line . close ( ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public double [ ] [ ] <unk> ( int duration ) {
<unk> wave ;
double [ ] [ ] <unk> = new double [ <num> ] [ duration * <unk> . <unk> ] ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ ) {
wave = <unk> . get ( i ) ;
for ( int k = <num> ; k < <num> ; k ++ ) {
for ( int n = <num> ; n < ( duration * <unk> . <unk> ) ; n ++ ) {
<unk> [ k ] [ n ] += wave . <unk> ( n / ( double ) <unk> . <unk> , ( k * wave . getLength ( ) ) / <num> ) ;
}
}
}
return <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
}
package ch . <unk> . sounds ;
import java . util . Arrays ;
public class <unk> {
String <unk> ;
double <unk> ;
double <unk> ;
double [ ] <unk> = new double [ <num> ] ;
public <unk> ( String <unk> , double <unk> , double <unk> , double [ ] <unk> ) {
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public String <unk> ( ) {
return <unk> ;
}
public double <unk> ( ) {
return <unk> ;
}
public double <unk> ( ) {
return <unk> ;
}
public double [ ] <unk> ( ) {
return <unk> ;
}
@Override
public String toString ( ) {
return " + <unk>
+ " + <unk> + " + <unk>
+ " + Arrays . toString ( <unk> ) + " ;
}
}
package com . android . <unk> ;
import org . json . JSONException ;
import org . json . JSONObject ;
import android . util . Log ;
public class JsonParser {
public static <unk> <unk> ( JSONObject <unk> ) throws JSONException {
Log . i ( JsonParser . class . getName ( ) , " ) ;
double latitude , longitude ;
JSONObject images ;
String url ;
JSONObject location , likes , user ;
int count , id ;
location = <unk> . getJSONObject ( " ) ;
latitude = ( location . getDouble ( " ) ) ;
longitude = ( location . getDouble ( " ) ) ;
likes = <unk> . getJSONObject ( " ) ;
count = ( likes . getInt ( " ) ) ;
images = <unk> . getJSONObject ( " ) ;
images = images . getJSONObject ( " ) ;
url = images . getString ( " ) ;
user = <unk> . getJSONObject ( " ) ;
id = ( user . getInt ( " ) ) ;
<unk> data = new <unk> ( ) ;
data . latitude = latitude ;
data . longitude = longitude ;
data . count = count ;
data . url = url ;
data . id = id ;
data . username = user . getString ( " ) ;
data . time = <unk> . getString ( " ) ;
return data ;
}
}
package com . android . <unk> ;
import org . json . JSONObject ;
public class <unk> {
public double latitude , longitude ;
public JSONObject images ;
public String url ;
public JSONObject location , likes , user ;
public int count , id ;
public String username ;
public String time ;
}
package com . android . <unk> ;
import java . util . ArrayList ;
import android . content . Context ;
import android . content . Intent ;
import android . graphics . drawable . Drawable ;
import com . google . android . maps . ItemizedOverlay ;
import com . google . android . maps . OverlayItem ;
public class <unk> extends ItemizedOverlay < OverlayItem > {
private ArrayList < OverlayItem > mOverlays = new ArrayList < OverlayItem > ( ) ;
Context mContext ;
public <unk> ( Drawable defaultMarker ) {
super ( boundCenterBottom ( defaultMarker ) ) ;
}
public <unk> ( Drawable defaultMarker , Context context ) {
super ( boundCenterBottom ( defaultMarker ) ) ;
mContext = context ;
}
public void addOverlay ( OverlayItem overlay ) {
mOverlays . add ( overlay ) ;
populate ( ) ;
}
@Override
protected OverlayItem createItem ( int i ) {
return mOverlays . get ( i ) ;
}
@Override
public int size ( ) {
return mOverlays . size ( ) ;
}
@Override
protected boolean onTap ( int index ) {
OverlayItem item = mOverlays . get ( index ) ;
Intent intent = new Intent ( mContext , <unk> . class ) ;
intent . putExtra ( " , item . getSnippet ( ) ) ;
intent . putExtra ( " , item . getTitle ( ) ) ;
mContext . startActivity ( intent ) ;
return true ;
}
}
package com . android . <unk> ;
import java . io . ByteArrayOutputStream ;
import java . io . IOException ;
import java . util . ArrayList ;
import java . util . Arrays ;
import java . util . Comparator ;
import org . apache . http . HttpResponse ;
import org . apache . http . HttpStatus ;
import org . apache . http . StatusLine ;
import org . apache . http . client . ClientProtocolException ;
import org . apache . http . client . HttpClient ;
import org . apache . http . client . methods . HttpGet ;
import org . apache . http . impl . client . DefaultHttpClient ;
import org . json . JSONArray ;
import org . json . JSONException ;
import org . json . JSONObject ;
import android . os . AsyncTask ;
import android . util . Log ;
public class <unk> {
private static final String TAG = " ;
public static final String TOKEN = " ;
private <unk> <unk> ;
public <unk> ( <unk> g ) {
<unk> = g ;
}
public void <unk> ( double latitude , double longitude , long <unk> ) {
String uri = String . format ( " , latitude , longitude , <unk> , TOKEN , <num> ) ;
Log . d ( TAG , uri ) ;
new RequestTask ( this ) . execute ( uri ) ;
}
public void <unk> ( double latitude , double longitude ) {
String uri = String . format ( " , latitude , longitude , TOKEN ) ;
Log . d ( TAG , uri ) ;
new RequestTask ( this ) . execute ( uri ) ;
}
public void <unk> ( <unk> [ ] data ) {
<unk> . <unk> ( data ) ;
}
class RequestTask extends AsyncTask < String , String , String > {
<unk> <unk> ;
RequestTask ( <unk> g ) {
<unk> = g ;
}
@Override
protected String doInBackground ( String . . . uri ) {
HttpClient httpclient = new DefaultHttpClient ( ) ;
HttpResponse response ;
String responseString = null ;
try {
response = httpclient . execute ( new HttpGet ( uri [ <num> ] ) ) ;
StatusLine statusLine = response . getStatusLine ( ) ;
if ( statusLine . getStatusCode ( ) == HttpStatus . SC_OK ) {
ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ;
response . getEntity ( ) . writeTo ( out ) ;
out . close ( ) ;
responseString = out . toString ( ) ;
} else {
response . getEntity ( ) . getContent ( ) . close ( ) ;
throw new IOException ( statusLine . getReasonPhrase ( ) ) ;
}
} catch ( ClientProtocolException e ) {
} catch ( IOException e ) {
}
return responseString ;
}
@Override
protected void onPostExecute ( String result ) {
super . onPostExecute ( result ) ;
ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( <num> ) ;
try {
JSONObject response = new JSONObject ( result ) ;
JSONArray data = response . getJSONArray ( " ) ;
for ( int i = <num> ; i < data . length ( ) ; i ++ ) {
JSONObject o = data . getJSONObject ( i ) ;
<unk> s = JsonParser . <unk> ( o ) ;
<unk> . add ( s ) ;
}
} catch ( JSONException e ) {
e . printStackTrace ( ) ;
}
<unk> [ ] arr = new <unk> [ <unk> . size ( ) ] ;
for ( int i = <num> ; i < arr . length ; i ++ ) {
arr [ i ] = <unk> . get ( i ) ;
}
Arrays . sort ( arr , new Comparator < <unk> > ( ) {
public int compare ( <unk> a , <unk> b ) {
int c1 = Integer . valueOf ( a . count ) ;
int c2 = Integer . valueOf ( b . count ) ;
if ( c1 < c2 )
return <num> ;
else if ( c1 > c2 )
return  <num> ;
else
return <num> ;
}
} ) ;
for ( <unk> a : <unk> ) {
Log . d ( TAG , a . url ) ;
}
Log . d ( TAG , result ) ;
<unk> ( arr ) ;
}
}
}
package com . android . <unk> ;
import android . os . Bundle ;
import java . util . ArrayList ;
import java . util . List ;
import android . content . Context ;
import android . content . Intent ;
import android . graphics . drawable . Drawable ;
import android . location . Location ;
import android . location . LocationManager ;
import android . util . Log ;
import android . view . View ;
import android . widget . Button ;
import com . google . android . maps . GeoPoint ;
import com . google . android . maps . ItemizedOverlay ;
import com . google . android . maps . MapActivity ;
import com . google . android . maps . MapView ;
import com . google . android . maps . MyLocationOverlay ;
import com . google . android . maps . Overlay ;
import com . google . android . maps . OverlayItem ;
public class <unk> extends MapActivity {
private static final int DEFAULT_ZOOM = <num> ;
private static final String TAG = " ;
private LocationManager <unk> ;
private <unk> <unk> ;
private double <unk> ;
private double <unk> ;
MapView mapView ;
MyLocationOverlay <unk> ;
<unk> <unk> ;
List < Overlay > <unk> ;
long unixTime , <unk> , <unk> ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
Button <unk> = ( Button ) findViewById ( R . id . <unk> ) ;
Button Best = ( Button ) findViewById ( R . id . best ) ;
mapView = ( MapView ) findViewById ( R . id . mapview ) ;
mapView . setBuiltInZoomControls ( true ) ;
mapView . getController ( ) . setZoom ( DEFAULT_ZOOM ) ;
<unk> = ( LocationManager ) this . getSystemService ( Context . LOCATION_SERVICE ) ;
<unk> ( mapView , <unk> ) ;
Drawable drawable = this . getResources ( ) . getDrawable ( R . drawable . <unk> ) ;
<unk> = new <unk> ( drawable , this ) ;
<unk> = new MyLocationOverlay ( this , mapView ) ;
mapView . getOverlays ( ) . add ( <unk> ) ;
<unk> . enableMyLocation ( ) ;
<unk> . enableCompass ( ) ;
<unk> = new <unk> ( this ) ;
unixTime = System . currentTimeMillis ( ) / <num> ;
<unk> = unixTime  <num> / <num> ;
<unk> = unixTime  <num> / <num> ;
<unk> . <unk> ( <unk> , <unk> , <unk> ) ;
<unk> . setOnClickListener ( new View . OnClickListener ( ) {
public void onClick ( View v ) {
mapView . getOverlays ( ) . clear ( ) ;
mapView . invalidate ( ) ;
mapView . getOverlays ( ) . add ( <unk> ) ;
<unk> . enableMyLocation ( ) ;
<unk> . enableCompass ( ) ;
<unk> . <unk> ( <unk> , <unk> ) ;
}
} ) ;
Best . setOnClickListener ( new View . OnClickListener ( ) {
public void onClick ( View v ) {
mapView . getOverlays ( ) . clear ( ) ;
mapView . invalidate ( ) ;
mapView . getOverlays ( ) . add ( <unk> ) ;
<unk> . enableMyLocation ( ) ;
<unk> . enableCompass ( ) ;
<unk> . <unk> ( <unk> , <unk> , <unk> ) ;
}
} ) ;
}
public void <unk> ( MapView mapView , LocationManager <unk> ) {
Location <unk> = <unk> . getLastKnownLocation ( LocationManager . GPS_PROVIDER ) ;
Location <unk> = <unk> . getLastKnownLocation ( LocationManager . NETWORK_PROVIDER ) ;
Log . i ( TAG , " + <unk> + " + " + <unk> ) ;
if ( <unk> != null ) {
GeoPoint <unk> = <unk> ( <unk> ) ;
mapView . getController ( ) . animateTo ( <unk> ) ;
}
else {
GeoPoint <unk> = <unk> ( <unk> ) ;
mapView . getController ( ) . animateTo ( <unk> ) ;
}
}
public GeoPoint <unk> ( Location mLocation ) {
<unk> = mLocation . getLatitude ( ) ;
<unk> = mLocation . getLongitude ( ) ;
GeoPoint <unk> = new GeoPoint ( ( int ) ( <unk> * <num> ) , ( int ) ( <unk> * <num> ) ) ;
return <unk> ;
}
@Override
protected boolean isRouteDisplayed ( ) {
return false ;
}
public void <unk> ( <unk> [ ] data ) {
int num = <num> ;
Log . i ( TAG , " ) ;
for ( <unk> s : data ) {
String uri = s . url ;
double lat = Double . valueOf ( s . latitude ) ;
double lon = Double . valueOf ( s . longitude ) ;
String id = String . valueOf ( s . id ) ;
Log . i ( TAG , " + uri + " + lat ) ;
GeoPoint point = new GeoPoint ( ( int ) ( <num> * lat ) , ( int ) ( <num> * lon ) ) ;
OverlayItem item = new OverlayItem ( point , id + " + String . valueOf ( num + <num> ) , uri ) ;
<unk> . addOverlay ( item ) ;
num ++ ;
if ( num == <num> ) {
break ;
}
}
mapView . getOverlays ( ) . add ( <unk> ) ;
}
package com . android . <unk> ;
import java . io . ByteArrayInputStream ;
import java . io . ByteArrayOutputStream ;
import java . io . IOException ;
import java . io . InputStream ;
import java . net . MalformedURLException ;
import java . net . URL ;
import java . util . ArrayList ;
import java . util . Arrays ;
import java . util . Comparator ;
import org . apache . http . HttpResponse ;
import org . apache . http . HttpStatus ;
import org . apache . http . StatusLine ;
import org . apache . http . client . ClientProtocolException ;
import org . apache . http . client . HttpClient ;
import org . apache . http . client . methods . HttpGet ;
import org . apache . http . impl . client . DefaultHttpClient ;
import org . json . JSONArray ;
import org . json . JSONException ;
import org . json . JSONObject ;
import android . app . Activity ;
import android . content . Context ;
import android . content . Intent ;
import android . content . SharedPreferences ;
import android . content . SharedPreferences . Editor ;
import android . os . AsyncTask ;
import android . os . Bundle ;
import android . util . Log ;
import android . view . View ;
import android . view . View . OnClickListener ;
import android . webkit . WebView ;
import android . webkit . WebViewClient ;
import android . widget . Button ;
import android . widget . Toast ;
import com . <unk> . <unk> . <unk> ;
import com . <unk> . <unk> . <unk> . Entry ;
import com . <unk> . <unk> . android . <unk> ;
import com . <unk> . <unk> . exception . <unk> ;
import com . <unk> . <unk> . exception . <unk> ;
import com . <unk> . <unk> . session . <unk> ;
import com . <unk> . <unk> . session . <unk> ;
import com . <unk> . <unk> . session . Session . <unk> ;
public class <unk> extends Activity {
String TAG = " ;
WebView webview ;
Button <unk> ;
<unk> <unk> ;
Button <unk> ;
String _id ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
webview = ( WebView ) findViewById ( R . id . webview ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( <unk> ) ;
<unk> = ( Button ) findViewById ( R . id . <unk> ) ;
<unk> . setOnClickListener ( <unk> ) ;
Intent intent = getIntent ( ) ;
String uri = intent . getStringExtra ( " ) ;
_id = intent . getStringExtra ( " ) ;
String [ ] IDs = _id . split ( " ) ;
_id = IDs [ <num> ] ;
String html = String . format ( " , uri , IDs [ <num> ] ) ;
webview . setWebViewClient ( new WebViewClient ( ) {
public void onProgressChanged ( WebView view , int progress ) {
<unk> . this . setProgress ( progress * <num> ) ;
}
} ) ;
webview . loadData ( html , " , null ) ;
}
protected void onResume ( ) {
super . onResume ( ) ;
if ( <unk> != null ) {
<unk> . onResume ( ) ;
}
}
public OnClickListener <unk> = new OnClickListener ( ) {
@Override
public void onClick ( View arg0 ) {
if ( <unk> == null ) {
<unk> = new <unk> ( ) ;
<unk> . init ( ) ;
<unk> . login ( ) ;
return ;
}
}
} ;
public OnClickListener <unk> = new OnClickListener ( ) {
@Override
public void onClick ( View arg0 ) {
<unk> ( _id ) ;
}
} ;
public void <unk> ( String id ) {
String uri = String . format ( " , id , <unk> . TOKEN ) ;
Log . d ( TAG , uri ) ;
new RequestTask ( ) . execute ( uri ) ;
}
public void <unk> ( ) {
Toast . makeText ( this , " , Toast . LENGTH_SHORT ) . show ( ) ;
}
class RequestTask extends AsyncTask < String , String , String > {
@Override
protected String doInBackground ( String . . . uri ) {
HttpClient httpclient = new DefaultHttpClient ( ) ;
HttpResponse response ;
String responseString = null ;
try {
response = httpclient . execute ( new HttpGet ( uri [ <num> ] ) ) ;
StatusLine statusLine = response . getStatusLine ( ) ;
if ( statusLine . getStatusCode ( ) == HttpStatus . SC_OK ) {
ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ;
response . getEntity ( ) . writeTo ( out ) ;
out . close ( ) ;
responseString = out . toString ( ) ;
} else {
response . getEntity ( ) . getContent ( ) . close ( ) ;
throw new IOException ( statusLine . getReasonPhrase ( ) ) ;
}
} catch ( ClientProtocolException e ) {
} catch ( IOException e ) {
}
return responseString ;
}
@Override
protected void onPostExecute ( String result ) {
super . onPostExecute ( result ) ;
ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( <num> ) ;
try {
JSONObject response = new JSONObject ( result ) ;
JSONArray data = response . getJSONArray ( " ) ;
for ( int i = <num> ; i < data . length ( ) ; i ++ ) {
JSONObject o = data . getJSONObject ( i ) ;
<unk> s = JsonParser . <unk> ( o ) ;
<unk> . add ( s ) ;
}
} catch ( JSONException e ) {
e . printStackTrace ( ) ;
}
<unk> [ ] arr = new <unk> [ <unk> . size ( ) ] ;
for ( int i = <num> ; i < arr . length ; i ++ ) {
arr [ i ] = <unk> . get ( i ) ;
}
Arrays . sort ( arr , new Comparator < <unk> > ( ) {
public int compare ( <unk> a , <unk> b ) {
int c1 = Integer . valueOf ( a . count ) ;
int c2 = Integer . valueOf ( b . count ) ;
if ( c1 < c2 )
return <num> ;
else if ( c1 > c2 )
return  <num> ;
else
return <num> ;
}
} ) ;
for ( <unk> a : <unk> ) {
Log . d ( TAG , a . url ) ;
}
String html = " ;
for ( int i = <num> ; i < arr . length ; i ++ ) {
html += String . format ( " , arr [ i ] . url ) ;
long time = Long . valueOf ( arr [ i ] . time ) ;
java . util . Date time2 = new java . util . Date ( time * <num> ) ;
html += String . format ( " , arr [ i ] . username , time2 ) ;
}
Log . d ( TAG , result ) ;
webview . loadData ( html , " , null ) ;
}
}
private class <unk> {
final static private String APP_KEY = " ;
final static private String <unk> = " ;
private <unk> < <unk> > <unk> ;
private <unk> <unk> ;
public <unk> ( ) {
}
public void init ( ) {
<unk> <unk> = new <unk> ( APP_KEY , <unk> ) ;
<unk> session = new <unk> ( <unk> , <unk> . <unk> ) ;
<unk> = new <unk> < <unk> > ( session ) ;
}
public void login ( ) {
<unk> access = <unk> ( ) ;
if ( access != null ) {
<unk> . getSession ( ) . <unk> ( access ) ;
}
else {
}
}
public void onResume ( ) {
if ( <unk> . getSession ( ) . <unk> ( ) ) {
try {
<unk> . getSession ( ) . <unk> ( ) ;
<unk> tokens = <unk> . getSession ( ) . <unk> ( ) ;
SharedPreferences prefs = <unk> . getPreferences ( Context . MODE_PRIVATE ) ;
Editor editor = prefs . edit ( ) ;
editor . putString ( " , tokens . key ) ;
editor . putString ( " , tokens . secret ) ;
editor . commit ( ) ;
} catch ( IllegalStateException e ) {
Log . i ( " , " , e ) ;
}
}
}
public <unk> <unk> ( ) {
SharedPreferences prefs = <unk> . getPreferences ( Context . MODE_PRIVATE ) ;
String key = prefs . getString ( " , " ) ;
String secret = prefs . getString ( " , " ) ;
if ( key . equals ( " ) || secret . equals ( " ) ) return null ;
return new <unk> ( key , secret ) ;
}
public void upload ( String uri ) {
InputStream stream = null ;
try {
URL oracle = new URL ( uri ) ;
stream = oracle . openStream ( ) ;
} catch ( MalformedURLException e1 ) {
e1 . printStackTrace ( ) ;
} catch ( IOException e1 ) {
e1 . printStackTrace ( ) ;
}
if ( stream == null ) {
return ;
}
String fileContents = " ;
ByteArrayInputStream inputStream = new ByteArrayInputStream ( fileContents . getBytes ( ) ) ;
try {
Entry newEntry = <unk> . <unk> ( " , stream , fileContents . length ( ) , null , null ) ;
Log . i ( " , " + newEntry . rev ) ;
} catch ( <unk> e ) {
Log . e ( " , " ) ;
} catch ( <unk> e ) {
Log . e ( " , " ) ;
}
<unk> . <unk> ( ) ;
}
}
}
import java . io . BufferedInputStream ;
import java . io . BufferedOutputStream ;
import java . io . File ;
import java . io . FileInputStream ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . util . zip . ZipEntry ;
import java . util . zip . ZipInputStream ;
public class <unk> {
private static final int BUFFER_SIZE = <num> ;
public static File unzip ( String target , String <unk> , String destination ) throws IOException {
ZipEntry <unk> ;
ZipInputStream <unk> = new ZipInputStream ( new BufferedInputStream ( new FileInputStream ( <unk> ) ) ) ;
File file = null ;
while ( ( <unk> = <unk> . getNextEntry ( ) ) != null ) {
String <unk> = <unk> . getName ( ) ;
if ( <unk> . getName ( ) . toUpperCase ( ) . equals ( target . toUpperCase ( ) ) ) {
file = new File ( destination , <unk> . getName ( ) ) ;
BufferedOutputStream <unk> = new BufferedOutputStream ( new FileOutputStream ( file ) , BUFFER_SIZE ) ;
byte buf [ ] = new byte [ BUFFER_SIZE ] ;
int count ;
while ( ( count = <unk> . read ( buf , <num> , BUFFER_SIZE ) ) !=  <num> )
<unk> . write ( buf , <num> , count ) ;
<unk> . flush ( ) ;
<unk> . close ( ) ;
break ;
}
}
<unk> . close ( ) ;
return file ;
}
}
import java . io . BufferedReader ;
import java . io . File ;
import java . io . InputStreamReader ;
import java . io . IOException ;
import java . io . InputStream ;
import java . util . Arrays ;
import java . lang . StringBuilder ;
import java . lang . StringBuffer ;
import android . os . Message ;
import android . os . Messenger ;
import android . content . Intent ;
import android . content . ServiceConnection ;
import android . app . Activity ;
import android . content . Context ;
import android . content . ComponentName ;
import android . os . Bundle ;
import android . os . Handler ;
import android . os . HandlerThread ;
import android . os . IBinder ;
import android . os . Looper ;
import android . os . Process ;
import android . util . Log ;
import java . lang . ref . WeakReference ;
public class <unk> {
Message in ;
volatile Message response = null ;
private Message <unk> = null ;
private Bundle <unk> = null ;
public volatile Object lock = new Object ( ) ;
<unk> <unk> ;
public boolean execute ( Context context , String package_name , String <unk> , Message message , int timeout ) {
HandlerThread thread = new HandlerThread ( " , Process . THREAD_PRIORITY_BACKGROUND ) ;
thread . start ( ) ;
Looper <unk> = thread . getLooper ( ) ;
<unk> = new <unk> ( <unk> , this ) ;
ComponentName c = new ComponentName ( package_name , <unk> ) ;
in = message ;
if ( c == null )
return false ;
for ( String key : message . getData ( ) . keySet ( ) ) {
Log . i ( " , " + key + " + message . getData ( ) . get ( key ) ) ;
}
Intent i = new Intent ( ) ;
i . setComponent ( c ) ;
if ( timeout >  <num> ) {
synchronized ( lock ) {
context . bindService ( i , <unk> , Context . BIND_AUTO_CREATE ) ;
try {
if ( timeout > <num> ) {
lock . wait ( timeout ) ;
} else {
lock . wait ( <num> ) ;
}
}
catch ( InterruptedException e ) {
return false ;
}
}
context . unbindService ( <unk> ) ;
if ( response != null ) {
this . <unk> = Message . obtain ( this . response ) ;
this . <unk> = this . <unk> . getData ( ) ;
return true ;
}
else {
return false ;
}
}
return false ;
}
public Bundle getData ( ) {
return this . <unk> ;
}
public String printData ( ) {
Log . i ( " , " ) ;
StringBuilder out = new StringBuilder ( ) ;
if ( ! this . <unk> . isEmpty ( ) ) {
out . append ( " + this . <unk> ( this . <unk> , <num> ) + " ) ;
} else {
out . append ( " ) ;
}
return out . toString ( ) ;
}
private String <unk> ( Bundle bundle , int tab ) {
Log . i ( " , " ) ;
String tabs ;
StringBuffer tb = new StringBuffer ( ) ;
for ( int i = <num> ; i < tab ; i ++ ) {
tb . append ( " ) ;
}
tabs = tb . toString ( ) ;
StringBuilder out = new StringBuilder ( ) ;
for ( String key : bundle . keySet ( ) ) {
Object val = bundle . get ( key ) ;
if ( val instanceof Bundle ) {
out . append ( tabs + key + " + this . <unk> ( ( Bundle ) val , tab + <num> ) ) ;
} else if ( val . getClass ( ) . isArray ( ) ) {
out . append ( tabs + key + " + val . getClass ( ) . getSimpleName ( ) + " + this . <unk> ( val ) + " ) ;
} else {
out . append ( tabs + key + " + val . getClass ( ) . getSimpleName ( ) + " + val + " ) ;
}
}
return out . toString ( ) ;
}
private String <unk> ( Object val ) {
if ( val instanceof int [ ] )
return Arrays . toString ( ( int [ ] ) val ) ;
else if ( val instanceof char [ ] )
return Arrays . toString ( ( char [ ] ) val ) ;
else if ( val instanceof float [ ] )
return Arrays . toString ( ( float [ ] ) val ) ;
else if ( val instanceof double [ ] )
return Arrays . toString ( ( double [ ] ) val ) ;
else if ( val instanceof byte [ ] )
return Arrays . toString ( ( byte [ ] ) val ) ;
else
return Arrays . deepToString ( ( Object [ ] ) val ) ;
}
public Message getMessage ( ) {
return this . <unk> ;
}
private class <unk> extends Handler implements ServiceConnection {
Messenger <unk> = null ;
Messenger <unk> = new Messenger ( this ) ;
private WeakReference < <unk> > sb ;
public <unk> ( Looper looper , <unk> sb ) {
super ( looper ) ;
this . sb = new WeakReference < <unk> > ( sb ) ;
}
public void onServiceConnected ( ComponentName className , IBinder service ) {
<unk> = new Messenger ( service ) ;
<unk> ( this . sb . get ( ) . in ) ;
}
public void onServiceDisconnected ( ComponentName className ) {
this . sb . get ( ) . lock . notifyAll ( ) ;
}
@Override
public void handleMessage ( Message msg ) {
this . sb . get ( ) . response = Message . obtain ( msg ) ;
synchronized ( this . sb . get ( ) . lock ) {
try {
this . sb . get ( ) . lock . notifyAll ( ) ;
}
catch ( <unk> e ) { }
}
}
public void <unk> ( Message msg ) {
msg . replyTo = <unk> ;
try {
<unk> . send ( msg ) ;
}
catch ( Exception e ) { }
}
}
}
import java . io . BufferedReader ;
import java . io . File ;
import java . io . InputStreamReader ;
import java . io . IOException ;
public class <unk> {
public static String execute ( String command ) throws InterruptedException , IOException {
File <unk> = new File ( " ) ;
String [ ] environment = null ;
Process proc = Runtime . getRuntime ( ) . exec ( new String [ ] { " , " , command } , environment , <unk> ) ;
proc . waitFor ( ) ;
BufferedReader stdout = new BufferedReader ( new InputStreamReader ( proc . getInputStream ( ) ) ) ;
BufferedReader stderr = new BufferedReader ( new InputStreamReader ( proc . getErrorStream ( ) ) ) ;
String line ;
String <unk> = " ;
while ( ( line = stderr . readLine ( ) ) != null )
<unk> += line + " ;
while ( ( line = stdout . readLine ( ) ) != null )
<unk> += line + " ;
return <unk> ;
}
}
import java . io . BufferedInputStream ;
import java . io . BufferedOutputStream ;
import java . io . File ;
import java . io . FileInputStream ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . math . BigInteger ;
import java . security . MessageDigest ;
import java . security . NoSuchAlgorithmException ;
public class FileUtil {
private static final int BUFFER_SIZE = <num> ;
public static String <unk> ( File file ) throws IOException , NoSuchAlgorithmException {
MessageDigest digest = MessageDigest . getInstance ( " ) ;
FileInputStream <unk> = new FileInputStream ( file ) ;
byte [ ] buf = new byte [ BUFFER_SIZE ] ;
int count = <num> ;
while ( ( count = <unk> . read ( buf , <num> , BUFFER_SIZE ) ) !=  <num> )
digest . update ( buf , <num> , count ) ;
String result = new BigInteger ( <num> , digest . digest ( ) ) . toString ( <num> ) ;
int <unk> = <num>  result . length ( ) ;
if ( <unk> > <num> ) {
StringBuilder sb = new StringBuilder ( result ) ;
while ( <unk>  > <num> )
sb . insert ( <num> , " ) ;
result = sb . toString ( ) ;
}
return result ;
}
public static StringBuffer read ( File file ) throws IOException {
StringBuffer data = new StringBuffer ( ) ;
BufferedInputStream <unk> = new BufferedInputStream ( new FileInputStream ( file ) ) ;
byte [ ] buf = new byte [ BUFFER_SIZE ] ;
int count ;
while ( ( count = <unk> . read ( buf , <num> , BUFFER_SIZE ) ) !=  <num> )
data . append ( new String ( buf ) ) ;
<unk> . close ( ) ;
return data ;
}
}
import java . io . OutputStream ;
import java . io . IOException ;
public class <unk> {
public static boolean <unk> ( OutputStream stream , String <unk> ) throws IOException {
int len = <unk> . length ( ) ;
byte [ ] <unk> = new byte [ len / <num> ] ;
for ( int i = <num> ; i < len ; i += <num> )
<unk> [ i / <num> ] = ( byte ) ( ( Character . digit ( <unk> . charAt ( i ) , <num> ) << <num> ) + Character . digit ( <unk> . charAt ( i + <num> ) , <num> ) ) ;
stream . write ( <unk> , <num> , <unk> . length ) ;
return true ;
}
}
import java . io . ByteArrayOutputStream ;
import java . io . InputStream ;
import java . io . IOException ;
import java . util . ArrayList ;
import java . util . Enumeration ;
import java . util . zip . ZipEntry ;
import java . util . zip . ZipFile ;
import android . content . pm . ApplicationInfo ;
class Native {
public static byte [ ] get ( ApplicationInfo application , String library ) throws IOException {
ZipFile <unk> = new ZipFile ( application . <unk> ) ;
Enumeration < ? extends ZipEntry > entries = <unk> . entries ( ) ;
ZipEntry entry ;
while ( entries . hasMoreElements ( ) ) {
entry = entries . nextElement ( ) ;
if ( entry . getName ( ) . equalsIgnoreCase ( library ) ) {
ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ;
InputStream is = <unk> . getInputStream ( entry ) ;
byte [ ] buf = new byte [ <num> ] ;
int count ;
while ( ( count = is . read ( buf ) ) !=  <num> )
os . write ( buf , <num> , count ) ;
return os . toByteArray ( ) ;
}
}
return null ;
}
public static String [ ] list ( ApplicationInfo application ) throws IOException {
ArrayList < String > libraries = new ArrayList < String > ( ) ;
ZipFile <unk> = new ZipFile ( application . <unk> ) ;
Enumeration < ? extends ZipEntry > entries = <unk> . entries ( ) ;
ZipEntry entry ;
while ( entries . hasMoreElements ( ) ) {
entry = entries . nextElement ( ) ;
String name = entry . getName ( ) ;
if ( name . toUpperCase ( ) . endsWith ( " ) )
libraries . add ( name ) ;
}
return libraries . toArray ( new String [ libraries . size ( ) ] ) ;
}
}
import java . io . IOException ;
import java . util . ArrayList ;
import java . util . List ;
import org . xmlpull . v1 . XmlPullParser ;
import org . xmlpull . v1 . XmlPullParserException ;
import android . app . Application ;
import android . content . pm . PackageManager . NameNotFoundException ;
import android . content . res . AssetManager ;
import android . content . res . XmlResourceParser ;
public class <unk>
{
public static String [ ] find ( Application ctx , String pkg ) throws NameNotFoundException , IOException , XmlPullParserException {
AssetManager am = ctx . createPackageContext ( pkg , <num> ) . getAssets ( ) ;
XmlResourceParser xml = am . <unk> ( " ) ;
List < String > codes = new ArrayList < String > ( ) ;
while ( xml . next ( ) != XmlPullParser . END_DOCUMENT ) {
if ( xml . getEventType ( ) == XmlPullParser . START_TAG && xml . getName ( ) . equals ( " ) ) {
if ( xml . getAttributeCount ( ) == <num> && xml . getAttributeValue ( <num> ) . equals ( " ) )
codes . add ( xml . getAttributeValue ( <num> ) ) ;
}
}
return codes . toArray ( new String [ codes . size ( ) ] ) ;
}
}
import java . io . BufferedInputStream ;
import java . io . BufferedOutputStream ;
import java . io . ByteArrayOutputStream ;
import java . io . InputStream ;
import java . io . IOException ;
import android . util . Base64 ;
public class <unk> {
public static byte [ ] read ( InputStream stream ) throws IOException {
ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ;
int c = <num> ;
while ( c >  <num> ) {
byte [ ] buf = new byte [ <num> ] ;
c = stream . read ( buf ) ;
if ( c > <num> )
output . write ( buf , <num> , c ) ;
}
return output . toByteArray ( ) ;
}
public static byte [ ] read ( InputStream stream , int offset , int count ) throws IOException {
ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ;
int c = <num> ;
int t = <num> ;
while ( c >  <num> && t < count ) {
byte [ ] buf = new byte [ count ] ;
c = stream . read ( buf , offset + t , count  t ) ;
if ( c > <num> ) {
output . write ( buf , <num> , c ) ;
t += c ;
}
}
return output . toByteArray ( ) ;
}
}
import java . io . IOException ;
import android . content . res . XmlResourceParser ;
import org . xmlpull . v1 . XmlPullParser ;
import org . xmlpull . v1 . XmlPullParserException ;
public class <unk> {
public static String read ( XmlResourceParser xml ) {
StringBuilder output = new StringBuilder ( ) ;
try {
while ( xml . next ( ) != XmlPullParser . END_DOCUMENT ) {
switch ( xml . getEventType ( ) ) {
case XmlPullParser . START_TAG :
output . append ( " ) ;
output . append ( xml . getName ( ) ) ;
for ( int i = <num> ; i < xml . getAttributeCount ( ) ; i ++ ) {
output . append ( " ) ;
output . append ( xml . getAttributeName ( i ) ) ;
output . append ( " ) ;
output . append ( xml . getAttributeValue ( i ) ) ;
output . append ( " ) ;
}
output . append ( " ) ;
break ;
case XmlPullParser . END_TAG :
output . append ( " ) ;
output . append ( xml . getName ( ) ) ;
output . append ( " ) ;
break ;
case XmlPullParser . TEXT :
output . append ( xml . getText ( ) ) ;
output . append ( " ) ;
break ;
default :
break ;
}
}
}
catch ( IOException e ) {
return null ;
}
catch ( XmlPullParserException e ) {
return null ;
}
return output . toString ( ) ;
}
}
package rfid ;
import java . applet . Applet ;
import java . awt . Graphics ;
import java . io . IOException ;
import java . util . Properties ;
import <unk> . javascript . <unk> ;
import <unk> . javascript . <unk> ;
import br . com . <unk> . <unk> . device . <unk> ;
import br . com . <unk> . <unk> . device . reader . <unk> ;
public class <unk> extends Applet {
public Properties <unk> ;
public <unk> <unk> ;
private <unk> <unk> ;
public String <unk> ;
@Override
public void init ( ) {
}
@Override
public void start ( ) {
<unk> = new Properties ( ) ;
<unk> . setProperty ( " , " ) ;
<unk> . setProperty ( " , " ) ;
<unk> . setProperty ( " , " ) ;
<unk> = new <unk> ( ) . <unk> ( <unk> ) ;
connect ( ) ;
try {
<unk> = <unk> . getWindow ( this ) ;
} catch ( <unk> e ) {
}
}
public void read ( ) {
String [ ] test ;
try {
test = <unk> . <unk> ( ) ;
System . out . println ( test . length ) ;
for ( int i = <num> ; i < test . length ; i ++ ) {
<unk> = test [ i ] ;
System . out . println ( " + <unk> ) ;
}
} catch ( IOException e ) {
<unk> = " ;
e . printStackTrace ( ) ;
}
printResult ( ) ;
<unk> ( ) ;
}
public void connect ( ) {
try {
<unk> . connect ( ) ;
<unk> . setPower ( Integer . valueOf ( <unk>
. getProperty ( " ) ) ) ;
} catch ( IOException ex ) {
}
}
public void printResult ( ) {
try {
<unk> . call ( " , new String [ ] { String . valueOf ( <unk> ) } ) ;
}
catch ( Exception ex ) {
ex . printStackTrace ( ) ;
}
}
public void <unk> ( ) {
try {
<unk> . call ( " , new String [ ] { String . valueOf ( <unk> ) } ) ;
}
catch ( Exception ex ) {
ex . printStackTrace ( ) ;
}
}
public void <unk> ( String result ) {
try {
<unk> . call ( " , new String [ ] { result } ) ;
}
catch ( Exception ex ) {
ex . printStackTrace ( ) ;
}
}
public void write ( String id ) {
String query = " + id + " ;
try {
<unk> . executeQuery ( query ) ;
System . out . println ( " ) ;
<unk> ( " ) ;
} catch ( IOException ex ) {
System . out . println ( ex ) ;
<unk> ( " ) ;
}
}
}
import java . awt . Color ;
import java . awt . Container ;
import java . awt . FlowLayout ;
import java . awt . Font ;
import java . awt . GridLayout ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import javax . swing . ButtonGroup ;
import javax . swing . JButton ;
import javax . swing . JCheckBox ;
import javax . swing . JComboBox ;
import javax . swing . JFrame ;
import javax . swing . JLabel ;
import javax . swing . JMenu ;
import javax . swing . JMenuBar ;
import javax . swing . JMenuItem ;
import javax . swing . JPanel ;
import javax . swing . JRadioButton ;
import javax . swing . JTextField ;
public class <unk> extends JFrame {
<unk> a = new <unk> ( this ) ;
<unk> s = new <unk> ( this ) ;
<unk> o = new <unk> ( this ) ;
JTextField text ;
JLabel [ ] label ;
JPanel [ ] panel ;
JComboBox day , month , year ;
JRadioButton nam ;
JRadioButton nu ;
public JTextField getText ( ) {
return text ;
}
public void setText ( String s ) {
text . setText ( s ) ;
}
public <unk> ( ) {
setTitle ( " ) ;
Container container = this . getContentPane ( ) ;
container . setLayout ( new GridLayout ( <num> , <num> ) ) ;
panel = new JPanel [ <num> ] ;
label = new JLabel [ <num> ] ;
JButton [ ] <unk> = new JButton [ <num> ] ;
JMenuBar menuBar = new JMenuBar ( ) ;
JMenu file = new JMenu ( " ) ;
JMenuItem <unk> = new JMenuItem ( " ) ;
JMenuItem save = new JMenuItem ( " ) ;
save . addActionListener ( s ) ;
JMenuItem open = new JMenuItem ( " ) ;
open . addActionListener ( o ) ;
JMenuItem exit = new JMenuItem ( " ) ;
exit . addActionListener ( a ) ;
file . add ( <unk> ) ;
file . add ( save ) ;
file . add ( open ) ;
file . add ( exit ) ;
menuBar . add ( file ) ;
setJMenuBar ( menuBar ) ;
label [ <num> ] = new JLabel ( " ) ;
label [ <num> ] . setFont ( Font . getFont ( " ) ) ;
label [ <num> ] . setForeground ( Color . RED ) ;
panel [ <num> ] = new JPanel ( ) ;
panel [ <num> ] . setLayout ( new FlowLayout ( FlowLayout . CENTER ) ) ;
panel [ <num> ] . add ( label [ <num> ] ) ;
container . add ( panel [ <num> ] ) ;
label [ <num> ] = new JLabel ( " ) ;
text = new JTextField ( <num> ) ;
panel [ <num> ] = new JPanel ( ) ;
panel [ <num> ] . setLayout ( new FlowLayout ( FlowLayout . LEFT ) ) ;
panel [ <num> ] . add ( label [ <num> ] ) ;
panel [ <num> ] . add ( text ) ;
container . add ( panel [ <num> ] ) ;
panel [ <num> ] = new JPanel ( ) ;
label [ <num> ] = new JLabel ( " ) ;
day = new JComboBox ( ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
day . addItem ( i ) ;
}
month = new JComboBox ( ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
month . addItem ( i ) ;
}
year = new JComboBox ( ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
year . addItem ( i ) ;
}
panel [ <num> ] . setLayout ( new FlowLayout ( FlowLayout . LEFT ) ) ;
panel [ <num> ] . add ( label [ <num> ] ) ;
panel [ <num> ] . add ( day ) ;
panel [ <num> ] . add ( month ) ;
panel [ <num> ] . add ( year ) ;
container . add ( panel [ <num> ] ) ;
panel [ <num> ] = new JPanel ( ) ;
panel [ <num> ] = new JPanel ( ) ;
label [ <num> ] = new JLabel ( " ) ;
ButtonGroup bg = new ButtonGroup ( ) ;
nam = new JRadioButton ( " ) ;
nu = new JRadioButton ( " ) ;
bg . add ( nam ) ;
bg . add ( nu ) ;
panel [ <num> ] . setLayout ( new FlowLayout ( FlowLayout . LEFT ) ) ;
panel [ <num> ] . add ( label [ <num> ] ) ;
panel [ <num> ] . add ( nam ) ;
panel [ <num> ] . add ( nu ) ;
panel [ <num> ] . setLayout ( new GridLayout ( <num> , <num> ) ) ;
panel [ <num> ] . add ( panel [ <num> ] ) ;
container . add ( panel [ <num> ] ) ;
panel [ <num> ] = new JPanel ( ) ;
label [ <num> ] = new JLabel ( " ) ;
JCheckBox <unk> = new JCheckBox ( " ) ;
JCheckBox <unk> = new JCheckBox ( " ) ;
panel [ <num> ] = new JPanel ( ) ;
panel [ <num> ] . add ( <unk> ) ;
panel [ <num> ] . add ( <unk> ) ;
panel [ <num> ] . setLayout ( new GridLayout ( <num> , <num> ) ) ;
panel [ <num> ] . setLayout ( new FlowLayout ( FlowLayout . LEFT ) ) ;
panel [ <num> ] . add ( label [ <num> ] ) ;
panel [ <num> ] . add ( panel [ <num> ] ) ;
container . add ( panel [ <num> ] ) ;
panel [ <num> ] = new JPanel ( ) ;
<unk> [ <num> ] = new JButton ( " ) ;
<unk> [ <num> ] . addActionListener ( s ) ;
<unk> [ <num> ] = new JButton ( " ) ;
<unk> [ <num> ] . addActionListener ( o ) ;
<unk> [ <num> ] = new JButton ( " ) ;
<unk> [ <num> ] . addActionListener ( new ActionListener ( ) {
@Override
public void actionPerformed ( ActionEvent arg0 ) {
System . exit ( <num> ) ;
}
} ) ;
panel [ <num> ] . add ( <unk> [ <num> ] ) ;
panel [ <num> ] . add ( <unk> [ <num> ] ) ;
panel [ <num> ] . add ( <unk> [ <num> ] ) ;
panel [ <num> ] . setLayout ( new FlowLayout ( FlowLayout . CENTER ) ) ;
container . add ( panel [ <num> ] ) ;
setSize ( <num> , <num> ) ;
setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
setVisible ( true ) ;
}
public static void main ( String [ ] args ) {
<unk> l = new <unk> ( ) ;
}
}
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import java . io . File ;
import javax . swing . JFileChooser ;
public class <unk> implements ActionListener {
<unk> l ;
public <unk> ( <unk> l ) {
super ( ) ;
this . l = l ;
}
@Override
public void actionPerformed ( ActionEvent e ) {
System . exit ( <num> ) ;
}
}
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import java . io . BufferedReader ;
import java . io . FileNotFoundException ;
import java . io . FileReader ;
import java . io . IOException ;
import javax . swing . JFileChooser ;
public class <unk> implements ActionListener {
<unk> l ;
public <unk> ( <unk> l ) {
super ( ) ;
this . l = l ;
}
@Override
public void actionPerformed ( ActionEvent arg0 ) {
JFileChooser choose = new JFileChooser ( ) ;
int open = choose . showOpenDialog ( null ) ;
while ( open == choose . APPROVE_OPTION ) {
FileReader fr = null ;
try {
fr = new FileReader ( choose . getSelectedFile ( ) . getPath ( ) ) ;
} catch ( FileNotFoundException e ) {
e . printStackTrace ( ) ;
}
BufferedReader in = new BufferedReader ( fr ) ;
String data = " ;
while ( true ) {
String line = null ;
try {
line = in . readLine ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
if ( line == null ) {
break ;
}
data += line + " ;
l . getText ( ) . setText ( data ) ;
try {
in . close ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
break ;
}
}
}
}
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import java . io . BufferedWriter ;
import java . io . FileWriter ;
import java . io . IOException ;
import java . io . PrintWriter ;
import javax . swing . JComboBox ;
import javax . swing . JFileChooser ;
import javax . swing . JPanel ;
import javax . swing . JTextField ;
public class <unk> implements ActionListener {
<unk> l ;
public <unk> ( <unk> l ) {
super ( ) ;
this . l = l ;
}
@Override
public void actionPerformed ( ActionEvent e ) {
JFileChooser choose = new JFileChooser ( ) ;
int save = choose . showSaveDialog ( null ) ;
while ( save == choose . APPROVE_OPTION ) {
FileWriter fr = null ;
try {
fr = new FileWriter ( choose . getSelectedFile ( ) . getPath ( ) ) ;
} catch ( IOException e1 ) {
e1 . printStackTrace ( ) ;
}
BufferedWriter out = new BufferedWriter ( fr ) ;
PrintWriter output = new PrintWriter ( out ) ;
output . println ( " + l . getText ( ) . getText ( ) ) ;
output . println ( " + l . day . getSelectedItem ( ) + " + l . month . getSelectedItem ( ) + " + l . year . getSelectedItem ( ) ) ;
if ( l . nam . isSelected ( ) ) {
output . println ( " ) ;
}
else {
output . println ( " ) ;
}
output . close ( ) ;
}
}
}
import java . io . * ;
import java . util . * ;
import java . net . * ;
class <unk> implements Runnable , <unk> {
private <unk> myself ;
int port ;
ArrayList < Socket > connections = new ArrayList < Socket > ( ) ;
ArrayList < ObjectInputStream > <unk> = new ArrayList < ObjectInputStream > ( ) ;
ArrayList < ObjectOutputStream > <unk> = new ArrayList < ObjectOutputStream > ( ) ;
ArrayList < BufferedInputStream > <unk> = new ArrayList < BufferedInputStream > ( ) ;
boolean <unk> ;
boolean <unk> ;
ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
<unk> c ;
AbstractQueue < <unk> > <unk> ;
AbstractQueue < <unk> > <unk> = new java . util . concurrent . ConcurrentLinkedQueue < <unk> > ( ) ;
<unk> cr ;
public void <unk> ( ) {
}
public void <unk> ( ) {
}
public <unk> <unk> ( Socket connection ) {
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ ) {
if ( <unk> . get ( i ) . connection . equals ( connection ) ) {
return <unk> . get ( i ) . <unk> ( ) ;
}
}
return null ;
}
public void processInput ( String line , client <unk> ) {
<unk> <unk> = new <unk> ( line ) ;
<unk> ( ( <unk> ) <unk> ) ;
}
public boolean <unk> ( ObjectInputStream ois ) throws Exception {
<unk> cc = ( <unk> ) ois . readObject ( ) ;
if ( cc == <unk> . <unk> ) {
return true ;
}
else {
return false ;
}
}
public void <unk> ( <unk> <unk> ) {
<unk> . add ( <unk> ) ;
}
public void <unk> ( <unk> coi ) {
<unk> . add ( coi ) ;
<unk> ( <unk> . <unk> ) ;
}
public <unk> ( <unk> myself , int port ) {
connections = new ArrayList < Socket > ( ) ;
System . out . println ( " ) ;
<unk> = true ;
this . myself = myself ;
<unk> = new java . util . concurrent . ConcurrentLinkedQueue < <unk> > ( ) ;
try {
ServerSocket ss = new ServerSocket ( port ) ;
<unk> <unk> = new <unk> ( ss , this ) ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
return ;
}
Thread t = new Thread ( this , " ) ;
t . start ( ) ;
}
public <unk> <unk> ( ) {
return <unk> . remove ( ) ;
}
public void <unk> ( <unk> cr ) {
<unk> . add ( cr ) ;
}
public void <unk> ( Socket connection ) throws Exception {
System . out . println ( " ) ;
<unk> . add ( new ObjectOutputStream ( connection . getOutputStream ( ) ) ) ;
<unk> . add ( new ObjectInputStream ( connection . getInputStream ( ) ) ) ;
<unk> . add ( new BufferedInputStream ( connection . getInputStream ( ) ) ) ;
connections . add ( connection ) ;
System . out . println ( " ) ;
}
public <unk> ( <unk> cr , <unk> myself , int port ) {
Socket connection ;
System . out . println ( " + port ) ;
<unk> = new java . util . concurrent . ConcurrentLinkedQueue < <unk> > ( ) ;
connections = new ArrayList < Socket > ( ) ;
this . cr = cr ;
try {
connection = new Socket ( cr . <unk> ( ) . getAddress ( ) , port ) ;
<unk> ( connection ) ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
return ;
}
this . myself = myself ;
<unk> ( <unk> . <unk> ) ;
Thread t = new Thread ( this , " ) ;
t . start ( ) ;
}
public <unk> <unk> ( ) {
return cr ;
}
public <unk> <unk> ( ) {
return myself ;
}
public void <unk> ( ObjectOutputStream oos ) throws Exception {
oos . writeObject ( <unk> . <unk> ) ;
}
public void <unk> ( ) {
<unk> = true ;
}
public void run ( ) {
System . out . println ( " ) ;
while ( true ) {
if ( <unk> ) {
return ;
}
try {
for ( int i = <num> ; i < connections . size ( ) ; i ++ ) {
Socket connection = connections . get ( i ) ;
ObjectOutputStream oos = <unk> . get ( i ) ;
ObjectInputStream ois = <unk> . get ( i ) ;
BufferedInputStream bis = <unk> . get ( i ) ;
<unk> <unk> = null ;
if ( bis . available ( ) > <num> ) {
<unk> = ( <unk> ) ois . readObject ( ) ;
}
else if ( ! <unk> . isEmpty ( ) ) {
<unk> = ( <unk> ) <unk> . remove ( ) ;
}
if ( <unk> != null ) {
<unk> . process ( this , connection , ois , oos ) ;
}
}
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
return ;
}
}
}
public <unk> getInfo ( ) {
return myself ;
}
}
class <unk> implements Runnable {
ServerSocket ss ;
<unk> c ;
boolean <unk> ;
public <unk> ( ServerSocket ss , <unk> c ) {
this . ss = ss ;
this . c = c ;
Thread t = new Thread ( this , " ) ;
t . start ( ) ;
}
public void run ( ) {
System . out . println ( " ) ;
try {
while ( true ) {
Socket newConnection = ss . accept ( ) ;
c . <unk> ( newConnection ) ;
}
}
catch ( Exception e ) {
System . out . println ( " ) ;
return ;
}
}
}
class <unk> {
<unk> ci ;
Socket connection ;
public <unk> ( <unk> ci , Socket connection ) {
this . ci = ci ;
this . connection = connection ;
}
public <unk> <unk> ( ) {
return ci ;
}
}
class <unk> implements Serializable {
private String username ;
private String password ;
private String address ;
public void setAddress ( String address ) {
this . address = address ;
}
public String getAddress ( ) {
return this . address ;
}
public <unk> ( String username , String password ) {
this . username = username ;
this . password = password ;
}
public String getName ( ) {
return username ;
}
public String toString ( ) {
String retVal = " + username + " + password ;
return retVal ;
}
}
class <unk> implements Serializable {
int <unk> ;
<unk> <unk> ;
<unk> [ ] <unk> ;
public <unk> ( <unk> <unk> , <unk> [ ] <unk> , int <unk> ) {
System . out . println ( " ) ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
}
public <unk> <unk> ( ) {
return <unk> ;
}
public <unk> [ ] <unk> ( ) {
return <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public String toString ( ) {
String res = " + <unk> . getName ( ) +
" ;
for ( <unk> c : <unk> ) {
res = res + c . getName ( ) + " ;
}
res = res + " + <unk> ;
return res ;
}
}
interface <unk> {
void process ( <unk> c , Socket connection , ObjectInputStream ois , ObjectOutputStream oos ) throws Exception ;
}
enum <unk> implements <unk> {
<unk> {
public void process ( <unk> c , Socket connection , ObjectInputStream ois , ObjectOutputStream oos ) throws Exception {
}
} ,
<unk> {
public void process ( <unk> c , Socket connection , ObjectInputStream ois , ObjectOutputStream oos ) throws Exception {
c . <unk> ( oos ) ;
<unk> <unk> = ( <unk> ) ois . readObject ( ) ;
c . <unk> ( oos ) ;
c . <unk> ( new <unk> ( <unk> , connection ) ) ;
c . <unk> ( oos ) ;
System . out . println ( " + <unk> . getName ( ) + " ) ;
}
} ,
<unk> {
public void process ( <unk> c , Socket connection , ObjectInputStream ois , ObjectOutputStream oos ) throws Exception {
Thread . sleep ( <num> ) ;
System . out . println ( " ) ;
oos . writeObject ( <unk> . <unk> ) ;
System . out . println ( " ) ;
c . <unk> ( ois ) ;
System . out . println ( " ) ;
oos . writeObject ( c . <unk> ( ) ) ;
System . out . println ( " ) ;
c . <unk> ( ois ) ;
c . <unk> ( new <unk> ( c . <unk> ( ) . <unk> ( ) , connection ) ) ;
System . out . println ( " + c . <unk> ( ) . <unk> ( ) . getName ( ) + " ) ;
}
} ,
<unk> {
public void process ( <unk> c , Socket connection , ObjectInputStream ois , ObjectOutputStream oos ) throws Exception {
oos . writeObject ( <unk> . <unk> ) ;
c . <unk> ( ois ) ;
<unk> coi = c . <unk> ( ) ;
coi . <unk> ( ) ;
System . out . print ( c . <unk> ( ) . getName ( ) + " ) ;
coi . <unk> ( ) ;
coi . send ( oos ) ;
}
} ,
<unk> {
public void process ( <unk> c , Socket connection , ObjectInputStream ois , ObjectOutputStream oos ) throws Exception {
c . <unk> ( oos ) ;
<unk> coi = new <unk> ( " ) ;
coi . <unk> ( ois ) ;
System . out . print ( c . <unk> ( connection ) . getName ( ) + " ) ;
coi . <unk> ( ) ;
}
} ,
}
import java . io . * ;
import java . util . * ;
interface <unk> {
public void send ( ObjectOutputStream oos ) throws Exception ;
public void <unk> ( ObjectInputStream oos ) throws Exception ;
public void <unk> ( ) ;
public void <unk> ( ) ;
}
class <unk> implements <unk> {
String text ;
public <unk> ( String text ) {
this . text = text ;
}
public void send ( ObjectOutputStream oos ) throws Exception {
oos . writeObject ( text ) ;
}
public void <unk> ( ObjectInputStream ois ) throws Exception {
text = ( String ) ois . readObject ( ) ;
}
public void <unk> ( ) {
char [ ] chars = new char [ text . length ( ) ] ;
Arrays . fill ( chars , \b' ) ;
String <unk> = new String ( chars ) ;
System . out . print ( \r' ) ;
System . out . print ( <unk> ) ;
}
public void <unk> ( ) {
System . out . println ( text ) ;
}
public String getString ( ) {
return text ;
}
}
import java . io . * ;
import java . net . * ;
import java . util . * ;
class <unk> implements Runnable {
ChatClient cc ;
Socket connection ;
ObjectOutputStream oos ;
ObjectInputStream ois ;
AbstractQueue < <unk> > <unk> ;
AbstractQueue < <unk> > <unk> ;
public <unk> ( ChatClient cc , String serverName ) throws Exception {
this . cc = cc ;
this . connection = new Socket ( serverName , <num> ) ;
System . out . println ( " + serverName ) ;
oos = new ObjectOutputStream ( connection . getOutputStream ( ) ) ;
ois = new ObjectInputStream ( connection . getInputStream ( ) ) ;
System . out . println ( " ) ;
<unk> ( <unk> . <unk> ) ;
System . out . println ( " ) ;
<unk> ( ) ;
System . out . println ( " ) ;
oos . writeObject ( cc . <unk> ( ) ) ;
System . out . println ( " ) ;
<unk> ( ) ;
<unk> = new java . util . concurrent . ConcurrentLinkedQueue < <unk> > ( ) ;
<unk> = new java . util . concurrent . ConcurrentLinkedQueue < <unk> > ( ) ;
Thread runner = new Thread ( this , " ) ;
runner . start ( ) ;
}
public boolean <unk> ( ) throws Exception {
System . out . println ( " ) ;
<unk> ( <unk> . <unk> ) ;
System . out . println ( " ) ;
<unk> ( ) ;
System . out . println ( " ) ;
<unk> [ ] <unk> = ( <unk> [ ] ) ois . readObject ( ) ;
cc . <unk> ( <unk> ) ;
return true ;
}
public void <unk> ( ) throws Exception {
System . out . println ( " ) ;
System . out . println ( " ) ;
<unk> cr = ( <unk> ) ois . readObject ( ) ;
int port = cr . <unk> ( ) ;
System . out . println ( " + port ) ;
System . out . println ( " ) ;
<unk> <unk> = new <unk> ( cr , cc . <unk> ( ) , port ) ;
System . out . println ( " ) ;
<unk> ( ) . <unk> ( <unk> ) ;
}
public void <unk> ( <unk> <unk> ) {
<unk> . add ( <unk> ) ;
}
public void <unk> ( <unk> cr ) {
<unk> . add ( cr ) ;
}
public <unk> <unk> ( ) {
return <unk> . remove ( ) ;
}
public ChatClient <unk> ( ) {
return cc ;
}
public Socket getConnection ( ) {
return connection ;
}
public ObjectOutputStream getOutputStream ( ) {
return oos ;
}
public ObjectInputStream getInputStream ( ) {
return ois ;
}
public boolean <unk> ( ) throws Exception {
<unk> cc = ( <unk> ) ois . readObject ( ) ;
if ( cc == <unk> . <unk> ) {
return true ;
}
else {
return false ;
}
}
public void <unk> ( ObjectOutputStream oos ) throws Exception {
oos . writeObject ( <unk> . <unk> ) ;
}
public void closeConnection ( ) throws Exception {
<unk> ( <unk> . <unk> ) ;
}
public void <unk> ( <unk> sc ) throws Exception {
oos . writeObject ( sc ) ;
}
public void run ( ) {
try {
BufferedInputStream bis = new BufferedInputStream ( connection . getInputStream ( ) ) ;
while ( true ) {
<unk> <unk> = null ;
if ( bis . available ( ) > <num> ) {
<unk> = ( <unk> ) ois . readObject ( ) ;
}
else if ( ! <unk> . isEmpty ( ) ) {
<unk> = ( <unk> ) <unk> . remove ( ) ;
}
if ( <unk> != null ) {
<unk> . process ( this ) ;
}
}
}
catch ( EOFException e ) {
System . out . println ( " ) ;
System . out . println ( " ) ;
return ;
}
catch ( Exception e ) {
System . out . println ( " + e . getMessage ( ) ) ;
e . printStackTrace ( ) ;
return ;
}
}
}
interface <unk> {
void process ( <unk> <unk> ) throws Exception ;
}
enum <unk> implements <unk> {
<unk> {
public void process ( <unk> <unk> ) throws Exception {
}
} ,
<unk> {
public void process ( <unk> <unk> ) throws Exception {
<unk> . <unk> ( ) ;
}
} ,
<unk> {
public void process ( <unk> <unk> ) throws Exception {
System . out . println ( " ) ;
System . out . println ( " ) ;
<unk> . <unk> ( <unk> . <unk> ) ;
System . out . println ( " ) ;
<unk> . <unk> ( ) ;
System . out . println ( " ) ;
ObjectOutputStream oos = <unk> . getOutputStream ( ) ;
<unk> cr = <unk> . <unk> ( ) ;
oos . writeObject ( cr ) ;
System . out . println ( " ) ;
<unk> . <unk> ( ) ;
<unk> <unk> = new <unk> ( <unk> . <unk> ( ) . <unk> ( ) , cr . <unk> ( ) ) ;
System . out . println ( " ) ;
<unk> . <unk> ( ) . <unk> ( <unk> ) ;
}
} ,
<unk> {
public void process ( <unk> <unk> ) throws Exception {
System . out . println ( " ) ;
<unk> . <unk> ( ) ;
}
} ,
EXIT {
public void process ( <unk> <unk> ) throws Exception {
<unk> . closeConnection ( ) ;
}
}
}
import java . util . * ;
interface <unk> {
void processInput ( String <unk> , client <unk> ) ;
void <unk> ( ) ;
void <unk> ( ) ;
}
class client {
private ChatClient cc ;
private <unk> <unk> ;
public static void main ( String [ ] args ) {
client <unk> ;
if ( args . length == <num> ) {
<unk> = new client ( args [ <num> ] , args [ <num> ] , " ) ;
}
else {
<unk> = new client ( ) ;
}
<unk> . connect ( ) ;
<unk> . run ( ) ;
}
public client ( String serverName , String username , String password ) {
cc = new ChatClient ( serverName , username , " ) ;
}
public void connect ( ) {
cc . connect ( ) ;
}
public client ( ) {
System . out . print ( " ) ;
Scanner sc = new Scanner ( System . in ) ;
String serverName = sc . nextLine ( ) ;
System . out . print ( " ) ;
String userName = sc . nextLine ( ) ;
cc = new ChatClient ( serverName , userName , " ) ;
}
public void <unk> ( <unk> cli ) {
<unk> = cli ;
}
void run ( ) {
<unk> ( ( <unk> ) cc ) ;
<unk> . processInput ( " , this ) ;
Scanner sc = new Scanner ( System . in ) ;
while ( true ) {
String <unk> = sc . nextLine ( ) ;
<unk> . processInput ( <unk> , this ) ;
}
}
}
import java . net . * ;
import java . io . * ;
import java . util . * ;
interface <unk> {
public void connect ( ) ;
}
class ChatClient implements <unk> , <unk> {
Socket <unk> ;
String serverName ;
String userName ;
String password ;
<unk> myself ;
<unk> [ ] <unk> ;
<unk> <unk> ;
ArrayList < <unk> > <unk> ;
<unk> <unk> = null ;
client <unk> ;
int <unk> ;
boolean <unk> ;
public void <unk> ( ) {
<unk> = true ;
}
public void <unk> ( ) {
<unk> = false ;
}
public void processInput ( String <unk> , client <unk> ) {
this . <unk> = <unk> ;
if ( ! <unk> . isEmpty ( ) ) {
String [ ] args = <unk> . split ( " ) ;
String command = args [ <num> ] ;
String [ ] <unk> = new String [ args . length  <num> ] ;
if ( args . length > <num> ) {
System . arraycopy ( args , <num> , <unk> , <num> , args . length  <num> ) ;
}
if ( command . equals ( " ) ) {
<unk> ( ) ;
}
else if ( command . equals ( " ) ) {
<unk> ( args ) ;
}
else if ( command . equals ( " ) ) {
System . exit ( <num> ) ;
}
}
System . out . print ( " ) ;
}
public ChatClient ( ) {
<unk> = new <unk> [ <num> ] ;
}
public ChatClient ( String serverName , String userName , String password ) {
this . serverName = serverName ;
this . userName = userName ;
this . password = password ;
this . myself = new <unk> ( userName , password ) ;
Random <unk> = new Random ( ) ;
<unk> = <unk> . nextInt ( <num> ) ;
<unk> = new <unk> [ <num> ] ;
<unk> = new ArrayList < <unk> > ( ) ;
}
public void <unk> ( <unk> <unk> ) {
<unk> . add ( <unk> ) ;
<unk> . <unk> ( ( <unk> ) <unk> ) ;
}
public void <unk> ( <unk> coi ) {
if ( <unk> != null ) {
<unk> . <unk> ( coi ) ;
}
}
public static <unk> <unk> ( String serverName , String userName , String password ) {
ChatClient <unk> = new ChatClient ( serverName , userName , password ) ;
<unk> <unk> = ( <unk> ) <unk> ;
return <unk> ;
}
public void <unk> ( <unk> [ ] <unk> ) {
this . <unk> = <unk> ;
}
public void <unk> ( String [ ] args ) {
System . out . println ( " ) ;
ArrayList < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
for ( String <unk> : args ) {
for ( <unk> <unk> : <unk> ) {
if ( <unk> . equals ( <unk> . getName ( ) ) &&
( ! <unk> . equals ( myself . getName ( ) ) ) ) {
System . out . println ( " + <unk> . getName ( ) + " ) ;
<unk> . add ( <unk> ) ;
}
}
}
<unk> [ ] <unk> = new <unk> [ <unk> . size ( ) ] ;
<unk> . toArray ( <unk> ) ;
<unk> cr = new <unk> ( myself , <unk> , <unk> ++ ) ;
System . out . println ( " + cr ) ;
System . out . println ( " ) ;
<unk> . <unk> ( cr ) ;
System . out . println ( " ) ;
<unk> . <unk> ( <unk> . <unk> ) ;
}
public void <unk> ( ) {
for ( <unk> c : <unk> ) {
System . out . println ( " + c . getName ( ) + " + c . getAddress ( ) + " ) ;
}
}
public void closeConnection ( ) {
System . out . println ( " ) ;
<unk> . <unk> ( <unk> . EXIT ) ;
}
public void connect ( ) {
try {
<unk> = new <unk> ( this , serverName ) ;
}
catch ( Exception e ) {
System . out . println ( " + e . getMessage ( ) ) ;
}
}
public <unk> <unk> ( ) {
return myself ;
}
}
import java . net . * ;
import java . util . * ;
import java . io . * ;
interface <unk> {
public void listen ( ) ;
public void <unk> ( ) ;
public int <unk> ( String username ) ;
public int <unk> ( String address ) ;
public boolean <unk> ( int index ) ;
public boolean <unk> ( <unk> c , <unk> ch ) ;
public <unk> [ ] <unk> ( ) ;
}
class ChatServer implements <unk> {
ServerSocket ss ;
ArrayList < <unk> > list ;
public ChatServer ( ) {
this . list = new ArrayList < <unk> > ( ) ;
}
public static <unk> <unk> ( ) {
ChatServer <unk> = new ChatServer ( ) ;
<unk> <unk> = ( <unk> ) <unk> ;
return <unk> ;
}
public void listen ( ) {
try {
ss = new ServerSocket ( <num> ) ;
}
catch ( Exception e ) { }
ObjectOutputStream oos ;
ObjectInputStream ois ;
while ( true ) {
try {
System . out . println ( " ) ;
Socket client = ss . accept ( ) ;
System . out . println ( " + client . getInetAddress ( ) ) ;
<unk> ch = new <unk> ( this , client ) ;
}
catch ( Exception e ) {
System . out . println ( " + e . getMessage ( ) ) ;
}
}
}
public void <unk> ( ) {
for ( int i = <num> ; i < list . size ( ) ; i ++ ) {
System . out . println ( list . get ( i ) ) ;
}
}
public int <unk> ( String username ) {
for ( int i = <num> ; i < list . size ( ) ; i ++ ) {
if ( list . get ( i ) . <unk> ( ) . getName ( ) . equals ( username ) ) {
return i ;
}
}
return  <num> ;
}
public int <unk> ( String address ) {
for ( int i = <num> ; i < list . size ( ) ; i ++ ) {
if ( list . get ( i ) . <unk> ( ) . getAddress ( ) . equals ( address ) ) {
return i ;
}
}
return  <num> ;
}
public <unk> getConnectionManager ( int i ) {
return list . get ( i ) . <unk> ( ) ;
}
public boolean <unk> ( int index ) {
if ( index ==  <num> ) {
return false ;
}
else {
list . remove ( index ) ;
}
return true ;
}
public boolean <unk> ( <unk> <unk> , <unk> ch ) {
System . out . println ( " + <unk> ) ;
list . add ( new <unk> ( ch , <unk> ) ) ;
return true ;
}
public void <unk> ( ) {
for ( int i = <num> ; i < list . size ( ) ; i ++ ) {
System . out . println ( " ) ;
list . get ( i ) . <unk> ( ) . <unk> ( <unk> . <unk> ) ;
}
}
public <unk> [ ] <unk> ( ) {
<unk> [ ] <unk> = new <unk> [ list . size ( ) ] ;
for ( int i = <num> ; i < list . size ( ) ; i ++ ) {
<unk> [ i ] = list . get ( i ) . <unk> ( ) ;
}
return <unk> ;
}
public static void main ( String [ ] args ) {
<unk> c = ChatServer . <unk> ( ) ;
c . listen ( ) ;
}
}
class <unk> {
<unk> ch ;
<unk> ci ;
public <unk> ( <unk> ch , <unk> ci ) {
this . ch = ch ;
this . ci = ci ;
}
public <unk> <unk> ( ) {
return ch ;
}
public <unk> <unk> ( ) {
return ci ;
}
public String toString ( ) {
String res = ci . toString ( ) ;
return res ;
}
}
import java . io . * ;
import java . net . * ;
import java . io . * ;
import java . net . * ;
import java . util . * ;
class <unk> implements Runnable {
ChatServer cs ;
Socket connection ;
InetAddress address ;
Thread runner ;
ObjectOutputStream oos ;
ObjectInputStream ois ;
AbstractQueue < <unk> > <unk> ;
AbstractQueue < <unk> > <unk> ;
boolean <unk> = false ;
<unk> ( ChatServer cs , Socket connection ) {
runner = new Thread ( this , connection . getInetAddress ( ) . toString ( ) ) ;
this . cs = cs ;
this . connection = connection ;
address = connection . getInetAddress ( ) ;
<unk> = new java . util . concurrent . ConcurrentLinkedQueue < <unk> > ( ) ;
<unk> = new java . util . concurrent . ConcurrentLinkedQueue < <unk> > ( ) ;
runner . start ( ) ;
}
public void <unk> ( <unk> cr ) {
<unk> . add ( cr ) ;
}
public <unk> <unk> ( ) {
return <unk> . remove ( ) ;
}
public void <unk> ( <unk> <unk> ) {
<unk> . add ( <unk> ) ;
}
public ChatServer <unk> ( ) {
return cs ;
}
public Socket getConnection ( ) {
return connection ;
}
public ObjectOutputStream getOutputStream ( ) {
return oos ;
}
public ObjectInputStream getInputStream ( ) {
return ois ;
}
public void <unk> ( ) throws Exception {
oos . writeObject ( <unk> . <unk> ) ;
}
public void <unk> ( ) throws Exception {
oos . writeObject ( <unk> . <unk> ) ;
}
public void <unk> ( <unk> cc ) throws Exception {
oos . writeObject ( cc ) ;
}
public void cleanup ( ) {
System . out . println ( " + address + " ) ;
System . out . println ( " + address ) ;
int index = cs . <unk> ( address . toString ( ) ) ;
cs . <unk> ( index ) ;
cs . <unk> ( ) ;
System . out . println ( " ) ;
}
public void run ( ) {
try {
oos = new ObjectOutputStream ( connection . getOutputStream ( ) ) ;
ois = new ObjectInputStream ( connection . getInputStream ( ) ) ;
}
catch ( Exception e ) {
e . printStackTrace ( ) ;
return ;
}
try {
BufferedInputStream bis = new BufferedInputStream ( connection . getInputStream ( ) ) ;
while ( true ) {
<unk> <unk> = null ;
if ( <unk> == true ) {
cleanup ( ) ;
return ;
}
if ( bis . available ( ) > <num> ) {
<unk> = ( <unk> ) ois . readObject ( ) ;
}
else if ( ! <unk> . isEmpty ( ) ) {
<unk> = ( <unk> ) <unk> . remove ( ) ;
}
if ( <unk> != null ) {
System . out . println ( " + <unk> ) ;
<unk> . process ( this ) ;
System . out . println ( " + <unk> ) ;
}
}
}
catch ( EOFException e ) {
cleanup ( ) ;
return ;
}
catch ( SocketException e ) {
cleanup ( ) ;
return ;
}
catch ( Exception e ) {
cleanup ( ) ;
return ;
}
}
public void closeConnection ( ) {
System . out . println ( " + address + " ) ;
System . out . println ( " + address ) ;
int index = cs . <unk> ( address . toString ( ) ) ;
cs . <unk> ( index ) ;
cs . <unk> ( ) ;
System . out . println ( " ) ;
}
}
interface <unk> {
void process ( <unk> ch ) throws Exception ;
}
enum <unk> implements <unk> {
<unk> {
public void process ( <unk> ch ) throws Exception {
ChatServer cs = ch . <unk> ( ) ;
ObjectInputStream ois = ch . getInputStream ( ) ;
ObjectOutputStream oos = ch . getOutputStream ( ) ;
Socket connection = ch . getConnection ( ) ;
System . out . println ( " ) ;
ch . <unk> ( ) ;
System . out . println ( " ) ;
<unk> <unk> = ( <unk> ) ois . readObject ( ) ;
<unk> . setAddress ( connection . getInetAddress ( ) . getHostAddress ( ) ) ;
System . out . println ( " ) ;
cs . <unk> ( <unk> , ch ) ;
System . out . println ( " ) ;
ch . <unk> ( ) ;
cs . <unk> ( ) ;
}
} ,
<unk> {
public void process ( <unk> ch ) throws Exception {
ChatServer cs = ch . <unk> ( ) ;
ObjectInputStream ois = ch . getInputStream ( ) ;
ObjectOutputStream oos = ch . getOutputStream ( ) ;
ch . closeConnection ( ) ;
System . out . println ( " ) ;
ch . <unk> ( ) ;
}
} ,
<unk> {
public void process ( <unk> ch ) throws Exception {
ChatServer cs = ch . <unk> ( ) ;
ObjectOutputStream oos = ch . getOutputStream ( ) ;
System . out . println ( " ) ;
ch . <unk> ( ) ;
System . out . println ( " ) ;
<unk> [ ] <unk> = cs . <unk> ( ) ;
oos . writeObject ( <unk> ) ;
}
} ,
<unk> {
public void process ( <unk> ch ) throws Exception {
ch . <unk> ( ) ;
}
} ,
<unk> {
public void process ( <unk> ch ) throws Exception {
ch . <unk> ( ) ;
ObjectInputStream ois = ch . getInputStream ( ) ;
<unk> cr = ( <unk> ) ois . readObject ( ) ;
<unk> [ ] <unk> = cr . <unk> ( ) ;
for ( <unk> ci : <unk> ) {
int index = ch . <unk> ( ) . <unk> ( ci . getName ( ) ) ;
<unk> <unk> = ch . <unk> ( ) . getConnectionManager ( index ) ;
<unk> . <unk> ( cr ) ;
<unk> . <unk> ( <unk> . <unk> ) ;
}
ch . <unk> ( ) ;
}
} ,
<unk> {
public void process ( <unk> ch ) throws Exception {
ch . <unk> ( <unk> . <unk> ) ;
ObjectOutputStream oos = ch . getOutputStream ( ) ;
oos . writeObject ( ch . <unk> ( ) ) ;
}
}
}
package net . <unk> . android . <unk> ;
import java . nio . FloatBuffer ;
import java . nio . ShortBuffer ;
import javax . microedition . khronos . opengles . GL10 ;
public class <unk> {
private final int <unk> = <num> ;
private FloatBuffer <unk> ;
private FloatBuffer <unk> ;
private ShortBuffer <unk> ;
private ShortBuffer <unk> ;
private ShortBuffer <unk> ;
private ShortBuffer <unk> ;
private ShortBuffer <unk> ;
private ShortBuffer <unk> ;
public <unk> ( ) {
this . init ( ) ;
}
private void init ( ) {
<unk> = <unk> . createFloatBuffer ( <unk> * <num> ) ;
<unk> = <unk> . createFloatBuffer ( <num> ) ;
<unk> = <unk> . <unk> ( <num> ) ;
<unk> = <unk> . <unk> ( <num> ) ;
<unk> = <unk> . <unk> ( <num> ) ;
<unk> = <unk> . <unk> ( <num> ) ;
<unk> = <unk> . <unk> ( <num> ) ;
<unk> = <unk> . <unk> ( <num> ) ;
float [ ] <unk> = {
1f , <num> , <num> ,
<unk> , <num> , <num> ,
<unk> , <num> , <num> ,
1f , <num> , <num> ,
1f , <num> ,  <num> ,
1f , <num> ,  <num> ,
<unk> , <num> ,  <num> ,
<unk> , <num> ,  <num> ,
} ;
short [ ] <unk> = { <num> , <num> , <num> , <num> , <num> , <num> } ;
short [ ] <unk> = { <num> , <num> , <num> , <num> , <num> , <num> } ;
short [ ] <unk> = { <num> , <num> , <num> , <num> , <num> , <num> } ;
short [ ] <unk> = { <num> , <num> , <num> , <num> , <num> , <num> } ;
short [ ] <unk> = { <num> , <num> , <num> , <num> , <num> , <num> } ;
short [ ] <unk> = { <num> , <num> , <num> , <num> , <num> , <num> } ;
float [ ] <unk> = {
<unk> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
1f , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
1f , <num> , <num> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,
<unk> , <num> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,  <num> ,
<unk> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<unk> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,  <num> , <num> , <num> ,  <num> , <unk>
} ;
<unk> . put ( <unk> ) ;
<unk> . put ( <unk> ) ;
<unk> . put ( <unk> ) ;
<unk> . put ( <unk> ) ;
<unk> . put ( <unk> ) ;
<unk> . put ( <unk> ) ;
<unk> . put ( <unk> ) ;
<unk> . put ( <unk> ) ;
<unk> . position ( <num> ) ;
<unk> . position ( <num> ) ;
<unk> . position ( <num> ) ;
<unk> . position ( <num> ) ;
<unk> . position ( <num> ) ;
<unk> . position ( <num> ) ;
<unk> . position ( <num> ) ;
<unk> . position ( <num> ) ;
}
public void draw ( GL10 gl ) {
gl . glVertexPointer ( <num> , GL10 . GL_FLOAT , <num> , <unk> ) ;
gl . <unk> ( GL10 . GL_FLOAT , <num> , <unk> ) ;
gl . glColor4f ( <num> , <num> , <num> , <num> ) ;
gl . <unk> ( GL10 . GL_TRIANGLES , <num> , GL10 . <unk> , <unk> ) ;
gl . glColor4f ( <num> , <num> , <num> , <num> ) ;
gl . <unk> ( GL10 . GL_TRIANGLES , <num> , GL10 . <unk> , <unk> ) ;
gl . glColor4f ( <num> , <num> , <num> , <num> ) ;
gl . <unk> ( GL10 . GL_TRIANGLES , <num> , GL10 . <unk> , <unk> ) ;
gl . glColor4f ( <num> , <num> , <num> , <num> ) ;
gl . <unk> ( GL10 . GL_TRIANGLES , <num> , GL10 . <unk> , <unk> ) ;
gl . glColor4f ( <num> , <num> , <num> , <num> ) ;
gl . <unk> ( GL10 . GL_TRIANGLES , <num> , GL10 . <unk> , <unk> ) ;
gl . glColor4f ( <num> , <num> , <num> , <num> ) ;
gl . <unk> ( GL10 . GL_TRIANGLES , <num> , GL10 . <unk> , <unk> ) ;
}
}
package net . <unk> . android . <unk> ;
import android . app . Activity ;
import android . opengl . GLSurfaceView ;
import android . os . Bundle ;
import android . view . ViewGroup ;
public class GalleryActivity extends Activity {
GLSurfaceView <unk> ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
ViewGroup container = ( ViewGroup ) findViewById ( R . id . container ) ;
<unk> = new GLSurfaceView ( this ) ;
<unk> renderer = new <unk> ( ) ;
<unk> . setRenderer ( renderer ) ;
container . addView ( <unk> ) ;
}
@Override
protected void onResume ( ) {
super . onResume ( ) ;
<unk> . onResume ( ) ;
}
@Override
protected void onPause ( ) {
super . onPause ( ) ;
<unk> . onPause ( ) ;
}
}
package net . <unk> . android . <unk> ;
import java . nio . ByteBuffer ;
import java . nio . ByteOrder ;
import java . nio . FloatBuffer ;
import java . nio . ShortBuffer ;
public class <unk> {
private <unk> ( ) { }
public static FloatBuffer createFloatBuffer ( int capacity ) {
ByteBuffer <unk> = ByteBuffer . allocateDirect ( capacity * <num> ) ;
<unk> . order ( ByteOrder . nativeOrder ( ) ) ;
return <unk> . asFloatBuffer ( ) ;
}
public static ShortBuffer <unk> ( int capacity ) {
ByteBuffer <unk> = ByteBuffer . allocateDirect ( capacity * <num> ) ;
<unk> . order ( ByteOrder . nativeOrder ( ) ) ;
return <unk> . asShortBuffer ( ) ;
}
}
package net . <unk> . android . <unk> ;
import javax . microedition . khronos . egl . EGLConfig ;
import javax . microedition . khronos . opengles . GL10 ;
import net . <unk> . android . <unk> . * ;
import android . opengl . GLU ;
public class <unk> implements <unk> . Renderer {
private <unk> <unk> ;
private static float [ ] <unk> = { <num> , <num> , <num> , <num> } ;
private static float [ ] <unk> = { <num> , <num> , <num> , <num> } ;
private static float [ ] <unk> = { <num> , <num> ,  <num> , <num> } ;
public void onDrawFrame ( GL10 gl ) {
gl . glClearColor ( <num> , <num> , <num> , <num> ) ;
gl . glClear ( GL10 . GL_COLOR_BUFFER_BIT | GL10 . GL_DEPTH_BUFFER_BIT ) ;
<unk> ( gl ) ;
<unk> . draw ( gl ) ;
}
public void onSurfaceChanged ( GL10 gl , int width , int height ) {
gl . glMatrixMode ( GL10 . GL_PROJECTION ) ;
gl . glLoadIdentity ( ) ;
GLU . gluPerspective ( gl , <num> , ( float ) width / ( float ) height , <num> , <num> ) ;
gl . glMatrixMode ( GL10 . GL_MODELVIEW ) ;
gl . glLoadIdentity ( ) ;
gl . glMatrixMode ( GL10 . GL_MODELVIEW ) ;
gl . glTranslatef ( <num> , <num> ,  <num> ) ;
gl . glRotatef ( <num> , <num> , <num> , <num> ) ;
gl . glEnable ( GL10 . GL_LIGHTING ) ;
gl . glEnable ( GL10 . <unk> ) ;
gl . glEnableClientState ( GL10 . <unk> ) ;
gl . glEnable ( GL10 . <unk> ) ;
<unk> ( gl ) ;
float [ ] <unk> = { <num> , <num> , <num> , <num> } ;
gl . <unk> ( GL10 . <unk> , <unk> , <num> ) ;
}
public void onSurfaceCreated ( GL10 gl , EGLConfig config ) {
<unk> = new <unk> ( ) ;
gl . <unk> ( <num> ) ;
gl . glEnable ( GL10 . GL_DEPTH_TEST ) ;
gl . glDepthFunc ( GL10 . GL_LEQUAL ) ;
gl . glEnable ( GL10 . <unk> ) ;
gl . <unk> ( GL10 . <unk> ) ;
gl . <unk> ( GL10 . <unk> ) ;
}
private void <unk> ( GL10 gl ) {
gl . glRotatef ( <num> , <num> , <num> , <num> ) ;
gl . glRotatef ( <num> , <num> , <num> , <num> ) ;
}
private void <unk> ( GL10 gl ) {
gl . glEnable ( GL10 . GL_LIGHT0 ) ;
gl . glLightfv ( GL10 . GL_LIGHT0 , GL10 . GL_AMBIENT , <unk> , <num> ) ;
gl . glLightfv ( GL10 . GL_LIGHT0 , GL10 . GL_DIFFUSE , <unk> , <num> ) ;
gl . glLightfv ( GL10 . GL_LIGHT0 , GL10 . GL_POSITION , <unk> , <num> ) ;
}
public void release ( ) {
}
}
package net . <unk> . android . <unk> ;
import java . io . Writer ;
import java . util . ArrayList ;
import javax . microedition . khronos . egl . EGL10 ;
import javax . microedition . khronos . egl . <unk> ;
import javax . microedition . khronos . egl . EGLConfig ;
import javax . microedition . khronos . egl . EGLContext ;
import javax . microedition . khronos . egl . EGLDisplay ;
import javax . microedition . khronos . egl . EGLSurface ;
import javax . microedition . khronos . opengles . GL ;
import javax . microedition . khronos . opengles . GL10 ;
import net . <unk> . android . <unk> . <unk> . <unk> ;
import net . <unk> . android . <unk> . <unk> . <unk> ;
import android . opengl . GLSurfaceView ;
import android . opengl . GLSurfaceView . EGLConfigChooser ;
import android . service . wallpaper . WallpaperService ;
import android . util . Log ;
import android . view . SurfaceHolder ;
public class <unk> extends WallpaperService {
@Override
public Engine onCreateEngine ( ) {
return new <unk> ( ) ;
}
public class <unk> extends Engine {
public final static int RENDERMODE_WHEN_DIRTY = <num> ;
public final static int <unk> = <num> ;
private <unk> <unk> ;
private EGLConfigChooser <unk> ;
private EGLContextFactory <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private int <unk> ;
public <unk> ( ) {
super ( ) ;
}
@Override
public void onVisibilityChanged ( boolean visible ) {
if ( visible ) {
onResume ( ) ;
} else {
onPause ( ) ;
}
super . onVisibilityChanged ( visible ) ;
}
@Override
public void onCreate ( SurfaceHolder surfaceHolder ) {
super . onCreate ( surfaceHolder ) ;
}
@Override
public void onDestroy ( ) {
super . onDestroy ( ) ;
<unk> . <unk> ( ) ;
}
@Override
public void onSurfaceChanged ( SurfaceHolder holder , int format , int width , int height ) {
<unk> . <unk> ( width , height ) ;
super . onSurfaceChanged ( holder , format , width , height ) ;
}
@Override
public void onSurfaceCreated ( SurfaceHolder holder ) {
<unk> . surfaceCreated ( holder ) ;
super . onSurfaceCreated ( holder ) ;
}
@Override
public void onSurfaceDestroyed ( SurfaceHolder holder ) {
<unk> . surfaceDestroyed ( ) ;
super . onSurfaceDestroyed ( holder ) ;
}
public void <unk> ( <unk> <unk> ) {
<unk> = <unk> ;
}
public void <unk> ( int <unk> ) {
<unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void setRenderer ( Renderer renderer ) {
<unk> ( ) ;
if ( <unk> == null ) {
<unk> = new <unk> ( true ) ;
}
if ( <unk> == null ) {
<unk> = new <unk> ( ) ;
}
if ( <unk> == null ) {
<unk> = new <unk> ( ) ;
}
<unk> = new <unk> ( renderer , <unk> , <unk> , <unk> , <unk> ) ;
<unk> . start ( ) ;
}
public void setEGLContextFactory ( EGLContextFactory factory ) {
<unk> ( ) ;
<unk> = factory ;
}
public void <unk> ( <unk> factory ) {
<unk> ( ) ;
<unk> = factory ;
}
public void setEGLConfigChooser ( EGLConfigChooser <unk> ) {
<unk> ( ) ;
<unk> = <unk> ;
}
public void setEGLConfigChooser ( boolean <unk> ) {
setEGLConfigChooser ( new <unk> ( <unk> ) ) ;
}
public void setEGLConfigChooser ( int <unk> , int <unk> , int <unk> , int <unk> , int depthSize ,
int stencilSize ) {
setEGLConfigChooser ( new <unk> ( <unk> , <unk> , <unk> , <unk> , depthSize ,
stencilSize ) ) ;
}
public void setRenderMode ( int renderMode ) {
<unk> . setRenderMode ( renderMode ) ;
}
public int <unk> ( ) {
return <unk> . <unk> ( ) ;
}
public void requestRender ( ) {
<unk> . requestRender ( ) ;
}
public void onPause ( ) {
<unk> . onPause ( ) ;
}
public void onResume ( ) {
<unk> . onResume ( ) ;
}
public void <unk> ( Runnable r ) {
<unk> . <unk> ( r ) ;
}
private void <unk> ( ) {
if ( <unk> != null ) {
throw new IllegalStateException ( " ) ;
}
}
}
public interface Renderer extends GLSurfaceView . Renderer {
}
}
class <unk> extends Writer {
private StringBuilder mBuilder = new StringBuilder ( ) ;
@Override
public void close ( ) {
<unk> ( ) ;
}
@Override
public void flush ( ) {
<unk> ( ) ;
}
@Override
public void write ( char [ ] buf , int offset , int count ) {
for ( int i = <num> ; i < count ; i ++ ) {
char c = buf [ offset + i ] ;
if ( c == \n' ) {
<unk> ( ) ;
} else {
mBuilder . append ( c ) ;
}
}
}
private void <unk> ( ) {
if ( mBuilder . length ( ) > <num> ) {
Log . v ( " , mBuilder . toString ( ) ) ;
mBuilder . delete ( <num> , mBuilder . length ( ) ) ;
}
}
}
interface EGLContextFactory {
EGLContext createContext ( EGL10 egl , EGLDisplay display , EGLConfig eglConfig ) ;
void destroyContext ( EGL10 egl , EGLDisplay display , EGLContext context ) ;
}
class <unk> implements EGLContextFactory {
public EGLContext createContext ( EGL10 egl , EGLDisplay display , EGLConfig config ) {
return egl . eglCreateContext ( display , config , EGL10 . EGL_NO_CONTEXT , null ) ;
}
public void destroyContext ( EGL10 egl , EGLDisplay display , EGLContext context ) {
egl . eglDestroyContext ( display , context ) ;
}
}
interface <unk> {
EGLSurface <unk> ( EGL10 egl , EGLDisplay display , EGLConfig config , Object <unk> ) ;
void destroySurface ( EGL10 egl , EGLDisplay display , EGLSurface surface ) ;
}
class <unk> implements <unk> {
public EGLSurface <unk> ( EGL10 egl , EGLDisplay
display , EGLConfig config , Object <unk> ) {
EGLSurface eglSurface = null ;
while ( eglSurface == null ) {
try {
eglSurface = egl . eglCreateWindowSurface ( display ,
config , <unk> , null ) ;
} catch ( Throwable t ) {
} finally {
if ( eglSurface == null ) {
try {
Thread . sleep ( <num> ) ;
} catch ( InterruptedException t ) {
}
}
}
}
return eglSurface ;
}
public void destroySurface ( EGL10 egl , EGLDisplay display , EGLSurface surface ) {
egl . eglDestroySurface ( display , surface ) ;
}
}
interface <unk> {
GL wrap ( GL gl ) ;
}
class <unk> {
private EGL10 mEgl ;
private EGLDisplay mEglDisplay ;
private EGLSurface <unk> ;
private EGLContext mEglContext ;
EGLConfig mEglConfig ;
private EGLConfigChooser <unk> ;
private EGLContextFactory <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
public <unk> ( EGLConfigChooser chooser , EGLContextFactory <unk> ,
<unk> <unk> , <unk> wrapper ) {
this . <unk> = chooser ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = wrapper ;
}
public void start ( ) {
if ( mEgl == null ) {
mEgl = ( EGL10 ) EGLContext . getEGL ( ) ;
} else {
}
if ( mEglDisplay == null ) {
mEglDisplay = mEgl . eglGetDisplay ( EGL10 . EGL_DEFAULT_DISPLAY ) ;
} else {
}
if ( mEglConfig == null ) {
int [ ] version = new int [ <num> ] ;
mEgl . eglInitialize ( mEglDisplay , version ) ;
mEglConfig = <unk> . chooseConfig ( mEgl , mEglDisplay ) ;
} else {
}
if ( mEglContext == null ) {
mEglContext = <unk> . createContext ( mEgl , mEglDisplay , mEglConfig ) ;
if ( mEglContext == null || mEglContext == EGL10 . EGL_NO_CONTEXT ) {
throw new RuntimeException ( " ) ;
}
} else {
}
<unk> = null ;
}
public GL createSurface ( SurfaceHolder holder ) {
if ( <unk> != null && <unk> != EGL10 . EGL_NO_SURFACE ) {
mEgl . eglMakeCurrent ( mEglDisplay , EGL10 . EGL_NO_SURFACE , EGL10 . EGL_NO_SURFACE , EGL10 . EGL_NO_CONTEXT ) ;
<unk> . destroySurface ( mEgl , mEglDisplay , <unk> ) ;
}
<unk> = <unk> . <unk> ( mEgl , mEglDisplay , mEglConfig , holder ) ;
if ( <unk> == null || <unk> == EGL10 . EGL_NO_SURFACE ) {
throw new RuntimeException ( " ) ;
}
if ( ! mEgl . eglMakeCurrent ( mEglDisplay , <unk> , <unk> , mEglContext ) ) {
throw new RuntimeException ( " ) ;
}
GL gl = mEglContext . getGL ( ) ;
if ( <unk> != null ) {
gl = <unk> . wrap ( gl ) ;
}
return gl ;
}
public boolean swap ( ) {
mEgl . eglSwapBuffers ( mEglDisplay , <unk> ) ;
return mEgl . eglGetError ( ) != <unk> . <unk> ;
}
public void destroySurface ( ) {
if ( <unk> != null && <unk> != EGL10 . EGL_NO_SURFACE ) {
mEgl . eglMakeCurrent ( mEglDisplay , EGL10 . EGL_NO_SURFACE , EGL10 . EGL_NO_SURFACE , EGL10 . EGL_NO_CONTEXT ) ;
<unk> . destroySurface ( mEgl , mEglDisplay , <unk> ) ;
<unk> = null ;
}
}
public void finish ( ) {
if ( mEglContext != null ) {
<unk> . destroyContext ( mEgl , mEglDisplay , mEglContext ) ;
mEglContext = null ;
}
if ( mEglDisplay != null ) {
mEgl . eglTerminate ( mEglDisplay ) ;
mEglDisplay = null ;
}
}
}
class <unk> extends Thread {
private final static boolean <unk> = false ;
public final static int <unk> = <num> ;
public final static int <unk> = <num> ;
private final <unk> <unk> = new <unk> ( ) ;
private <unk> <unk> ;
private EGLConfigChooser <unk> ;
private EGLContextFactory <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
public SurfaceHolder mHolder ;
private boolean <unk> = true ;
public boolean <unk> ;
private boolean mPaused ;
private boolean <unk> ;
private boolean <unk> ;
private boolean <unk> ;
private int mWidth ;
private int mHeight ;
private int <unk> ;
private boolean <unk> ;
private boolean <unk> ;
private <unk> . Renderer mRenderer ;
private ArrayList < Runnable > <unk> = new ArrayList < Runnable > ( ) ;
private <unk> <unk> ;
<unk> ( <unk> . Renderer renderer , EGLConfigChooser chooser , EGLContextFactory <unk> ,
<unk> <unk> , <unk> wrapper ) {
super ( ) ;
<unk> = false ;
mWidth = <num> ;
mHeight = <num> ;
<unk> = true ;
<unk> = <unk> . <unk> . <unk> ;
mRenderer = renderer ;
this . <unk> = chooser ;
this . <unk> = <unk> ;
this . <unk> = <unk> ;
this . <unk> = wrapper ;
}
@Override
public void run ( ) {
setName ( " + getId ( ) ) ;
if ( <unk> ) {
Log . i ( " , " + getId ( ) ) ;
}
try {
<unk> ( ) ;
} catch ( InterruptedException e ) {
} finally {
<unk> . <unk> ( this ) ;
}
}
private void <unk> ( ) {
if ( <unk> ) {
<unk> = false ;
<unk> . destroySurface ( ) ;
<unk> . <unk> ( this ) ;
}
}
private void <unk> ( ) throws InterruptedException {
<unk> = new <unk> ( <unk> , <unk> , <unk> , <unk> ) ;
try {
GL10 gl = null ;
boolean <unk> = true ;
boolean <unk> = true ;
while ( ! isDone ( ) ) {
int w = <num> ;
int h = <num> ;
boolean changed = false ;
boolean <unk> = false ;
boolean <unk> = false ;
synchronized ( <unk> ) {
while ( true ) {
if ( mPaused ) {
<unk> ( ) ;
}
if ( ! <unk> ) {
if ( ! <unk> ) {
<unk> ( ) ;
<unk> = true ;
<unk> . notifyAll ( ) ;
}
} else {
if ( ! <unk> ) {
if ( <unk> . <unk> ( this ) ) {
<unk> = true ;
<unk> . start ( ) ;
<unk> = true ;
<unk> = true ;
}
}
}
if ( <unk> ) {
return ;
}
if ( <unk> ) {
<unk> = true ;
<unk> = false ;
break ;
}
if ( ( ! mPaused ) && <unk> && <unk> && ( mWidth > <num> ) && ( mHeight > <num> )
&& ( <unk> || ( <unk> == <unk> . <unk> . <unk> ) ) ) {
changed = <unk> ;
w = mWidth ;
h = mHeight ;
<unk> = false ;
<unk> = false ;
if ( <unk> && <unk> ) {
changed = true ;
<unk> = false ;
<unk> . notifyAll ( ) ;
}
break ;
}
if ( <unk> ) {
Log . i ( " , " + getId ( ) ) ;
}
<unk> . wait ( ) ;
}
}
if ( <unk> ) {
Runnable r ;
while ( ( r = getEvent ( ) ) != null ) {
r . run ( ) ;
if ( isDone ( ) ) {
return ;
}
}
continue ;
}
if ( <unk> ) {
<unk> = true ;
changed = true ;
}
if ( changed ) {
gl = ( GL10 ) <unk> . createSurface ( mHolder ) ;
<unk> = true ;
}
if ( <unk> ) {
mRenderer . onSurfaceCreated ( gl , <unk> . mEglConfig ) ;
<unk> = false ;
}
if ( <unk> ) {
mRenderer . onSurfaceChanged ( gl , w , h ) ;
<unk> = false ;
}
if ( ( w > <num> ) && ( h > <num> ) ) {
mRenderer . onDrawFrame ( gl ) ;
<unk> . swap ( ) ;
Thread . sleep ( <num> ) ;
}
}
} finally {
synchronized ( <unk> ) {
<unk> ( ) ;
<unk> . finish ( ) ;
}
}
}
private boolean isDone ( ) {
synchronized ( <unk> ) {
return <unk> ;
}
}
public void setRenderMode ( int renderMode ) {
if ( ! ( ( <unk> . <unk> . RENDERMODE_WHEN_DIRTY <= renderMode ) && ( renderMode <= <unk> . <unk> . <unk> ) ) ) {
throw new IllegalArgumentException ( " ) ;
}
synchronized ( <unk> ) {
<unk> = renderMode ;
if ( renderMode == <unk> . <unk> . <unk> ) {
<unk> . notifyAll ( ) ;
}
}
}
public int <unk> ( ) {
synchronized ( <unk> ) {
return <unk> ;
}
}
public void requestRender ( ) {
synchronized ( <unk> ) {
<unk> = true ;
<unk> . notifyAll ( ) ;
}
}
public void surfaceCreated ( SurfaceHolder holder ) {
mHolder = holder ;
synchronized ( <unk> ) {
if ( <unk> ) {
Log . i ( " , " + getId ( ) ) ;
}
<unk> = true ;
<unk> . notifyAll ( ) ;
}
}
public void surfaceDestroyed ( ) {
synchronized ( <unk> ) {
if ( <unk> ) {
Log . i ( " , " + getId ( ) ) ;
}
<unk> = false ;
<unk> . notifyAll ( ) ;
while ( ! <unk> && isAlive ( ) && ! <unk> ) {
try {
<unk> . wait ( ) ;
} catch ( InterruptedException e ) {
Thread . currentThread ( ) . interrupt ( ) ;
}
}
}
}
public void onPause ( ) {
synchronized ( <unk> ) {
mPaused = true ;
<unk> . notifyAll ( ) ;
}
}
public void onResume ( ) {
synchronized ( <unk> ) {
mPaused = false ;
<unk> = true ;
<unk> . notifyAll ( ) ;
}
}
public void <unk> ( int w , int h ) {
synchronized ( <unk> ) {
mWidth = w ;
mHeight = h ;
<unk> = true ;
<unk> . notifyAll ( ) ;
}
}
public void <unk> ( ) {
synchronized ( <unk> ) {
<unk> = true ;
<unk> . notifyAll ( ) ;
}
try {
join ( ) ;
} catch ( InterruptedException ex ) {
Thread . currentThread ( ) . interrupt ( ) ;
}
}
public void <unk> ( Runnable r ) {
synchronized ( this ) {
<unk> . add ( r ) ;
synchronized ( <unk> ) {
<unk> = true ;
<unk> . notifyAll ( ) ;
}
}
}
private Runnable getEvent ( ) {
synchronized ( this ) {
if ( <unk> . size ( ) > <num> ) {
return <unk> . remove ( <num> ) ;
}
}
return null ;
}
private class <unk> {
public synchronized void <unk> ( <unk> thread ) {
if ( <unk> ) {
Log . i ( " , " + thread . getId ( ) ) ;
}
thread . <unk> = true ;
if ( <unk> == thread ) {
<unk> = null ;
}
notifyAll ( ) ;
}
public synchronized boolean <unk> ( <unk> thread ) {
if ( <unk> == thread || <unk> == null ) {
<unk> = thread ;
notifyAll ( ) ;
return true ;
}
return false ;
}
public synchronized void <unk> ( <unk> thread ) {
if ( <unk> == thread ) {
<unk> = null ;
}
notifyAll ( ) ;
}
}
}
abstract class <unk> implements EGLConfigChooser {
public <unk> ( int [ ] configSpec ) {
<unk> = configSpec ;
}
public EGLConfig chooseConfig ( EGL10 egl , EGLDisplay display ) {
int [ ] num_config = new int [ <num> ] ;
egl . eglChooseConfig ( display , <unk> , null , <num> , num_config ) ;
int numConfigs = num_config [ <num> ] ;
if ( numConfigs <= <num> ) {
throw new IllegalArgumentException ( " ) ;
}
EGLConfig [ ] configs = new EGLConfig [ numConfigs ] ;
egl . eglChooseConfig ( display , <unk> , configs , numConfigs , num_config ) ;
EGLConfig config = chooseConfig ( egl , display , configs ) ;
if ( config == null ) {
throw new IllegalArgumentException ( " ) ;
}
return config ;
}
abstract EGLConfig chooseConfig ( EGL10 egl , EGLDisplay display , EGLConfig [ ] configs ) ;
protected int [ ] <unk> ;
public static class <unk> extends <unk> {
public <unk> ( int <unk> , int <unk> , int <unk> , int <unk> , int depthSize ,
int stencilSize ) {
super ( new int [ ] { EGL10 . EGL_RED_SIZE , <unk> , EGL10 . EGL_GREEN_SIZE , <unk> , EGL10 . EGL_BLUE_SIZE ,
<unk> , EGL10 . EGL_ALPHA_SIZE , <unk> , EGL10 . EGL_DEPTH_SIZE , depthSize , EGL10 . EGL_STENCIL_SIZE ,
stencilSize , EGL10 . EGL_NONE } ) ;
mValue = new int [ <num> ] ;
mRedSize = <unk> ;
mGreenSize = <unk> ;
mBlueSize = <unk> ;
mAlphaSize = <unk> ;
mDepthSize = depthSize ;
mStencilSize = stencilSize ;
}
@Override
public EGLConfig chooseConfig ( EGL10 egl , EGLDisplay display , EGLConfig [ ] configs ) {
EGLConfig closestConfig = null ;
int closestDistance = <num> ;
for ( EGLConfig config : configs ) {
int d = findConfigAttrib ( egl , display , config , EGL10 . EGL_DEPTH_SIZE , <num> ) ;
int s = findConfigAttrib ( egl , display , config , EGL10 . EGL_STENCIL_SIZE , <num> ) ;
if ( d >= mDepthSize && s >= mStencilSize ) {
int r = findConfigAttrib ( egl , display , config , EGL10 . EGL_RED_SIZE , <num> ) ;
int g = findConfigAttrib ( egl , display , config , EGL10 . EGL_GREEN_SIZE , <num> ) ;
int b = findConfigAttrib ( egl , display , config , EGL10 . EGL_BLUE_SIZE , <num> ) ;
int a = findConfigAttrib ( egl , display , config , EGL10 . EGL_ALPHA_SIZE , <num> ) ;
int distance = Math . abs ( r  mRedSize ) + Math . abs ( g  mGreenSize ) + Math . abs ( b  mBlueSize )
+ Math . abs ( a  mAlphaSize ) ;
if ( distance < closestDistance ) {
closestDistance = distance ;
closestConfig = config ;
}
}
}
return closestConfig ;
}
private int findConfigAttrib ( EGL10 egl , EGLDisplay display , EGLConfig config , int attribute , int defaultValue ) {
if ( egl . eglGetConfigAttrib ( display , config , attribute , mValue ) ) {
return mValue [ <num> ] ;
}
return defaultValue ;
}
private int [ ] mValue ;
protected int mRedSize ;
protected int mGreenSize ;
protected int mBlueSize ;
protected int mAlphaSize ;
protected int mDepthSize ;
protected int mStencilSize ;
}
public static class <unk> extends <unk> {
public <unk> ( boolean <unk> ) {
super ( <num> , <num> , <num> , <num> , <unk> ? <num> : <num> , <num> ) ;
mRedSize = <num> ;
mGreenSize = <num> ;
mBlueSize = <num> ;
}
}
package net . <unk> . android . <unk> ;
import net . <unk> . android . <unk> . * ;
public class <unk> extends <unk> {
public <unk> ( ) {
super ( ) ;
}
public Engine onCreateEngine ( ) {
<unk> engine = new <unk> ( ) ;
return engine ;
}
class <unk> extends <unk> {
<unk> renderer ;
public <unk> ( ) {
super ( ) ;
renderer = new <unk> ( ) ;
setRenderer ( renderer ) ;
setRenderMode ( <unk> ) ;
}
public void onDestroy ( ) {
super . onDestroy ( ) ;
if ( renderer != null ) {
renderer . release ( ) ;
}
renderer = null ;
}
}
}
package org . vaadin . twitter ;
import java . util . ArrayList ;
import java . util . Collections ;
import java . util . Date ;
import java . util . List ;
import java . util . Random ;
public class <unk> {
private static final long <unk> =  <num> ;
private Query query ;
private long <unk> ;
private long <unk> ;
public <unk> ( String search ) {
query = new Query ( search ) ;
reset ( ) ;
}
public void reset ( ) {
<unk> = <unk> ;
<unk> = <unk> ;
}
public List < Tweet > more ( ) {
<unk> ( <unk> , <unk> ) ;
List < Tweet > tweets = search ( query ) ;
if ( tweets . size ( ) > <num> ) {
<unk> = <unk> ( tweets ) ;
if ( <unk> == <unk> ) {
<unk> = <unk> ( tweets ) ;
}
}
return tweets ;
}
public List < Tweet > latest ( ) {
<unk> ( <unk> , <unk> ) ;
List < Tweet > tweets = search ( query ) ;
if ( tweets . size ( ) > <num> ) {
<unk> = <unk> ( tweets ) ;
if ( <unk> == <unk> ) {
<unk> = <unk> ( tweets ) ;
}
}
return tweets ;
}
public String getQueryString ( ) {
return query . getQuery ( ) ;
}
private void <unk> ( long <unk> , long max ) {
query . <unk> ( <unk> ) ;
query . <unk> ( max ) ;
}
@SuppressWarnings("unchecked")
private List < Tweet > search ( Query q ) {
if ( q . getQuery ( ) . isEmpty ( ) ) {
return Collections . EMPTY_LIST ;
}
List < Tweet > tweets = new ArrayList < Tweet > ( ) ;
for ( int i = <num> ; i < <num> ; i ++ ) {
tweets . add ( new Tweet ( ) ) ;
}
return tweets ;
}
private long <unk> ( List < Tweet > tweets ) {
return tweets . get ( tweets . size ( )  <num> ) . getId ( )  <num> ;
}
private long <unk> ( List < Tweet > tweets ) {
return tweets . get ( <num> ) . getId ( ) ;
}
public static class Tweet {
private static final String [ ] <unk> = { " , " , " ,
" , " , " , " , " , " ,
" , " , " , " , " , " , " ,
" , " , " , " , " , " , " ,
" , " , " , " , " ,
" , " , " , " , " , " , " ,
" , " , " , " , " , " ,
" , " , " , " , " , " ,
" , " , " , " , " , " ,
" , " , " , " , " , " ,
" , " , " , " , " , " , " ,
" , " , " } ;
private static int lastId = <num> ;
private int id ;
private String text ;
Tweet ( ) {
id = lastId ++ ;
StringBuilder builder = new StringBuilder ( ) ;
double length = <num> + new Random ( ) . nextInt ( <num> ) ;
while ( builder . length ( ) <= length ) {
builder . append ( <unk> ( ) ) . append (  ' ) ;
}
text = builder . substring ( <num> , builder . lastIndexOf ( " ) ) ;
}
public int getId ( ) {
return id ;
}
public String getFromUser ( ) {
return <unk> ( ) ;
}
private String <unk> ( ) {
return <unk> [ new Random ( ) . nextInt ( <unk> . length ) ] ;
}
public Date getCreatedAt ( ) {
return new Date ( ) ;
}
public String getText ( ) {
return text ;
}
}
private static class Query {
private String searchString ;
Query ( String query ) {
searchString = query ;
}
public void <unk> ( long <unk> ) {
}
public void <unk> ( long max ) {
}
public String getQuery ( ) {
return searchString ;
}
}
}
package org . vaadin . twitter ;
import com . vaadin . ui . VerticalLayout ;
public class <unk> extends VerticalLayout {
private <unk> <unk> ;
private <unk> <unk> ;
public <unk> ( ) {
<unk> = new <unk> ( " ) ;
addComponent ( <unk> ) ;
<unk> = new <unk> ( " ) ;
addComponent ( <unk> ) ;
}
public void <unk> ( String searchTerm ) {
<unk> . addToList ( searchTerm ) ;
}
public void <unk> ( String searchTerm ) {
<unk> . addToList ( searchTerm ) ;
}
}
package org . vaadin . twitter ;
import javax . sql . <unk> . serial . <unk> ;
import com . vaadin . Application ;
import com . vaadin . ui . <unk> ;
import com . vaadin . ui . Label ;
import com . vaadin . ui . Window ;
@SuppressWarnings("serial")
public class <unk> extends Application {
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
@Override
public void init ( ) {
setTheme ( " ) ;
<unk> mainLayout = new <unk> ( ) ;
Label logo = new Label ( " ) ;
logo . addStyleName ( " ) ;
mainLayout . addComponent ( logo ) ;
logo . setSizeUndefined ( ) ;
mainLayout . addStyleName ( " ) ;
mainLayout . setSizeFull ( ) ;
Window mainWindow = new Window ( " , mainLayout ) ;
setMainWindow ( mainWindow ) ;
<unk> = new <unk> ( ) ;
<unk> . addStyleName ( " ) ;
<unk> . addStyleName ( " ) ;
<unk> . setWidth ( " ) ;
<unk> = new <unk> ( ) ;
<unk> . addStyleName ( " ) ;
<unk> . addStyleName ( " ) ;
<unk> = new <unk> ( ) ;
<unk> . addStyleName ( " ) ;
<unk> . addStyleName ( " ) ;
<unk> . setSizeFull ( ) ;
mainLayout . addComponent ( <unk> ) ;
mainLayout . addComponent ( <unk> ) ;
mainLayout . addComponent ( <unk> ) ;
}
public void doSearch ( String searchTerms ) {
<unk> tweets = new <unk> ( searchTerms ) ;
<unk> . setSearchResult ( tweets ) ;
<unk> . <unk> ( searchTerms ) ;
}
public void <unk> ( String result ) {
<unk> . <unk> ( result ) ;
}
}
package org . vaadin . twitter ;
import org . vaadin . twitter . <unk> . Tweet ;
import com . vaadin . ui . Button ;
import com . vaadin . ui . Button . ClickEvent ;
import com . vaadin . ui . Button . ClickListener ;
import com . vaadin . ui . <unk> ;
import com . vaadin . ui . Panel ;
import com . vaadin . ui . VerticalLayout ;
public class <unk> extends <unk> {
private Panel <unk> ;
public <unk> ( ) {
<unk> = new Panel ( ) ;
<unk> . setSizeFull ( ) ;
( ( VerticalLayout ) <unk> . getContent ( ) ) . setSpacing ( true ) ;
addComponent ( <unk> ) ;
}
public void setSearchResult ( final <unk> result ) {
<unk> . <unk> ( ) ;
for ( Tweet tweet : result . latest ( ) ) {
<unk> <unk> = new <unk> ( tweet ) ;
<unk> . addComponent ( <unk> ) ;
}
Button <unk> = new Button ( " , new ClickListener ( ) {
public void buttonClick ( ClickEvent event ) {
for ( Tweet tweet : result . more ( ) ) {
<unk> <unk> = new <unk> ( tweet ) ;
<unk> . addComponent ( <unk> ) ;
}
}
} ) ;
<unk> . addComponent ( <unk> ) ;
}
package org . vaadin . twitter ;
import com . vaadin . event . <unk> . <unk> ;
import com . vaadin . ui . Button ;
import com . vaadin . ui . Button . ClickEvent ;
import com . vaadin . ui . Button . ClickListener ;
import com . vaadin . ui . <unk> ;
import com . vaadin . ui . HorizontalLayout ;
import com . vaadin . ui . Label ;
import com . vaadin . ui . TextField ;
import com . vaadin . ui . VerticalLayout ;
public class <unk> extends <unk> {
private TextField search ;
private Button doSearch ;
private Label <unk> ;
private Button <unk> ;
private HorizontalLayout <unk> ;
private String result ;
public <unk> ( ) {
search = new TextField ( ) ;
search . setInputPrompt ( " ) ;
doSearch = new Button ( " ) ;
doSearch . addListener ( new Button . ClickListener ( ) {
public void buttonClick ( ClickEvent event ) {
( ( <unk> ) getApplication ( ) ) . doSearch ( "
+ search . getValue ( ) ) ;
}
} ) ;
doSearch . <unk> ( <unk> . ENTER ) ;
addComponent ( search ) ;
addComponent ( doSearch ) ;
<unk> = new HorizontalLayout ( ) ;
addComponent ( <unk> ) ;
<unk> = new Label ( ) ;
<unk> = new Button ( " , new ClickListener ( ) {
public void buttonClick ( ClickEvent event ) {
( ( <unk> ) getApplication ( ) ) . <unk> ( result ) ;
}
} ) ;
<unk> . addComponent ( <unk> ) ;
<unk> . addComponent ( <unk> ) ;
<unk> . setVisible ( false ) ;
}
public void <unk> ( String result ) {
this . result = result ;
<unk> . setVisible ( true ) ;
<unk> . setValue ( " + result . trim ( ) ) ;
search . setValue ( result . trim ( ) ) ;
}
}
package org . vaadin . twitter ;
import org . vaadin . twitter . <unk> . Tweet ;
import com . vaadin . ui . <unk> ;
import com . vaadin . ui . HorizontalLayout ;
import com . vaadin . ui . Label ;
import com . vaadin . ui . VerticalLayout ;
public class <unk> extends HorizontalLayout {
private <unk> image ;
private Label metadata ;
private Label name ;
private VerticalLayout <unk> ;
private HorizontalLayout <unk> ;
private Label <unk> ;
public <unk> ( Tweet tweet ) {
setMargin ( true , false , true , false ) ;
image = new <unk> ( ) ;
image . setHeight ( " ) ;
image . setWidth ( " ) ;
metadata = new Label ( ) ;
name = new Label ( ) ;
<unk> = new HorizontalLayout ( ) ;
<unk> . setSpacing ( true ) ;
addComponent ( image ) ;
<unk> = new VerticalLayout ( ) ;
<unk> . addComponent ( name ) ;
<unk> . addComponent ( metadata ) ;
<unk> . addComponent ( <unk> ) ;
<unk> . setSpacing ( true ) ;
<unk> = new Label ( ) ;
<unk> . addComponent ( <unk> ) ;
addComponent ( <unk> ) ;
name . setValue ( tweet . getFromUser ( ) ) ;
metadata . setValue ( tweet . getCreatedAt ( ) ) ;
<unk> . setValue ( tweet . getText ( ) ) ;
}
}
package org . vaadin . twitter ;
import java . util . HashMap ;
import java . util . Map ;
import com . vaadin . ui . Button ;
import com . vaadin . ui . Button . ClickEvent ;
import com . vaadin . ui . Label ;
import com . vaadin . ui . VerticalLayout ;
public class <unk> extends VerticalLayout {
Map < String , Button > <unk> = new HashMap < String , Button > ( ) ;
Label <unk> = new Label ( ) ;
public <unk> ( String caption ) {
<unk> . setValue ( caption ) ;
addComponent ( <unk> ) ;
}
public void addToList ( final String searchTerms ) {
if ( <unk> . containsKey ( searchTerms ) ) {
Button <unk> = <unk> . get ( searchTerms ) ;
removeComponent ( <unk> ) ;
addComponent ( <unk> , <num> ) ;
} else {
Button btn = new Button ( searchTerms ) ;
btn . addListener ( new Button . ClickListener ( ) {
public void buttonClick ( ClickEvent event ) {
( ( <unk> ) getApplication ( ) )
. doSearch ( searchTerms ) ;
}
} ) ;
<unk> . put ( searchTerms , btn ) ;
addComponent ( btn , <num> ) ;
}
}
}
import java . util . ArrayList ;
public class <unk> extends PluginListener {
Double <unk> ;
int <unk> ;
PropertiesFile props = new PropertiesFile ( " ) ;
public void load ( ) {
<unk> = props . getDouble ( " , <num> ) ;
<unk> = props . getInt ( " , <num> ) ;
}
ArrayList < String > a = new ArrayList < String > ( ) ;
ArrayList < <unk> > s = new ArrayList < <unk> > ( ) ;
public boolean onCommand ( Player player , String [ ] split ) {
if ( split [ <num> ] . equalsIgnoreCase ( " ) && player . canUseCommand ( " ) ) {
if ( a . contains ( player . getName ( ) ) ) {
a . remove ( player . getName ( ) ) ;
player . notify ( " ) ;
} else {
a . add ( player . getName ( ) ) ;
player . sendMessage ( " ) ;
}
return true ;
}
return false ;
}
public boolean <unk> ( Player player , <unk> item ) {
if ( item . getItem ( ) . getItemId ( ) == <num> ) {
if ( a . contains ( player . getName ( ) ) ) {
s . add ( item ) ;
item . setAge (  <unk> * <num> ) ;
player . sendMessage ( " ) ;
return false ;
}
}
return false ;
}
public boolean <unk> ( Player player , <unk> item ) {
if ( item . getItem ( ) . getItemId ( ) == <num> ) {
if ( player . canUseCommand ( " ) && ! a . contains ( player . getName ( ) ) ) {
if ( s . contains ( item ) ) {
etc . getServer ( ) . messageAll ( " + player . getName ( ) + " ) ;
etc . getLoader ( ) . callCustomHook ( " , new Object [ ] { " , player . getName ( ) , ( Double ) <unk> } ) ;
item . destroy ( ) ;
s . remove ( item ) ;
return true ;
} }
else {
return true ;
}
}
return false ;
}
}
import java . io . File ;
import java . util . logging . Logger ;
public class <unk> extends Plugin {
String name = " ;
String version = " ;
String author = " ;
static Logger log = Logger . getLogger ( " ) ;
public void initialize ( ) {
File f = new File ( " ) ; f . mkdir ( ) ;
<unk> listener = new <unk> ( ) ;
log . info ( this . name + " + this . version + " + this . author + " ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . COMMAND , listener , this , PluginListener . Priority . MEDIUM ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . <unk> , listener , this , PluginListener . Priority . MEDIUM ) ;
etc . getLoader ( ) . addListener ( PluginLoader . Hook . <unk> , listener , this , PluginListener . Priority . MEDIUM ) ;
etc . getInstance ( ) . addCommand ( " , " ) ;
listener . load ( ) ;
}
public void enable ( ) {
log . info ( this . name + " + this . version + " + this . author + " ) ;
}
public void disable ( ) {
log . info ( this . name + " + this . version + " ) ;
etc . getInstance ( ) . removeCommand ( " ) ;
}
}
package <unk> . tutorial ;
import android . app . ListActivity ;
import android . content . Context ;
import android . content . Intent ;
import android . content . SharedPreferences ;
import android . database . Cursor ;
import android . os . Bundle ;
import android . preference . PreferenceManager ;
import android . view . LayoutInflater ;
import android . view . Menu ;
import android . view . MenuInflater ;
import android . view . MenuItem ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . CursorAdapter ;
import android . widget . ImageView ;
import android . widget . ListView ;
import android . widget . TextView ;
public class <unk> extends ListActivity {
public final static String ID_EXTRA = " ;
private <unk> helper ;
private Cursor model = null ;
private <unk> adapter = null ;
private SharedPreferences prefs ;
public class <unk> extends CursorAdapter {
@SuppressWarnings("deprecation")
<unk> ( Cursor c ) {
super ( <unk> . this , c ) ;
}
@Override
public void bindView ( View row , Context context , Cursor cursor ) {
<unk> holder = ( <unk> ) row . getTag ( ) ;
holder . populateFrom ( cursor , helper ) ;
}
@Override
public View newView ( Context context , Cursor cursor , ViewGroup parent ) {
LayoutInflater inflater = getLayoutInflater ( ) ;
View row = inflater . inflate ( R . layout . row , parent , false ) ;
<unk> holder = new <unk> ( row ) ;
row . setTag ( holder ) ;
return row ;
}
}
static class <unk> {
private TextView name = null ;
private TextView address = null ;
private ImageView icon = null ;
<unk> ( View row ) {
name = ( TextView ) row . findViewById ( R . id . title ) ;
address = ( TextView ) row . findViewById ( R . id . <unk> ) ;
icon = ( ImageView ) row . findViewById ( R . id . icon ) ;
}
void populateFrom ( Cursor cursor , <unk> helper ) {
name . setText ( helper . getName ( cursor ) ) ;
address . setText ( helper . getAddress ( cursor ) ) ;
switch ( helper . getType ( cursor ) ) {
case <unk> :
icon . setImageResource ( R . drawable . <unk> ) ;
break ;
case <unk> :
icon . setImageResource ( R . drawable . <unk> ) ;
break ;
case <unk> :
icon . setImageResource ( R . drawable . <unk> ) ;
break ;
default :
break ;
}
}
}
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
helper = new <unk> ( this ) ;
prefs = PreferenceManager . getDefaultSharedPreferences ( this ) ;
initList ( ) ;
prefs . registerOnSharedPreferenceChangeListener ( <unk> ) ;
}
private SharedPreferences . OnSharedPreferenceChangeListener <unk> =
new SharedPreferences . OnSharedPreferenceChangeListener ( ) {
public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) {
if ( key . equals ( " ) ) {
initList ( ) ;
}
}
} ;
@SuppressWarnings("deprecation")
private void initList ( ) {
if ( model != null ) {
stopManagingCursor ( model ) ;
model . close ( ) ;
}
model = helper . getAll ( prefs . getString ( " , " ) ) ;
startManagingCursor ( model ) ;
adapter = new <unk> ( model ) ;
setListAdapter ( adapter ) ;
}
@Override
public void onDestroy ( ) {
super . onDestroy ( ) ;
helper . close ( ) ;
}
@Override
public void onListItemClick ( ListView list , View view , int position , long id ) {
Intent intent = new Intent ( <unk> . this , DetailForm . class ) ;
intent . putExtra ( ID_EXTRA , String . valueOf ( id ) ) ;
startActivity ( intent ) ;
}
@Override
public boolean onCreateOptionsMenu ( Menu menu ) {
new MenuInflater ( this ) . inflate ( R . menu . option , menu ) ;
return super . onCreateOptionsMenu ( menu ) ;
}
@Override
public boolean onOptionsItemSelected ( MenuItem item ) {
switch ( item . getItemId ( ) ) {
case R . id . add :
startActivity ( new Intent ( <unk> . this , DetailForm . class ) ) ;
return true ;
case R . id . prefs :
startActivity ( new Intent ( this , <unk> . class ) ) ;
return true ;
}
return super . onOptionsItemSelected ( item ) ;
}
package <unk> . tutorial ;
import java . util . Calendar ;
import android . app . AlarmManager ;
import android . app . PendingIntent ;
import android . content . BroadcastReceiver ;
import android . content . Context ;
import android . content . Intent ;
import android . content . SharedPreferences ;
import android . preference . PreferenceManager ;
public class <unk> extends BroadcastReceiver {
@Override
public void onReceive ( Context ctxt , Intent intent ) {
setAlarm ( ctxt ) ;
}
public static void setAlarm ( Context ctxt ) {
AlarmManager mgr = ( AlarmManager ) ctxt . getSystemService ( Context . ALARM_SERVICE ) ;
Calendar cal = Calendar . getInstance ( ) ;
SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( ctxt ) ;
String time = prefs . getString ( " , " ) ;
cal . set ( Calendar . HOUR_OF_DAY , TimePreference . getHour ( time ) ) ;
cal . set ( Calendar . MINUTE , TimePreference . getMinute ( time ) ) ;
cal . set ( Calendar . SECOND , <num> ) ;
cal . set ( Calendar . MILLISECOND , <num> ) ;
if ( cal . getTimeInMillis ( ) < System . currentTimeMillis ( ) ) {
cal . add ( Calendar . DAY_OF_YEAR , <num> ) ;
}
mgr . setRepeating ( AlarmManager . RTC_WAKEUP , cal . getTimeInMillis ( ) , AlarmManager . <unk> , <unk> ( ctxt ) ) ;
}
public static void cancelAlarm ( Context ctxt ) {
AlarmManager mgr = ( AlarmManager ) ctxt . getSystemService ( Context . ALARM_SERVICE ) ;
mgr . cancel ( <unk> ( ctxt ) ) ;
}
public static PendingIntent <unk> ( Context ctxt ) {
Intent i = new Intent ( ctxt , <unk> . class ) ;
return PendingIntent . getBroadcast ( ctxt , <num> , i , <num> ) ;
}
}
package <unk> . tutorial ;
import android . app . PendingIntent ;
import android . appwidget . AppWidgetManager ;
import android . appwidget . AppWidgetProvider ;
import android . content . Context ;
import android . content . Intent ;
import android . net . Uri ;
import android . os . Build ;
import android . widget . RemoteViews ;
public class <unk> extends AppWidgetProvider {
@Override
public void onUpdate ( Context ctxt , AppWidgetManager mgr , int [ ] <unk> ) {
if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . HONEYCOMB ) {
<unk> ( ctxt , mgr , <unk> ) ;
}
else {
ctxt . startService ( new Intent ( ctxt , <unk> . class ) ) ;
}
}
@SuppressWarnings("deprecation")
public void <unk> ( Context ctxt , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) {
for ( int i = <num> ; i < appWidgetIds . length ; i ++ ) {
Intent <unk> = new Intent ( ctxt , <unk> . class ) ;
<unk> . putExtra ( AppWidgetManager . EXTRA_APPWIDGET_ID , appWidgetIds [ i ] ) ;
<unk> . setData ( Uri . parse ( <unk> . toUri ( Intent . URI_INTENT_SCHEME ) ) ) ;
RemoteViews widget = new RemoteViews ( ctxt . getPackageName ( ) , R . layout . widget ) ;
widget . <unk> ( appWidgetIds [ i ] , R . id . <unk> , <unk> ) ;
Intent <unk> = new Intent ( ctxt , DetailForm . class ) ;
PendingIntent <unk> = PendingIntent . getActivity ( ctxt , <num> , <unk> , PendingIntent . FLAG_UPDATE_CURRENT ) ;
widget . <unk> ( R . id . <unk> , <unk> ) ;
appWidgetManager . updateAppWidget ( appWidgetIds [ i ] , widget ) ;
}
super . onUpdate ( ctxt , appWidgetManager , appWidgetIds ) ;
}
}
package <unk> . tutorial ;
import android . content . Context ;
import android . content . res . TypedArray ;
import android . preference . DialogPreference ;
import android . util . AttributeSet ;
import android . view . View ;
import android . widget . TimePicker ;
public class TimePreference extends DialogPreference {
private int lastHour = <num> ;
private int lastMinute = <num> ;
private TimePicker picker = null ;
public static int getHour ( String time ) {
String [ ] pieces = time . split ( " ) ;
return Integer . parseInt ( pieces [ <num> ] ) ;
}
public static int getMinute ( String time ) {
String [ ] pieces = time . split ( " ) ;
return Integer . parseInt ( pieces [ <num> ] ) ;
}
public TimePreference ( Context ctxt , AttributeSet attrs ) {
super ( ctxt , attrs ) ;
setPositiveButtonText ( " ) ;
setNegativeButtonText ( " ) ;
}
@Override
protected View onCreateDialogView ( ) {
picker = new TimePicker ( getContext ( ) ) ;
return picker ;
}
@Override
protected void onBindDialogView ( View v ) {
super . onBindDialogView ( v ) ;
picker . setCurrentHour ( lastHour ) ;
picker . setCurrentMinute ( lastMinute ) ;
}
@Override
protected void onDialogClosed ( boolean positiveResult ) {
super . onDialogClosed ( positiveResult ) ;
if ( positiveResult ) {
lastHour = picker . getCurrentHour ( ) ;
lastMinute = picker . getCurrentMinute ( ) ;
String time = String . valueOf ( lastHour ) + " + String . valueOf ( lastMinute ) ;
if ( callChangeListener ( time ) ) {
persistString ( time ) ;
}
}
}
@Override
protected Object onGetDefaultValue ( TypedArray a , int index ) {
return a . getString ( index ) ;
}
@Override
protected void onSetInitialValue ( boolean restoreValue , Object defaultValue ) {
String time = null ;
if ( restoreValue ) {
if ( defaultValue == null ) {
time = getPersistedString ( " ) ;
}
else {
time = getPersistedString ( defaultValue . toString ( ) ) ;
}
}
else {
time = defaultValue . toString ( ) ;
}
lastHour = getHour ( time ) ;
lastMinute = getMinute ( time ) ;
}
}
package <unk> . tutorial ;
import android . content . Context ;
import android . content . Intent ;
import android . database . Cursor ;
import android . os . Bundle ;
import android . widget . RemoteViews ;
import android . widget . <unk> . <unk> ;
public class <unk> implements <unk> {
private Context ctxt = null ;
private <unk> helper = null ;
private Cursor <unk> = null ;
public <unk> ( Context ctxt , Intent intent ) {
this . ctxt = ctxt ;
}
public void onCreate ( ) {
helper = new <unk> ( ctxt ) ;
<unk> = helper . getReadableDatabase ( ) . rawQuery ( " , null ) ;
}
public void onDestroy ( ) {
<unk> . close ( ) ;
helper . close ( ) ;
}
public int getCount ( ) {
return <unk> . getCount ( ) ;
}
public long getItemId ( int position ) {
<unk> . moveToPosition ( position ) ;
return <unk> . getInt ( <num> ) ;
}
public RemoteViews <unk> ( ) {
return null ;
}
public RemoteViews <unk> ( int position ) {
RemoteViews row = new RemoteViews ( ctxt . getPackageName ( ) , R . layout . <unk> ) ;
<unk> . moveToPosition ( position ) ;
row . setTextViewText ( android . R . id . text1 , <unk> . getString ( <num> ) ) ;
Intent i = new Intent ( ) ;
Bundle extras = new Bundle ( ) ;
extras . putString ( <unk> . ID_EXTRA , String . valueOf ( <unk> . getInt ( <num> ) ) ) ;
i . putExtras ( extras ) ;
row . <unk> ( android . R . id . text1 , i ) ;
return row ;
}
public int getViewTypeCount ( ) {
return <num> ;
}
public boolean hasStableIds ( ) {
return true ;
}
public void <unk> ( ) {
}
}
package <unk> . tutorial ;
import android . content . ComponentName ;
import android . content . SharedPreferences ;
import android . content . pm . PackageManager ;
import android . os . Bundle ;
import android . preference . PreferenceActivity ;
import android . preference . PreferenceManager ;
public class <unk> extends PreferenceActivity {
SharedPreferences prefs = null ;
@SuppressWarnings("deprecation")
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
addPreferencesFromResource ( R . xml . preferences ) ;
}
@Override
public void onResume ( ) {
super . onResume ( ) ;
prefs = PreferenceManager . getDefaultSharedPreferences ( this ) ;
prefs . registerOnSharedPreferenceChangeListener ( onChange ) ;
}
@Override
public void onPause ( ) {
prefs . unregisterOnSharedPreferenceChangeListener ( onChange ) ;
super . onPause ( ) ;
}
SharedPreferences . OnSharedPreferenceChangeListener onChange = new SharedPreferences . OnSharedPreferenceChangeListener ( ) {
public void onSharedPreferenceChanged ( SharedPreferences prefs , String key ) {
if ( " . equals ( key ) ) {
boolean enabled = prefs . getBoolean ( key , false ) ;
int flag = ( enabled
? PackageManager . COMPONENT_ENABLED_STATE_ENABLED
: PackageManager . COMPONENT_ENABLED_STATE_DISABLED ) ;
ComponentName component = new ComponentName ( <unk> . this , <unk> . class ) ;
getPackageManager ( ) . setComponentEnabledSetting ( component , flag , PackageManager . DONT_KILL_APP ) ;
if ( enabled ) {
<unk> . setAlarm ( <unk> . this ) ;
}
else {
<unk> . cancelAlarm ( <unk> . this ) ;
}
}
else if ( " . equals ( key ) ) {
<unk> . cancelAlarm ( <unk> . this ) ;
<unk> . setAlarm ( <unk> . this ) ;
}
}
} ;
}
package <unk> . tutorial ;
import org . <unk> . <unk> . RSSFeed ;
import org . <unk> . <unk> . RSSItem ;
import android . app . AlertDialog ;
import android . app . ListActivity ;
import android . content . Intent ;
import android . os . Bundle ;
import android . os . Handler ;
import android . os . Message ;
import android . os . Messenger ;
import android . view . LayoutInflater ;
import android . view . View ;
import android . view . ViewGroup ;
import android . widget . BaseAdapter ;
import android . widget . TextView ;
public class <unk> extends ListActivity {
public static final String <unk> = " ;
private <unk> state = null ;
private static class <unk> {
RSSFeed feed = null ;
<unk> handler = null ;
}
private static class <unk> extends Handler {
private <unk> activity = null ;
<unk> ( <unk> activity ) {
attach ( activity ) ;
}
void attach ( <unk> activity ) {
this . activity = activity ;
}
void detach ( ) {
attach ( null ) ;
}
@Override
public void handleMessage ( Message msg ) {
if ( msg . arg1 == RESULT_OK ) {
activity . <unk> ( ( RSSFeed ) msg . obj ) ;
}
else {
activity . <unk> ( ( Exception ) msg . obj ) ;
}
}
}
private class <unk> extends BaseAdapter {
RSSFeed feed = null ;
<unk> ( RSSFeed feed ) {
super ( ) ;
this . feed = feed ;
}
public int getCount ( ) {
return feed . getItems ( ) . size ( ) ;
}
public Object getItem ( int position ) {
return feed . getItems ( ) . get ( position ) ;
}
public long getItemId ( int position ) {
return position ;
}
public View getView ( int position , View convertView , ViewGroup parent ) {
View row = convertView ;
if ( row == null ) {
LayoutInflater inflater = getLayoutInflater ( ) ;
row = inflater . inflate ( android . R . layout . simple_list_item_1 , parent , false ) ;
}
RSSItem item = ( RSSItem ) getItem ( position ) ;
( ( TextView ) row ) . setText ( item . getTitle ( ) ) ;
return row ;
}
}
@SuppressWarnings("deprecation")
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
state = ( <unk> ) getLastNonConfigurationInstance ( ) ;
if ( state == null ) {
state = new <unk> ( ) ;
state . handler = new <unk> ( this ) ;
Intent i = new Intent ( this , <unk> . class ) ;
i . putExtra ( <unk> . <unk> , getIntent ( ) . getStringExtra ( <unk> ) ) ;
i . putExtra ( <unk> . <unk> , new Messenger ( state . handler ) ) ;
startService ( i ) ;
}
else {
if ( state . handler != null ) {
state . handler . attach ( this ) ;
}
if ( state . feed != null ) {
<unk> ( state . feed ) ;
}
}
}
@Override
public Object onRetainNonConfigurationInstance ( ) {
if ( state . handler != null ) {
state . handler . detach ( ) ;
}
return state ;
}
public void <unk> ( Throwable t ) {
AlertDialog . Builder builder = new AlertDialog . Builder ( this ) ;
builder . setTitle ( " ) . setMessage ( t . toString ( ) ) . setPositiveButton ( " , null ) . show ( ) ;
}
public void <unk> ( RSSFeed feed ) {
state . feed = feed ;
setListAdapter ( new <unk> ( feed ) ) ;
}
}
package <unk> . tutorial ;
public class <unk> {
public enum Type {
NULL ,
<unk> ,
<unk> ,
<unk> ;
}
private String name = " ;
private String address = " ;
private Type type = Type . NULL ;
private String notes = " ;
public String getName ( ) {
return name ;
}
public void setName ( String name ) {
this . name = name ;
}
public String getAddress ( ) {
return address ;
}
public void setAddress ( String address ) {
this . address = address ;
}
public Type getType ( ) {
return type ;
}
public void setType ( Type type ) {
this . type = type ;
}
public String getNotes ( ) {
return notes ;
}
public void setNotes ( String notes ) {
this . notes = notes ;
}
public String toString ( ) {
return getName ( ) ;
}
}
package <unk> . tutorial ;
import android . content . ContentValues ;
import android . content . Context ;
import android . database . Cursor ;
import android . database . sqlite . SQLiteDatabase ;
import android . database . sqlite . SQLiteOpenHelper ;
public class <unk> extends SQLiteOpenHelper {
private static final String DATABASE_NAME = " ;
private static final int SCHEMA_VERSION = <num> ;
private static final String ALL_COLUMNS = " ;
private static final String <unk> = " + ALL_COLUMNS + " ;
private static final String <unk> = " + ALL_COLUMNS + " ;
private static final String CREATE_TABLE = " ;
private static final String <unk> = " ;
private static final String <unk> = " ;
private static final String <unk> = " ;
private enum <unk> {
ID ( <num> ) ,
NAME ( <num> ) ,
ADDRESS ( <num> ) ,
TYPE ( <num> ) ,
NOTES ( <num> ) ,
<unk> ( <num> ) ,
LATITUDE ( <num> ) ,
LONGITUDE ( <num> ) ;
private int index ;
private <unk> ( int index ) {
this . index = index ;
}
public int getIndex ( ) {
return index ;
}
}
public <unk> ( Context context ) {
super ( context , DATABASE_NAME , null , SCHEMA_VERSION ) ;
}
@Override
public void onCreate ( SQLiteDatabase db ) {
db . execSQL ( CREATE_TABLE ) ;
}
@Override
public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion ) {
if ( oldVersion < <num> ) {
db . execSQL ( <unk> ) ;
}
if ( oldVersion < <num> ) {
db . execSQL ( <unk> ) ;
db . execSQL ( <unk> ) ;
}
}
public void insert ( String name , String address , String type , String notes , String feed ) {
ContentValues cv = new ContentValues ( ) ;
cv . put ( " , name ) ;
cv . put ( " , address ) ;
cv . put ( " , type ) ;
cv . put ( " , notes ) ;
cv . put ( " , feed ) ;
getWritableDatabase ( ) . insert ( " , " , cv ) ;
}
public void update ( String id , String name , String address , String type , String notes , String feed ) {
ContentValues cv = new ContentValues ( ) ;
String [ ] args = { id } ;
cv . put ( " , name ) ;
cv . put ( " , address ) ;
cv . put ( " , type ) ;
cv . put ( " , notes ) ;
cv . put ( " , feed ) ;
getWritableDatabase ( ) . update ( " , cv , " , args ) ;
}
public void updateLocation ( String id , double lat , double lon ) {
ContentValues cv = new ContentValues ( ) ;
String [ ] args = { id } ;
cv . put ( " , lat ) ;
cv . put ( " , lon ) ;
getWritableDatabase ( ) . update ( " , cv , " , args ) ;
}
public Cursor getAll ( String orderBy ) {
return getReadableDatabase ( ) . rawQuery ( <unk> + orderBy , null ) ;
}
public Cursor getById ( String id ) {
String [ ] args = { id } ;
return getReadableDatabase ( ) . rawQuery ( <unk> , args ) ;
}
public String getName ( Cursor c ) {
return c . getString ( <unk> . NAME . getIndex ( ) ) ;
}
public String getAddress ( Cursor c ) {
return c . getString ( <unk> . ADDRESS . getIndex ( ) ) ;
}
public <unk> . Type getType ( Cursor c ) {
return <unk> . Type . valueOf ( c . getString ( <unk> . TYPE . getIndex ( ) ) ) ;
}
public String getNotes ( Cursor c ) {
return c . getString ( <unk> . NOTES . getIndex ( ) ) ;
}
public String getFeed ( Cursor c ) {
return c . getString ( <unk> . <unk> . getIndex ( ) ) ;
}
public double getLatitude ( Cursor c ) {
return c . getDouble ( <unk> . LATITUDE . getIndex ( ) ) ;
}
public double getLongitude ( Cursor c ) {
return c . getDouble ( <unk> . LONGITUDE . getIndex ( ) ) ;
}
}
package <unk> . tutorial ;
import android . content . Intent ;
import android . widget . <unk> ;
public class <unk> extends <unk> {
@Override
public <unk> <unk> ( Intent intent ) {
return new <unk> ( this . getApplicationContext ( ) , intent ) ;
}
}
package <unk> . tutorial ;
import org . <unk> . <unk> . RSSFeed ;
import org . <unk> . <unk> . RSSReader ;
import android . app . Activity ;
import android . app . IntentService ;
import android . content . Intent ;
import android . os . Message ;
import android . os . Messenger ;
import android . util . Log ;
public class <unk> extends IntentService {
public static final String <unk> = " ;
public static final String <unk> = " ;
public <unk> ( ) {
super ( <unk> . class . getName ( ) ) ;
}
@Override
protected void onHandleIntent ( Intent i ) {
RSSReader reader = null ;
try {
reader = new RSSReader ( ) ;
Messenger messenger = ( Messenger ) i . getExtras ( ) . get ( <unk> ) ;
Message msg = Message . obtain ( ) ;
try {
RSSFeed result = reader . load ( i . getStringExtra ( <unk> ) ) ;
msg . arg1 = Activity . RESULT_OK ;
msg . obj = result ;
}
catch ( Exception e ) {
Log . e ( " , " , e ) ;
msg . arg1 = Activity . RESULT_CANCELED ;
msg . obj = e ;
}
try {
messenger . send ( msg ) ;
}
catch ( Exception e ) {
Log . w ( " , " , e ) ;
}
}
finally {
reader . close ( ) ;
}
}
}
package <unk> . tutorial ;
import android . app . Activity ;
import android . content . Intent ;
import android . database . Cursor ;
import android . location . Location ;
import android . location . LocationListener ;
import android . location . LocationManager ;
import android . net . ConnectivityManager ;
import android . os . Bundle ;
import android . view . Menu ;
import android . view . MenuInflater ;
import android . view . MenuItem ;
import android . widget . EditText ;
import android . widget . RadioGroup ;
import android . widget . TextView ;
import android . widget . Toast ;
public class DetailForm extends Activity {
private EditText name = null ;
private EditText address = null ;
private EditText notes = null ;
private EditText feed = null ;
private RadioGroup types = null ;
private TextView location = null ;
private <unk> helper ;
private String <unk> = null ;
private LocationManager <unk> = null ;
private double latitude = <num> ;
private double longitude = <num> ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . detail_form ) ;
helper = new <unk> ( this ) ;
<unk> = ( LocationManager ) getSystemService ( LOCATION_SERVICE ) ;
name = ( EditText ) findViewById ( R . id . name ) ;
address = ( EditText ) findViewById ( R . id . address ) ;
notes = ( EditText ) findViewById ( R . id . notes ) ;
feed = ( EditText ) findViewById ( R . id . feed ) ;
types = ( RadioGroup ) findViewById ( R . id . types ) ;
location = ( TextView ) findViewById ( R . id . location ) ;
<unk> = getIntent ( ) . getStringExtra ( <unk> . ID_EXTRA ) ;
if ( <unk> != null ) {
load ( ) ;
}
}
@Override
public void onDestroy ( ) {
super . onDestroy ( ) ;
helper . close ( ) ;
}
@Override
public void onPause ( ) {
save ( ) ;
<unk> . removeUpdates ( <unk> ) ;
super . onPause ( ) ;
}
private void save ( ) {
<unk> . Type type = <unk> . Type . NULL ;
switch ( types . getCheckedRadioButtonId ( ) ) {
case R . id . <unk> :
type = <unk> . Type . <unk> ;
break ;
case R . id . <unk> :
type = <unk> . Type . <unk> ;
break ;
case R . id . delivery :
type = <unk> . Type . <unk> ;
break ;
}
if ( <unk> == null ) {
helper . insert (
name . getText ( ) . toString ( ) ,
address . getText ( ) . toString ( ) ,
type . toString ( ) ,
notes . getText ( ) . toString ( ) ,
feed . getText ( ) . toString ( ) ) ;
}
else {
helper . update (
<unk> ,
name . getText ( ) . toString ( ) ,
address . getText ( ) . toString ( ) ,
type . toString ( ) ,
notes . getText ( ) . toString ( ) ,
feed . getText ( ) . toString ( ) ) ;
}
}
private void load ( ) {
Cursor cursor = helper . getById ( <unk> ) ;
cursor . moveToFirst ( ) ;
name . setText ( helper . getName ( cursor ) ) ;
address . setText ( helper . getAddress ( cursor ) ) ;
notes . setText ( helper . getNotes ( cursor ) ) ;
feed . setText ( helper . getFeed ( cursor ) ) ;
location . setText ( String . valueOf ( helper . getLatitude ( cursor ) ) + " + String . valueOf ( helper . getLongitude ( cursor ) ) ) ;
switch ( helper . getType ( cursor ) )
{
case <unk> :
types . check ( R . id . <unk> ) ;
break ;
case <unk> :
types . check ( R . id . <unk> ) ;
break ;
case <unk> :
types . check ( R . id . delivery ) ;
break ;
default :
break ;
}
latitude = helper . getLatitude ( cursor ) ;
longitude = helper . getLongitude ( cursor ) ;
location . setText ( String . valueOf ( latitude ) + " + String . valueOf ( longitude ) ) ;
cursor . close ( ) ;
}
@Override
public void onSaveInstanceState ( Bundle state ) {
super . onSaveInstanceState ( state ) ;
state . putString ( " , name . getText ( ) . toString ( ) ) ;
state . putString ( " , address . getText ( ) . toString ( ) ) ;
state . putString ( " , notes . getText ( ) . toString ( ) ) ;
state . putInt ( " , types . getCheckedRadioButtonId ( ) ) ;
}
@Override
public void onRestoreInstanceState ( Bundle state ) {
super . onRestoreInstanceState ( state ) ;
name . setText ( state . getString ( " ) ) ;
address . setText ( state . getString ( " ) ) ;
notes . setText ( state . getString ( " ) ) ;
types . check ( state . getInt ( " ) ) ;
}
@Override
public boolean onCreateOptionsMenu ( Menu menu ) {
new MenuInflater ( this ) . inflate ( R . menu . <unk> , menu ) ;
return super . onCreateOptionsMenu ( menu ) ;
}
@Override
public boolean onPrepareOptionsMenu ( Menu menu ) {
if ( <unk> == null ) {
menu . findItem ( R . id . location ) . setEnabled ( false ) ;
menu . findItem ( R . id . map ) . setEnabled ( false ) ;
}
return super . onPrepareOptionsMenu ( menu ) ;
}
@Override
public boolean onOptionsItemSelected ( MenuItem item ) {
switch ( item . getItemId ( ) ) {
case R . id . feed :
if ( <unk> ( ) ) {
Intent intent = new Intent ( this , <unk> . class ) ;
intent . putExtra ( <unk> . <unk> , feed . getText ( ) . toString ( ) ) ;
startActivity ( intent ) ;
}
else {
Toast . makeText ( this , " , Toast . LENGTH_LONG ) . show ( ) ;
}
return true ;
case R . id . location :
<unk> . requestLocationUpdates ( LocationManager . GPS_PROVIDER , <num> , <num> , <unk> ) ;
return true ;
case R . id . map :
Intent i = new Intent ( this , <unk> . class ) ;
i . putExtra ( <unk> . <unk> , latitude ) ;
i . putExtra ( <unk> . <unk> , longitude ) ;
i . putExtra ( <unk> . <unk> , name . getText ( ) . toString ( ) ) ;
startActivity ( i ) ;
return true ;
}
return super . onOptionsItemSelected ( item ) ;
}
private boolean <unk> ( ) {
return ( ( ConnectivityManager ) getSystemService ( CONNECTIVITY_SERVICE ) ) . getActiveNetworkInfo ( ) != null ;
}
LocationListener <unk> = new LocationListener ( ) {
public void onLocationChanged ( Location fix ) {
helper . updateLocation ( <unk> , fix . getLatitude ( ) , fix . getLongitude ( ) ) ;
location . setText ( String . valueOf ( fix . getLatitude ( ) ) + " + String . valueOf ( fix . getLongitude ( ) ) ) ;
<unk> . removeUpdates ( <unk> ) ;
Toast . makeText ( DetailForm . this , " , Toast . LENGTH_LONG ) . show ( ) ;
}
public void onProviderDisabled ( String provider ) {
}
public void onProviderEnabled ( String provider ) {
}
public void onStatusChanged ( String provider , int status , Bundle extras ) {
}
} ;
}
package <unk> . tutorial ;
import android . app . IntentService ;
import android . app . PendingIntent ;
import android . appwidget . AppWidgetManager ;
import android . content . ComponentName ;
import android . content . Intent ;
import android . database . Cursor ;
import android . widget . RemoteViews ;
public class <unk> extends IntentService {
public <unk> ( ) {
super ( " ) ;
}
@Override
protected void onHandleIntent ( Intent intent ) {
ComponentName me = new ComponentName ( this , <unk> . class ) ;
RemoteViews <unk> = new RemoteViews ( " , R . layout . widget ) ;
<unk> helper = new <unk> ( this ) ;
AppWidgetManager mgr = AppWidgetManager . getInstance ( this ) ;
try {
Cursor c = helper . getReadableDatabase ( ) . rawQuery ( " , null ) ;
c . moveToFirst ( ) ;
int count = c . getInt ( <num> ) ;
c . close ( ) ;
if ( count > <num> ) {
int offset = ( int ) ( count * Math . random ( ) ) ;
String args [ ] = { String . valueOf ( offset ) } ;
c = helper . getReadableDatabase ( ) . rawQuery ( " , args ) ;
c . moveToFirst ( ) ;
<unk> . setTextViewText ( R . id . name , c . getString ( <num> ) ) ;
Intent i = new Intent ( this , DetailForm . class ) ;
i . putExtra ( <unk> . ID_EXTRA , c . getString ( <num> ) ) ;
PendingIntent pi = PendingIntent . getActivity ( this , <num> , i , PendingIntent . FLAG_UPDATE_CURRENT ) ;
<unk> . setOnClickPendingIntent ( R . id . name , pi ) ;
c . close ( ) ;
}
else {
<unk> . setTextViewText ( R . id . title , this . getString ( R . string . empty ) ) ;
}
}
finally {
helper . close ( ) ;
}
Intent i = new Intent ( this , <unk> . class ) ;
PendingIntent pi = PendingIntent . getService ( this , <num> , i , <num> ) ;
<unk> . setOnClickPendingIntent ( R . id . next , pi ) ;
mgr . updateAppWidget ( me , <unk> ) ;
}
}
package <unk> . <unk> . helloandroid ;
import android . app . Activity ;
import android . os . Bundle ;
import android . view . View ;
import android . widget . Button ;
import java . util . Date ;
public class <unk> extends Activity implements View . OnClickListener {
Button btn ;
@Override
public void onCreate ( Bundle icicle ) {
super . onCreate ( icicle ) ;
btn = new Button ( this ) ;
btn . setOnClickListener ( this ) ;
updateTime ( ) ;
setContentView ( btn ) ;
}
public void onClick ( View view ) {
updateTime ( ) ;
}
private void updateTime ( ) {
btn . setText ( new Date ( ) . toString ( ) ) ;
}
package <unk> . tutorial ;
import android . app . Activity ;
import android . os . Bundle ;
public class AlarmActivity extends Activity {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . alarm ) ;
}
}
package <unk> . tutorial ;
import android . app . Notification ;
import android . app . NotificationManager ;
import android . app . PendingIntent ;
import android . content . BroadcastReceiver ;
import android . content . Context ;
import android . content . Intent ;
import android . content . SharedPreferences ;
import android . preference . PreferenceManager ;
public class <unk> extends BroadcastReceiver {
private static final int <unk> = <num> ;
@SuppressWarnings("deprecation")
@Override
public void onReceive ( Context ctxt , Intent intent ) {
SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( ctxt ) ;
boolean <unk> = prefs . getBoolean ( " , true ) ;
if ( <unk> ) {
NotificationManager mgr = ( NotificationManager ) ctxt . getSystemService ( Context . NOTIFICATION_SERVICE ) ;
Notification note = new Notification ( android . R . drawable . <unk> , " , System . currentTimeMillis ( ) ) ;
PendingIntent i = PendingIntent . getActivity ( ctxt , <num> , new Intent ( ctxt , AlarmActivity . class ) , <num> ) ;
note . setLatestEventInfo ( ctxt , " , " , i ) ;
note . flags |= Notification . FLAG_AUTO_CANCEL ;
mgr . notify ( <unk> , note ) ;
}
else {
Intent i = new Intent ( ctxt , AlarmActivity . class ) ;
i . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ;
ctxt . startActivity ( i ) ;
}
}
}
package <unk> . tutorial ;
import android . graphics . drawable . Drawable ;
import android . os . Bundle ;
import android . widget . Toast ;
import com . google . android . maps . GeoPoint ;
import com . google . android . maps . ItemizedOverlay ;
import com . google . android . maps . MapActivity ;
import com . google . android . maps . MapView ;
import com . google . android . maps . OverlayItem ;
public class <unk> extends MapActivity {
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
private MapView map = null ;
private class <unk> extends ItemizedOverlay < OverlayItem > {
private OverlayItem item = null ;
public <unk> ( Drawable defaultMarker , GeoPoint point , String name ) {
super ( defaultMarker ) ;
boundCenterBottom ( defaultMarker ) ;
item = new OverlayItem ( point , name , name ) ;
populate ( ) ;
}
@Override
protected OverlayItem createItem ( int i ) {
return item ;
}
@Override
public int size ( ) {
return <num> ;
}
@Override
protected boolean onTap ( int i ) {
Toast . makeText ( <unk> . this , item . getSnippet ( ) , Toast . LENGTH_SHORT ) . show ( ) ;
return true ;
}
}
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
double lat = getIntent ( ) . getDoubleExtra ( <unk> , <num> ) ;
double lon = getIntent ( ) . getDoubleExtra ( <unk> , <num> ) ;
setContentView ( R . layout . map ) ;
map = ( MapView ) findViewById ( R . id . map ) ;
map . getController ( ) . setZoom ( <num> ) ;
GeoPoint status = new GeoPoint ( ( int ) ( lat * <num> ) , ( int ) ( lon * <num> ) ) ;
map . getController ( ) . setCenter ( status ) ;
map . setBuiltInZoomControls ( true ) ;
Drawable marker = getResources ( ) . getDrawable ( R . drawable . marker ) ;
marker . setBounds ( <num> , <num> , marker . getIntrinsicWidth ( ) , marker . getIntrinsicHeight ( ) ) ;
map . getOverlays ( ) . add ( new <unk> ( marker , status , getIntent ( ) . getStringExtra ( <unk> ) ) ) ;
}
@Override
protected boolean isRouteDisplayed ( ) {
return false ;
}
}
package <unk> ;
public class Score {
}
package <unk> ;
public class <unk> {
}
package <unk> ;
public class HighScores {
}
package <unk> ;
public class Entity
{
}
package <unk> ;
import java . awt . Graphics ;
import java . awt . Graphics2D ;
public class <unk> implements Runnable
{
public void <unk> ( )
{
System . out . println ( " ) ;
}
@Override
public void run ( )
{
<unk> ( ) ;
}
}
package <unk> ;
public class <unk> extends Entity
{
}
package <unk> ;
public class <unk> extends Character {
}
package <unk> ;
import java . awt . * ;
import java . awt . event . * ;
import javax . swing . JFrame ;
public class <unk> extends Canvas {
int <unk> = <num> ;
int <unk> = <num> ;
public <unk> ( ) {
setSize ( new Dimension ( <num> , <num> ) ) ;
addKeyListener ( new KeyAdapter ( ) {
@Override
public void keyPressed ( KeyEvent evt ) {
<unk> ( evt ) ;
}
} ) ;
}
public void paint ( Graphics g ) {
g . fillOval ( <unk> , <unk> , <num> , <num> ) ;
}
public void <unk> ( KeyEvent evt ) {
switch ( evt . getKeyCode ( ) ) {
case KeyEvent . VK_DOWN :
<unk> += <num> ;
break ;
case KeyEvent . VK_UP :
<unk> -= <num> ;
break ;
case KeyEvent . VK_LEFT :
<unk> -= <num> ;
break ;
case KeyEvent . VK_RIGHT :
<unk> += <num> ;
break ;
}
repaint ( ) ;
}
public static void main ( String [ ] args ) {
JFrame frame = new JFrame ( " ) ;
frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
<unk> ex = new <unk> ( ) ;
frame . getContentPane ( ) . add ( ex ) ;
frame . pack ( ) ;
frame . setResizable ( false ) ;
frame . setVisible ( true ) ;
ex . requestFocus ( ) ;
<unk> <unk> = new <unk> ( ) ;
Thread t = new Thread ( <unk> ) ;
t . start ( ) ;
}
package <unk> ;
public class Background
{
}
package <unk> ;
public class Character extends Entity
{
public void <unk> ( )
{
}
}
package <unk> ;
public class Enemy extends Character {
}
package com . sensor . test ;
import android . app . Activity ;
import android . hardware . Sensor ;
import android . hardware . SensorEvent ;
import android . hardware . SensorEventListener ;
import android . hardware . SensorManager ;
import android . os . Bundle ;
import android . widget . TextView ;
public class <unk> extends Activity implements SensorEventListener {
SensorManager sensorManager = null ;
TextView <unk> ;
TextView <unk> ;
TextView <unk> ;
TextView rotX ;
TextView rotY ;
TextView rotZ ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
sensorManager = ( SensorManager ) getSystemService ( SENSOR_SERVICE ) ;
setContentView ( R . layout . main ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
rotX = ( TextView ) findViewById ( R . id . <unk> ) ;
rotY = ( TextView ) findViewById ( R . id . <unk> ) ;
rotZ = ( TextView ) findViewById ( R . id . <unk> ) ;
}
@Override
protected void onResume ( )
{
super . onResume ( ) ;
sensorManager . registerListener ( this , sensorManager . getDefaultSensor ( Sensor . TYPE_ACCELEROMETER ) , sensorManager . SENSOR_DELAY_GAME ) ;
sensorManager . registerListener ( this , sensorManager . getDefaultSensor ( Sensor . TYPE_ORIENTATION ) , sensorManager . SENSOR_DELAY_GAME ) ;
}
@Override
protected void onStop ( )
{
super . onStop ( ) ;
sensorManager . unregisterListener ( this , sensorManager . getDefaultSensor ( Sensor . TYPE_ACCELEROMETER ) ) ;
sensorManager . unregisterListener ( this , sensorManager . getDefaultSensor ( Sensor . TYPE_ORIENTATION ) ) ;
}
public void onSensorChanged ( SensorEvent event )
{
synchronized ( this ) {
switch ( event . sensor . getType ( ) )
{
case Sensor . TYPE_ACCELEROMETER :
<unk> . setText ( " + Float . toString ( event . values [ <num> ] ) ) ;
<unk> . setText ( " + Float . toString ( event . values [ <num> ] ) ) ;
<unk> . setText ( " + Float . toString ( event . values [ <num> ] ) ) ;
break ;
case Sensor . TYPE_ORIENTATION :
rotX . setText ( " + Float . toString ( event . values [ <num> ] ) ) ;
rotY . setText ( " + Float . toString ( event . values [ <num> ] ) ) ;
rotZ . setText ( " + Float . toString ( event . values [ <num> ] ) ) ;
break ;
}
}
}
@Override
public void onAccuracyChanged ( Sensor sensor , int accuracy )
{
}
import static org . junit . Assert . assertEquals ;
import static org . junit . Assert . assertTrue ;
import java . util . ArrayList ;
import org . junit . Test ;
public class <unk> {
@Test
public void <unk> ( ) {
assertTrue ( " , true ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> , <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
private ArrayList < Integer > list ( int . . . ints ) {
ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;
for ( int i : ints ) {
ret . add ( i ) ;
}
return ret ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> , <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> , <num> , <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> , <num> , <num> , <num> ) , <unk> . <unk> ( <num> ) ) ;
}
@Test
public void <unk> ( ) {
assertEquals ( list ( <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ,
<unk> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> , <num> ) , <unk>
. <unk> ( <num> ) ) ;
}
}
import java . util . ArrayList ;
public class <unk> {
public static ArrayList < Integer > <unk> ( int n ) {
ArrayList < Integer > ret = new ArrayList < Integer > ( ) ;
for ( int <unk> = <num> ; n > <num> ; <unk> ++ ) {
for ( ; n % <unk> == <num> ; n /= <unk> ) {
ret . add ( <unk> ) ;
}
}
return ret ;
}
public static ArrayList < Integer > <unk> ( int i ) {
ArrayList < Integer > <unk> = new ArrayList < Integer > ( ) ;
ArrayList < Integer > <unk> = new ArrayList < Integer > ( ) ;
for ( int j = <num> ; j < i ; j ++ ) {
<unk> = <unk> ( j ) ;
if ( <unk> . size ( ) == <num> || <unk> . size ( ) == <num> ) {
<unk> . add ( j ) ;
}
}
return <unk> ;
}
}
package com . github . <unk> . <unk> ;
import org . bukkit . plugin . java . JavaPlugin ;
public class <unk> extends JavaPlugin {
private <unk> executor ;
@Override
public void onEnable ( ) {
executor = new <unk> ( this ) ;
getCommand ( " ) . setExecutor ( executor ) ;
}
@Override
public void onDisable ( ) {
getCommand ( " ) . setExecutor ( null ) ;
}
}
package com . github . <unk> . <unk> ;
import org . bukkit . plugin . java . JavaPlugin ;
public class <unk> extends JavaPlugin {
private <unk> executor ;
@Override
public void onEnable ( ) {
executor = new <unk> ( this ) ;
getServer ( ) . getPluginManager ( ) . registerEvents ( new <unk> ( this ) , this ) ;
getCommand ( " ) . setExecutor ( executor ) ;
}
@Override
public void onDisable ( ) {
getCommand ( " ) . setExecutor ( null ) ;
}
}
package com . github . <unk> . <unk> ;
import java . util . HashMap ;
import java . util . Map ;
import org . bukkit . Effect ;
import org . bukkit . EntityEffect ;
import org . bukkit . Material ;
import org . bukkit . enchantments . Enchantment ;
import org . bukkit . entity . Entity ;
import org . bukkit . entity . <unk> ;
import org . bukkit . entity . Player ;
import org . bukkit . event . EventHandler ;
import org . bukkit . event . Listener ;
import org . bukkit . event . block . Action ;
import org . bukkit . event . block . BlockDamageEvent ;
import org . bukkit . event . entity . <unk> ;
import org . bukkit . event . entity . <unk> ;
import org . bukkit . event . player . PlayerInteractEvent ;
import org . bukkit . event . player . <unk> ;
import org . bukkit . inventory . ItemStack ;
import org . bukkit . util . Vector ;
public class <unk> implements Listener {
private <unk> plugin ;
public <unk> ( <unk> plugin ) {
this . plugin = plugin ;
}
@EventHandler
public void <unk> ( <unk> event ) {
Entity entity = event . getEntity ( ) ;
if ( ! ( entity instanceof Player ) ) {
return ;
}
Player player = ( Player ) entity ;
player . sendMessage ( " ) ;
}
@EventHandler
public void <unk> ( <unk> event ) {
Entity entity = event . getEntity ( ) ;
if ( ! ( entity instanceof Player ) ) {
return ;
}
Player player = ( Player ) entity ;
player . sendMessage ( " ) ;
}
@EventHandler
public void onTeleport ( <unk> event ) {
event . getPlayer ( ) . sendMessage ( " ) ;
}
@EventHandler
public void <unk> ( PlayerInteractEvent event ) {
Player player = event . getPlayer ( ) ;
if ( ! player . isOp ( ) ) {
return ;
}
if ( event . getAction ( ) == Action . RIGHT_CLICK_BLOCK && player . getItemInHand ( ) . equals ( Material . DIAMOND_SWORD ) ) {
<unk> <unk> = player . getWorld ( ) . spawn ( player . getLocation ( ) . add ( <num> , <num> , <num> ) , <unk> . class ) ;
<unk> . <unk> ( player ) ;
<unk> . <unk> ( <num> ) ;
<unk> . setFireTicks ( <num> ) ;
<unk> . setDirection ( player . getLocation ( ) . getDirection ( ) . multiply ( Integer . MAX_VALUE ) . subtract ( new Vector ( <num> , <num> , <num> ) ) ) ;
}
}
@EventHandler
public void <unk> ( BlockDamageEvent event ) {
Player player = event . getPlayer ( ) ;
if ( ! player . isOp ( ) ) {
return ;
}
ItemStack stack = player . getItemInHand ( ) ;
if ( ! stack . getType ( ) . equals ( Material . DIAMOND_SWORD ) ) {
return ;
}
if ( ! event . getBlock ( ) . getType ( ) . equals ( Material . <unk> ) ) {
return ;
}
Map < Enchantment , Integer > enchantments = new HashMap < Enchantment , Integer > ( ) ;
enchantments . put ( Enchantment . DAMAGE_ALL , <num> ) ;
enchantments . put ( Enchantment . DAMAGE_UNDEAD , <num> ) ;
enchantments . put ( Enchantment . FIRE_ASPECT , <num> ) ;
enchantments . put ( Enchantment . KNOCKBACK , <num> ) ;
stack . <unk> ( enchantments ) ;
player . sendMessage ( " ) ;
}
}
package com . github . <unk> . <unk> ;
import java . util . Arrays ;
import java . util . logging . Logger ;
import org . bukkit . Location ;
import org . bukkit . World ;
import org . bukkit . command . Command ;
import org . bukkit . command . CommandExecutor ;
import org . bukkit . command . CommandSender ;
import org . bukkit . entity . Player ;
public class <unk> implements CommandExecutor {
private static Logger logger = Logger . getLogger ( <unk> . class . getCanonicalName ( ) ) ;
private <unk> plugin ;
public <unk> ( <unk> plugin ) {
this . plugin = plugin ;
}
@Override
public boolean onCommand ( CommandSender sender , Command command , String label , String [ ] args ) {
Player source = null ;
Player target = null ;
Location <unk> = null ;
if ( args . length == <num> ) {
return false ;
}
source = getPlayer ( args [ <num> ] ) ;
if ( source != null ) {
if ( args . length == <num> ) {
target = source ;
source = null ;
}
args = Arrays . copyOfRange ( args , <num> , args . length ) ;
}
if ( source == null ) {
if ( ! ( sender instanceof Player ) ) {
sender . sendMessage ( " ) ;
return false ;
}
source = ( Player ) sender ;
}
assert ( source != null ) ;
if ( args . length == <num> ) {
target = getPlayer ( args [ <num> ] ) ;
if ( target == null ) {
source . sendMessage ( String . format ( " , args [ <num> ] ) ) ;
return false ;
}
}
if ( target != null ) {
return warp ( source , target ) ;
}
<unk> = getLocation ( source , args ) ;
if ( <unk> == null ) {
source . sendMessage ( String . format ( " , Arrays . toString ( args ) ) ) ;
return false ;
}
return warp ( source , <unk> ) ;
}
private Location getLocation ( Player source , String . . . args ) {
int x ;
int y ;
int z ;
World world ;
if ( args . length < <num> ) {
return null ;
}
x = Integer . parseInt ( args [ <num> ] ) ;
y = Integer . parseInt ( args [ <num> ] ) ;
z = Integer . parseInt ( args [ <num> ] ) ;
if ( args . length >= <num> ) {
world = getWorld ( args [ <num> ] ) ;
} else {
world = source . getWorld ( ) ;
}
return new Location ( world , x , y , z ) ;
}
private Player getPlayer ( String name ) {
return plugin . getServer ( ) . getPlayer ( name ) ;
}
private World getWorld ( String <unk> ) {
return plugin . getServer ( ) . getWorld ( <unk> ) ;
}
private boolean warp ( Player source , Location location ) {
String message = String . format ( " , source . getName ( ) , location . toString ( ) ) ;
source . sendMessage ( message ) ;
logger . info ( message ) ;
source . teleport ( location ) ;
return true ;
}
private boolean warp ( Player source , Player target ) {
String message = String . format ( " , source . getName ( ) , target . getName ( ) ) ;
source . sendMessage ( message ) ;
logger . info ( message ) ;
source . teleport ( target ) ;
return true ;
}
}
package com . github . <unk> . <unk> ;
import org . bukkit . World ;
import org . bukkit . World . Environment ;
import org . bukkit . <unk> ;
import org . bukkit . command . Command ;
import org . bukkit . command . CommandExecutor ;
import org . bukkit . command . CommandSender ;
public class <unk> implements CommandExecutor {
private <unk> plugin ;
public <unk> ( <unk> plugin ) {
this . plugin = plugin ;
}
@Override
public boolean onCommand ( CommandSender sender , Command command , String label , String [ ] args ) {
if ( args . length < <num> ) {
sender . sendMessage ( " ) ;
return false ;
}
String operation = args [ <num> ] ;
String target = args [ <num> ] ;
if ( operation . equalsIgnoreCase ( " ) ) {
if ( args . length < <num> ) {
sender . sendMessage ( " ) ;
return false ;
}
String type = args [ <num> ] ;
Environment environment = getEnvironment ( type ) ;
if ( environment == null ) {
sender . sendMessage ( " ) ;
return true ;
}
World world = <unk> ( target , environment ) ;
if ( world == null ) {
sender . sendMessage ( " + target + " ) ;
return true ;
}
sender . sendMessage ( " + target + " ) ;
return true ;
} else if ( operation . equalsIgnoreCase ( " ) ) {
World world = getWorld ( target ) ;
if ( world == null ) {
sender . sendMessage ( " + target + " ) ;
return true ;
}
if ( <unk> ( world ) ) {
sender . sendMessage ( " + target + " ) ;
return true ;
}
sender . sendMessage ( " + target + " ) ;
return true ;
} else if ( operation . equalsIgnoreCase ( " ) ) {
World world = getWorld ( target ) ;
if ( world == null ) {
sender . sendMessage ( " + target + " ) ;
return true ;
}
if ( <unk> ( world ) ) {
sender . sendMessage ( " + target + " ) ;
return true ;
}
sender . sendMessage ( " + target + " ) ;
return true ;
} else {
sender . sendMessage ( " ) ;
return false ;
}
}
private World <unk> ( String name , Environment environment ) {
return <unk> . name ( name ) . environment ( environment ) . <unk> ( ) ;
}
private boolean <unk> ( World world ) {
return plugin . getServer ( ) . <unk> ( world , true ) ;
}
private boolean <unk> ( World world ) {
if ( world == null ) {
return false ;
}
return world . <unk> ( ) . delete ( ) ;
}
private World getWorld ( String name ) {
return plugin . getServer ( ) . getWorld ( name ) ;
}
private Environment getEnvironment ( String name ) {
Environment env = null ;
if ( name . equalsIgnoreCase ( " ) ) {
env = Environment . NORMAL ;
} else if ( name . equalsIgnoreCase ( " ) ) {
env = Environment . <unk> ;
} else if ( name . equalsIgnoreCase ( " ) ) {
env = Environment . <unk> ;
}
return env ;
}
}
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
import java . util . PriorityQueue ;
import java . util . Queue ;
import org . json . * ;
public class <unk> {
public static final int <unk> = <num> ;
private Map < Integer , <unk> > <unk> ;
public <unk> ( ) {
<unk> = new HashMap < Integer , <unk> > ( ) ;
}
public void record ( <unk> event ) {
<unk> . put ( event . <unk> ( ) , event ) ;
}
public boolean <unk> ( ) {
return <unk> ( ) . size ( ) > <num> ;
}
private List < <unk> > <unk> ( ) {
Queue < <unk> > queue = new PriorityQueue ( <unk> . values ( ) ) ;
List < <unk> > <unk> = new ArrayList < <unk> > ( ) ;
while ( ! queue . isEmpty ( ) ) {
<unk> event , last ;
event = queue . remove ( ) ;
if ( <unk> . isEmpty ( ) ) {
last = event ;
}
else {
last = <unk> . get ( <unk> . size ( )  <num> ) ;
}
if ( <unk> ( event , last ) ) {
<unk> . add ( event ) ;
}
else {
break ;
}
}
return <unk> ;
}
private boolean <unk> ( <unk> a , <unk> b ) {
return Math . abs ( a . getTimestamp ( )  b . getTimestamp ( ) ) < <unk> ;
}
public JSONObject <unk> ( ) throws JSONException {
List < <unk> > <unk> = <unk> ( ) ;
JSONObject json = new JSONObject ( ) ;
json . put ( " , Config . <unk> ) ;
json . put ( " , Config . <unk> ) ;
json . put ( " , Config . <unk> ) ;
json . put ( " , Config . <unk> ) ;
JSONArray <unk> = new JSONArray ( ) ;
for ( <unk> event : <unk> ) {
<unk> . put ( event . <unk> ( ) ) ;
}
json . put ( " , <unk> ) ;
return json ;
}
}
public class <unk> extends net . <unk> . message . Message {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public <unk> ( ) {
super ( <unk> ) ;
<unk> ( <unk> ) ;
}
public <unk> ( int <unk> ) {
super ( <unk> ) ;
<unk> ( <unk> ) ;
}
public <unk> ( int <unk> , int <unk> ) {
super ( <unk> , <unk> ) ;
<unk> ( <unk> ) ;
}
public <unk> ( byte [ ] data ) {
super ( data ) ;
<unk> ( <unk> ) ;
}
public <unk> ( byte [ ] data , int <unk> ) {
super ( data , <unk> ) ;
<unk> ( <unk> ) ;
}
public <unk> ( byte [ ] data , int <unk> , int <unk> ) {
super ( data , <unk> , <unk> ) ;
<unk> ( <unk> ) ;
}
public <unk> ( net . <unk> . message . Message msg , int <unk> ) {
super ( msg , <unk> , <unk> ) ;
<unk> ( <unk> ) ;
}
public <unk> ( net . <unk> . message . Message msg , int <unk> , int <unk> ) {
super ( msg , <unk> , <unk> ) ;
<unk> ( <unk> ) ;
}
public String toString ( ) {
String s = " ;
try {
s += " + Long . toHexString ( <unk> ( ) ) + " ;
} catch ( ArrayIndexOutOfBoundsException <unk> ) { }
try {
s += " + Long . toHexString ( <unk> ( ) ) + " ;
} catch ( ArrayIndexOutOfBoundsException <unk> ) { }
try {
s += " + Long . toHexString ( <unk> ( ) ) + " ;
} catch ( ArrayIndexOutOfBoundsException <unk> ) { }
try {
s += " + Long . toHexString ( <unk> ( ) ) + " ;
} catch ( ArrayIndexOutOfBoundsException <unk> ) { }
try {
s += " + Long . toHexString ( <unk> ( ) ) + " ;
} catch ( ArrayIndexOutOfBoundsException <unk> ) { }
try {
s += " + Long . toHexString ( <unk> ( ) ) + " ;
} catch ( ArrayIndexOutOfBoundsException <unk> ) { }
return s ;
}
public static boolean <unk> ( ) {
return false ;
}
public static boolean <unk> ( ) {
return false ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
public short <unk> ( ) {
return ( short ) <unk> ( <unk> ( ) , <num> ) ;
}
public void <unk> ( short value ) {
<unk> ( <unk> ( ) , <num> , value ) ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
public static boolean <unk> ( ) {
return false ;
}
public static boolean <unk> ( ) {
return false ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
public short <unk> ( ) {
return ( short ) <unk> ( <unk> ( ) , <num> ) ;
}
public void <unk> ( short value ) {
<unk> ( <unk> ( ) , <num> , value ) ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
public static boolean <unk> ( ) {
return false ;
}
public static boolean <unk> ( ) {
return false ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
public short <unk> ( ) {
return ( short ) <unk> ( <unk> ( ) , <num> ) ;
}
public void <unk> ( short value ) {
<unk> ( <unk> ( ) , <num> , value ) ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
public static boolean <unk> ( ) {
return false ;
}
public static boolean <unk> ( ) {
return false ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
public short <unk> ( ) {
return ( short ) <unk> ( <unk> ( ) , <num> ) ;
}
public void <unk> ( short value ) {
<unk> ( <unk> ( ) , <num> , value ) ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
public static boolean <unk> ( ) {
return false ;
}
public static boolean <unk> ( ) {
return false ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
public short <unk> ( ) {
return ( short ) <unk> ( <unk> ( ) , <num> ) ;
}
public void <unk> ( short value ) {
<unk> ( <unk> ( ) , <num> , value ) ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
public static boolean <unk> ( ) {
return false ;
}
public static boolean <unk> ( ) {
return false ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
public short <unk> ( ) {
return ( short ) <unk> ( <unk> ( ) , <num> ) ;
}
public void <unk> ( short value ) {
<unk> ( <unk> ( ) , <num> , value ) ;
}
public static int <unk> ( ) {
return ( <num> / <num> ) ;
}
public static int <unk> ( ) {
return <num> ;
}
}
import java . util . * ;
import net . <unk> . message . * ;
import net . <unk> . packet . * ;
import net . <unk> . util . * ;
public class <unk> implements net . <unk> . message . MessageListener {
private <unk> <unk> ;
private <unk> dispatcher ;
public <unk> ( String source ) throws Exception {
if ( source != null ) {
<unk> = new <unk> ( <unk> . <unk> ( source , <unk> . err ) ) ;
}
else {
<unk> = new <unk> ( <unk> . <unk> ( <unk> . err ) ) ;
}
dispatcher = new <unk> ( ) ;
}
public void start ( ) {
}
public void messageReceived ( int to , Message message ) {
dispatcher . <unk> ( ( <unk> ) message , System . currentTimeMillis ( ) ) ;
}
private static void usage ( ) {
System . err . println ( " ) ;
}
private void <unk> ( Message msg ) {
<unk> . registerListener ( msg , this ) ;
}
public static void main ( String [ ] args ) throws Exception {
String source = null ;
Vector v = new Vector ( ) ;
if ( args . length > <num> ) {
for ( int i = <num> ; i < args . length ; i ++ ) {
if ( args [ i ] . equals ( " ) ) {
source = args [ ++ i ] ;
}
else {
String className = args [ i ] ;
try {
Class c = Class . forName ( " ) ;
Object packet = c . newInstance ( ) ;
Message msg = ( Message ) packet ;
if ( msg . <unk> ( ) < <num> ) {
System . err . println ( className + " ) ;
}
else {
v . addElement ( msg ) ;
}
}
catch ( Exception e ) {
System . err . println ( e ) ;
}
}
}
}
else if ( args . length != <num> ) {
usage ( ) ;
System . exit ( <num> ) ;
}
<unk> mr = new <unk> ( source ) ;
Enumeration msgs = v . elements ( ) ;
while ( msgs . hasMoreElements ( ) ) {
Message m = ( Message ) msgs . nextElement ( ) ;
mr . <unk> ( m ) ;
}
mr . start ( ) ;
}
}
public class Config {
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final int <unk> = <num> ;
public static final String <unk> = " ;
public static final String <unk> = " ;
public static final String <unk> = " ;
}
import org . json . * ;
public class <unk> {
public enum <unk> { TEMP , <unk> }
private static final String [ ] <unk> = { " , " , " } ;
private <unk> message ;
private long timestamp ;
private JSONObject json ;
public <unk> ( <unk> message , long timestamp ) {
this . message = message ;
this . timestamp = timestamp ;
try {
json = <unk> ( ) ;
}
catch ( JSONException e ) {
System . out . println ( e . getMessage ( ) ) ;
}
}
public JSONObject <unk> ( ) throws JSONException {
return new JSONObject ( json , <unk> ) ;
}
private JSONObject <unk> ( ) throws JSONException {
JSONObject json = new JSONObject ( ) ;
json . put ( " , Config . <unk> ) ;
json . put ( " , Config . <unk> ) ;
json . put ( " , <unk> ( ) ) ;
return json ;
}
private JSONArray <unk> ( ) throws JSONException {
JSONArray array = new JSONArray ( ) ;
JSONObject <unk> = <unk> ( <unk> . TEMP ) ;
JSONObject <unk> = <unk> ( <unk> . <unk> ) ;
array . put ( <unk> ) ;
array . put ( <unk> ) ;
return array ;
}
private JSONObject <unk> ( <unk> type ) throws JSONException {
JSONObject json = new JSONObject ( ) ;
json . put ( " , message . <unk> ( )  Config . <unk> ) ;
json . put ( " , message . <unk> ( ) ) ;
json . put ( " , timestamp ) ;
switch ( type ) {
case TEMP :
json . put ( " , <unk> ( message . <unk> ( ) ) ) ;
json . put ( " , JSONObject . NULL ) ;
break ;
case <unk> :
json . put ( " , JSONObject . NULL ) ;
json . put ( " , message . <unk> ( ) ) ;
break ;
}
return json ;
}
private float <unk> ( short <unk> ) {
float a = <num> ;
float b = <num> ;
float c = <num> ;
float r1 = <num> * <num> ;
int <unk> = <num> ;
float <unk> = r1 * ( <unk>  <unk> ) / <unk> ;
float ln = ( float ) Math . log ( <unk> ) ;
float <unk> = ( float ) ( <num> / ( a + b * ln + c * Math . pow ( ln , <num> ) ) ) ;
return <unk>  <num> ;
}
}
import org . json . * ;
public class <unk> implements Comparable < <unk> > {
private <unk> message ;
private long timestamp ;
private JSONObject json ;
public <unk> ( <unk> message , long timestamp ) {
this . message = message ;
this . timestamp = timestamp ;
try {
json = <unk> ( ) ;
}
catch ( JSONException e ) {
System . out . println ( e . getMessage ( ) ) ;
}
}
public JSONObject <unk> ( ) {
return json ;
}
public long getTimestamp ( ) {
return timestamp ;
}
public int <unk> ( ) {
return message . <unk> ( )  Config . <unk> ;
}
public int compareTo ( <unk> other ) {
return Long . valueOf ( other . getTimestamp ( ) ) . compareTo ( getTimestamp ( ) ) ;
}
private JSONObject <unk> ( ) throws JSONException {
JSONObject json = new JSONObject ( ) ;
json . put ( " , Config . <unk> ) ;
json . put ( " , Config . <unk> ) ;
json . put ( " , Config . <unk> ) ;
json . put ( " , Config . <unk> ) ;
json . put ( " , <unk> ( ) ) ;
return json ;
}
private JSONArray <unk> ( ) throws JSONException {
JSONArray array = new JSONArray ( ) ;
array . put ( <unk> ( ) ) ;
return array ;
}
}
import org . restlet . * ;
import org . restlet . data . * ;
import org . restlet . resource . * ;
import org . restlet . representation . * ;
import org . restlet . ext . json . * ;
import org . json . * ;
public class <unk> {
<unk> <unk> ;
public <unk> ( ) {
<unk> = new <unk> ( Config . <unk> ) ;
}
public void <unk> ( <unk> <unk> ) {
try {
JSONObject <unk> = <unk> . <unk> ( ) ;
<unk> scheme = <unk> . <unk> ;
<unk> authentication = new <unk> ( scheme , Config . <unk> , Config . <unk> ) ;
<unk> . <unk> ( authentication ) ;
<unk> . post ( new <unk> ( <unk> ) ) ;
if ( ! <unk> . getStatus ( ) . isSuccess ( ) ) {
System . out . println ( " + <unk> . getStatus ( ) ) ;
}
}
catch ( JSONException e ) {
System . out . println ( e . getMessage ( ) ) ;
}
}
}
import org . restlet . * ;
import org . restlet . data . * ;
import org . restlet . resource . * ;
import org . restlet . representation . * ;
import org . restlet . ext . json . * ;
import org . json . * ;
public class RestClient {
private <unk> <unk> , <unk> ;
private <unk> <unk> ;
public RestClient ( ) {
<unk> = new <unk> ( Config . <unk> ) ;
<unk> = new <unk> ( Config . <unk> ) ;
<unk> = new <unk> ( ) ;
}
public void <unk> ( <unk> <unk> ) {
try {
JSONObject <unk> = <unk> . <unk> ( ) ;
<unk> = <unk> ( <unk> ) ;
<unk> . post ( new <unk> ( <unk> ) ) ;
}
catch ( JSONException e ) {
System . out . println ( e . getMessage ( ) ) ;
}
}
public void sendEvent ( <unk> event ) {
<unk> . record ( event ) ;
try {
JSONObject <unk> ;
if ( <unk> . <unk> ( ) ) {
<unk> = <unk> . <unk> ( ) ;
}
else {
<unk> = event . <unk> ( ) ;
}
<unk> = <unk> ( <unk> ) ;
<unk> . post ( new <unk> ( <unk> ) ) ;
}
catch ( JSONException e ) {
System . out . println ( e . getMessage ( ) ) ;
}
}
private JSONObject <unk> ( JSONObject object ) throws JSONException {
object . put ( " , Config . <unk> ) ;
return object ;
}
}
public class <unk> {
private RestClient <unk> ;
private <unk> <unk> ;
public <unk> ( ) {
<unk> = new RestClient ( ) ;
<unk> = new <unk> ( ) ;
}
public void <unk> ( <unk> message , long timestamp ) {
<unk> <unk> = new <unk> ( message , timestamp ) ;
<unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> ) ;
if ( <unk> ( message ) ) {
<unk> fireEvent = new <unk> ( message , timestamp ) ;
<unk> . sendEvent ( fireEvent ) ;
}
}
private boolean <unk> ( <unk> message ) {
return message . <unk> ( ) > <num> ;
}
}
import java . io . * ;
import net . <unk> . packet . * ;
import net . <unk> . util . * ;
import net . <unk> . message . * ;
public class Listen {
public static void main ( String args [ ] ) throws IOException {
String source = null ;
<unk> reader ;
if ( args . length == <num> && args [ <num> ] . equals ( " ) ) {
source = args [ <num> ] ;
}
else if ( args . length > <num> ) {
System . err . println ( " ) ;
System . err . println ( " ) ;
System . exit ( <num> ) ;
}
if ( source == null ) {
reader = <unk> . <unk> ( ) ;
}
else {
reader = <unk> . <unk> ( source ) ;
}
if ( reader == null ) {
System . err . println ( " ) ;
System . exit ( <num> ) ;
}
try {
reader . open ( <unk> . err ) ;
while ( true ) {
byte [ ] packet = reader . readPacket ( ) ;
<unk> . <unk> ( System . out , packet ) ;
System . out . println ( ) ;
System . out . flush ( ) ;
}
}
catch ( IOException e ) {
System . err . println ( " + reader . getName ( ) + " + e ) ;
}
}
}
package org . <unk> . <unk> . boot ;
import java . io . File ;
import java . io . IOException ;
import java . io . UnsupportedEncodingException ;
import java . lang . reflect . InvocationTargetException ;
import java . lang . reflect . Method ;
import java . net . MalformedURLException ;
import java . net . URL ;
import java . net . URLClassLoader ;
import java . net . URLDecoder ;
import java . security . CodeSource ;
import java . security . ProtectionDomain ;
import java . util . ArrayList ;
import java . util . List ;
import java . util . Map ;
import java . util . jar . Attributes ;
public final class <unk> {
private static final String <unk> = " ;
public static void main ( final String [ ] args ) throws IOException {
final Map < String , String > arguments = Arguments . <unk> ( args , " ) ;
final Boolean <unk> = <unk> . <unk> ( arguments ) ;
if ( ! <unk> ) {
<unk> . <unk> ( arguments , null ) ;
}
Console . VERBOSE ( " + arguments ) ;
<unk> . initialize ( arguments ) ;
final String location = <unk> . <unk> ( ) ;
if ( ( location == null ) || " . equals ( location ) ) {
Console . WARNING ( " ) ;
return ;
}
final File home ;
try {
home = <unk> . <unk> ( arguments , location ) ;
} catch ( final IllegalStateException e ) {
Console . WARNING ( e . getMessage ( ) , e ) ;
return ;
}
Console . INFO ( " + home . getPath ( ) ) ;
if ( <unk> ) {
<unk> . <unk> ( arguments , home ) ;
}
final String <unk> = Arguments . <unk> ( arguments , Attributes . Name . MAIN_CLASS . toString ( ) , null ) ;
if ( <unk> == null ) {
Console . WARNING ( " ) ;
return ;
}
Console . INFO ( " + <unk> ) ;
if ( ! <unk> . explode ( location , home ) ) {
return ;
}
if ( Arguments . <unk> ( arguments , " , Boolean . FALSE ) ) {
<unk> . <unk> ( home ) ;
}
List < URL > urls = null ;
try {
urls = <unk> . <unk> ( home , arguments ) ;
} catch ( final IllegalStateException <unk> ) {
return ;
}
final ClassLoader classloader = new URLClassLoader ( urls . toArray ( new URL [ urls . size ( ) ] ) , Arguments . <unk> ( arguments , " , Boolean . FALSE ) ? ClassLoader . getSystemClassLoader ( ) : ClassLoader
. getSystemClassLoader ( ) . getParent ( ) ) {
@Override
protected String <unk> ( final String libname ) {
String libPath = <unk> . <unk> ( new File ( home , " ) , libname ) ;
if ( libPath == null ) {
libPath = <unk> . <unk> ( libname , new File ( home , " ) ) ;
if ( libPath == null ) {
return super . <unk> ( libname ) ;
}
}
return libPath ;
}
} ;
System . getProperties ( ) . put ( " , location ) ;
System . getProperties ( ) . put ( " , home . getPath ( ) ) ;
System . getProperties ( ) . put ( " , Arguments . <unk> ( arguments , " , " ) ) ;
System . getProperties ( ) . put ( " , Arguments . <unk> ( arguments , " , " ) ) ;
<unk> . <unk> ( classloader , <unk> , args , home ) ;
Console . INFO ( " ) ;
}
private static Boolean <unk> ( final Map < String , String > arguments ) {
Boolean <unk> = Boolean . FALSE ;
final String <unk> = Arguments . <unk> ( arguments , " , null ) ;
if ( <unk> != null ) {
<unk> = <unk> . indexOf ( <unk> . <unk> ) >= <num> ;
}
Console . setInfo ( Arguments . <unk> ( arguments , " , Boolean . TRUE ) ) ;
Console . setVerbose ( Arguments . <unk> ( arguments , " , Boolean . FALSE ) ) ;
return <unk> ;
}
private static void <unk> ( final Map < String , String > arguments , final File home ) {
final String <unk> = Arguments . <unk> ( arguments , " , null ) ;
if ( <unk> != null ) {
File log = null ;
final int index = <unk> . indexOf ( <unk> . <unk> ) ;
if ( index >= <num> ) {
log = new File ( home , <unk> . substring ( <unk> . <unk> . length ( ) ) ) ;
} else {
log = new File ( <unk> ) ;
}
Console . <unk> ( log ) ;
}
}
private static List < URL > <unk> ( final File home , final Map < String , String > arguments ) throws IllegalStateException {
final Boolean <unk> = Arguments . <unk> ( arguments , " , Boolean . TRUE ) ;
final String <unk> = System . getProperty ( " , null ) ;
final List < URL > urls = new ArrayList < URL > ( ) ;
if ( <unk> ) {
Console . VERBOSE ( " ) ;
try {
if ( <unk> != null ) {
urls . addAll ( <unk> . <unk> ( new File ( <unk> , " ) ) ) ;
} else {
Console . WARNING ( " ) ;
}
} catch ( final MalformedURLException ex ) {
Console . WARNING ( " + ex . getMessage ( ) ) ;
throw new IllegalStateException ( " , ex ) ;
}
}
try {
urls . addAll ( <unk> . <unk> ( new File ( home , " ) ) ) ;
} catch ( final MalformedURLException ex ) {
Console . WARNING ( " + ex . getMessage ( ) ) ;
throw new IllegalStateException ( " , ex ) ;
}
final String <unk> = Arguments . <unk> ( arguments , " , null ) ;
if ( <unk> != null ) {
try {
File extra = new File ( <unk> ) ;
if ( ! extra . exists ( ) ) {
extra = new File ( home , <unk> ) ;
}
urls . addAll ( <unk> . <unk> ( extra ) ) ;
} catch ( final MalformedURLException e ) {
Console . WARNING ( " + <unk> + " + e . getMessage ( ) ) ;
throw new IllegalStateException ( " + <unk> + " , e ) ;
}
}
Console . VERBOSE ( " + urls . toString ( ) ) ;
return urls ;
}
private static void <unk> ( final ClassLoader classloader , final String <unk> , final String [ ] arguments , final File home ) throws SecurityException {
Class < ? > mainClass = null ;
try {
Thread . currentThread ( ) . setContextClassLoader ( classloader ) ;
mainClass = classloader . loadClass ( <unk> ) ;
} catch ( final ClassNotFoundException ex ) {
Console . WARNING ( " + <unk> + " + ex . getMessage ( ) ) ;
}
if ( mainClass != null ) {
Method main = null ;
try {
main = mainClass . getMethod ( " , new Class < ? > [ ] { String [ ] . class } ) ;
} catch ( final NoSuchMethodException ex ) {
Console . WARNING ( " + <unk> + " + ex . getMessage ( ) ) ;
} catch ( final SecurityException ex ) {
Console . WARNING ( " + <unk> + " + ex . getMessage ( ) ) ;
}
if ( main != null ) {
main . setAccessible ( true ) ;
Console . VERBOSE ( " ) ;
try {
main . invoke ( null , new Object [ ] { arguments } ) ;
Console . VERBOSE ( " ) ;
} catch ( final <unk> e ) {
switch ( e . getOperation ( ) ) {
case <unk> :
Console . VERBOSE ( " ) ;
<unk> . <unk> ( home ) ;
break ;
case RESTART :
Console . VERBOSE ( " ) ;
<unk> . restart ( new Runnable ( ) {
public void run ( ) {
<unk> . <unk> ( home ) ;
}
} ) ;
break ;
case NONE :
Console . WARNING ( " + e . getMessage ( ) , e ) ;
break ;
default :
Console . WARNING ( " + e . getOperation ( ) + " + e . getMessage ( ) , e ) ;
break ;
}
} catch ( final IllegalAccessException ex ) {
Console . WARNING ( " + <unk> + " + ex . getMessage ( ) , ex ) ;
} catch ( final IllegalArgumentException ex ) {
Console . WARNING ( " + <unk> + " + ex . getMessage ( ) , ex ) ;
} catch ( final InvocationTargetException ex ) {
Console . WARNING ( " + <unk> + " + ex . getMessage ( ) , ex ) ;
} catch ( final Throwable ex ) {
Console . WARNING ( " + <unk> + " + ex . getMessage ( ) , ex ) ;
}
} else {
Console . WARNING ( " + <unk> + " ) ;
}
}
}
private static List < URL > <unk> ( final File directory ) throws MalformedURLException {
final List < URL > urls = new ArrayList < URL > ( ) ;
if ( directory . exists ( ) && directory . isDirectory ( ) ) {
for ( final File child : directory . listFiles ( ) ) {
if ( child . isDirectory ( ) ) {
urls . addAll ( <unk> . <unk> ( new File ( child . getPath ( ) ) ) ) ;
} else if ( child . getName ( ) . endsWith ( " ) ) {
urls . add ( child . toURI ( ) . toURL ( ) ) ;
}
}
}
return urls ;
}
private static String <unk> ( ) {
String root = null ;
final ProtectionDomain <unk> = <unk> . class . <unk> ( ) ;
final CodeSource <unk> = <unk> . <unk> ( ) ;
final URL rootUrl = <unk> . getLocation ( ) ;
try {
root = URLDecoder . decode ( rootUrl . getFile ( ) , " ) ;
} catch ( final UnsupportedEncodingException ex ) {
Console . WARNING ( " + rootUrl . getFile ( ) + " + ex . getMessage ( ) , ex ) ;
}
return root ;
}
private static File <unk> ( final Map < String , String > arguments , final String location ) throws IllegalStateException {
final String path = Arguments . <unk> ( arguments , " , location != null ? new File ( location ) . getParentFile ( ) . getAbsolutePath ( ) : null ) ;
try {
File home = path != null ? new File ( path ) : <unk> . <unk> ( ) ;
if ( ! home . canWrite ( ) ) {
Console . WARNING ( " ) ;
try {
home = <unk> . <unk> ( ) ;
} catch ( final IOException e ) {
throw new IllegalStateException ( " , e ) ;
}
}
if ( ! home . isDirectory ( ) ) {
throw new IllegalStateException ( home . getPath ( ) + " ) ;
}
return home ;
} catch ( final IOException e ) {
throw new IllegalStateException ( " , e ) ;
}
}
public static void restart ( final Runnable runnable ) {
Console . VERBOSE ( " + System . getProperty ( " ) + " ) ;
<unk> . <unk> ( runnable , " , System . getProperty ( " ) ) ;
}
}
package org . <unk> . <unk> . boot ;
import java . util . Locale ;
public class <unk> {
public enum Name {
<unk> , MAC , <unk>
}
private static final Name name ;
static {
final String os = System . getProperty ( " , " ) . toLowerCase ( Locale . getDefault ( ) ) ;
if ( os . startsWith ( " ) || os . contains ( " ) ) {
name = Name . <unk> ;
} else if ( os . startsWith ( " ) ) {
name = Name . MAC ;
} else {
name = Name . <unk> ;
}
}
public static boolean <unk> ( ) {
return Name . <unk> . equals ( <unk> . name ) ;
}
public static boolean isWindows ( ) {
return Name . <unk> . equals ( <unk> . name ) ;
}
public static boolean isMac ( ) {
return Name . MAC . equals ( <unk> . name ) ;
}
public static Name getName ( ) {
return <unk> . name ;
}
}
package org . <unk> . <unk> ;
import java . io . Serializable ;
import java . util . ArrayList ;
import java . util . List ;
public class <unk> implements Serializable {
private static final long serialVersionUID =  <num> ;
private List < String > paths ;
public <unk> ( ) {
super ( ) ;
}
public void <unk> ( String path ) {
getPaths ( ) . add ( path ) ;
}
public void <unk> ( String path ) {
getPaths ( ) . remove ( path ) ;
}
public List < String > getPaths ( ) {
if ( paths == null ) {
paths = new ArrayList < String > ( ) ;
}
return paths ;
}
public void <unk> ( List < String > paths ) {
this . paths = paths ;
}
}
package org . <unk> . <unk> . boot ;
import java . io . Closeable ;
import java . io . File ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . OutputStream ;
import java . net . URLDecoder ;
import java . util . Collections ;
import java . util . Map ;
import java . util . UUID ;
import java . util . jar . <unk> ;
import java . util . jar . JarFile ;
import java . util . zip . ZipException ;
public class <unk> {
private static Boolean <unk> = Boolean . TRUE ;
private static Boolean <unk> = Boolean . FALSE ;
public static void initialize ( final Map < String , String > arguments ) {
<unk> . <unk> = Arguments . <unk> ( arguments , " , Boolean . TRUE ) ;
}
public static boolean explode ( final String location , final File home ) {
<unk> . <unk> ( home ) ;
try {
if ( location != null ) {
<unk> . explode ( new File ( home , " ) , " , location , Boolean . FALSE ) ;
<unk> . explode ( new File ( home , " ) , " , location , Boolean . FALSE ) ;
} else {
Console . WARNING ( " ) ;
}
} catch ( final Throwable t ) {
Console . WARNING ( " + t . getMessage ( ) , t ) ;
return false ;
}
return true ;
}
public static void <unk> ( final File home ) {
<unk> ( home , Boolean . FALSE ) ;
}
public static void <unk> ( final File home , final Boolean force ) {
if ( <unk> . <unk> || force ) {
Console . VERBOSE ( " ) ;
final File lib = new File ( home , " ) ;
if ( lib . exists ( ) ) {
if ( ! <unk> . delete ( lib ) ) {
Console . WARNING ( " ) ;
}
}
}
}
public static void <unk> ( final File home ) {
if ( ! <unk> ) {
Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( new Runnable ( ) {
public void run ( ) {
final File lib = new File ( home , " ) ;
if ( lib . exists ( ) ) {
<unk> . delete ( lib ) ;
}
}
} ) ) ;
<unk> = Boolean . TRUE ;
}
}
public static File <unk> ( ) throws IOException {
final File <unk> = new File ( System . getProperty ( " ) ) ;
File <unk> ;
final int <unk> = <num> ;
int <unk> = <num> ;
do {
<unk> ++ ;
if ( <unk> > <unk> ) {
throw new IOException ( " + <unk> + " ) ;
}
final String dirName = UUID . randomUUID ( ) . toString ( ) ;
<unk> = new File ( <unk> , dirName ) ;
} while ( <unk> . exists ( ) ) ;
if ( <unk> . mkdirs ( ) ) {
return <unk> ;
} else {
throw new IOException ( " + <unk> . getAbsolutePath ( ) ) ;
}
}
public static void close ( final Closeable <unk> ) {
if ( <unk> != null ) {
try {
<unk> . close ( ) ;
} catch ( final IOException exception ) {
Console . VERBOSE ( " , exception ) ;
}
}
}
public static boolean delete ( final File from ) {
if ( ( from != null ) && from . exists ( ) ) {
if ( from . isDirectory ( ) ) {
for ( final File child : from . listFiles ( ) ) {
<unk> . delete ( child ) ;
}
}
return from . delete ( ) ;
}
return false ;
}
private static void explode ( final File home , final String fromPath , final String jarPath , final Boolean override ) throws IOException , ZipException {
final File check = new File ( jarPath ) ;
if ( check . exists ( ) && ! check . isDirectory ( ) ) {
final JarFile jar = new JarFile ( URLDecoder . decode ( jarPath , " ) ) ;
for ( final <unk> entry : Collections . list ( jar . entries ( ) ) ) {
final String name = entry . getName ( ) ;
if ( name . startsWith ( fromPath ) ) {
Console . VERBOSE ( " + name ) ;
final String targetName = name . substring ( fromPath . length ( ) ) . trim ( ) ;
if ( ! " . equals ( targetName ) )
{
final File localFile = new File ( home , targetName ) ;
if ( override && localFile . exists ( ) ) {
localFile . delete ( ) ;
}
if ( ! localFile . exists ( ) ) {
<unk> . <unk> ( targetName , localFile , jar , name ) ;
}
}
}
}
}
}
private static void <unk> ( final String targetName , final File localFile , final JarFile jar , final String name ) throws IOException {
if ( targetName . endsWith ( " ) ) {
if ( ! localFile . mkdirs ( ) ) {
throw new IOException ( " + localFile . getPath ( ) + " ) ;
}
} else {
if ( ! localFile . exists ( ) ) {
final File parent = localFile . getParentFile ( ) ;
if ( ( parent != null ) && ! parent . exists ( ) ) {
if ( ! parent . mkdirs ( ) ) {
throw new IOException ( " + localFile . getPath ( ) + " ) ;
}
}
if ( ! localFile . createNewFile ( ) ) {
throw new IOException ( " + localFile . getPath ( ) ) ;
}
InputStream inputStream = null ;
OutputStream outputStream = null ;
try {
inputStream = jar . getInputStream ( jar . getEntry ( name ) ) ;
if ( inputStream == null ) {
throw new IOException ( " + name + " ) ;
}
outputStream = new FileOutputStream ( localFile ) ;
final byte [ ] buf = new byte [ <num> * <num> ] ;
int len = <num> ;
while ( ( len = inputStream . read ( buf ) ) > <num> ) {
outputStream . write ( buf , <num> , len ) ;
}
} catch ( final IOException exception ) {
Console . VERBOSE ( " + name , exception ) ;
<unk> . delete ( localFile ) ;
} finally {
<unk> . close ( inputStream ) ;
<unk> . close ( outputStream ) ;
}
}
}
}
package org . <unk> . <unk> . sample ;
import java . io . File ;
import java . util . Scanner ;
import org . <unk> . <unk> . boot . Arguments ;
import org . <unk> . <unk> . boot . Console ;
import org . <unk> . <unk> . boot . <unk> ;
public class <unk> {
public static void main ( final String [ ] args ) throws Exception {
Console . <unk> ( new File ( " ) ) ;
Console . INFO ( " + Arguments . <unk> ( args ) ) ;
Console . INFO ( " ) ;
final Scanner scanner = new Scanner ( System . in ) ;
int code = scanner . nextInt ( ) ;
if ( code == <num> ) {
Console . INFO ( " ) ;
Thread . sleep ( <num> ) ;
throw new <unk> ( <unk> . Operation . RESTART ) ;
} else if ( code == <num> ) {
Console . INFO ( " ) ;
Thread . sleep ( <num> ) ;
throw new <unk> ( <unk> . Operation . <unk> ) ;
}
return ;
}
}
package org . <unk> . <unk> . boot ;
import java . io . BufferedOutputStream ;
import java . io . File ;
import java . io . FileNotFoundException ;
import java . io . FileOutputStream ;
import java . io . PrintStream ;
import java . text . SimpleDateFormat ;
import java . util . Date ;
import java . util . Locale ;
import java . util . TimeZone ;
public class Console {
private static Boolean info = Boolean . TRUE ;
private static Boolean verbose = Boolean . FALSE ;
public static void setInfo ( final Boolean info ) {
Console . info = info ;
}
public static void setVerbose ( final Boolean verbose ) {
Console . verbose = verbose ;
}
public static void <unk> ( final File logFile ) {
if ( logFile != null ) {
if ( ! logFile . getParentFile ( ) . exists ( ) ) {
if ( ! logFile . getParentFile ( ) . mkdirs ( ) ) {
WARNING ( " + logFile . getPath ( ) ) ;
return ;
}
}
BufferedOutputStream log = null ;
try {
log = new BufferedOutputStream ( new FileOutputStream ( logFile , true ) ) ;
System . setOut ( new PrintStream ( log , true ) ) ;
System . <unk> ( new PrintStream ( log , true ) ) ;
} catch ( final FileNotFoundException ex ) {
}
}
}
public static void VERBOSE ( final String message ) {
Console . VERBOSE ( message , null ) ;
}
public static void VERBOSE ( final String message , final Throwable throwable ) {
if ( Console . verbose ) {
System . out . println ( Console . <unk> ( new Date ( ) ) + " + message ) ;
if ( throwable != null ) {
throwable . printStackTrace ( System . err ) ;
}
}
}
public static void WARNING ( final String message , final Throwable throwable ) {
System . err . println ( Console . <unk> ( new Date ( ) ) + " + message ) ;
if ( throwable != null ) {
throwable . printStackTrace ( System . err ) ;
}
}
public static void WARNING ( final String message ) {
Console . WARNING ( message , null ) ;
}
public static void INFO ( final String message ) {
if ( Console . info ) {
System . out . println ( Console . <unk> ( new Date ( ) ) + " + message ) ;
}
}
private static String <unk> ( final Date when ) {
final SimpleDateFormat dateFormat = new SimpleDateFormat ( " , Locale . US ) ;
dateFormat . setTimeZone ( TimeZone . getTimeZone ( " ) ) ;
return ( dateFormat . format ( when ) + " ) ;
}
}
package org . <unk> . <unk> . boot ;
public class <unk> extends RuntimeException {
private static final long serialVersionUID = <num> ;
public enum Operation {
NONE , <unk> , RESTART
}
private final Operation operation ;
public <unk> ( ) {
super ( ) ;
operation = Operation . NONE ;
}
public <unk> ( final Operation operation ) {
super ( ) ;
this . operation = operation ;
}
public <unk> ( final Operation operation , final String message , final Throwable cause ) {
super ( message , cause ) ;
this . operation = operation ;
}
public <unk> ( final Operation operation , final String message ) {
super ( message ) ;
this . operation = operation ;
}
public <unk> ( final Operation operation , final Throwable cause ) {
super ( cause ) ;
this . operation = operation ;
}
public final Operation getOperation ( ) {
return operation ;
}
}
package org . <unk> . <unk> . boot ;
import java . util . Scanner ;
public class Main {
public static void main ( final String [ ] args ) throws Exception {
System . out . println ( " ) ;
final Scanner sc = new Scanner ( System . in ) ;
if ( sc . nextInt ( ) == <num> ) {
System . out . println ( " ) ;
try {
<unk> . <unk> ( new Runnable ( ) {
public void run ( ) {
System . out . println ( " ) ;
}
} ) ;
} catch ( final IllegalStateException e ) {
System . out . println ( e . getMessage ( ) ) ;
}
System . out . println ( " ) ;
try {
<unk> . <unk> ( new Runnable ( ) {
public void run ( ) {
System . out . println ( " ) ;
}
} , " ) ;
} catch ( final IllegalStateException e ) {
System . out . println ( e . getMessage ( ) ) ;
}
}
sc . close ( ) ;
System . out . println ( " ) ;
}
}
package org . <unk> . <unk> . boot ;
import java . io . File ;
import java . io . IOException ;
import java . lang . management . ManagementFactory ;
import java . util . ArrayList ;
import java . util . Arrays ;
import java . util . List ;
public class <unk> {
private static final String <unk> = " ;
public static void <unk> ( final Runnable <unk> ) throws IllegalStateException {
if ( System . getProperty ( <unk> ) != null ) {
final List < String > parameters = new ArrayList < String > ( ) ;
final String [ ] <unk> = System . getProperty ( <unk> ) . split ( " ) ;
if ( <unk> [ <num> ] . endsWith ( " ) ) {
parameters . add ( " + new File ( <unk> [ <num> ] ) . getPath ( ) ) ;
} else {
parameters . add ( <unk> [ <num> ] ) ;
}
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
parameters . add ( <unk> [ i ] ) ;
}
<unk> ( <unk> , parameters . toArray ( new String [ <num> ] ) ) ;
return ;
}
throw new IllegalStateException ( " ) ;
}
public static void <unk> ( final Runnable <unk> , final String . . . parameters ) {
final List < String > commands = new ArrayList < String > ( ) ;
commands . add ( <unk> ( ) ) ;
commands . addAll ( <unk> ( ) ) ;
commands . addAll ( Arrays . asList ( parameters ) ) ;
final StringBuilder builder = new StringBuilder ( ) ;
for ( final String command : commands ) {
builder . append ( command ) . append (  ' ) ;
}
final String cmd = builder . toString ( ) ;
Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) {
@Override
public void run ( ) {
try {
Runtime . getRuntime ( ) . exec ( cmd ) ;
} catch ( final IOException e ) {
e . printStackTrace ( ) ;
}
}
} ) ;
if ( <unk> != null ) {
<unk> . run ( ) ;
}
System . exit ( <num> ) ;
}
private static String <unk> ( ) {
if ( <unk> . isMac ( ) ) {
return " ;
}
String path = System . getProperty ( " ) ;
if ( ( path == null ) || " . endsWith ( path ) ) {
path = System . getProperty ( " ) + File . separator + " ;
}
final File root = new File ( path ) ;
for ( final String name : Arrays . asList ( ( <unk> . <unk> ( ) ? " : " ) , ( <unk> . <unk> ( ) ? " : " ) ) ) {
final File java = new File ( root , name ) ;
if ( java . exists ( ) ) {
return java . getAbsolutePath ( ) ;
}
}
return " ;
}
private static List < String > <unk> ( ) {
final List < String > lst = ManagementFactory . getRuntimeMXBean ( ) . <unk> ( ) ;
final ArrayList < String > <unk> = new ArrayList < String > ( ) ;
boolean <unk> = false ;
boolean <unk> = false ;
boolean <unk> = false ;
boolean <unk> = false ;
boolean <unk> = false ;
boolean <unk> = false ;
final boolean classpath = false ;
for ( final String h : lst ) {
if ( ! h . contains ( " ) ) {
if ( h . contains ( " ) ) {
<unk> = true ;
if ( Runtime . getRuntime ( ) . <unk> ( ) < <num> ) {
<unk> . add ( " ) ;
continue ;
}
} else if ( h . contains ( " ) ) {
<unk> = true ;
} else if ( h . contains ( " ) ) {
<unk> = true ;
} else if ( h . contains ( " ) ) {
<unk> = true ;
} else if ( h . contains ( " ) ) {
<unk> = true ;
} else if ( h . contains ( " ) ) {
<unk> = true ;
}
<unk> . add ( h ) ;
}
}
if ( ! <unk> ) {
<unk> . add ( " ) ;
}
if ( ! <unk> ) {
<unk> . add ( " ) ;
}
if ( ! <unk> ) {
<unk> . add ( " ) ;
}
if ( ! <unk> ) {
<unk> . add ( " ) ;
}
if ( ! <unk> ) {
<unk> . add ( " ) ;
}
if ( ! <unk> ) {
<unk> . add ( " ) ;
}
if ( ! classpath ) {
final String cp = System . getProperty ( " ) ;
if ( ( cp != null ) && ! " . equals ( cp ) ) {
<unk> . add ( " + System . getProperty ( " ) + " ) ;
}
}
return <unk> ;
}
}
package org . <unk> . <unk> ;
import java . util . Arrays ;
import org . apache . maven . artifact . Artifact ;
import org . junit . Assert ;
import org . junit . Test ;
public class <unk> {
@Test
public void <unk> ( ) {
<unk> <unk> = new <unk> ( ) ;
for ( String scope : Arrays . asList ( Artifact . <unk> , Artifact . <unk> , Artifact . <unk> , Artifact . SCOPE_SYSTEM ) ) {
Assert . assertTrue ( <unk> . <unk> ( scope ) ) ;
}
Assert . assertFalse ( <unk> . <unk> ( Artifact . <unk> ) ) ;
}
@Test
public void <unk> ( ) {
<unk> <unk> = new <unk> ( ) ;
Assert . assertTrue ( <unk> . <unk> ( null ) ) ;
}
}
package org . <unk> . <unk> . boot ;
import java . io . IOException ;
import java . io . InputStream ;
import java . util . ArrayList ;
import java . util . HashMap ;
import java . util . Iterator ;
import java . util . List ;
import java . util . Map ;
import java . util . Properties ;
public class Arguments {
public static Map < String , String > <unk> ( final String [ ] argv ) {
final Map < String , String > result = new HashMap < String , String > ( ) ;
if ( argv != null ) {
for ( int i = <num> ; i < argv . length ; i ++ ) {
final String option = argv [ i ] ;
if ( option . startsWith ( " ) ) {
final int <unk> = option . indexOf ( =' ) ;
final String paramName = option . substring ( <num> , <unk> ==  <num> ? option . length ( ) : <unk> ) ;
if ( <unk> !=  <num> ) {
result . put ( paramName , option . substring ( <unk> + <num> ) ) ;
} else {
result . put ( paramName , Boolean . TRUE . toString ( ) ) ;
}
} else {
result . put ( option , option ) ;
}
}
}
return result ;
}
public static String [ ] <unk> ( final Map < String , String > arguments ) {
final List < String > result = new ArrayList < String > ( ) ;
for ( final Map . Entry < String , String > entry : arguments . entrySet ( ) ) {
if ( entry . getKey ( ) . equals ( entry . getValue ( ) ) ) {
result . add ( entry . getKey ( ) ) ;
} else {
if ( entry . getValue ( ) . equals ( Boolean . TRUE . toString ( ) ) ) {
result . add ( " + entry . getKey ( ) ) ;
} else {
result . add ( " + entry . getKey ( ) + " + entry . getValue ( ) ) ;
}
}
}
return result . toArray ( new String [ ] { } ) ;
}
public static Map < String , String > <unk> ( final String [ ] argv , final String name ) throws IOException {
final Map < String , String > arguments = Arguments . <unk> ( argv ) ;
Arguments . <unk> ( " + name , arguments ) ;
Arguments . <unk> ( " + name , arguments ) ;
Arguments . <unk> ( " + name , arguments ) ;
Arguments . <unk> ( name , arguments ) ;
return arguments ;
}
public static Boolean <unk> ( final Map < String , String > args , final String name , final Boolean <unk> ) {
final String value = args . get ( name ) ;
if ( ( <unk> != null ) && <unk> ) {
return ( value == null ) || ( value . equalsIgnoreCase ( " ) || value . equalsIgnoreCase ( " ) ) ;
} else {
return ( value != null ) && ( value . equalsIgnoreCase ( " ) || value . equalsIgnoreCase ( " ) ) ;
}
}
public static String <unk> ( final Map < String , String > args , final String name , final String defaultValue ) {
return ( args . get ( name ) == null ? defaultValue : args . get ( name ) ) ;
}
public static Integer <unk> ( final Map < String , String > args , final String name , final Integer defaultValue ) {
try {
return Integer . parseInt ( Arguments . <unk> ( args , name , Integer . toString ( defaultValue ) ) ) ;
} catch ( final NumberFormatException exception ) {
return defaultValue ;
}
}
private static void <unk> ( final String name , final Map < String , String > args ) throws IOException {
InputStream is = null ;
try {
is = <unk> . class . getClassLoader ( ) . getResourceAsStream ( name ) ;
if ( is != null ) {
final Properties properties = new Properties ( ) ;
properties . load ( is ) ;
for ( final Iterator < Object > i = properties . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) {
final String key = ( ( String ) i . next ( ) ) . trim ( ) ;
if ( ! args . containsKey ( key ) ) {
args . put ( key , properties . getProperty ( key ) ) ;
}
}
properties . clear ( ) ;
}
} finally {
if ( is != null ) {
try {
is . close ( ) ;
} catch ( final IOException exception ) {
Console . VERBOSE ( " , exception ) ;
}
}
}
}
}
package org . <unk> . <unk> . boot ;
import java . io . File ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . io . InputStream ;
import java . io . OutputStream ;
import java . util . StringTokenizer ;
public class <unk> {
public static String <unk> ( final File directory , final String libname ) {
final String <unk> = System . mapLibraryName ( libname ) ;
File lib = new File ( directory , <unk> ) ;
if ( ! lib . exists ( ) ) {
return null ;
}
Console . VERBOSE ( " + libname + " + lib . getAbsolutePath ( ) + " ) ;
return lib . getAbsolutePath ( ) ;
}
public static String <unk> ( final String libname , final File destination ) {
final String <unk> = System . mapLibraryName ( libname ) ;
File lib = new File ( destination , <unk> ) ;
if ( lib . exists ( ) ) {
return lib . getAbsolutePath ( ) ;
}
lib . getParentFile ( ) . mkdirs ( ) ;
InputStream inputStream = null ;
OutputStream outputStream = null ;
try {
inputStream = Thread . currentThread ( ) . getContextClassLoader ( ) . getResourceAsStream ( <unk> ) ;
if ( inputStream != null ) {
outputStream = new FileOutputStream ( lib ) ;
final byte [ ] buf = new byte [ <num> * <num> ] ;
int len = <num> ;
while ( ( len = inputStream . read ( buf ) ) > <num> ) {
outputStream . write ( buf , <num> , len ) ;
}
Console . VERBOSE ( " + libname + " ) ;
return lib . getAbsolutePath ( ) ;
}
return null ;
} catch ( IOException e ) {
Console . VERBOSE ( " + <unk> , e ) ;
return null ;
} finally {
<unk> . close ( inputStream ) ;
<unk> . close ( outputStream ) ;
}
}
public static Boolean loadLibraries ( final File directory , final String <unk> ) {
final StringTokenizer tokenizer = new StringTokenizer ( <unk> , " ) ;
Boolean result = Boolean . TRUE ;
while ( tokenizer . hasMoreTokens ( ) && result ) {
result = loadLibrary ( directory , tokenizer . nextToken ( ) ) ;
}
return result ;
}
public static Boolean loadLibrary ( final File directory , final String libname ) {
final String libPath = <unk> ( directory , libname ) ;
if ( libPath == null ) {
Console . WARNING ( " + libname + " + libPath + " ) ;
return Boolean . FALSE ;
}
try {
Runtime . getRuntime ( ) . load ( libPath ) ;
} catch ( final UnsatisfiedLinkError e ) {
Console . WARNING ( " + libname + " + libPath + " , e ) ;
return Boolean . FALSE ;
} catch ( final Throwable e ) {
Console . WARNING ( " + libname + " , e ) ;
return Boolean . FALSE ;
}
return Boolean . TRUE ;
}
}
package org . <unk> . <unk> . boot ;
import java . io . File ;
import org . junit . Test ;
public class <unk> {
@Test
public void <unk> ( ) throws Exception {
<unk> . main ( new String [ ] { Main . class . getName ( ) } ) ;
}
@Test
public void <unk> ( ) throws Exception {
<unk> . main ( new String [ ] { } ) ;
}
@Test
public void <unk> ( ) throws Exception {
<unk> . main ( new String [ ] { " + Main . class . getName ( ) , " + File . separator + " + File . separator + " ,
" + File . separator + " } ) ;
}
}
package org . <unk> . <unk> ;
import java . io . File ;
import java . io . FileOutputStream ;
import java . io . IOException ;
import java . util . HashSet ;
import java . util . Iterator ;
import java . util . List ;
import java . util . Properties ;
import java . util . Set ;
import java . util . Stack ;
import java . util . regex . Pattern ;
import org . apache . maven . <unk> . <unk> ;
import org . apache . maven . <unk> . <unk> ;
import org . apache . maven . artifact . Artifact ;
import org . apache . maven . artifact . <unk> ;
import org . apache . maven . artifact . <unk> ;
import org . apache . maven . artifact . metadata . <unk> ;
import org . apache . maven . artifact . resolver . <unk> ;
import org . apache . maven . artifact . resolver . <unk> ;
import org . apache . maven . artifact . resolver . ArtifactResolutionException ;
import org . apache . maven . artifact . resolver . filter . <unk> ;
import org . apache . maven . artifact . resolver . filter . ScopeArtifactFilter ;
import org . apache . maven . plugin . AbstractMojo ;
import org . apache . maven . plugin . MojoExecutionException ;
import org . apache . maven . shared . dependency . tree . <unk> ;
import org . apache . maven . shared . dependency . tree . <unk> ;
import org . apache . maven . shared . dependency . tree . <unk> ;
import org . codehaus . plexus . <unk> . <unk> ;
import org . codehaus . plexus . <unk> . <unk> ;
import org . codehaus . plexus . <unk> . jar . <unk> ;
import org . codehaus . plexus . <unk> . jar . <unk> ;
import org . codehaus . plexus . <unk> . manager . <unk> ;
import org . codehaus . plexus . <unk> . manager . <unk> ;
import org . codehaus . plexus . util . FileUtils ;
public class <unk> extends AbstractMojo {
protected static final String <unk> = " ;
private static final String <unk> = " ;
private static final String <unk> = " ;
private static final String <unk> = " ;
private org . apache . maven . project . MavenProject project ;
private <unk> <unk> ;
protected <unk> <unk> = new <unk> ( ) ;
private File buildDirectory ;
private org . apache . maven . artifact . factory . <unk> <unk> ;
private org . apache . maven . artifact . resolver . <unk> resolver ;
private org . apache . maven . artifact . repository . ArtifactRepository <unk> ;
private List < ? > remoteRepositories ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private <unk> <unk> ;
private java . util . List < Artifact > <unk> ;
private String mainClass = null ;
private Boolean <unk> = true ;
private Boolean <unk> = false ;
private Boolean verbose = false ;
private Boolean info = false ;
private String logFile = null ;
private Boolean <unk> = true ;
private Boolean <unk> = true ;
private String <unk> = null ;
private Boolean <unk> = false ;
private String <unk> = " ;
private String pluginVersion = " ;
private <unk> natives = null ;
private <unk> libraries = null ;
private Boolean <unk> = false ;
private String <unk> = <unk> ;
private Pattern pattern = null ;
public void execute ( ) throws MojoExecutionException {
getLog ( ) . info ( " ) ;
pluginVersion = " ;
for ( final Artifact a : <unk> ) {
if ( a . getGroupId ( ) . equals ( <unk> . <unk> ) && a . getArtifactId ( ) . equals ( <unk> . <unk> ) ) {
pluginVersion = a . getVersion ( ) ;
break ;
}
}
final File root = new File ( buildDirectory , " ) ;
if ( root . exists ( ) ) {
<unk> . delete ( root ) ;
}
if ( ! root . mkdirs ( ) ) {
throw new MojoExecutionException ( " + root . getName ( ) ) ;
}
<unk> ( root ) ;
final File <unk> = <unk> ( root ) ;
<unk> ( <unk> ) ;
<unk> ( <unk> ) ;
<unk> ( root , <unk> ) ;
<unk> ( root ) ;
<unk> ( root ) ;
}
protected boolean <unk> ( final String scope ) {
if ( pattern == null ) {
pattern = Pattern . compile ( <unk> , Pattern . CASE_INSENSITIVE ) ;
}
return scope != null ? pattern . matcher ( scope ) . matches ( ) : Boolean . TRUE ;
}
private void <unk> ( File <unk> ) throws MojoExecutionException {
if ( libraries != null ) {
getLog ( ) . info ( " ) ;
<unk> ( libraries , <unk> ) ;
}
}
private void <unk> ( File <unk> ) throws MojoExecutionException {
if ( natives != null ) {
getLog ( ) . info ( " ) ;
<unk> ( natives , <unk> ) ;
}
}
private void <unk> ( <unk> <unk> , File destination ) throws MojoExecutionException {
if ( <unk> != null ) {
for ( String path : <unk> . getPaths ( ) ) {
File f = new File ( path ) ;
try {
getLog ( ) . debug ( " + path ) ;
if ( f . isDirectory ( ) ) {
getLog ( ) . info ( " + f . getName ( ) ) ;
FileUtils . copyDirectory ( f , destination ) ;
} else {
FileUtils . <unk> ( f , destination ) ;
}
} catch ( IOException e ) {
throw new MojoExecutionException ( " + path , e ) ;
}
}
}
}
private File <unk> ( final File root ) throws MojoExecutionException {
getLog ( ) . info ( " ) ;
final File <unk> = new File ( new File ( root , " ) , " ) ;
if ( ! <unk> . mkdirs ( ) ) {
throw new MojoExecutionException ( " + <unk> . getName ( ) ) ;
}
try {
final Set < Artifact > artifacts = new HashSet < Artifact > ( ) ;
final <unk> <unk> = new ScopeArtifactFilter ( <unk> . <unk> ) {
@Override
public boolean include ( Artifact artifact ) {
return <unk> ( artifact . getScope ( ) ) ;
}
} ;
final <unk> rootNode = <unk> . <unk> ( project , <unk> , <unk> , <unk> , <unk> , <unk> ) ;
for ( final Iterator < ? > iterator = rootNode . getChildren ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) {
final <unk> child = ( <unk> ) iterator . next ( ) ;
collect ( child , artifacts ) ;
}
for ( final Artifact artifact : artifacts ) {
try {
resolver . resolve ( artifact , remoteRepositories , <unk> ) ;
} catch ( final ArtifactResolutionException e ) {
throw new MojoExecutionException ( " + artifact , e ) ;
} catch ( final <unk> e ) {
throw new MojoExecutionException ( " + artifact , e ) ;
}
if ( ! <unk> ) {
FileUtils . <unk> ( artifact . getFile ( ) , <unk> ) ;
} else {
<unk> ( root , artifact . getFile ( ) ) ;
}
}
} catch ( final <unk> e ) {
throw new MojoExecutionException ( " , e ) ;
} catch ( final IOException e ) {
throw new MojoExecutionException ( " , e ) ;
}
return <unk> ;
}
@SuppressWarnings("unchecked")
private void collect ( final <unk> root , final Set < Artifact > artifacts ) {
Stack < <unk> > stack = new Stack < <unk> > ( ) ;
stack . push ( root ) ;
while ( ! stack . isEmpty ( ) ) {
<unk> node = stack . pop ( ) ;
if ( node . getState ( ) == <unk> . <unk> ) {
final Artifact artifact = node . getArtifact ( ) ;
if ( <unk> ( artifact . getScope ( ) ) ) {
getLog ( ) . info ( " + artifact . toString ( ) ) ;
artifacts . add ( artifact ) ;
if ( ! node . getChildren ( ) . isEmpty ( ) ) {
stack . addAll ( node . getChildren ( ) ) ;
}
}
}
}
}
private void <unk> ( final File root , final File <unk> ) throws MojoExecutionException {
try {
if ( ! <unk> ) {
FileUtils . <unk> ( project . getArtifact ( ) . getFile ( ) , <unk> ) ;
} else {
<unk> ( root , project . getArtifact ( ) . getFile ( ) ) ;
}
} catch ( final IOException e ) {
throw new MojoExecutionException ( " , e ) ;
}
}
private void <unk> ( final File root ) throws MojoExecutionException {
getLog ( ) . info ( " ) ;
final Properties properties = new Properties ( ) ;
properties . put ( " , pluginVersion ) ;
properties . put ( " , project . getVersion ( ) ) ;
if ( mainClass != null ) {
properties . put ( " , mainClass ) ;
}
if ( <unk> != null && ! " . equals ( <unk> ) ) {
properties . put ( " , <unk> ) ;
}
properties . put ( " , Boolean . toString ( <unk> ) ) ;
properties . put ( " , Boolean . toString ( <unk> ) ) ;
properties . put ( " , Boolean . toString ( verbose ) ) ;
properties . put ( " , Boolean . toString ( info ) ) ;
if ( logFile != null ) {
properties . put ( " , logFile ) ;
}
properties . put ( " , Boolean . toString ( <unk> ) ) ;
properties . put ( " , Boolean . toString ( <unk> ) ) ;
final File <unk> = new File ( root , " ) ;
if ( ! <unk> . exists ( ) ) {
if ( ! <unk> . mkdirs ( ) ) {
throw new MojoExecutionException ( " ) ;
}
}
final File <unk> = new File ( <unk> , <unk> . <unk> ) ;
FileOutputStream w = null ;
try {
w = new FileOutputStream ( <unk> ) ;
properties . store ( w , " ) ;
} catch ( final IOException e ) {
throw new MojoExecutionException ( " , e ) ;
} finally {
if ( w != null ) {
try {
w . close ( ) ;
} catch ( final IOException e ) {
}
}
}
}
private void <unk> ( final File root ) throws MojoExecutionException {
final String <unk> = <unk> ( ) ;
getLog ( ) . info ( " + <unk> ) ;
final File custFile = new File ( buildDirectory , <unk> ) ;
final <unk> <unk> = new <unk> ( ) ;
<unk> . <unk> ( <unk> ) ;
<unk> . setOutputFile ( custFile ) ;
try {
<unk> . <unk> ( new File ( new File ( root , " ) , " ) ) ;
<unk> . <unk> ( ) . <unk> ( root ) ;
final File <unk> = new File ( project . getBuild ( ) . getOutputDirectory ( ) , <unk> . <unk> ) ;
if ( <unk> . exists ( ) ) {
<unk> . <unk> ( ) . addFile ( <unk> , <unk> . <unk> ) ;
}
<unk> . <unk> ( project , <unk> ) ;
if ( <unk> ) {
project . getArtifact ( ) . setFile ( custFile ) ;
} else {
final Artifact artifact = <unk> . <unk> ( project . getGroupId ( ) , project . getArtifactId ( ) + " , project . getVersion ( ) , Artifact . <unk> , " ) ;
artifact . setFile ( custFile ) ;
project . <unk> ( artifact ) ;
}
} catch ( final <unk> e ) {
throw new MojoExecutionException ( " , e ) ;
} catch ( final <unk> e ) {
throw new MojoExecutionException ( " , e ) ;
} catch ( final IOException e ) {
throw new MojoExecutionException ( " , e ) ;
} catch ( final <unk> e ) {
throw new MojoExecutionException ( " , e ) ;
}
}
private String <unk> ( ) {
if ( <unk> ) {
return project . getArtifact ( ) . getFile ( ) . getName ( ) ;
}
if ( <unk> != null && ! " . equals ( <unk> ) ) {
return <unk> ;
}
return project . getBuild ( ) . <unk> ( ) + " ;
}
private void <unk> ( final File root ) throws MojoExecutionException {
try {
final Artifact artifact = <unk> . <unk> ( <unk> . <unk> , <unk> . <unk> , pluginVersion , " , " ) ;
resolver . resolve ( artifact , remoteRepositories , <unk> ) ;
final File <unk> = artifact . getFile ( ) ;
<unk> ( root , <unk> ) ;
} catch ( final <unk> e ) {
throw new MojoExecutionException ( " , e ) ;
} catch ( final ArtifactResolutionException e ) {
throw new MojoExecutionException ( " , e ) ;
} catch ( final MojoExecutionException e ) {
throw new MojoExecutionException ( " , e ) ;
}
}
private void <unk> ( final File destination , final File <unk> ) throws MojoExecutionException {
try {
final <unk> <unk> = <unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> ) ;
<unk> . <unk> ( destination ) ;
<unk> . <unk> ( true ) ;
<unk> . extract ( ) ;
} catch ( final <unk> e ) {
throw new MojoExecutionException ( " + <unk> . getName ( ) , e ) ;
} catch ( final <unk> e ) {
throw new MojoExecutionException ( " + <unk> . getName ( ) , e ) ;
} catch ( final IOException e ) {
throw new MojoExecutionException ( " + <unk> . getName ( ) , e ) ;
}
}
private static boolean delete ( final File from ) {
if ( ( from != null ) && from . exists ( ) ) {
if ( from . isDirectory ( ) ) {
for ( final File child : from . listFiles ( ) ) {
<unk> . delete ( child ) ;
}
}
return from . delete ( ) ;
}
return false ;
}
}
package org . <unk> . <unk> . sample . simple ;
import org . slf4j . Logger ;
import org . slf4j . LoggerFactory ;
public class Main {
private final Logger logger = LoggerFactory . getLogger ( Main . class ) ;
public static void main ( final String [ ] args ) {
new Main ( ) . sayHello ( ) ;
}
public void sayHello ( ) {
logger . info ( " ) ;
logger . info ( " ) ;
}
}
package org . <unk> . <unk> . boot ;
import java . io . IOException ;
import java . util . Map ;
import junit . framework . Assert ;
import org . junit . Test ;
public class <unk> {
private static String [ ] <unk> = new String [ ] { " , " , " , " , " , " , " , " } ;
@Test
public void <unk> ( ) {
final Map < String , String > arguments = Arguments . <unk> ( <unk> ) ;
Assert . assertNotNull ( arguments ) ;
}
@Test
public void <unk> ( ) throws IOException {
final Map < String , String > arguments = Arguments . <unk> ( <unk> , " ) ;
Assert . assertNotNull ( " , arguments . get ( " ) ) ;
Assert . assertEquals ( " , arguments . get ( " ) , " ) ;
}
@Test
public void <unk> ( ) {
final Map < String , String > arguments = Arguments . <unk> ( <unk> ) ;
Assert . assertNotNull ( " , arguments . get ( " ) ) ;
Assert . assertTrue ( " , Boolean . parseBoolean ( arguments . get ( " ) ) ) ;
}
@Test
public void <unk> ( ) {
final Map < String , String > arguments = Arguments . <unk> ( <unk> ) ;
Assert . assertNotNull ( " , arguments . get ( " ) ) ;
Assert . assertEquals ( " , arguments . get ( " ) , " ) ;
}
@Test
public void <unk> ( ) {
final Map < String , String > arguments = Arguments . <unk> ( <unk> ) ;
Assert . assertNotNull ( " , arguments . get ( " ) ) ;
Assert . assertEquals ( " , arguments . get ( " ) , " ) ;
Assert . assertNotNull ( " , arguments . get ( " ) ) ;
Assert . assertNull ( " , arguments . get ( " ) ) ;
Assert . assertEquals ( " , arguments . get ( " ) , " ) ;
Assert . assertNotNull ( " , arguments . get ( " ) ) ;
Assert . assertNull ( " , arguments . get ( " ) ) ;
Assert . assertEquals ( " , arguments . get ( " ) , " ) ;
}
@Test
public void <unk> ( ) {
final Map < String , String > arguments = Arguments . <unk> ( <unk> ) ;
Assert . assertNotNull ( arguments ) ;
final String [ ] result = Arguments . <unk> ( arguments ) ;
Assert . assertNotNull ( result ) ;
Assert . assertTrue ( " , result . length == <unk> . length ) ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
Assert . assertTrue ( " + <unk> [ i ] + " , lookup ( result , <unk> [ i ] ) ) ;
}
}
private Boolean lookup ( final String [ ] result , final String item ) {
for ( final String string : result ) {
if ( item . equals ( string ) ) {
return Boolean . TRUE ;
}
}
return Boolean . FALSE ;
}
@Test
public void <unk> ( ) {
final Map < String , String > arguments = Arguments . <unk> ( <unk> ) ;
Assert . assertTrue ( Arguments . <unk> ( arguments , " , null ) ) ;
Assert . assertFalse ( Arguments . <unk> ( arguments , " , null ) ) ;
Assert . assertTrue ( Arguments . <unk> ( arguments , " , Boolean . TRUE ) ) ;
Assert . assertFalse ( Arguments . <unk> ( arguments , " , Boolean . FALSE ) ) ;
Assert . assertFalse ( Arguments . <unk> ( arguments , " , Boolean . TRUE ) ) ;
Assert . assertTrue ( Arguments . <unk> ( arguments , " , Boolean . FALSE ) ) ;
}
@Test
public void <unk> ( ) {
final Map < String , String > arguments = Arguments . <unk> ( <unk> ) ;
Assert . assertEquals ( Integer . valueOf ( <num> ) , Arguments . <unk> ( arguments , " , <num> ) ) ;
Assert . assertNotSame ( Integer . valueOf (  <num> ) , Arguments . <unk> ( arguments , " ,  <num> ) ) ;
Assert . assertEquals ( Integer . valueOf ( <num> ) , Arguments . <unk> ( arguments , " , <num> ) ) ;
}
@Test
public void <unk> ( ) {
final Map < String , String > arguments = Arguments . <unk> ( <unk> ) ;
Assert . assertNotNull ( " , arguments . get ( " ) ) ;
Assert . assertEquals ( " , arguments . get ( " ) , " ) ;
}
}
package <unk> ;
import java . io . FileNotFoundException ;
import java . io . IOException ;
import java . io . Reader ;
import org . apache . <unk> . io . Resources ;
import org . apache . <unk> . session . <unk> ;
import org . apache . <unk> . session . <unk> ;
public class <unk> {
private static <unk> <unk> ;
static {
try {
String resource = " ;
Reader reader = Resources . <unk> ( resource ) ;
if ( <unk> == null ) {
<unk> = new <unk> ( ) . build ( reader ) ;
}
}
catch ( FileNotFoundException <unk> ) {
<unk> . printStackTrace ( ) ;
}
catch ( IOException <unk> ) {
<unk> . printStackTrace ( ) ;
}
}
public static <unk> <unk> ( ) {
return <unk> ;
}
}
package <unk> ;
import java . sql . Date ;
public class Person {
private int age ;
private String name ;
private Date date ;
public int getAge ( ) {
return age ;
}
public void setAge ( int age ) {
this . age = age ;
}
public String getName ( ) {
return name ;
}
public void setName ( String name ) {
this . name = name ;
}
public Date getDate ( ) {
return date ;
}
public void setDate ( Date date ) {
this . date = date ;
}
@Override
public String toString ( ) {
return " + age + " + name + " + date + " ;
}
}
package <unk> ;
import java . sql . * ;
import java . util . * ;
public class <unk> {
public static void main ( String [ ] args ) {
System . setProperty ( " , " ) ;
<unk> <unk> = new <unk> ( ) ;
List < Person > persons ;
try {
persons = <unk> . getPersons ( ) ;
for ( Person person : persons ) {
System . out . println ( person ) ;
}
} catch ( SQLException e ) {
e . printStackTrace ( ) ;
}
}
}
package <unk> ;
import java . sql . SQLException ;
import java . util . List ;
import org . apache . <unk> . session . <unk> ;
import org . apache . <unk> . session . <unk> ;
public class <unk> implements <unk> {
public List < Person > getPersons ( ) throws SQLException {
return null ;
}
private <unk> <unk> ;
public <unk> ( ) {
<unk> = <unk> . <unk> ( ) ;
}
@SuppressWarnings("unchecked")
public List < Person > selectAll ( ) {
<unk> session = <unk> . openSession ( ) ;
try {
List < Person > persons = session . selectList ( " ) ;
return persons ;
} finally {
session . close ( ) ;
}
}
}
package <unk> ;
import java . sql . SQLException ;
import java . util . List ;
public interface <unk> {
List < Person > getPersons ( ) throws SQLException ;
}
package ch . <unk> . <unk> ;
import com . sun . jna . Library ;
import com . sun . jna . Native ;
import com . sun . jna . Pointer ;
import com . sun . jna . ptr . <unk> ;
import java . io . File ;
import java . io . IOException ;
import java . nio . ByteBuffer ;
public class <unk> {
private static File <unk> = null ;
public static void <unk> ( File path ) {
<unk> = path ;
}
private static <unk> instance ;
public static <unk> <unk> ( ) {
if ( instance == null ) {
try {
String name = ( <unk> != null ) ? <unk> . getCanonicalPath ( ) : " ;
instance = ( <unk> ) Native . loadLibrary ( name , <unk> . class ) ; }
catch ( IOException e ) {
throw new RuntimeException ( " , e ) ; } }
return instance ;
}
public interface <unk> extends Library {
public Pointer <unk> ( String fn ) ;
public void <unk> ( Pointer dict ) ;
public int <unk> ( Pointer dict , byte [ ] word , int <unk> , ByteBuffer <unk> ) ;
public int <unk> ( Pointer dict , byte [ ] word , int <unk> , ByteBuffer <unk> ,
byte [ ] <unk> , <unk> rep , <unk> pos ,
<unk> cut ) ;
public int <unk> ( Pointer dict , byte [ ] word , int <unk> , ByteBuffer <unk> ,
ByteBuffer <unk> , <unk> rep , <unk> pos ,
<unk> cut , int <unk> , int <unk> , int <unk> , int <unk> ) ;
}
}
package ch . <unk> . <unk> ;
import java . io . BufferedReader ;
import java . io . File ;
import java . io . FileNotFoundException ;
import java . io . FileReader ;
import java . io . IOException ;
import java . nio . ByteBuffer ;
import java . nio . charset . Charset ;
import java . nio . charset . UnsupportedCharsetException ;
import java . text . <unk> ;
import java . text . <unk> ;
import java . util . HashMap ;
import java . util . Map ;
import java . util . regex . Matcher ;
import java . util . regex . Pattern ;
import com . sun . jna . Pointer ;
import com . sun . jna . ptr . <unk> ;
public class <unk> {
public static final byte <unk> = <num> ;
public static final byte <unk> = <num> ;
private static ByteBuffer <unk> = ByteBuffer . allocate ( <num> ) ;
private final static Map < File , Charset > <unk> = new HashMap < File , Charset > ( ) ;
private final Pointer dictionary ;
private final Charset charset ;
public <unk> ( File <unk> ) throws UnsupportedCharsetException , FileNotFoundException {
if ( ! <unk> . exists ( ) ) {
throw new FileNotFoundException ( " +
<unk> . getAbsolutePath ( ) + " ) ;
}
charset = getCharset ( <unk> ) ;
dictionary = <unk> . <unk> ( ) . <unk> ( <unk> . getAbsolutePath ( ) ) ;
}
public String <unk> ( String text , Character <unk> , Character <unk> ) {
if ( <unk> == null && <unk> == null )
return text ;
byte [ ] <unk> = <unk> ( text ) ;
StringBuffer <unk> = new StringBuffer ( ) ;
int i ;
for ( i = <num> ; i < <unk> . length ; i ++ ) {
<unk> . append ( text . charAt ( i ) ) ;
if ( <unk> != null && <unk> [ i ] == <unk> ) {
<unk> . append ( <unk> ) ;
} else if ( <unk> != null && <unk> [ i ] == <unk> ) {
<unk> . append ( <unk> ) ;
}
}
<unk> . append ( text . charAt ( i ) ) ;
return <unk> . toString ( ) ;
}
public byte [ ] <unk> ( String text ) {
Matcher matcher = Pattern . compile ( " ) . matcher ( text ) ;
StringBuffer <unk> = new StringBuffer ( ) ;
int pos = <num> ;
while ( matcher . find ( ) ) {
int start = matcher . start ( ) ;
int end = matcher . end ( ) ;
while ( pos ++ < start ) {
<unk> . append ( <num>  ) ;
}
String word = text . substring ( start , end ) ;
word = word . toLowerCase ( ) ;
byte [ ] <unk> = encode ( word ) ;
int wordSize = <unk> . length ;
if ( wordSize > <unk> . capacity ( ) ) {
<unk> = ByteBuffer . allocate ( wordSize * <num> ) ;
}
<unk> <unk> = new <unk> ( Pointer . NULL ) ;
<unk> . <unk> ( ) . <unk> ( dictionary , <unk> , wordSize , <unk> ,
null ,
<unk> ,
<unk> ,
<unk> ) ;
<unk> . append ( new String ( <unk> . array ( ) , <num> , word . length ( ) ) ) ;
pos = end ;
}
while ( pos < text . length ( ) ) {
<unk> . append ( <num>  ) ;
pos ++ ;
}
<unk> . deleteCharAt ( pos  <num> ) ;
byte [ ] <unk> = new byte [ <unk> . length ( ) ] ;
<unk> iter = new <unk> ( <unk> . toString ( ) ) ;
int i = <num> ;
for ( char c = iter . first ( ) ; c != <unk> . DONE ; c = iter . next ( ) ) {
<unk> [ i ++ ] = ( c & <num> ) > <num> ? <unk> : <num> ;
}
matcher = Pattern . compile ( " ) . matcher ( text ) ;
while ( matcher . find ( ) ) {
<unk> [ matcher . start ( ) + <num> ] = <unk> ;
}
return <unk> ;
}
public void close ( ) {
<unk> . <unk> ( ) . <unk> ( dictionary ) ;
}
private byte [ ] encode ( String str ) {
return charset . encode ( str ) . array ( ) ;
}
private static Charset getCharset ( File <unk> )
throws UnsupportedCharsetException , FileNotFoundException {
Charset cs = <unk> . get ( <unk> ) ;
if ( cs == null ) {
BufferedReader reader = null ;
try {
reader = new BufferedReader ( new FileReader ( <unk> ) ) ;
String charsetName = reader . readLine ( ) ;
charsetName = charsetName . replaceAll ( " , " ) ;
cs = Charset . forName ( charsetName ) ;
<unk> . put ( <unk> , cs ) ;
} catch ( IOException e ) {
throw new RuntimeException ( " ) ;
} finally {
if ( reader != null ) {
try {
reader . close ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
}
}
}
return cs ;
}
}
package org . <unk> . <unk> . generic . selenium ;
import org . <unk> . <unk> . generic . <unk> . <unk> ;
import org . openqa . selenium . WebDriver ;
import org . openqa . selenium . remote . <unk> ;
import org . slf4j . Logger ;
import org . slf4j . LoggerFactory ;
public class <unk> {
private static final Logger logger = LoggerFactory . getLogger ( <unk> . class ) ;
public static <unk> <unk> ( ) throws ClassNotFoundException , InstantiationException , IllegalAccessException {
String <unk> = <unk> . getProperties ( ) . getProperty ( <unk> . <unk> ) ;
logger . debug ( " + <unk> + " ) ;
Class <unk> = Thread . currentThread ( ) . getContextClassLoader ( ) . loadClass ( <unk> ) ;
<unk> <unk> = ( <unk> ) <unk> . newInstance ( ) ;
return <unk> ;
}
public static WebDriver getWebDriver ( ) throws ClassNotFoundException , InstantiationException , IllegalAccessException {
String <unk> = <unk> . getProperties ( ) . getProperty ( <unk> . <unk> ) ;
logger . debug ( " + <unk> + " ) ;
Class <unk> = Thread . currentThread ( ) . getContextClassLoader ( ) . loadClass ( <unk> ) ;
WebDriver <unk> = ( WebDriver ) <unk> . newInstance ( ) ;
return <unk> ;
}
}
package org . <unk> . <unk> . generic . <unk> ;
import java . io . File ;
import java . io . FileInputStream ;
import java . io . IOException ;
import java . io . InputStream ;
import java . util . Map . Entry ;
import java . util . Properties ;
import org . slf4j . Logger ;
import org . slf4j . LoggerFactory ;
public class <unk> {
private static boolean <unk> = false ;
private static final Logger logger = LoggerFactory . getLogger ( <unk> . class ) ;
private static final String <unk> = " ;
private static Properties <unk> = new Properties ( ) ;
public static final String <unk> = " ;
public static final String <unk> = " ;
private static final Properties loadProperties ( ) throws IOException {
Properties prop = new Properties ( ) ;
String <unk> = System . getProperties ( ) . getProperty ( <unk> ) ;
logger . info ( " + <unk> + " ) ;
InputStream in = new FileInputStream ( new File ( <unk> ) ) ;
prop . load ( in ) ;
in . close ( ) ;
return prop ;
}
public static final Properties getProperties ( ) {
return <unk> ;
}
public static boolean init ( ) throws IOException {
if ( <unk> ) {
return <unk> ;
}
logger . error ( " ) ;
<unk> = loadProperties ( ) ;
<unk> ( ) ;
<unk> = true ;
return <unk> ;
}
public static boolean <unk> ( ) {
return <unk> ;
}
private static void <unk> ( ) {
File tmpFile = new File ( " ) ;
for ( File <unk> : tmpFile . listFiles ( ) ) {
logger . error ( " + <unk> . getName ( ) ) ;
}
}
private static void <unk> ( ) {
for ( Entry < Object , Object > currentEntry : System . getProperties ( ) . entrySet ( ) ) {
logger . error ( " + currentEntry + " ) ;
}
}
private static void <unk> ( ) {
for ( Entry < Object , Object > currentEntry : <unk> . entrySet ( ) ) {
logger . error ( " + currentEntry + " ) ;
}
}
}
package org . <unk> . <unk> . generic . selenium ;
import java . io . IOException ;
import org . openqa . selenium . WebDriver ;
import org . openqa . selenium . remote . <unk> ;
import org . slf4j . Logger ;
import org . slf4j . LoggerFactory ;
public class <unk> {
private static WebDriver browser ;
private static final Logger logger = LoggerFactory . getLogger ( <unk> . class ) ;
public static WebDriver <unk> ( ) {
return browser ;
}
public static final void <unk> ( ) throws ClassNotFoundException , InstantiationException , IllegalAccessException , IOException {
logger . info ( " ) ;
browser = <unk> . getWebDriver ( ) ;
}
public static final void <unk> ( ) {
browser . close ( ) ;
logger . error ( " ) ;
}
}
package <unk> ;
import com . sun . speech . <unk> . * ;
import java . util . * ;
public class <unk>
{
private String <unk> ;
public void <unk> ( String speak , String voice )
{
<unk> = speak ;
try
{
<unk> <unk> = <unk> . getInstance ( ) ;
<unk> [ ] v = <unk> . <unk> ( ) ;
System . out . print ( " ) ;
for ( int i = <num> ; i < v . length ; i ++ )
System . out . println ( v [ i ] . getName ( ) + v [ i ] . getLocale ( ) ) ;
<unk> <unk> = <unk> . <unk> ( voice ) ;
<unk> sp = null ;
if ( <unk> != null )
sp = <unk> ;
else
System . out . println ( " ) ;
sp . allocate ( ) ;
sp . speak ( <unk> ) ;
sp . <unk> ( ) ;
}
catch ( Exception e )
{
e . printStackTrace ( ) ;
}
}
public static void main ( String [ ] args )
{
<unk> obj = new <unk> ( ) ;
obj . <unk> ( " , " ) ;
}
import <unk> . <unk> ;
import java . io . IOException ;
import java . io . PrintWriter ;
import javax . servlet . ServletException ;
import javax . servlet . http . HttpServlet ;
import javax . servlet . http . HttpServletRequest ;
import javax . servlet . http . HttpServletResponse ;
public class voice extends HttpServlet {
protected void processRequest ( HttpServletRequest request , HttpServletResponse response )
throws ServletException , IOException {
response . setContentType ( " ) ;
PrintWriter out = response . getWriter ( ) ;
try {
String s = request . getParameter ( " ) ;
<unk> obj = new <unk> ( ) ; out . println ( s ) ;
obj . <unk> ( s , " ) ;
} finally {
out . close ( ) ;
}
}
@Override
protected void doGet ( HttpServletRequest request , HttpServletResponse response )
throws ServletException , IOException {
processRequest ( request , response ) ;
}
@Override
protected void doPost ( HttpServletRequest request , HttpServletResponse response )
throws ServletException , IOException {
processRequest ( request , response ) ;
}
@Override
public String getServletInfo ( ) {
return " ;
}
}
package org . <unk> . <unk> . security . auth ;
import com . sun . <unk> . security . <unk> ;
import org . <unk> . <unk> . authentication . <unk> ;
import org . <unk> . <unk> . security . Credentials ;
import javax . security . auth . login . <unk> ;
public class <unk> extends <unk>
{
@Override
protected void <unk> ( ) throws <unk>
{
try
{
Credentials credentials = <unk> . <unk> . <unk> ( new String ( <unk> ( ) ) , true ) ;
<unk> . put ( " , credentials . getUsername ( ) ) ;
<unk> . put ( " , credentials . getPassword ( ) ) ;
}
catch ( Exception e )
{
<unk> le = new <unk> ( ) ;
le . initCause ( e ) ;
throw le ;
}
}
}
package org . <unk> . <unk> . security . auth ;
import com . sun . <unk> . security . <unk> ;
import com . sun . enterprise . security . auth . realm . <unk> ;
import com . sun . enterprise . security . auth . realm . <unk> ;
import com . sun . enterprise . security . auth . realm . NoSuchRealmException ;
import com . sun . enterprise . security . auth . realm . <unk> ;
import org . exoplatform . container . <unk> ;
import org . exoplatform . container . component . <unk> ;
import org . exoplatform . container . component . <unk> ;
import org . exoplatform . services . organization . <unk> ;
import org . exoplatform . services . organization . <unk> ;
import java . util . ArrayList ;
import java . util . Collections ;
import java . util . Enumeration ;
import java . util . LinkedList ;
import java . util . Properties ;
public class <unk> extends <unk>
{
@Override
protected void init ( Properties props ) throws <unk> , NoSuchRealmException
{
super . init ( props ) ;
String <unk> = props . getProperty ( <unk> . <unk> ) ;
this . setProperty ( <unk> . <unk> , <unk> ) ;
}
@Override
public Enumeration < Object > <unk> ( String user ) throws <unk> , <unk>
{
return Collections . enumeration ( new ArrayList < Object > ( ) ) ;
}
@Override
public String getAuthType ( )
{
return " ;
}
}
package org . <unk> . <unk> . security . auth ;
import com . sun . <unk> . security . <unk> ;
import org . exoplatform . container . <unk> ;
import org . exoplatform . container . <unk> ;
import org . exoplatform . container . <unk> ;
import org . exoplatform . container . <unk> ;
public abstract class <unk> extends <unk>
{
private static final String <unk> = " ;
public <unk> getContainer ( )
{
<unk> container = <unk> . <unk> ( ) ;
if ( container instanceof <unk> )
{
String <unk> = <unk> ( ) ;
container = <unk> . getInstance ( ) . <unk> ( <unk> ) ;
if ( container == null )
{
throw new RuntimeException ( "
+ " + <unk> + " ) ;
}
}
else if ( container == null )
{
throw new RuntimeException ( " ) ;
}
return container ;
}
private String <unk> ( )
{
if ( <unk> != null )
{
String <unk> = ( String ) <unk> . get ( <unk> ) ;
if ( <unk> != null && <unk> . length ( ) > <num> )
{
return <unk> ;
}
}
return <unk> . <unk> ;
}
}
package org . <unk> . <unk> . security . auth ;
import org . exoplatform . services . security . Authenticator ;
import org . exoplatform . services . security . <unk> ;
import org . exoplatform . services . security . <unk> ;
import org . exoplatform . services . security . <unk> ;
import org . exoplatform . services . security . <unk> ;
import javax . security . auth . login . <unk> ;
public class <unk> extends <unk>
{
@Override
protected void <unk> ( ) throws <unk>
{
try
{
String username = ( String ) <unk> . get ( " ) ;
String password = ( String ) <unk> . get ( " ) ;
Authenticator <unk> = ( Authenticator ) getContainer ( ) . <unk> ( Authenticator . class ) ;
if ( <unk> == null )
{ throw new <unk> ( " ) ; }
<unk> [ ] credentials =
new <unk> [ ] { new <unk> ( username ) , new <unk> ( password ) } ;
String userId = <unk> . <unk> ( credentials ) ;
<unk> identity = <unk> . <unk> ( userId ) ;
<unk> . put ( " , identity ) ;
<unk> . put ( " , userId ) ;
_subject . <unk> ( ) . add ( password ) ;
_subject . <unk> ( ) . add ( new <unk> ( username ) ) ;
}
catch ( final Throwable e )
{
<unk> le = new <unk> ( e . getMessage ( ) ) ;
le . initCause ( e ) ;
throw le ;
}
}
}
package org . <unk> . <unk> . security . auth ;
import org . exoplatform . services . security . Authenticator ;
import org . exoplatform . services . security . <unk> ;
import org . exoplatform . services . security . <unk> ;
import org . exoplatform . services . security . <unk> ;
import org . exoplatform . services . security . <unk> ;
import org . exoplatform . services . security . <unk> ;
import org . exoplatform . services . security . <unk> . <unk> ;
import org . exoplatform . services . security . <unk> . <unk> ;
import java . security . Principal ;
import java . util . Set ;
import javax . security . auth . login . <unk> ;
public class <unk> extends <unk>
{
private <unk> identity ;
@Override
protected void <unk> ( ) throws <unk>
{
try
{
if ( <unk> . containsKey ( " ) )
{
identity = ( <unk> ) <unk> . get ( " ) ;
}
else
{
String username = getUsername ( ) ;
String password = new String ( <unk> ( ) ) ;
Authenticator <unk> = ( Authenticator ) getContainer ( ) . <unk> ( Authenticator . class ) ;
if ( <unk> == null )
{ throw new <unk> ( " ) ; }
<unk> [ ] credentials =
new <unk> [ ] { new <unk> ( username ) , new <unk> ( password ) } ;
String userId = <unk> . <unk> ( credentials ) ;
identity = <unk> . <unk> ( userId ) ;
<unk> . put ( " , userId ) ;
_subject . <unk> ( ) . add ( password ) ;
_subject . <unk> ( ) . add ( new <unk> ( username ) ) ;
}
}
catch ( Throwable e )
{
throw new <unk> ( e . getMessage ( ) ) ;
}
}
@Override
public boolean commit ( ) throws <unk>
{
try
{
String sl = ( String ) <unk> . get ( " ) ;
boolean <unk> = ( sl != null && ( sl . equalsIgnoreCase ( " ) || sl . equalsIgnoreCase ( " ) ) ) ;
<unk> <unk> =
( <unk> ) getContainer ( ) . <unk> ( <unk> . class ) ;
if ( <unk> && <unk> . getIdentity ( identity . getUserId ( ) ) != null )
{ throw new <unk> ( " + identity . getUserId ( ) + " ) ; }
identity . setSubject ( _subject ) ;
<unk> . register ( identity ) ;
Set < Principal > <unk> = _subject . <unk> ( ) ;
for ( String role : identity . getRoles ( ) )
{ <unk> . add ( new <unk> ( role ) ) ; }
<unk> . add ( new <unk> ( identity . getUserId ( ) ) ) ;
return true ;
}
catch ( Throwable e )
{
throw new <unk> ( e . getMessage ( ) ) ;
}
}
}
import org . lwjgl . LWJGLException ;
import org . lwjgl . opengl . Display ;
import org . lwjgl . opengl . DisplayMode ;
import org . omg . CORBA . TIMEOUT ;
public class Main {
public void start ( ) {
try {
Display . setDisplayMode ( new DisplayMode ( <num> , <num> ) ) ;
Display . create ( ) ;
} catch ( LWJGLException e ) {
e . printStackTrace ( ) ;
System . exit ( <num> ) ;
}
while ( ! Display . isCloseRequested ( ) ) {
try {
Thread . sleep ( <num> ) ;
} catch ( InterruptedException ie ) {
System . out . println ( ie . getMessage ( ) ) ;
}
Display . update ( ) ;
}
Display . destroy ( ) ;
}
public static void main ( String [ ] argv ) {
Main <unk> = new Main ( ) ;
<unk> . start ( ) ;
}
}
package org . exoplatform . valves ;
import javax . servlet . ServletException ;
import javax . servlet . http . HttpServletRequest ;
import java . io . IOException ;
import java . util . Random ;
import java . util . logging . Level ;
import java . util . logging . Logger ;
import org . apache . catalina . connector . Request ;
import org . apache . catalina . connector . Response ;
import org . apache . catalina . valves . ValveBase ;
public class <unk> extends ValveBase
{
protected static Logger log = Logger . getLogger ( <unk> . class . getName ( ) ) ;
private String <unk> ;
private String <unk> ;
private String files ;
@Override
public void invoke ( Request request , Response response ) throws IOException , ServletException
{
Range latency = null ;
try
{
if ( <unk> != null )
{
String [ ] tmp = <unk> . replaceAll ( " , " ) . split ( " ) ;
latency = new Range ( Integer . parseInt ( tmp [ <num> ] ) , Integer . parseInt ( tmp [ <num> ] ) ) ;
}
else
{
latency = Range . decode ( <unk> ) ;
}
}
catch ( Exception e )
{
}
if ( latency == null )
{
latency = new Range ( <num> , <num> ) ;
}
files = files == null ? " : files ;
for ( String file : files . replaceAll ( " , " ) . split ( " ) )
{
String uri = ( ( HttpServletRequest ) request ) . getRequestURI ( ) ;
if ( uri . endsWith ( file ) )
{
try
{
int tmp = latency . <unk> ( ) ;
log . log ( Level . INFO , " , new Object [ ] { uri , tmp } ) ;
Thread . sleep ( tmp ) ;
}
catch ( InterruptedException e )
{
log . log ( Level . SEVERE , e . getMessage ( ) ) ;
}
break ;
}
}
getNext ( ) . invoke ( request , response ) ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public String getFiles ( )
{
return files ;
}
public void setFiles ( String files )
{
this . files = files ;
}
private static class Range
{
static Range LOW = new Range ( <num> , <num> ) ;
static Range AVERAGE = new Range ( <num> , <num> ) ;
static Range <unk> = new Range ( <num> , <num> ) ;
int min ;
int max ;
public Range ( int min , int max )
{
this . min = min ;
this . max = max ;
}
public int <unk> ( )
{
return new Random ( ) . nextInt ( max  min + <num> ) + min ;
}
public static Range decode ( String mode )
{
mode = mode == null ? " : mode . toLowerCase ( ) ;
if ( " . equals ( mode ) )
{
return LOW ;
}
else if ( " . equals ( mode ) )
{
return AVERAGE ;
}
else if ( " . equals ( mode ) )
{
return <unk> ;
}
return null ;
}
}
}
import java . awt . BorderLayout ;
import java . awt . Component ;
import java . awt . Dimension ;
import java . awt . event . ActionEvent ;
import java . awt . event . ActionListener ;
import java . io . IOException ;
import javax . swing . * ;
import javax . swing . event . ListSelectionEvent ;
import javax . swing . event . ListSelectionListener ;
public class <unk> extends JPanel implements ListSelectionListener , ActionListener {
private <unk> <unk> ;
private static final String <unk> = " ;
private JFrame frame = new JFrame ( <unk> ) ;
private JPanel mainPanel = new JPanel ( ) ;
private JPanel <unk> = new JPanel ( ) ;
private JList <unk> ;
private JScrollPane <unk> ;
private <unk> <unk> ;
private JScrollPane <unk> ;
private JPanel <unk> = new JPanel ( ) ;
private static final JLabel <unk> = new JLabel ( " ) ;
private JList <unk> = new JList ( ) ;
private static final JLabel <unk> = new JLabel ( " ) ;
private JList <unk> = new JList ( ) ; ;
private static final JLabel <unk> = new JLabel ( " ) ;
private JList <unk> = new JList ( ) ;
private JButton <unk> ;
private boolean <unk> = false ;
public <unk> ( )
{
<unk> = new <unk> ( ) ;
try {
<unk> . load ( " ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
System . out . println ( <unk> . toString ( ) ) ;
<unk> ( ) ;
}
public static void main ( String [ ] args ) {
<unk> <unk> = new <unk> ( ) ;
}
private void <unk> ( )
{
frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
frame . setResizable ( true ) ;
frame . getContentPane ( ) . add ( mainPanel , BorderLayout . CENTER ) ;
mainPanel . setLayout ( new BorderLayout ( ) ) ;
mainPanel . setPreferredSize ( new Dimension ( <num> , <num> ) ) ;
mainPanel . add ( <unk> , BorderLayout . WEST ) ;
<unk> . setLayout ( new BorderLayout ( ) ) ;
<unk> = new JList ( ( <unk> . <unk> ( ) ) . toArray ( ) ) ;
<unk> . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ;
<unk> . addListSelectionListener ( ( ListSelectionListener ) this ) ;
if ( <unk> . isSelectionEmpty ( ) )
{ <unk> . setSelectedIndex ( <num> ) ;
<unk> ( ) ;
}
<unk> = new JScrollPane ( <unk> ,
JScrollPane . VERTICAL_SCROLLBAR_ALWAYS , JScrollPane . HORIZONTAL_SCROLLBAR_NEVER ) ;
<unk> . setPreferredSize ( new Dimension ( <num> , <num> ) ) ;
<unk> . add ( <unk> , BorderLayout . WEST ) ;
<unk> = new JScrollPane ( <unk> ,
JScrollPane . VERTICAL_SCROLLBAR_ALWAYS , JScrollPane . HORIZONTAL_SCROLLBAR_NEVER ) ;
<unk> . setPreferredSize ( new Dimension ( <num> , <num> ) ) ;
<unk> . add ( <unk> , BorderLayout . EAST ) ;
<unk> . setLayout ( new BoxLayout ( <unk> , BoxLayout . Y_AXIS ) ) ;
<unk> . setAlignmentX ( Component . <unk> ) ;
<unk> . setAlignmentX ( Component . <unk> ) ;
<unk> . setAlignmentX ( Component . <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> . add ( <unk> ) ;
<unk> = new JButton ( " ) ;
<unk> . setActionCommand ( " ) ;
<unk> . add ( <unk> , BorderLayout . SOUTH ) ;
<unk> . addActionListener ( this ) ;
frame . pack ( ) ;
frame . setVisible ( true ) ;
}
private void <unk> ( )
{
if ( <unk> )
{
<unk> . setListData ( ( <unk> . <unk> ( ) ) . toArray ( ) ) ;
<unk> = false ;
}
if ( <unk> . getModel ( ) . getSize ( ) > <num> && <unk> . isSelectionEmpty ( ) )
<unk> . setSelectedIndex ( <num> ) ;
else
{
<unk> ( ) ;
mainPanel . validate ( ) ;
}
}
private void <unk> ( )
{
if ( <unk> . isSelectionEmpty ( ) )
{
<unk> . setVisible ( false ) ;
<unk> . setVisible ( false ) ;
<unk> . setVisible ( false ) ;
}
else
{
<unk> . setListData ( <unk> . <unk> [ <num> ] . toArray ( ) ) ;
<unk> . setListData ( <unk> . <unk> [ <num> ] . toArray ( ) ) ;
<unk> . setListData ( <unk> . <unk> [ <num> ] . toArray ( ) ) ;
<unk> . setVisible ( true ) ;
<unk> . setVisible ( true ) ;
<unk> . setVisible ( true ) ;
}
}
private void <unk> ( )
{
if ( ! <unk> . isSelectionEmpty ( ) )
{
System . out . println ( " + <unk> . isSelectionEmpty ( ) ) ;
System . out . println ( " + <unk> . toString ( ) ) ;
<unk> . <unk> ( <unk> . toString ( ) ) ;
<unk> = true ;
<unk> ( ) ;
}
}
@Override
public void actionPerformed ( ActionEvent e ) {
if ( " . equals ( e . getActionCommand ( ) ) )
{
<unk> ( ) ;
}
}
@Override
public void valueChanged ( ListSelectionEvent e ) {
if ( e . getValueIsAdjusting ( ) == false )
{
if ( e . getSource ( ) . equals ( <unk> ) )
{
if ( <unk> . isSelectionEmpty ( ) )
<unk> = null ;
else
{
<unk> = <unk> . <unk> ( ( <unk> . getSelectedValue ( ) . toString ( ) ) ) ;
System . out . println ( " + <unk> . getSelectedValue ( ) ) ;
<unk> ( ) ;
}
}
}
}
}
import java . util . StringTokenizer ;
public class <unk> extends Object {
private static final int <unk> = <num> ;
private static final int <unk> = <num> ;
private String handle ;
private String [ ] <unk> ;
private int [ ] <unk> = new int [ <unk> ] ;
private String <unk> ;
private int <unk> = <num> ;
public <unk> ( )
{
<unk> ( new String [ <unk> ] ) ;
setHandle ( " ) ;
<unk> = null ;
}
public String toString ( )
{
return getHandle ( ) ;
}
public String getData ( )
{
String output = " + getHandle ( ) + " + <unk> + " + <unk> ;
output += " ;
output += " ;
for ( int i = <num> ; i < <unk> . length ; i ++ )
{
output += <unk> [ i ] ;
if ( i + <num> < <unk> . length )
{ output += " ; }
}
output += " ;
output += " ;
for ( int i = <num> ; i < <unk> . length ; i ++ )
{
output += " + ( i + <num> ) + " + <unk> [ i ] ;
if ( i + <num> < <unk> . length )
{ output += " ; }
}
output += " ;
return output ;
}
private String [ ] <unk> ( String <unk> ) throws Exception
{
String [ ] myString = <unk> . split ( " ) ;
if ( myString . length != <unk> ) {
throw new Exception ( " +
" + <unk> ) ;
}
return myString ;
}
public int calculate ( )
{
return <num> ;
}
public String [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( String [ ] <unk> ) {
this . <unk> = <unk> ;
}
public void <unk> ( String <unk> )
{
try {
this . <unk> = <unk> ( <unk> ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public String getHandle ( ) {
return handle ;
}
public void setHandle ( String handle ) {
this . handle = handle ;
}
public void <unk> ( String <unk> )
{
this . <unk> = <unk> ;
}
public String <unk> ( )
{
return <unk> ;
}
public void <unk> ( int <unk> )
{
try {
if ( <unk> > <num> )
{
throw new Exception ( " + <unk> ) ;
}
this . <unk> = <unk> ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public void <unk> ( String str )
{
<unk> ( Integer . parseInt ( str ) ) ;
}
public int <unk> ( )
{
return <unk> ;
}
public int [ ] <unk> ( ) {
return <unk> ;
}
public void <unk> ( String str )
{
String <unk> = str . replace ( " , " ) ;
for ( int i = <num> ; i < <unk> . length ( )  <num> ; i ++ )
{
<unk> [ i ] = Character . getNumericValue ( <unk> . charAt ( i ) ) ;
}
}
}
import java . io . * ;
import java . util . ArrayList ;
import javax . swing . * ;
import javax . swing . event . ListSelectionEvent ;
public class <unk> {
public ArrayList < <unk> > <unk> ;
public ArrayList < <unk> > <unk> ;
public <unk> ( )
{
this . <unk> = new ArrayList < <unk> > ( ) ;
this . <unk> = new ArrayList < <unk> > ( ) ;
}
public void <unk> ( String newName )
{
<unk> . add ( new <unk> ( newName ) ) ;
}
public ArrayList < <unk> > <unk> ( )
{
return <unk> ;
}
public void load ( String path ) throws IOException
{
BufferedReader inputStream = null ;
try {
inputStream = new BufferedReader ( new FileReader ( path ) ) ;
String <unk> ;
while ( ( <unk> = inputStream . readLine ( ) ) != null )
{
if ( <unk> . equals ( " ) )
<unk> ( inputStream ) ;
else if ( <unk> . equals ( " ) )
{
}
else
{
try {
throw new Exception ( " + <unk> ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
}
}
finally
{
if ( inputStream != null )
inputStream . close ( ) ;
}
}
public void <unk> ( BufferedReader inputStream ) throws IOException
{
String <unk> ;
<unk> = inputStream . readLine ( ) ;
if ( <unk> ( <unk> ) )
{
try {
throw new Exception ( " + <unk> ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
<unk> <unk> = new <unk> ( <unk> ) ;
while ( ! <unk> . equals ( " ) )
{
<unk> = inputStream . readLine ( ) ;
if ( <unk> . equals ( " ) )
{
<unk> = inputStream . readLine ( ) ;
<unk> <unk> = <unk> ( <unk> ) ;
<unk> . <unk> ( <unk> , <unk> . <unk> ( ) ) ;
}
}
<unk> . add ( <unk> ) ;
}
public <unk> <unk> ( String parseString ) throws IOException
{
String [ ] <unk> = parseString . split ( " ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . setHandle ( <unk> [ <num> ] ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
<unk> . <unk> ( <unk> [ <num> ] ) ;
return <unk> ;
}
public void save ( )
{
}
public boolean <unk> ( String <unk> )
{
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ )
{
if ( <unk> . get ( i ) . <unk> . equals ( <unk> ) )
{
return true ;
}
}
return false ;
}
public <unk> <unk> ( String <unk> )
{
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ )
{
if ( <unk> . get ( i ) . <unk> . equals ( <unk> ) )
{
return <unk> . get ( i ) ;
}
}
try {
throw new Exception ( " ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
return null ;
}
public void <unk> ( String <unk> )
{
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ )
{
if ( <unk> . get ( i ) . <unk> . equals ( <unk> ) )
{
<unk> . remove ( i ) ;
}
}
}
public String toString ( )
{
String output = " ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ )
{
output += ( <unk> . get ( i ) ) . getData ( ) ;
}
return output ;
}
}
import java . util . ArrayList ;
import java . util . Collection ;
import java . util . Map ;
import java . util . Set ;
import javax . swing . JPanel ;
public class <unk> extends Object {
public String <unk> ;
public ArrayList < <unk> > [ ] <unk> = new ArrayList [ <num> ] ;
public <unk> ( String setName )
{
this . <unk> = setName ;
<unk> [ <num> ] = new ArrayList < <unk> > ( ) ;
<unk> [ <num> ] = new ArrayList < <unk> > ( ) ;
<unk> [ <num> ] = new ArrayList < <unk> > ( ) ;
}
public void <unk> ( <unk> <unk> , int shift )
{
try {
if ( <unk> [ shift  <num> ] . contains ( <unk> ) ) {
throw new Exception ( " ) ;
}
try {
if ( shift > <num> || shift < <num> )
{
throw new Exception ( " + shift ) ;
}
<unk> [ shift  <num> ] . add ( <unk> ) ;
}
catch ( Exception d )
{
d . printStackTrace ( ) ;
}
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public boolean contains ( String handle )
{
for ( int i = <num> ; i < <unk> . length ; i ++ )
{
for ( int n = <num> ; n < <unk> [ i ] . size ( ) ; n ++ )
{
if ( <unk> [ i ] . get ( n ) . getHandle ( ) == handle )
{
return true ;
}
}
}
return false ;
}
public <unk> remove ( String handle )
{
for ( int i = <num> ; i < <unk> . length ; i ++ )
{
for ( int n = <num> ; n < <unk> [ i ] . size ( ) ; n ++ )
{
if ( <unk> [ i ] . get ( n ) . getHandle ( ) == handle )
{
System . out . println ( " ) ;
return <unk> [ i ] . remove ( n ) ;
}
}
}
return null ;
}
public String toString ( )
{
return <unk> ;
}
public String getData ( )
{
String output = " ;
output += <unk> + " ;
for ( int i = <num> ; i < <unk> . length ; i ++ )
{
output += " + ( i + <num> ) + " ;
for ( int n = <num> ; n < <unk> [ i ] . size ( ) ; n ++ )
{
output += <unk> [ i ] . get ( n ) . getData ( ) ;
}
output += " ;
}
return output ;
}
}
public class <unk> {
public static void main ( String [ ] args ) {
System . out . println ( " ) ;
<unk> <unk> = new <unk> ( ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( " ) ;
<unk> . <unk> ( " ) ;
<unk> . setHandle ( " ) ;
System . out . println ( <unk> . getData ( ) ) ;
System . out . println ( " ) ;
<unk> <unk> = new <unk> ( " ) ;
<unk> . <unk> ( <unk> , <num> ) ;
System . out . println ( <unk> . getData ( ) ) ;
<unk> . remove ( " ) ;
System . out . println ( <unk> . getData ( ) ) ;
}
}
package com . google . zxing . integration . android ;
import java . util . Arrays ;
import java . util . Collection ;
import java . util . Collections ;
import java . util . List ;
import android . app . Activity ;
import android . app . AlertDialog ;
import android . content . ActivityNotFoundException ;
import android . content . DialogInterface ;
import android . content . Intent ;
import android . content . pm . PackageManager ;
import android . content . pm . ResolveInfo ;
import android . net . Uri ;
import android . util . Log ;
public class IntentIntegrator {
public static final int REQUEST_CODE = <num> ;
private static final String TAG = IntentIntegrator . class . getSimpleName ( ) ;
public static final String DEFAULT_TITLE = " ;
public static final String DEFAULT_MESSAGE =
" ;
public static final String DEFAULT_YES = " ;
public static final String DEFAULT_NO = " ;
private static final String BS_PACKAGE = " ;
public static final Collection < String > PRODUCT_CODE_TYPES = list ( " , " , " , " , " ) ;
public static final Collection < String > ONE_D_CODE_TYPES =
list ( " , " , " , " , " , " , " ,
" , " , " ) ;
public static final Collection < String > QR_CODE_TYPES = Collections . singleton ( " ) ;
public static final Collection < String > DATA_MATRIX_TYPES = Collections . singleton ( " ) ;
public static final Collection < String > ALL_CODE_TYPES = null ;
public static final Collection < String > TARGET_BARCODE_SCANNER_ONLY = Collections . singleton ( BS_PACKAGE ) ;
public static final Collection < String > TARGET_ALL_KNOWN = list (
BS_PACKAGE ,
" ,
"
) ;
private final Activity activity ;
private String title ;
private String message ;
private String buttonYes ;
private String buttonNo ;
private Collection < String > targetApplications ;
public IntentIntegrator ( Activity activity ) {
this . activity = activity ;
title = DEFAULT_TITLE ;
message = DEFAULT_MESSAGE ;
buttonYes = DEFAULT_YES ;
buttonNo = DEFAULT_NO ;
targetApplications = TARGET_ALL_KNOWN ;
}
public String getTitle ( ) {
return title ;
}
public void setTitle ( String title ) {
this . title = title ;
}
public void setTitleByID ( int titleID ) {
title = activity . getString ( titleID ) ;
}
public String getMessage ( ) {
return message ;
}
public void setMessage ( String message ) {
this . message = message ;
}
public void setMessageByID ( int messageID ) {
message = activity . getString ( messageID ) ;
}
public String getButtonYes ( ) {
return buttonYes ;
}
public void setButtonYes ( String buttonYes ) {
this . buttonYes = buttonYes ;
}
public void setButtonYesByID ( int buttonYesID ) {
buttonYes = activity . getString ( buttonYesID ) ;
}
public String getButtonNo ( ) {
return buttonNo ;
}
public void setButtonNo ( String buttonNo ) {
this . buttonNo = buttonNo ;
}
public void setButtonNoByID ( int buttonNoID ) {
buttonNo = activity . getString ( buttonNoID ) ;
}
public Collection < String > getTargetApplications ( ) {
return targetApplications ;
}
public void setTargetApplications ( Collection < String > targetApplications ) {
this . targetApplications = targetApplications ;
}
public void setSingleTargetApplication ( String targetApplication ) {
this . targetApplications = Collections . singleton ( targetApplication ) ;
}
public AlertDialog initiateScan ( ) {
return initiateScan ( ALL_CODE_TYPES ) ;
}
public AlertDialog initiateScan ( Collection < String > desiredBarcodeFormats ) {
Intent intentScan = new Intent ( BS_PACKAGE + " ) ;
intentScan . addCategory ( Intent . CATEGORY_DEFAULT ) ;
if ( desiredBarcodeFormats != null ) {
StringBuilder joinedByComma = new StringBuilder ( ) ;
for ( String format : desiredBarcodeFormats ) {
if ( joinedByComma . length ( ) > <num> ) {
joinedByComma . append ( ,' ) ;
}
joinedByComma . append ( format ) ;
}
intentScan . putExtra ( " , joinedByComma . toString ( ) ) ;
}
String targetAppPackage = findTargetAppPackage ( intentScan ) ;
if ( targetAppPackage == null ) {
return showDownloadDialog ( ) ;
}
intentScan . setPackage ( targetAppPackage ) ;
intentScan . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ;
intentScan . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET ) ;
startActivityForResult ( intentScan , REQUEST_CODE ) ;
return null ;
}
protected void startActivityForResult ( Intent intent , int code ) {
activity . startActivityForResult ( intent , code ) ;
}
private String findTargetAppPackage ( Intent intent ) {
PackageManager pm = activity . getPackageManager ( ) ;
List < ResolveInfo > availableApps = pm . queryIntentActivities ( intent , PackageManager . MATCH_DEFAULT_ONLY ) ;
if ( availableApps != null ) {
for ( ResolveInfo availableApp : availableApps ) {
String packageName = availableApp . activityInfo . packageName ;
if ( targetApplications . contains ( packageName ) ) {
return packageName ;
}
}
}
return null ;
}
private AlertDialog showDownloadDialog ( ) {
AlertDialog . Builder downloadDialog = new AlertDialog . Builder ( activity ) ;
downloadDialog . setTitle ( title ) ;
downloadDialog . setMessage ( message ) ;
downloadDialog . setPositiveButton ( buttonYes , new DialogInterface . OnClickListener ( ) {
@Override
public void onClick ( DialogInterface dialogInterface , int i ) {
Uri uri = Uri . parse ( " + BS_PACKAGE ) ;
Intent intent = new Intent ( Intent . ACTION_VIEW , uri ) ;
try {
activity . startActivity ( intent ) ;
} catch ( ActivityNotFoundException anfe ) {
Log . w ( TAG , " ) ;
}
}
} ) ;
downloadDialog . setNegativeButton ( buttonNo , new DialogInterface . OnClickListener ( ) {
@Override
public void onClick ( DialogInterface dialogInterface , int i ) { }
} ) ;
return downloadDialog . show ( ) ;
}
public static IntentResult parseActivityResult ( int requestCode , int resultCode , Intent intent ) {
if ( requestCode == REQUEST_CODE ) {
if ( resultCode == Activity . RESULT_OK ) {
String contents = intent . getStringExtra ( " ) ;
String formatName = intent . getStringExtra ( " ) ;
byte [ ] rawBytes = intent . getByteArrayExtra ( " ) ;
int intentOrientation = intent . getIntExtra ( " , Integer . MIN_VALUE ) ;
Integer orientation = intentOrientation == Integer . MIN_VALUE ? null : intentOrientation ;
String errorCorrectionLevel = intent . getStringExtra ( " ) ;
return new IntentResult ( contents ,
formatName ,
rawBytes ,
orientation ,
errorCorrectionLevel ) ;
}
return new IntentResult ( ) ;
}
return null ;
}
public void shareText ( CharSequence text ) {
Intent intent = new Intent ( ) ;
intent . addCategory ( Intent . CATEGORY_DEFAULT ) ;
intent . setAction ( BS_PACKAGE + " ) ;
intent . putExtra ( " , " ) ;
intent . putExtra ( " , text ) ;
String targetAppPackage = findTargetAppPackage ( intent ) ;
if ( targetAppPackage == null ) {
showDownloadDialog ( ) ;
} else {
intent . setPackage ( targetAppPackage ) ;
intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ;
intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET ) ;
activity . startActivity ( intent ) ;
}
}
private static Collection < String > list ( String . . . values ) {
return Collections . unmodifiableCollection ( Arrays . asList ( values ) ) ;
}
}
package com . google . zxing . integration . android ;
public final class IntentResult {
private final String contents ;
private final String formatName ;
private final byte [ ] rawBytes ;
private final Integer orientation ;
private final String errorCorrectionLevel ;
IntentResult ( ) {
this ( null , null , null , null , null ) ;
}
IntentResult ( String contents ,
String formatName ,
byte [ ] rawBytes ,
Integer orientation ,
String errorCorrectionLevel ) {
this . contents = contents ;
this . formatName = formatName ;
this . rawBytes = rawBytes ;
this . orientation = orientation ;
this . errorCorrectionLevel = errorCorrectionLevel ;
}
public String getContents ( ) {
return contents ;
}
public String getFormatName ( ) {
return formatName ;
}
public byte [ ] getRawBytes ( ) {
return rawBytes ;
}
public Integer getOrientation ( ) {
return orientation ;
}
public String getErrorCorrectionLevel ( ) {
return errorCorrectionLevel ;
}
@Override
public String toString ( ) {
StringBuilder dialogText = new StringBuilder ( <num> ) ;
dialogText . append ( " ) . append ( formatName ) . append ( \n' ) ;
dialogText . append ( " ) . append ( contents ) . append ( \n' ) ;
int rawBytesLength = rawBytes == null ? <num> : rawBytes . length ;
dialogText . append ( " ) . append ( rawBytesLength ) . append ( " ) ;
dialogText . append ( " ) . append ( orientation ) . append ( \n' ) ;
dialogText . append ( " ) . append ( errorCorrectionLevel ) . append ( \n' ) ;
return dialogText . toString ( ) ;
}
package org . <unk> . <unk> . mapper ;
import java . util . Map ;
import org . <unk> . <unk> . models . Player ;
import org . <unk> . android . <unk> . <unk> ;
public class <unk> extends org . <unk> . android . model . <unk>
{
public <unk> ( <unk> <unk> )
{
super ( <unk> ) ;
}
@Override
protected Player creator ( Map < String , Object > data )
{
return new Player ( data ) ;
}
}
package org . <unk> . <unk> ;
import org . <unk> . android . exceptions . <unk> ;
import org . <unk> . android . exceptions . HttpException ;
import org . <unk> . android . exceptions . <unk> ;
import org . <unk> . android . model . <unk> ;
import android . app . Activity ;
import android . app . ProgressDialog ;
import android . content . Context ;
import android . content . Intent ;
import android . os . AsyncTask ;
import android . os . Bundle ;
import android . view . View ;
import android . widget . Toast ;
public class <unk> extends Activity {
public final static int <unk> = <num> ;
public static <unk> <unk> ;
public static Context c ;
@Override
public void onCreate ( Bundle savedInstanceState )
{
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
<unk> = null ;
c = this . getApplicationContext ( ) ;
}
@Override
public void onStart ( )
{
super . onStart ( ) ;
}
@Override
public void onResume ( )
{
super . onResume ( ) ;
}
public void <unk> ( View v )
{
System . out . println ( " ) ;
showNotification ( " ) ;
}
public void showInfo ( View v )
{
System . out . println ( " ) ;
showNotification ( " ) ;
}
public void <unk> ( View v )
{
new <unk> ( ) . execute ( ) ;
}
public void <unk> ( )
{
System . out . println ( " ) ;
showNotification ( " ) ;
Intent intent = new Intent ( " ) ;
intent . putExtra ( " , " ) ;
startActivityForResult ( intent , <unk> ) ;
}
public void onActivityResult ( int requestCode , int resultCode , Intent intent )
{
if ( intent != null )
{
String response = intent . getStringExtra ( " ) ;
<unk> <unk> = new <unk> ( response ) ;
if ( <unk> . isValid ( ) )
{
showNotification ( " + <unk> . getTeam ( ) ) ;
showNotification ( " + <unk> . getGameId ( ) ) ;
showNotification ( " + <unk> . <unk> ( ) ) ;
<unk> = <unk> ;
Intent myIntent = new Intent ( c , <unk> . class ) ;
startActivityForResult ( myIntent , <num> ) ;
try
{
}
catch ( Exception e )
{
e . printStackTrace ( ) ;
}
}
else
{
showNotification ( " ) ;
}
}
}
public static void showNotification ( String data )
{
<unk> . showNotification ( data , Toast . LENGTH_SHORT ) ;
}
public static void showNotification ( String data , int duration )
{
Toast toast ;
toast = Toast . makeText ( <unk> . c , data , duration ) ;
toast . show ( ) ;
}
private class <unk> extends AsyncTask < String , Integer , String >
{
private ProgressDialog dialog ;
@Override
protected void onPreExecute ( )
{
super . onPreExecute ( ) ;
dialog = ProgressDialog . show ( <unk> . this , " ,
" , true ) ;
}
protected String doInBackground ( String . . . details )
{
<unk> <unk> = new <unk> ( <unk> . <unk> ) ;
try
{
<unk> . <unk> . <unk> ( <unk> . <unk> ( ) ) ;
}
catch ( <unk> f )
{
return " ;
}
catch ( <unk> e )
{
return " ;
}
catch ( HttpException e )
{
e . printStackTrace ( ) ;
return " ;
}
return null ;
}
protected void onPostExecute ( String error )
{
dialog . cancel ( ) ;
if ( error == null )
{
<unk> ( ) ;
}
else
{
showNotification ( error ) ;
}
}
}
}
package org . <unk> . <unk> ;
import com . google . zxing . integration . android . IntentIntegrator ;
import android . app . Activity ;
import android . os . Bundle ;
public class <unk> extends Activity {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
}
@Override
public void onStart ( ) {
super . onStart ( ) ;
}
@Override
public void onResume ( ) {
IntentIntegrator integrator = new IntentIntegrator ( this ) ;
integrator . initiateScan ( ) ;
}
}
package org . <unk> . <unk> ;
public final class R {
public static final class array {
public static final int <unk> = <num> ;
}
public static final class attr {
}
public static final class color {
public static final int contents_text = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int possible_result_points = <num> ;
public static final int result_image_border = <num> ;
public static final int <unk> = <num> ;
public static final int result_points = <num> ;
public static final int result_text = <num> ;
public static final int result_view = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int status_text = <num> ;
public static final int transparent = <num> ;
public static final int viewfinder_frame = <num> ;
public static final int viewfinder_laser = <num> ;
public static final int viewfinder_mask = <num> ;
}
public static final class drawable {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int ic_launcher = <num> ;
public static final int <unk> = <num> ;
public static final int info = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int launcher_icon = <num> ;
public static final int logo = <num> ;
public static final int play = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int rank = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int shopper_icon = <num> ;
}
public static final class id {
public static final int TextView01 = <num> ;
public static final int TextView02 = <num> ;
public static final int TextView03 = <num> ;
public static final int <unk> = <num> ;
public static final int auto_focus = <num> ;
public static final int back_button = <num> ;
public static final int barcode_image_view = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button1 = <num> ;
public static final int button2 = <num> ;
public static final int contents_supplement_text_view = <num> ;
public static final int contents_text_view = <num> ;
public static final int decode = <num> ;
public static final int decode_failed = <num> ;
public static final int decode_succeeded = <num> ;
public static final int done_button = <num> ;
public static final int <unk> = <num> ;
public static final int format_text_view = <num> ;
public static final int <unk> = <num> ;
public static final int frameLayout1 = <num> ;
public static final int <unk> = <num> ;
public static final int help_contents = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int imageView1 = <num> ;
public static final int image_view = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int launch_product_query = <num> ;
public static final int linearLayout1 = <num> ;
public static final int meta_text_view = <num> ;
public static final int meta_text_view_label = <num> ;
public static final int <unk> = <num> ;
public static final int playerId = <num> ;
public static final int <unk> = <num> ;
public static final int preview_view = <num> ;
public static final int progressBar1 = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int quit = <num> ;
public static final int <unk> = <num> ;
public static final int relativeLayout1 = <num> ;
public static final int restart_preview = <num> ;
public static final int result_button_view = <num> ;
public static final int <unk> = <num> ;
public static final int result_view = <num> ;
public static final int return_scan_result = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int shopper_button = <num> ;
public static final int <unk> = <num> ;
public static final int status_view = <num> ;
public static final int textView1 = <num> ;
public static final int textView2 = <num> ;
public static final int time_text_view = <num> ;
public static final int <unk> = <num> ;
public static final int type_text_view = <num> ;
public static final int <unk> = <num> ;
public static final int viewfinder_view = <num> ;
}
public static final class layout {
public static final int <unk> = <num> ;
public static final int capture = <num> ;
public static final int encode = <num> ;
public static final int gameplay = <num> ;
public static final int help = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int login = <num> ;
public static final int main = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int share = <num> ;
public static final int signup = <num> ;
}
public static final class raw {
public static final int beep = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_cancel = <num> ;
public static final int <unk> = <num> ;
public static final int button_custom_product_search = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_ok = <num> ;
public static final int button_open_browser = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_share_by_email = <num> ;
public static final int button_share_by_sms = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_web_search = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int contents_contact = <num> ;
public static final int contents_email = <num> ;
public static final int contents_location = <num> ;
public static final int contents_phone = <num> ;
public static final int contents_sms = <num> ;
public static final int contents_text = <num> ;
public static final int empty = <num> ;
public static final int facebook = <num> ;
public static final int <unk> = <num> ;
public static final int hello = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int info = <num> ;
public static final int <unk> = <num> ;
public static final int menu_about = <num> ;
public static final int menu_encode_mecard = <num> ;
public static final int menu_encode_vcard = <num> ;
public static final int menu_help = <num> ;
public static final int <unk> = <num> ;
public static final int menu_settings = <num> ;
public static final int menu_share = <num> ;
public static final int msg_about = <num> ;
public static final int msg_bulk_mode_scanned = <num> ;
public static final int msg_camera_framework_bug = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_default_mms_subject = <num> ;
public static final int msg_default_status = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_encode_contents_failed = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_google_shopper_missing = <num> ;
public static final int msg_install_google_shopper = <num> ;
public static final int msg_intent_failed = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_share_subject_line = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_unmount_usb = <num> ;
public static final int <unk> = <num> ;
public static final int play = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int rank = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int result_text = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int team = <num> ;
public static final int title_about = <num> ;
public static final int welcome = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int zxing_url = <num> ;
}
public static final class style {
public static final int AppTheme = <num> ;
}
public static final class xml {
public static final int preferences = <num> ;
}
}
package org . <unk> . <unk> ;
public class <unk>
{
private String data = " ;
private String team ;
private Integer gameId ;
private Integer playerId ;
private boolean valid ;
public <unk> ( String <unk> )
{
data = new String ( <unk> ) ;
data = data . toUpperCase ( ) ;
if ( data . length ( ) != <num> )
{
this . valid = false ;
}
else
{
this . valid = true ;
}
}
public String getTeam ( )
{
if ( team == null )
{
if ( data . charAt ( <num> ) == R' )
{
team = " ;
}
else if ( data . charAt ( <num> ) == B' )
{
team = " ;
}
else if ( data . charAt ( <num> ) == G' )
{
team = " ;
}
else if ( data . charAt ( <num> ) == Y' )
{
team = " ;
}
}
return team ;
}
public int getGameId ( )
{
if ( gameId == null )
{
gameId = <num> ;
gameId += ( int ) data . charAt ( <num> ) ;
gameId = gameId << ( int ) Math . pow ( ( double ) <num> , ( double ) <num> ) ;
gameId += ( int ) data . charAt ( <num> ) ;
gameId = gameId << ( int ) Math . pow ( ( double ) <num> , ( double ) <num> ) ;
gameId += ( int ) data . charAt ( <num> ) ;
}
return ( int ) gameId ;
}
public int <unk> ( )
{
if ( playerId == null )
{
int res = <num> ;
res += ( int ) data . charAt ( <num> ) ;
res = res << ( int ) Math . pow ( ( double ) <num> , ( double ) <num> ) ;
res += ( int ) data . charAt ( <num> ) ;
playerId = res ;
}
return playerId ;
}
public boolean isValid ( )
{
return this . valid ;
}
}
package org . <unk> . <unk> . models ;
import java . util . Map ;
import org . <unk> . android . mapping . Game ;
import org . <unk> . android . mapping . User ;
import android . os . Parcel ;
public class Player extends org . <unk> . android . mapping . Player {
private Boolean <unk> ;
private String team ;
private String qrcode ;
public Player ( Map < String , Object > data )
{
super ( data ) ;
if ( data . containsKey ( " ) )
this . <unk> ( ( Boolean ) data . get ( " ) ) ;
if ( data . containsKey ( " ) )
this . setTeam ( ( String ) data . get ( " ) ) ;
if ( data . containsKey ( " ) )
this . <unk> ( ( String ) data . get ( " ) ) ;
}
public Player ( Parcel in ) {
super ( in ) ;
this . <unk> ( Boolean . parseBoolean ( in . readString ( ) ) ) ;
this . <unk> ( in . readString ( ) ) ;
this . setTeam ( in . readString ( ) ) ;
}
public Boolean <unk> ( ) {
return <unk> ;
}
public void <unk> ( Boolean <unk> ) {
this . <unk> = <unk> ;
}
public String getTeam ( ) {
return team ;
}
public void setTeam ( String team ) {
this . team = team ;
}
public String <unk> ( ) {
return qrcode ;
}
public void <unk> ( String qrcode ) {
this . qrcode = qrcode ;
}
@Override
public void writeToParcel ( Parcel dest , int flags ) {
super . writeToParcel ( dest , flags ) ;
dest . writeString ( this . <unk> ( ) . toString ( ) ) ;
dest . writeString ( this . <unk> ( ) ) ;
dest . writeString ( this . getTeam ( ) ) ;
}
}
package org . <unk> . <unk> ;
import org . <unk> . android . <unk> . <unk> ;
import android . app . Activity ;
import android . content . Intent ;
import android . os . Bundle ;
public class <unk> extends Activity {
public static <unk> <unk> ;
public static Constants constants ;
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . <unk> ) ;
constants = new Constants ( ) ;
<unk> = new <unk> ( constants ) ;
}
@Override
public void onStart ( ) {
super . onStart ( ) ;
Intent <unk> = new Intent ( this , <unk> . class ) ;
startActivity ( <unk> ) ;
}
@Override
public void onResume ( ) {
super . onResume ( ) ;
Intent <unk> = new Intent ( this , <unk> . class ) ;
startActivity ( <unk> ) ;
}
}
package org . <unk> . <unk> ;
import org . <unk> . android . * ;
public class Constants extends org . <unk> . android . Constants
{
public Constants ( )
{
super ( ) ;
this . <unk> ( this . <unk> ) ;
this . <unk> ( this . <unk> ) ;
this . <unk> ( this . USER_AGENT ) ;
}
public final int <unk> = <num> ;
public final int <unk> = <num> ;
public final String FACEBOOK_APP_ID = " ;
public final String USER_AGENT = " ;
public final String <unk> = " ;
public final String <unk> = " ;
public final int <unk> = <num> ;
public final int <unk> = <num> ;
public final boolean <unk> = true ;
}
package org . <unk> . android ;
public final class R {
public static final class array {
public static final int <unk> = <num> ;
}
public static final class attr {
}
public static final class color {
public static final int contents_text = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int possible_result_points = <num> ;
public static final int result_image_border = <num> ;
public static final int <unk> = <num> ;
public static final int result_points = <num> ;
public static final int result_text = <num> ;
public static final int result_view = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int status_text = <num> ;
public static final int transparent = <num> ;
public static final int viewfinder_frame = <num> ;
public static final int viewfinder_laser = <num> ;
public static final int viewfinder_mask = <num> ;
}
public static final class drawable {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int ic_launcher = <num> ;
public static final int <unk> = <num> ;
public static final int info = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int launcher_icon = <num> ;
public static final int logo = <num> ;
public static final int play = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int rank = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int shopper_icon = <num> ;
}
public static final class id {
public static final int TextView01 = <num> ;
public static final int TextView02 = <num> ;
public static final int TextView03 = <num> ;
public static final int <unk> = <num> ;
public static final int auto_focus = <num> ;
public static final int back_button = <num> ;
public static final int barcode_image_view = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button1 = <num> ;
public static final int button2 = <num> ;
public static final int contents_supplement_text_view = <num> ;
public static final int contents_text_view = <num> ;
public static final int decode = <num> ;
public static final int decode_failed = <num> ;
public static final int decode_succeeded = <num> ;
public static final int done_button = <num> ;
public static final int <unk> = <num> ;
public static final int format_text_view = <num> ;
public static final int <unk> = <num> ;
public static final int frameLayout1 = <num> ;
public static final int <unk> = <num> ;
public static final int help_contents = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int imageView1 = <num> ;
public static final int image_view = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int launch_product_query = <num> ;
public static final int linearLayout1 = <num> ;
public static final int meta_text_view = <num> ;
public static final int meta_text_view_label = <num> ;
public static final int <unk> = <num> ;
public static final int playerId = <num> ;
public static final int <unk> = <num> ;
public static final int preview_view = <num> ;
public static final int progressBar1 = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int quit = <num> ;
public static final int <unk> = <num> ;
public static final int relativeLayout1 = <num> ;
public static final int restart_preview = <num> ;
public static final int result_button_view = <num> ;
public static final int <unk> = <num> ;
public static final int result_view = <num> ;
public static final int return_scan_result = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int shopper_button = <num> ;
public static final int <unk> = <num> ;
public static final int status_view = <num> ;
public static final int textView1 = <num> ;
public static final int textView2 = <num> ;
public static final int time_text_view = <num> ;
public static final int <unk> = <num> ;
public static final int type_text_view = <num> ;
public static final int <unk> = <num> ;
public static final int viewfinder_view = <num> ;
}
public static final class layout {
public static final int <unk> = <num> ;
public static final int capture = <num> ;
public static final int encode = <num> ;
public static final int gameplay = <num> ;
public static final int help = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int login = <num> ;
public static final int main = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int share = <num> ;
public static final int signup = <num> ;
}
public static final class raw {
public static final int beep = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_cancel = <num> ;
public static final int <unk> = <num> ;
public static final int button_custom_product_search = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_ok = <num> ;
public static final int button_open_browser = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_share_by_email = <num> ;
public static final int button_share_by_sms = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_web_search = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int contents_contact = <num> ;
public static final int contents_email = <num> ;
public static final int contents_location = <num> ;
public static final int contents_phone = <num> ;
public static final int contents_sms = <num> ;
public static final int contents_text = <num> ;
public static final int empty = <num> ;
public static final int facebook = <num> ;
public static final int <unk> = <num> ;
public static final int hello = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int info = <num> ;
public static final int <unk> = <num> ;
public static final int menu_about = <num> ;
public static final int menu_encode_mecard = <num> ;
public static final int menu_encode_vcard = <num> ;
public static final int menu_help = <num> ;
public static final int <unk> = <num> ;
public static final int menu_settings = <num> ;
public static final int menu_share = <num> ;
public static final int msg_about = <num> ;
public static final int msg_bulk_mode_scanned = <num> ;
public static final int msg_camera_framework_bug = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_default_mms_subject = <num> ;
public static final int msg_default_status = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_encode_contents_failed = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_google_shopper_missing = <num> ;
public static final int msg_install_google_shopper = <num> ;
public static final int msg_intent_failed = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_share_subject_line = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_unmount_usb = <num> ;
public static final int <unk> = <num> ;
public static final int play = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int rank = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int result_text = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int team = <num> ;
public static final int title_about = <num> ;
public static final int welcome = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int zxing_url = <num> ;
}
public static final class style {
public static final int AppTheme = <num> ;
}
public static final class xml {
public static final int preferences = <num> ;
}
}
package org . <unk> . <unk> ;
import android . app . Activity ;
import android . content . Intent ;
import android . os . Bundle ;
public class SignInActivity extends Activity
{
private int authToken = <num> ;
@Override
public void onCreate ( Bundle savedInstanceState )
{
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . main ) ;
}
@Override
public void onStart ( )
{
super . onStart ( ) ;
}
@Override
public void onResume ( )
{
super . onResume ( ) ;
if ( <unk> ( ) )
{
Intent <unk> = new Intent ( this , <unk> . class ) ;
startActivity ( <unk> ) ;
}
else
{
if ( <unk> ( ) )
{
}
else
{
}
}
}
public boolean <unk> ( )
{
if ( authToken != <num> )
{
return true ;
}
return false ;
}
public boolean <unk> ( )
{
authToken = <num> ;
return true ;
}
}
package com . google . zxing . client . android ;
public final class R {
public static final class array {
public static final int <unk> = <num> ;
}
public static final class attr {
}
public static final class color {
public static final int contents_text = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int possible_result_points = <num> ;
public static final int result_image_border = <num> ;
public static final int <unk> = <num> ;
public static final int result_points = <num> ;
public static final int result_text = <num> ;
public static final int result_view = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int status_text = <num> ;
public static final int transparent = <num> ;
public static final int viewfinder_frame = <num> ;
public static final int viewfinder_laser = <num> ;
public static final int viewfinder_mask = <num> ;
}
public static final class drawable {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int ic_launcher = <num> ;
public static final int <unk> = <num> ;
public static final int info = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int launcher_icon = <num> ;
public static final int logo = <num> ;
public static final int play = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int rank = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int shopper_icon = <num> ;
}
public static final class id {
public static final int TextView01 = <num> ;
public static final int TextView02 = <num> ;
public static final int TextView03 = <num> ;
public static final int <unk> = <num> ;
public static final int auto_focus = <num> ;
public static final int back_button = <num> ;
public static final int barcode_image_view = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button1 = <num> ;
public static final int button2 = <num> ;
public static final int contents_supplement_text_view = <num> ;
public static final int contents_text_view = <num> ;
public static final int decode = <num> ;
public static final int decode_failed = <num> ;
public static final int decode_succeeded = <num> ;
public static final int done_button = <num> ;
public static final int <unk> = <num> ;
public static final int format_text_view = <num> ;
public static final int <unk> = <num> ;
public static final int frameLayout1 = <num> ;
public static final int <unk> = <num> ;
public static final int help_contents = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int imageView1 = <num> ;
public static final int image_view = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int launch_product_query = <num> ;
public static final int linearLayout1 = <num> ;
public static final int meta_text_view = <num> ;
public static final int meta_text_view_label = <num> ;
public static final int <unk> = <num> ;
public static final int playerId = <num> ;
public static final int <unk> = <num> ;
public static final int preview_view = <num> ;
public static final int progressBar1 = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int quit = <num> ;
public static final int <unk> = <num> ;
public static final int relativeLayout1 = <num> ;
public static final int restart_preview = <num> ;
public static final int result_button_view = <num> ;
public static final int <unk> = <num> ;
public static final int result_view = <num> ;
public static final int return_scan_result = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int shopper_button = <num> ;
public static final int <unk> = <num> ;
public static final int status_view = <num> ;
public static final int textView1 = <num> ;
public static final int textView2 = <num> ;
public static final int time_text_view = <num> ;
public static final int <unk> = <num> ;
public static final int type_text_view = <num> ;
public static final int <unk> = <num> ;
public static final int viewfinder_view = <num> ;
}
public static final class layout {
public static final int <unk> = <num> ;
public static final int capture = <num> ;
public static final int encode = <num> ;
public static final int gameplay = <num> ;
public static final int help = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int login = <num> ;
public static final int main = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int share = <num> ;
public static final int signup = <num> ;
}
public static final class raw {
public static final int beep = <num> ;
}
public static final class string {
public static final int app_name = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_cancel = <num> ;
public static final int <unk> = <num> ;
public static final int button_custom_product_search = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_ok = <num> ;
public static final int button_open_browser = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_share_by_email = <num> ;
public static final int button_share_by_sms = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int button_web_search = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int contents_contact = <num> ;
public static final int contents_email = <num> ;
public static final int contents_location = <num> ;
public static final int contents_phone = <num> ;
public static final int contents_sms = <num> ;
public static final int contents_text = <num> ;
public static final int empty = <num> ;
public static final int facebook = <num> ;
public static final int <unk> = <num> ;
public static final int hello = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int info = <num> ;
public static final int <unk> = <num> ;
public static final int menu_about = <num> ;
public static final int menu_encode_mecard = <num> ;
public static final int menu_encode_vcard = <num> ;
public static final int menu_help = <num> ;
public static final int <unk> = <num> ;
public static final int menu_settings = <num> ;
public static final int menu_share = <num> ;
public static final int msg_about = <num> ;
public static final int msg_bulk_mode_scanned = <num> ;
public static final int msg_camera_framework_bug = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_default_mms_subject = <num> ;
public static final int msg_default_status = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_encode_contents_failed = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_google_shopper_missing = <num> ;
public static final int msg_install_google_shopper = <num> ;
public static final int msg_intent_failed = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_share_subject_line = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int msg_unmount_usb = <num> ;
public static final int <unk> = <num> ;
public static final int play = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int rank = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int result_text = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int team = <num> ;
public static final int title_about = <num> ;
public static final int welcome = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int zxing_url = <num> ;
}
public static final class style {
public static final int AppTheme = <num> ;
}
public static final class xml {
public static final int preferences = <num> ;
}
}
package org . <unk> . <unk> ;
public final class BuildConfig {
public final static boolean DEBUG = true ;
package org . <unk> . <unk> ;
import android . app . Activity ;
import android . content . Intent ;
import android . os . Bundle ;
import android . widget . TextView ;
public class <unk> extends Activity {
@Override
public void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
setContentView ( R . layout . gameplay ) ;
TextView ta = ( TextView ) findViewById ( R . id . <unk> ) ;
ta . setText ( ( <unk> . <unk> . getTeam ( ) ) ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . playerId ) ;
<unk> . setText ( " + ( <unk> . <unk> . <unk> ( ) ) ) ;
TextView <unk> = ( TextView ) findViewById ( R . id . <unk> ) ;
<unk> . setText ( " + ( <unk> . <unk> . getGameId ( ) ) ) ;
}
@Override
public void onStart ( ) {
super . onStart ( ) ;
}
}
package eecs545 ;
import java . io . BufferedReader ;
import java . io . File ;
import java . io . InputStreamReader ;
import java . util . HashMap ;
import java . util . LinkedList ;
import java . util . List ;
import java . util . Map ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public static final int K = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static void main ( String [ ] args ) throws Exception {
if ( args . length != <num> ) {
throw new Exception ( " ) ;
}
int argCount = <num> ;
File inFile = new File ( args [ argCount ++ ] ) ;
if ( ! inFile . exists ( ) ) {
throw new Exception ( " ) ;
}
File outDir = new File ( args [ argCount ++ ] ) ;
if ( ! outDir . exists ( ) && ! outDir . mkdirs ( ) ) {
throw new Exception ( " ) ;
}
List < Integer > <unk> = new LinkedList < Integer > ( ) ;
List < Input > inputs = new LinkedList < Input > ( ) ;
BufferedReader in = null ;
try {
in = new BufferedReader ( new InputStreamReader ( FileUtils . openInputStream ( inFile ) ) ) ;
Input . HEADER = in . readLine ( ) . trim ( ) ;
String row = null ;
while ( ( row = in . readLine ( ) ) != null ) {
inputs . add ( new Input ( row ) ) ;
}
} finally {
IOUtils . closeQuietly ( in ) ;
}
Map < Integer , List < Input >> <unk> = new HashMap < Integer , List < Input >> ( ) ;
for ( Input input : inputs ) {
if ( ! <unk> . containsKey ( input . label ) ) {
<unk> . put ( input . label , new LinkedList < Input > ( ) ) ;
}
<unk> . get ( input . label ) . add ( input ) ;
}
System . out . println ( " + <unk> + " ) ;
for ( int label : <unk> . keySet ( ) ) {
int count = <unk> . get ( label ) . size ( ) ;
if ( count >= <unk> && label != <num> ) {
<unk> . add ( label ) ;
System . out . println ( " + label + " + count ) ;
}
}
System . out . println ( ) ;
for ( int label : <unk> ) {
System . out . println ( " + label ) ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
List < List < Input >> <unk> = new LinkedList < List < Input >> ( ) ;
List < List < Input >> <unk> = new LinkedList < List < Input >> ( ) ;
for ( int k = <num> ; k < K ; k ++ ) {
<unk> . add ( new LinkedList < Input > ( ) ) ;
<unk> . add ( new LinkedList < Input > ( ) ) ;
int index = <num> ;
for ( Input input : inputs ) {
if ( index % K == k ) {
<unk> . get ( k ) . add ( input ) ;
} else {
<unk> . get ( k ) . add ( input ) ;
}
index ++ ;
}
}
<unk> totalResults = new <unk> ( label ) ;
File outFile = new File ( outDir , " + label + " + i + " ) ;
if ( outFile . exists ( ) ) {
System . out . println ( " ) ;
continue ;
}
for ( int k = <num> ; k < K ; k ++ ) {
<unk> c = new <unk> ( label ) ;
c . train ( <unk> . get ( k ) ) ;
totalResults . combine ( c . test ( <unk> . get ( k ) ) ) ;
}
totalResults . write ( outFile ) ;
}
}
}
}
package eecs545 ;
import java . util . Arrays ;
import java . util . Random ;
import org . apache . commons . math3 . analysis . function . Sigmoid ;
public class MathUtils {
public static final Random RANDOM = new Random ( ) ;
public static final Sigmoid SIGMOID = new Sigmoid ( ) ;
public static double [ ] [ ] flipHorizontalAndVertical ( double [ ] [ ] m ) {
if ( m == null ) {
return null ;
}
double [ ] [ ] temp = new double [ m . length ] [ ] ;
for ( int i = m . length  <num> , row = <num> ; i >= <num> ; i  , row ++ ) {
double [ ] temp2 = new double [ m [ i ] . length ] ;
for ( int j = m [ i ] . length  <num> , col = <num> ; j >= <num> ; j  , col ++ ) {
temp2 [ col ] = m [ i ] [ j ] ;
}
temp [ row ] = temp2 ;
}
return temp ;
}
public static void fill ( double [ ] [ ] m , double v ) {
for ( int i = <num> ; i < m . length ; i ++ ) {
Arrays . fill ( m [ i ] , v ) ;
}
}
public static void fill ( double [ ] [ ] [ ] m , double v ) {
for ( int i = <num> ; i < m . length ; i ++ ) {
fill ( m [ i ] , v ) ;
}
}
public static void fill ( double [ ] [ ] [ ] [ ] m , double v ) {
for ( int i = <num> ; i < m . length ; i ++ ) {
fill ( m [ i ] , v ) ;
}
}
public static void copy ( double [ ] [ ] from , double [ ] [ ] to ) {
for ( int i = <num> ; i < from . length ; i ++ ) {
for ( int j = <num> ; j < from [ i ] . length ; j ++ ) {
to [ i ] [ j ] = from [ i ] [ j ] ;
}
}
}
public static double [ ] [ ] convolutionBig ( double [ ] [ ] input , int inputWidth , int inputHeight , double [ ] [ ] kernel , int kernelWidth , int kernelHeight ) {
int outputWidth = inputWidth + kernelWidth  <num> ;
int outputHeight = inputHeight + kernelHeight  <num> ;
double [ ] [ ] output = new double [ outputWidth ] [ outputHeight ] ;
fill ( output , <num> ) ;
for ( int x = <num> ; x < outputWidth ; x ++ ) {
for ( int y = <num> ; y < outputHeight ; y ++ ) {
for ( int i = <num> ; i < kernelWidth ; i ++ ) {
for ( int j = <num> ; j < kernelHeight ; j ++ ) {
double value = <num> ;
if ( x + i < inputWidth && y + j < inputHeight ) {
value = input [ x + i ] [ y + j ] ;
}
output [ x ] [ y ] += value * kernel [ i ] [ j ] ;
}
}
}
}
return output ;
}
public static double [ ] [ ] convolutionSmall ( double [ ] [ ] input , int inputWidth , int inputHeight , double [ ] [ ] kernel , int kernelWidth , int kernelHeight ) {
int outputWidth = inputWidth  kernelWidth + <num> ;
int outputHeight = inputHeight  kernelHeight + <num> ;
double [ ] [ ] output = new double [ outputWidth ] [ outputHeight ] ;
fill ( output , <num> ) ;
for ( int x = <num> ; x < outputWidth ; x ++ ) {
for ( int y = <num> ; y < outputHeight ; y ++ ) {
for ( int i = <num> ; i < kernelWidth ; i ++ ) {
for ( int j = <num> ; j < kernelHeight ; j ++ ) {
output [ i ] [ j ] += input [ x + i ] [ y + j ] * kernel [ i ] [ j ] ;
}
}
}
}
return output ;
}
}
package eecs545 ;
import java . io . BufferedReader ;
import java . io . File ;
import java . io . IOException ;
import java . io . InputStreamReader ;
import java . io . PrintStream ;
import java . util . ArrayList ;
import libsvm . svm_model ;
import libsvm . svm_node ;
import libsvm . svm_parameter ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public static svm_model read ( File file ) throws IOException , NullPointerException {
if ( file == null ) {
throw new NullPointerException ( " ) ;
}
if ( ! file . exists ( ) ) {
throw new IOException ( " ) ;
}
BufferedReader in = null ;
try {
in = new BufferedReader ( new InputStreamReader ( FileUtils . openInputStream ( file ) ) ) ;
svm_model model = new svm_model ( ) ;
{
int <unk> = Integer . valueOf ( in . readLine ( ) ) ;
ArrayList < svm_node [ ] > <unk> = new ArrayList < svm_node [ ] > ( ) ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
int <unk> = Integer . valueOf ( in . readLine ( ) ) ;
svm_node [ ] <unk> = new svm_node [ <unk> ] ;
for ( int j = <num> ; j < <unk> ; j ++ ) {
svm_node node = new svm_node ( ) ;
node . index = Integer . valueOf ( in . readLine ( ) ) ;
node . value = Double . valueOf ( in . readLine ( ) ) ;
<unk> [ j ] = node ;
}
<unk> . add ( <unk> ) ;
}
model . <unk> = <unk> . toArray ( new svm_node [ <num> ] [ <num> ] ) ;
}
model . l = Integer . valueOf ( in . readLine ( ) ) ;
{
int [ ] label = new int [ Integer . valueOf ( in . readLine ( ) ) ] ;
for ( int i = <num> ; i < label . length ; i ++ ) {
label [ i ] = Integer . valueOf ( in . readLine ( ) ) ;
}
model . label = label ;
}
{
int [ ] <unk> = new int [ Integer . valueOf ( in . readLine ( ) ) ] ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
<unk> [ i ] = Integer . valueOf ( in . readLine ( ) ) ;
}
model . <unk> = <unk> ;
}
model . <unk> = Integer . valueOf ( in . readLine ( ) ) ;
{
svm_parameter param = new svm_parameter ( ) ;
param . C = Double . valueOf ( in . readLine ( ) ) ;
param . cache_size = Double . valueOf ( in . readLine ( ) ) ;
param . coef0 = Double . valueOf ( in . readLine ( ) ) ;
param . degree = Integer . valueOf ( in . readLine ( ) ) ;
param . eps = Double . valueOf ( in . readLine ( ) ) ;
param . gamma = Double . valueOf ( in . readLine ( ) ) ;
param . kernel_type = Integer . valueOf ( in . readLine ( ) ) ;
param . nr_weight = Integer . valueOf ( in . readLine ( ) ) ;
param . nu = Double . valueOf ( in . readLine ( ) ) ;
param . p = Double . valueOf ( in . readLine ( ) ) ;
param . probability = Integer . valueOf ( in . readLine ( ) ) ;
param . shrinking = Integer . valueOf ( in . readLine ( ) ) ;
param . svm_type = Integer . valueOf ( in . readLine ( ) ) ;
{
double [ ] weight = new double [ Integer . valueOf ( in . readLine ( ) ) ] ;
for ( int i = <num> ; i < weight . length ; i ++ ) {
weight [ i ] = Double . valueOf ( in . readLine ( ) ) ;
}
param . weight = weight ;
}
{
int [ ] weight_label = new int [ Integer . valueOf ( in . readLine ( ) ) ] ;
for ( int i = <num> ; i < weight_label . length ; i ++ ) {
weight_label [ i ] = Integer . valueOf ( in . readLine ( ) ) ;
}
param . weight_label = weight_label ;
}
model . param = param ;
}
{
double [ ] <unk> = new double [ Integer . valueOf ( in . readLine ( ) ) ] ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
<unk> [ i ] = Integer . valueOf ( in . readLine ( ) ) ;
}
model . <unk> = <unk> ;
}
{
double [ ] <unk> = new double [ Integer . valueOf ( in . readLine ( ) ) ] ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
<unk> [ i ] = Integer . valueOf ( in . readLine ( ) ) ;
}
model . <unk> = <unk> ;
}
{
double [ ] <unk> = new double [ Integer . valueOf ( in . readLine ( ) ) ] ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
<unk> [ i ] = Integer . valueOf ( in . readLine ( ) ) ;
}
model . <unk> = <unk> ;
}
{
int <unk> = Integer . valueOf ( in . readLine ( ) ) ;
ArrayList < double [ ] > <unk> = new ArrayList < double [ ] > ( ) ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
int <unk> = Integer . valueOf ( in . readLine ( ) ) ;
double [ ] <unk> = new double [ <unk> ] ;
for ( int j = <num> ; j < <unk> ; j ++ ) {
<unk> [ j ] = Double . valueOf ( in . readLine ( ) ) ;
}
<unk> . add ( <unk> ) ;
}
model . <unk> = <unk> . toArray ( new double [ <num> ] [ <num> ] ) ;
}
return model ;
} finally {
IOUtils . closeQuietly ( in ) ;
}
}
public static void write ( svm_model model , File file ) throws IOException , NullPointerException {
if ( model == null ) {
throw new NullPointerException ( " ) ;
}
if ( file == null ) {
throw new NullPointerException ( " ) ;
}
if ( file . exists ( ) ) {
throw new IOException ( " ) ;
}
if ( ! file . getParentFile ( ) . exists ( ) && ! file . getParentFile ( ) . mkdirs ( ) ) {
throw new IOException ( " ) ;
}
PrintStream out = null ;
try {
out = new PrintStream ( FileUtils . openOutputStream ( file ) ) ;
out . println ( model . <unk> . length ) ;
for ( svm_node [ ] nodes : model . <unk> ) {
out . println ( nodes . length ) ;
for ( svm_node node : nodes ) {
out . println ( node . index ) ;
out . println ( node . value ) ;
}
}
out . println ( model . l ) ;
out . println ( model . label . length ) ;
for ( int l : model . label ) {
out . println ( l ) ;
}
out . println ( model . <unk> . length ) ;
for ( int n : model . <unk> ) {
out . println ( n ) ;
}
out . println ( model . <unk> ) ;
{
out . println ( model . param . C ) ;
out . println ( model . param . cache_size ) ;
out . println ( model . param . coef0 ) ;
out . println ( model . param . degree ) ;
out . println ( model . param . eps ) ;
out . println ( model . param . gamma ) ;
out . println ( model . param . kernel_type ) ;
out . println ( model . param . nr_weight ) ;
out . println ( model . param . nu ) ;
out . println ( model . param . p ) ;
out . println ( model . param . probability ) ;
out . println ( model . param . shrinking ) ;
out . println ( model . param . svm_type ) ;
out . println ( model . param . weight . length ) ;
for ( double w : model . param . weight ) {
out . println ( w ) ;
}
out . println ( model . param . weight_label . length ) ;
for ( int l : model . param . weight_label ) {
out . println ( l ) ;
}
}
out . println ( model . <unk> . length ) ;
for ( double a : model . <unk> ) {
out . println ( a ) ;
}
out . println ( model . <unk> . length ) ;
for ( double b : model . <unk> ) {
out . println ( b ) ;
}
out . println ( model . <unk> . length ) ;
for ( double r : model . <unk> ) {
out . println ( r ) ;
}
out . println ( model . <unk> . length ) ;
for ( double [ ] <unk> : model . <unk> ) {
out . println ( <unk> . length ) ;
for ( double c : <unk> ) {
out . println ( c ) ;
}
}
} finally {
IOUtils . closeQuietly ( out ) ;
}
}
}
package eecs545 ;
import java . util . List ;
public abstract class <unk> extends <unk> {
public int label ;
public <unk> ( int label ) {
this . label = label ;
}
public abstract <unk> test ( List < Input > inputs ) throws Exception ;
}
package eecs545 ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
import libsvm . svm ;
import libsvm . svm_model ;
import libsvm . svm_node ;
import libsvm . svm_parameter ;
import libsvm . <unk> ;
import libsvm . svm_problem ;
public class <unk> extends <unk> {
private svm_model model ;
public <unk> ( int label ) {
super ( label ) ;
}
@Override
public void train ( List < Input > inputs ) throws Exception {
Map < Integer , Integer > <unk> = new HashMap < Integer , Integer > ( ) ;
for ( Input input : inputs ) {
int <unk> = ( input . label == label ? <num> :  <num> ) ;
if ( ! <unk> . containsKey ( <unk> ) ) {
<unk> . put ( <unk> , <num> ) ;
} else {
<unk> . put ( <unk> , <unk> . get ( <unk> ) + <num> ) ;
}
}
svm_problem problem = new svm_problem ( ) ;
problem . l = inputs . size ( ) ;
svm_node [ ] [ ] <unk> = new svm_node [ problem . l ] [ ] ;
double [ ] labels = new double [ problem . l ] ;
int count = <num> ;
for ( Input input : inputs ) {
<unk> [ count ] = input . <unk> ( ) ;
labels [ count ++ ] = ( input . label == label ? <num> :  <num> ) ;
}
problem . x = <unk> ;
problem . y = labels ;
svm_parameter param = new svm_parameter ( ) ;
param . svm_type = svm_parameter . C_SVC ;
param . kernel_type = svm_parameter . RBF ;
param . C = <num> ;
param . gamma = <num> ;
param . degree = <num> ;
param . coef0 = <num> ;
param . eps = <num> ;
param . cache_size = <num> ;
param . nr_weight = <num> ;
param . weight_label = new int [ ] { <num> ,  <num> } ;
param . weight = new double [ ] { <num> , <num> } ;
param . nu = <num> ;
param . p = <num> ;
param . shrinking = <num> ;
param . probability = <num> ;
svm . <unk> ( new <unk> ( ) {
@Override
public void print ( String s ) {
}
} ) ;
model = svm . svm_train ( problem , param ) ;
}
@Override
public <unk> test ( List < Input > inputs ) throws Exception {
<unk> results = new <unk> ( label ) ;
for ( Input unknown : inputs ) {
int prediction = ( int ) svm . svm_predict ( model , unknown . <unk> ( ) ) ;
results . add ( unknown , prediction == <num> ) ;
}
double [ ] <unk> = results . <unk> ( ) ;
System . out . println ( <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] ) ;
return results ;
}
}
package eecs545 ;
import java . util . Collection ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
public class <unk> extends <unk> {
private int K ;
private Collection < Input > train ;
double [ ] [ ] [ ] <unk> = new double [ Utils . <unk> ] [ Utils . <unk> ] [ Utils . <unk> ] ;
public <unk> ( int K ) {
this . K = K ;
}
@Override
public void train ( List < Input > train ) throws Exception {
if ( train . isEmpty ( ) ) {
throw new Exception ( " ) ;
}
if ( train . size ( ) < K ) {
throw new Exception ( " ) ;
}
this . train = train ;
MathUtils . fill ( <unk> , <num> ) ;
double points = <num> ;
for ( Input input : train ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ <unk> ] [ <unk> ] [ <unk> ] += input . <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
points += input . <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
}
}
}
}
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ <unk> ] [ <unk> ] [ <unk> ] /= points ;
}
}
}
}
@Override
public <unk> test ( List < Input > test ) throws Exception {
<unk> results = new <unk> ( ) ;
for ( Input unknown : test ) {
Input [ ] <unk> = new Input [ K ] ;
double [ ] <unk> = new double [ K ] ;
for ( Input known : train ) {
double distance = <num> ;
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
distance += Math . pow ( known . <unk> [ <unk> ] [ <unk> ] [ <unk> ]  unknown . <unk> [ <unk> ] [ <unk> ] [ <unk> ] , <num> ) / <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
}
}
}
distance = Math . sqrt ( distance ) ;
for ( int k = <num> ; k < K ; k ++ ) {
if ( <unk> [ k ] == null
|| distance < <unk> [ k ] ) {
<unk> [ k ] = known ;
<unk> [ k ] = distance ;
break ;
}
}
}
Map < Integer , Integer > <unk> = new HashMap < Integer , Integer > ( ) ;
for ( int k = <num> ; k < K ; k ++ ) {
if ( ! <unk> . containsKey ( <unk> [ k ] . label ) ) {
<unk> . put ( <unk> [ k ] . label , <num> ) ;
} else {
<unk> . put ( <unk> [ k ] . label , <unk> . get ( <unk> [ k ] . label ) + <num> ) ;
}
}
int <unk> =  <num> , <unk> =  <num> ;
for ( int <unk> : <unk> . keySet ( ) ) {
if ( <unk> ==  <num> || <unk> . get ( <unk> ) > <unk> ) {
<unk> = <unk> ;
<unk> = <unk> . get ( <unk> ) ;
}
}
results . add ( unknown , <unk> ) ;
}
return results ;
}
}
package eecs545 ;
import java . io . File ;
import java . io . PrintStream ;
import java . util . HashMap ;
import java . util . Map ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public int label ;
public Map < Input , Boolean > <unk> = new HashMap < Input , Boolean > ( ) ;
public <unk> ( int label ) {
this . label = label ;
}
public void combine ( <unk> results ) {
if ( results . label == label ) {
<unk> . putAll ( results . <unk> ) ;
}
}
public void add ( Input input , boolean <unk> ) {
<unk> . put ( input , <unk> ) ;
}
public double [ ] <unk> ( ) {
if ( <unk> . isEmpty ( ) ) {
return new double [ ] { <num> , <num> , <num> , <num> } ;
}
double <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> ;
for ( Input input : <unk> . keySet ( ) ) {
boolean <unk> = <unk> . get ( input ) ;
if ( <unk> && input . label == label ) {
<unk> ++ ;
} else if ( ! <unk> && input . label != label ) {
<unk> ++ ;
} else if ( <unk> && input . label != label ) {
<unk> ++ ;
} else if ( ! <unk> && input . label == label ) {
<unk> ++ ;
}
}
return new double [ ] { <unk> , <unk> , <unk> , <unk> } ;
}
public void write ( File outFile ) throws Exception {
PrintStream out = null ;
try {
out = new PrintStream ( FileUtils . openOutputStream ( outFile ) ) ;
out . println ( label ) ;
double [ ] <unk> = <unk> ( ) ;
out . println ( <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] ) ;
for ( Input input : <unk> . keySet ( ) ) {
out . println ( input . scene + " + input . <unk> + " + ( input . label == label ) + " + <unk> . get ( input ) ) ;
}
} finally {
try {
out . flush ( ) ;
} catch ( Exception e ) {
}
IOUtils . closeQuietly ( out ) ;
}
}
}
package eecs545 ;
import java . util . List ;
public abstract class <unk> extends <unk> {
public abstract <unk> test ( List < Input > inputs ) throws Exception ;
}
package eecs545 ;
public class Utils {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <unk> / <unk> ;
}
package eecs545 ;
import java . io . BufferedReader ;
import java . io . File ;
import java . io . InputStreamReader ;
import java . util . ArrayList ;
import java . util . Arrays ;
import java . util . HashMap ;
import java . util . LinkedList ;
import java . util . List ;
import java . util . Map ;
import libsvm . svm ;
import libsvm . svm_model ;
import libsvm . svm_node ;
import libsvm . svm_parameter ;
import libsvm . <unk> ;
import libsvm . svm_problem ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public static final int K = <num> ;
public static final int <unk> = <num> ;
public static void main ( String [ ] args ) throws Exception {
if ( args . length != <num> ) {
throw new Exception ( " ) ;
}
int argCount = <num> ;
File inFile = new File ( args [ argCount ++ ] ) ;
if ( ! inFile . exists ( ) ) {
throw new Exception ( " ) ;
}
List < Input > inputs = new LinkedList < Input > ( ) ;
BufferedReader in = null ;
try {
in = new BufferedReader ( new InputStreamReader ( FileUtils . openInputStream ( inFile ) ) ) ;
Input . HEADER = in . readLine ( ) . trim ( ) ;
String row = null ;
while ( ( row = in . readLine ( ) ) != null ) {
inputs . add ( new Input ( row ) ) ;
}
} finally {
IOUtils . closeQuietly ( in ) ;
}
List < Integer > <unk> = new LinkedList < Integer > ( ) ;
Map < Integer , List < Input >> <unk> = new HashMap < Integer , List < Input >> ( ) ;
for ( Input input : inputs ) {
if ( ! <unk> . containsKey ( input . label ) ) {
<unk> . put ( input . label , new LinkedList < Input > ( ) ) ;
}
<unk> . get ( input . label ) . add ( input ) ;
}
System . out . println ( " + <unk> + " ) ;
for ( int label : <unk> . keySet ( ) ) {
int count = <unk> . get ( label ) . size ( ) ;
if ( count >= <unk> && label != <num> ) {
<unk> . add ( label ) ;
System . out . println ( " + label + " + count ) ;
}
}
System . out . println ( ) ;
for ( Input input : inputs ) {
if ( ! <unk> . contains ( input . label ) ) {
input . label = <num> ;
}
}
List < List < Input >> <unk> = new LinkedList < List < Input >> ( ) ;
List < List < Input >> <unk> = new LinkedList < List < Input >> ( ) ;
for ( int k = <num> ; k < K ; k ++ ) {
<unk> . add ( new LinkedList < Input > ( ) ) ;
<unk> . add ( new LinkedList < Input > ( ) ) ;
int index = <num> ;
for ( Input input : inputs ) {
if ( index % K == k ) {
<unk> . get ( k ) . add ( input ) ;
} else {
<unk> . get ( k ) . add ( input ) ;
}
index ++ ;
}
}
int [ ] weight_label = new int [ <unk> . size ( ) + <num> ] ;
{
weight_label [ <num> ] = <num> ;
int count = <num> ;
for ( int <unk> : <unk> ) {
weight_label [ count ++ ] = <unk> ;
}
}
double [ ] weight = new double [ <unk> . size ( ) + <num> ] ;
Arrays . fill ( weight , <num> ) ;
for ( double C : new double [ ] { <num> , <num> , <num> , <num> , <num> , <num> } ) {
for ( double gamma : new double [ ] { <num> , <num> , <num> , <num> , <num> , <num> } ) {
<unk> totalResults = new <unk> ( ) ;
for ( int k = <num> ; k < K ; k ++ ) {
svm_problem problem = new svm_problem ( ) ;
problem . l = <unk> . get ( k ) . size ( ) ;
ArrayList < svm_node [ ] > <unk> = new ArrayList < svm_node [ ] > ( ) ;
double [ ] labels = new double [ <unk> . get ( k ) . size ( ) ] ;
int count = <num> ;
for ( Input input : <unk> . get ( k ) ) {
<unk> . add ( input . <unk> ( ) ) ;
labels [ count ++ ] = input . label ;
}
problem . x = <unk> . toArray ( new svm_node [ <num> ] [ ] ) ;
problem . y = labels ;
svm_parameter param = new svm_parameter ( ) ;
param . svm_type = svm_parameter . C_SVC ;
param . kernel_type = svm_parameter . RBF ;
param . gamma = gamma ;
param . degree = <num> ;
param . coef0 = <num> ;
param . cache_size = <num> ;
param . eps = <num> ;
param . C = C ;
param . nr_weight = weight_label . length ;
param . weight_label = weight_label ;
param . weight = weight ;
param . nu = <num> ;
param . p = <num> ;
param . shrinking = <num> ;
param . probability = <num> ;
svm . <unk> ( new <unk> ( ) {
@Override
public void print ( String s ) {
}
} ) ;
svm_model model = svm . svm_train ( problem , param ) ;
<unk> results = new <unk> ( ) ;
for ( Input unknown : <unk> . get ( k ) ) {
int prediction = ( int ) svm . svm_predict ( model , unknown . <unk> ( ) ) ;
results . add ( unknown , prediction ) ;
}
totalResults . combine ( results ) ;
}
System . out . println ( C + " + gamma + " ) ;
for ( int label : <unk> ) {
double [ ] <unk> = totalResults . <unk> ( label ) ;
System . out . println ( " + label + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + totalResults . precision ( label ) + " + totalResults . recall ( label ) + " + totalResults . F ( label ) + " ) ;
}
System . out . println ( " + totalResults . precision ( ) + " + totalResults . recall ( ) + " + totalResults . F ( ) + " ) ;
System . out . println ( ) ;
}
}
}
package eecs545 ;
import java . util . ArrayList ;
import java . util . Arrays ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
import libsvm . svm ;
import libsvm . svm_model ;
import libsvm . svm_node ;
import libsvm . svm_parameter ;
import libsvm . <unk> ;
import libsvm . svm_problem ;
public class <unk> extends <unk> {
private svm_model model ;
@Override
public void train ( List < Input > inputs ) throws Exception {
svm_problem problem = new svm_problem ( ) ;
problem . l = inputs . size ( ) ;
ArrayList < svm_node [ ] > <unk> = new ArrayList < svm_node [ ] > ( ) ;
Map < Integer , Integer > <unk> = new HashMap < Integer , Integer > ( ) ;
double [ ] labels = new double [ inputs . size ( ) ] ;
int count = <num> ;
for ( Input input : inputs ) {
<unk> . add ( input . <unk> ( ) ) ;
labels [ count ++ ] = input . label ;
if ( ! <unk> . containsKey ( input . label ) ) {
<unk> . put ( input . label , <num> ) ;
} else {
<unk> . put ( input . label , <unk> . get ( input . label ) + <num> ) ;
}
}
problem . x = <unk> . toArray ( new svm_node [ <num> ] [ ] ) ;
problem . y = labels ;
svm_parameter param = new svm_parameter ( ) ;
param . svm_type = svm_parameter . C_SVC ;
param . kernel_type = svm_parameter . RBF ;
param . C = <num> ;
param . gamma = <num> ;
param . degree = <num> ;
param . coef0 = <num> ;
param . cache_size = <num> ;
param . eps = <num> ;
param . nr_weight = <unk> . size ( ) ;
param . weight_label = new int [ <unk> . size ( ) ] ;
{
int <unk> = <num> ;
for ( int label : <unk> . keySet ( ) ) {
param . weight_label [ <unk> ++ ] = label ;
}
}
param . weight = new double [ <unk> . size ( ) ] ;
Arrays . fill ( param . weight , <num> ) ;
param . nu = <num> ;
param . p = <num> ;
param . shrinking = <num> ;
param . probability = <num> ;
svm . <unk> ( new <unk> ( ) {
@Override
public void print ( String s ) {
}
} ) ;
model = svm . svm_train ( problem , param ) ;
}
@Override
public <unk> test ( List < Input > inputs ) throws Exception {
<unk> results = new <unk> ( ) ;
for ( Input unknown : inputs ) {
int prediction = ( int ) svm . svm_predict ( model , unknown . <unk> ( ) ) ;
results . add ( unknown , prediction ) ;
}
return results ;
}
}
package eecs545 ;
import java . io . BufferedReader ;
import java . io . File ;
import java . io . InputStreamReader ;
import java . util . ArrayList ;
import java . util . LinkedList ;
import java . util . List ;
import libsvm . svm ;
import libsvm . svm_model ;
import libsvm . svm_node ;
import libsvm . svm_parameter ;
import libsvm . <unk> ;
import libsvm . svm_problem ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public static final int K = <num> ;
public static void main ( String [ ] args ) throws Exception {
}
package eecs545 ;
public class Point {
public double x , y , z ;
public int r , g , b ;
public Point ( String row ) {
String [ ] parts = row . split ( " ) ;
x = Double . valueOf ( parts [ <num> ] ) ;
y = Double . valueOf ( parts [ <num> ] ) ;
z = Double . valueOf ( parts [ <num> ] ) ;
r = Integer . valueOf ( parts [ <num> ] ) ;
g = Integer . valueOf ( parts [ <num> ] ) ;
b = Integer . valueOf ( parts [ <num> ] ) ;
}
@Override
public String toString ( ) {
return x + " + y + " + z + " + r + " + g + " + b ;
}
}
package eecs545 ;
import java . util . HashSet ;
import java . util . List ;
import java . util . Set ;
import <unk> . <unk> . trees . <unk> ;
import <unk> . core . Attribute ;
import <unk> . core . <unk> ;
import <unk> . core . Instances ;
public class <unk> extends <unk> {
private Instances instances ;
private <unk> <unk> ;
private <unk> tree ;
@Override
public void train ( List < Input > train ) throws Exception {
if ( train . isEmpty ( ) ) {
throw new Exception ( " ) ;
}
<unk> <unk> = new <unk> ( ( int ) Math . pow ( Utils . <unk> , <num> ) + <num> ) ;
for ( int i = <num> ; i < Math . pow ( Utils . <unk> , <num> ) ; i ++ ) {
Attribute <unk> = new Attribute ( " + i ) ;
<unk> . addElement ( <unk> ) ;
}
Set < Integer > labels = new HashSet < Integer > ( ) ;
for ( Input input : train ) {
labels . add ( input . label ) ;
}
<unk> = new <unk> ( ) ;
for ( int label : labels ) {
<unk> . addElement ( String . valueOf ( label ) ) ;
}
<unk> . addElement ( new Attribute ( " , <unk> ) ) ;
instances = new Instances ( " , <unk> , train . size ( ) ) ;
instances . <unk> ( <unk> . size ( )  <num> ) ;
for ( Input input : train ) {
instances . add ( input . getInstance ( instances ) ) ;
}
tree = new <unk> ( ) ;
tree . <unk> ( <num> ) ;
tree . <unk> ( <num> ) ;
tree . <unk> ( instances ) ;
}
@Override
public <unk> test ( List < Input > test ) throws Exception {
<unk> results = new <unk> ( ) ;
for ( Input unknown : test ) {
int <unk> = ( int ) tree . <unk> ( unknown . getInstance ( instances ) ) ;
int <unk> = Integer . valueOf ( ( String ) <unk> . elementAt ( <unk> ) ) ;
System . out . println ( <unk> + " + unknown . label ) ;
results . add ( unknown , <unk> ) ;
}
return results ;
}
}
package eecs545 ;
import java . io . BufferedReader ;
import java . io . File ;
import java . io . InputStreamReader ;
import java . util . HashMap ;
import java . util . LinkedList ;
import java . util . List ;
import java . util . Map ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public static final int K = <num> ;
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static void main ( String [ ] args ) throws Exception {
if ( args . length != <num> ) {
throw new Exception ( " ) ;
}
int argCount = <num> ;
File inFile = new File ( args [ argCount ++ ] ) ;
if ( ! inFile . exists ( ) ) {
throw new Exception ( " ) ;
}
File outDir = new File ( args [ argCount ++ ] ) ;
if ( ! outDir . exists ( ) && ! outDir . mkdirs ( ) ) {
throw new Exception ( " ) ;
}
List < Input > inputs = new LinkedList < Input > ( ) ;
BufferedReader in = null ;
try {
in = new BufferedReader ( new InputStreamReader ( FileUtils . openInputStream ( inFile ) ) ) ;
Input . HEADER = in . readLine ( ) . trim ( ) ;
String row = null ;
while ( ( row = in . readLine ( ) ) != null ) {
inputs . add ( new Input ( row ) ) ;
}
} finally {
IOUtils . closeQuietly ( in ) ;
}
List < Integer > <unk> = new LinkedList < Integer > ( ) ;
Map < Integer , List < Input >> <unk> = new HashMap < Integer , List < Input >> ( ) ;
for ( Input input : inputs ) {
if ( ! <unk> . containsKey ( input . label ) ) {
<unk> . put ( input . label , new LinkedList < Input > ( ) ) ;
}
<unk> . get ( input . label ) . add ( input ) ;
}
System . out . println ( " + <unk> + " ) ;
for ( int label : <unk> . keySet ( ) ) {
int count = <unk> . get ( label ) . size ( ) ;
if ( count >= <unk> && label != <num> ) {
<unk> . add ( label ) ;
System . out . println ( " + label + " + count ) ;
}
}
System . out . println ( ) ;
for ( Input input : inputs ) {
if ( ! <unk> . contains ( input . label ) ) {
input . label = <num> ;
}
}
for ( int i = <num> ; i < <unk> ; i ++ ) {
List < List < Input >> <unk> = new LinkedList < List < Input >> ( ) ;
List < List < Input >> <unk> = new LinkedList < List < Input >> ( ) ;
for ( int k = <num> ; k < K ; k ++ ) {
<unk> . add ( new LinkedList < Input > ( ) ) ;
<unk> . add ( new LinkedList < Input > ( ) ) ;
int index = <num> ;
for ( Input input : inputs ) {
if ( index % K == k ) {
<unk> . get ( k ) . add ( input ) ;
} else {
<unk> . get ( k ) . add ( input ) ;
}
index ++ ;
}
}
<unk> totalResults = new <unk> ( ) ;
File outFile = new File ( outDir , " + i + " ) ;
for ( int k = <num> ; k < K ; k ++ ) {
<unk> c = new <unk> ( ) ;
c . train ( <unk> . get ( k ) ) ;
totalResults . combine ( c . test ( <unk> . get ( k ) ) ) ;
}
for ( int label : <unk> ) {
double [ ] <unk> = totalResults . <unk> ( label ) ;
System . out . println ( " + label + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + totalResults . precision ( label ) + " + totalResults . recall ( label ) + " + totalResults . F ( label ) + " ) ;
}
System . out . println ( " + totalResults . precision ( ) + " + totalResults . recall ( ) + " + totalResults . F ( ) + " ) ;
totalResults . write ( outFile ) ;
}
}
}
package eecs545 ;
import java . util . List ;
public abstract class <unk> {
public abstract void train ( List < Input > inputs ) throws Exception ;
}
package eecs545 ;
import java . util . HashMap ;
import java . util . LinkedList ;
import java . util . List ;
import java . util . Map ;
import libsvm . svm ;
import libsvm . svm_model ;
import libsvm . svm_node ;
import libsvm . svm_parameter ;
import libsvm . <unk> ;
import libsvm . svm_problem ;
public class <unk> extends <unk> {
private List < svm_model > models = new LinkedList < svm_model > ( ) ;
public <unk> ( int label ) {
super ( label ) ;
}
@Override
public void train ( List < Input > inputs ) throws Exception {
Map < Integer , Integer > <unk> = new HashMap < Integer , Integer > ( ) ;
for ( Input input : inputs ) {
int <unk> = ( input . label == label ? <num> :  <num> ) ;
if ( ! <unk> . containsKey ( <unk> ) ) {
<unk> . put ( <unk> , <num> ) ;
} else {
<unk> . put ( <unk> , <unk> . get ( <unk> ) + <num> ) ;
}
}
int modelCount = ( int ) Math . ceil ( <unk> . get (  <num> ) . intValue ( ) / <unk> . get ( <num> ) . intValue ( ) ) ;
for ( int i = <num> ; i < modelCount ; i ++ ) {
svm_problem problem = new svm_problem ( ) ;
problem . l = <unk> . get ( <num> ) * <num> ;
svm_node [ ] [ ] <unk> = new svm_node [ problem . l ] [ ] ;
double [ ] labels = new double [ problem . l ] ;
int count = <num> ;
for ( Input input : inputs ) {
if ( input . label == label ) {
<unk> [ count ] = input . <unk> ( ) ;
labels [ count ++ ] = <num> ;
}
}
for ( int j = <num> ; j < <unk> . get ( <num> ) ; j ++ ) {
Input input = inputs . get ( MathUtils . RANDOM . nextInt ( inputs . size ( ) ) ) ;
if ( input . label == label ) {
j  ;
continue ;
}
<unk> [ count ] = input . <unk> ( ) ;
labels [ count ++ ] =  <num> ;
}
problem . x = <unk> ;
problem . y = labels ;
svm_parameter param = new svm_parameter ( ) ;
param . svm_type = svm_parameter . C_SVC ;
param . kernel_type = svm_parameter . RBF ;
param . gamma = <num> ;
param . C = <num> ;
param . degree = <num> ;
param . coef0 = <num> ;
param . eps = <num> ;
param . cache_size = <num> ;
param . nr_weight = <num> ;
param . weight_label = new int [ ] { <num> ,  <num> } ;
param . weight = new double [ ] { <num> , <num> } ;
param . nu = <num> ;
param . p = <num> ;
param . shrinking = <num> ;
param . probability = <num> ;
svm . <unk> ( new <unk> ( ) {
@Override
public void print ( String s ) {
}
} ) ;
svm_model model = svm . svm_train ( problem , param ) ;
models . add ( model ) ;
}
}
@Override
public <unk> test ( List < Input > inputs ) throws Exception {
<unk> results = new <unk> ( label ) ;
for ( Input unknown : inputs ) {
int [ ] <unk> = new int [ ] { <num> , <num> } ;
for ( svm_model model : models ) {
int <unk> = ( int ) svm . svm_predict ( model , unknown . <unk> ( ) ) ;
if ( <unk> == <num> ) {
<unk> [ <num> ] ++ ;
} else {
<unk> [ <num> ] ++ ;
}
}
int prediction = ( <unk> [ <num> ] > <unk> [ <num> ] ? <num> :  <num> ) ;
results . add ( unknown , prediction == <num> ) ;
}
double [ ] <unk> = results . <unk> ( ) ;
System . out . println ( <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] ) ;
return results ;
}
}
package eecs545 ;
import java . io . File ;
import java . io . PrintStream ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public static void main ( String [ ] args ) throws Exception {
if ( args . length != <num> ) {
throw new Exception ( " ) ;
}
int argCount = <num> ;
File <unk> = new File ( args [ argCount ++ ] ) ;
if ( ! <unk> . exists ( ) ) {
throw new Exception ( " ) ;
}
File outFile = new File ( args [ argCount ++ ] ) ;
if ( outFile . exists ( ) ) {
throw new Exception ( " ) ;
}
PrintStream out = null ;
try {
out = new PrintStream ( FileUtils . openOutputStream ( outFile ) ) ;
out . println ( " ) ;
for ( String <unk> : <unk> . list ( ) ) {
File <unk> = new File ( <unk> , <unk> ) ;
for ( String <unk> : <unk> . list ( ) ) {
String [ ] <unk> = <unk> . split ( " ) ;
String scene = <unk> [ <num> ] . replace ( " , " ) ;
String object = " ;
File <unk> = new File ( <unk> , <unk> ) ;
<unk> <unk> = new <unk> ( <unk> ) ;
out . println ( scene + " + object + " + <unk> ) ;
}
}
} finally {
IOUtils . closeQuietly ( out ) ;
}
}
}
package eecs545 ;
import java . io . BufferedReader ;
import java . io . File ;
import java . io . InputStreamReader ;
import java . util . LinkedList ;
import java . util . List ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public List < Point > points = new LinkedList < Point > ( ) ;
public <unk> ( File file ) throws Exception {
BufferedReader in = null ;
try {
in = new BufferedReader ( new InputStreamReader ( FileUtils . openInputStream ( file ) ) ) ;
in . readLine ( ) ;
in . readLine ( ) ;
String <unk> = in . readLine ( ) ;
int vertices = Integer . valueOf ( <unk> . split ( " ) [ <num> ] ) ;
in . readLine ( ) ;
in . readLine ( ) ;
in . readLine ( ) ;
in . readLine ( ) ;
in . readLine ( ) ;
in . readLine ( ) ;
in . readLine ( ) ;
in . readLine ( ) ;
for ( int i = <num> ; i < vertices ; i ++ ) {
points . add ( new Point ( in . readLine ( ) ) ) ;
}
} finally {
IOUtils . closeQuietly ( in ) ;
}
}
}
package eecs545 ;
import java . io . File ;
import java . io . PrintStream ;
import java . util . HashMap ;
import java . util . HashSet ;
import java . util . Map ;
import java . util . Set ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public Map < Input , Integer > <unk> = new HashMap < Input , Integer > ( ) ;
private Map < Integer , double [ ] > <unk> = new HashMap < Integer , double [ ] > ( ) ;
public void add ( Input input , int <unk> ) {
<unk> . clear ( ) ;
<unk> . put ( input , <unk> ) ;
}
public void combine ( <unk> results ) {
<unk> . clear ( ) ;
<unk> . putAll ( results . <unk> ) ;
}
public double precision ( ) {
Map < Integer , Integer > <unk> = new HashMap < Integer , Integer > ( ) ;
for ( Input input : <unk> . keySet ( ) ) {
if ( ! <unk> . containsKey ( input . label ) ) {
<unk> . put ( input . label , <num> ) ;
} else {
<unk> . put ( input . label , <unk> . get ( input . label ) + <num> ) ;
}
}
double precision = <num> ;
for ( int label : <unk> . keySet ( ) ) {
precision += ( <unk> . get ( label ) . doubleValue ( ) / ( double ) <unk> . size ( ) ) * precision ( label ) ;
}
return precision ;
}
public double precision ( int label ) {
double [ ] <unk> = <unk> ( label ) ;
if ( <unk> [ <num> ] + <unk> [ <num> ] == <num> ) {
return <num> ;
}
return <unk> [ <num> ] / ( <unk> [ <num> ] + <unk> [ <num> ] ) ;
}
public double recall ( ) {
Map < Integer , Integer > <unk> = new HashMap < Integer , Integer > ( ) ;
for ( Input input : <unk> . keySet ( ) ) {
if ( ! <unk> . containsKey ( input . label ) ) {
<unk> . put ( input . label , <num> ) ;
} else {
<unk> . put ( input . label , <unk> . get ( input . label ) + <num> ) ;
}
}
double precision = <num> ;
for ( int label : <unk> . keySet ( ) ) {
precision += ( <unk> . get ( label ) . doubleValue ( ) / ( double ) <unk> . size ( ) ) * recall ( label ) ;
}
return precision ;
}
public double recall ( int label ) {
double [ ] <unk> = <unk> ( label ) ;
if ( <unk> [ <num> ] + <unk> [ <num> ] == <num> ) {
return <num> ;
}
return <unk> [ <num> ] / ( <unk> [ <num> ] + <unk> [ <num> ] ) ;
}
public double F ( ) {
if ( precision ( ) + recall ( ) == <num> ) {
return <num> ;
}
return ( <num> * precision ( ) * recall ( ) ) / ( precision ( ) + recall ( ) ) ;
}
public double F ( int label ) {
if ( precision ( label ) + recall ( label ) == <num> ) {
return <num> ;
}
return ( <num> * precision ( label ) * recall ( label ) ) / ( precision ( label ) + recall ( label ) ) ;
}
public double [ ] <unk> ( int label ) {
if ( ! <unk> . containsKey ( label ) ) {
if ( <unk> . isEmpty ( ) ) {
<unk> . put ( label , new double [ ] { <num> , <num> , <num> , <num> } ) ;
} else {
double <unk> = <num> , <unk> = <num> , <unk> = <num> , <unk> = <num> ;
for ( Input input : <unk> . keySet ( ) ) {
int <unk> = <unk> . get ( input ) ;
if ( <unk> == label && input . label == label ) {
<unk> ++ ;
} else if ( <unk> != label && input . label != label ) {
<unk> ++ ;
} else if ( <unk> == label && input . label != label ) {
<unk> ++ ;
} else if ( <unk> != label && input . label == label ) {
<unk> ++ ;
}
}
<unk> . put ( label , new double [ ] { <unk> , <unk> , <unk> , <unk> } ) ;
}
}
return <unk> . get ( label ) ;
}
public void write ( File outFile ) throws Exception {
PrintStream out = null ;
try {
out = new PrintStream ( FileUtils . openOutputStream ( outFile ) ) ;
Set < Integer > labels = new HashSet < Integer > ( ) ;
for ( Input input : <unk> . keySet ( ) ) {
labels . add ( input . label ) ;
}
for ( int label : labels ) {
if ( label == <num> ) {
continue ;
}
double [ ] <unk> = <unk> ( label ) ;
out . println ( label + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + <unk> [ <num> ] + " + precision ( label ) + " + recall ( label ) + " + F ( label ) + " ) ;
}
for ( Input input : <unk> . keySet ( ) ) {
out . println ( input . scene + " + input . <unk> + " + input . label + " + <unk> . get ( input ) ) ;
}
} finally {
try {
out . flush ( ) ;
} catch ( Exception e ) {
}
IOUtils . closeQuietly ( out ) ;
}
}
}
package eecs545 ;
import libsvm . svm_node ;
import <unk> . core . Instance ;
import <unk> . core . Instances ;
public class Input {
public static String HEADER ;
public final String [ ] values ;
public final int scene ;
public final int <unk> ;
public final int [ ] [ ] [ ] <unk> ;
public final double [ ] [ ] [ ] <unk> ;
public int <unk> = <num> ;
public int label ;
private svm_node [ ] <unk> ;
private Instance instance ;
public Input ( String row ) {
this . values = row . split ( " ) ;
scene = Integer . valueOf ( values [ <num> ] ) ;
<unk> = Integer . valueOf ( values [ <num> ] ) ;
<unk> = new int [ Utils . <unk> ] [ Utils . <unk> ] [ Utils . <unk> ] ;
int index = <num> ;
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
int val = Integer . valueOf ( values [ index ++ ] ) ;
<unk> [ <unk> ] [ <unk> ] [ <unk> ] = val ;
<unk> += val ;
}
}
}
<unk> = new double [ Utils . <unk> ] [ Utils . <unk> ] [ Utils . <unk> ] ;
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ <unk> ] [ <unk> ] [ <unk> ] = ( double ) <unk> [ <unk> ] [ <unk> ] [ <unk> ] / ( double ) <unk> ;
}
}
}
label = Integer . valueOf ( values [ values . length  <num> ] ) ;
}
public static void setHeader ( String header ) {
HEADER = header ;
}
public final svm_node [ ] <unk> ( ) {
if ( <unk> == null ) {
<unk> = new svm_node [ ( int ) Math . pow ( Utils . <unk> , <num> ) ] ;
int index = <num> ;
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
svm_node feat = new svm_node ( ) ;
feat . index = index ;
feat . value = <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
<unk> [ index  <num> ] = feat ;
index ++ ;
}
}
}
}
return <unk> ;
}
public final Instance getInstance ( Instances instances ) {
if ( instance == null ) {
instance = new Instance ( ( int ) Math . pow ( Utils . <unk> , <num> ) + <num> ) ;
int index = <num> ;
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
instance . setValue ( index ++ , ( double ) <unk> [ <unk> ] [ <unk> ] [ <unk> ] ) ;
}
}
}
instance . <unk> ( instances ) ;
if ( instances != null ) {
instance . <unk> ( String . valueOf ( label ) ) ;
}
}
instance . <unk> ( instances ) ;
return instance ;
}
}
package eecs545 ;
import java . io . BufferedReader ;
import java . io . File ;
import java . io . InputStreamReader ;
import java . util . HashMap ;
import java . util . LinkedList ;
import java . util . List ;
import java . util . Map ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static void main ( String [ ] args ) throws Exception {
if ( args . length != <num> ) {
throw new Exception ( " ) ;
}
int argCount = <num> ;
File inFile = new File ( args [ argCount ++ ] ) ;
if ( ! inFile . exists ( ) ) {
throw new Exception ( " ) ;
}
File outDir = new File ( args [ argCount ++ ] ) ;
if ( ! outDir . exists ( ) && ! outDir . mkdirs ( ) ) {
throw new Exception ( " ) ;
}
List < Integer > <unk> = new LinkedList < Integer > ( ) ;
List < Input > inputs = new LinkedList < Input > ( ) ;
BufferedReader in = null ;
try {
in = new BufferedReader ( new InputStreamReader ( FileUtils . openInputStream ( inFile ) ) ) ;
Input . HEADER = in . readLine ( ) . trim ( ) ;
String row = null ;
while ( ( row = in . readLine ( ) ) != null ) {
inputs . add ( new Input ( row ) ) ;
}
} finally {
IOUtils . closeQuietly ( in ) ;
}
Map < Integer , List < Input >> <unk> = new HashMap < Integer , List < Input >> ( ) ;
for ( Input input : inputs ) {
if ( ! <unk> . containsKey ( input . label ) ) {
<unk> . put ( input . label , new LinkedList < Input > ( ) ) ;
}
<unk> . get ( input . label ) . add ( input ) ;
}
System . out . println ( " + <unk> + " ) ;
for ( int label : <unk> . keySet ( ) ) {
int count = <unk> . get ( label ) . size ( ) ;
if ( count >= <unk> && label != <num> ) {
<unk> . add ( label ) ;
System . out . println ( " + label + " + count ) ;
}
}
System . out . println ( ) ;
for ( int label : <unk> ) {
System . out . println ( " + label ) ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
<unk> totalResults = new <unk> ( label ) ;
File outFile = new File ( outDir , " + label + " + i + " ) ;
if ( outFile . exists ( ) ) {
System . out . println ( " ) ;
continue ;
}
for ( int it = <num> ; it < inputs . size ( ) ; it ++ ) {
<unk> c = new <unk> ( label ) ;
List < Input > trainingSet = new LinkedList < Input > ( ) ;
trainingSet . addAll ( inputs ) ;
Input <unk> = trainingSet . remove ( it ) ;
c . train ( trainingSet ) ;
List < Input > <unk> = new LinkedList < Input > ( ) ;
<unk> . add ( <unk> ) ;
totalResults . combine ( c . test ( <unk> ) ) ;
}
totalResults . write ( outFile ) ;
}
}
}
}
package eecs545 ;
import java . io . BufferedReader ;
import java . io . File ;
import java . io . InputStreamReader ;
import java . util . HashMap ;
import java . util . LinkedList ;
import java . util . List ;
import java . util . Map ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public static final int <unk> = <num> ;
public static final int <unk> = <num> ;
public static void main ( String [ ] args ) throws Exception {
if ( args . length != <num> ) {
throw new Exception ( " ) ;
}
int argCount = <num> ;
File inFile = new File ( args [ argCount ++ ] ) ;
if ( ! inFile . exists ( ) ) {
throw new Exception ( " ) ;
}
File outDir = new File ( args [ argCount ++ ] ) ;
if ( ! outDir . exists ( ) && ! outDir . mkdirs ( ) ) {
throw new Exception ( " ) ;
}
List < Integer > <unk> = new LinkedList < Integer > ( ) ;
List < Input > inputs = new LinkedList < Input > ( ) ;
BufferedReader in = null ;
try {
in = new BufferedReader ( new InputStreamReader ( FileUtils . openInputStream ( inFile ) ) ) ;
Input . HEADER = in . readLine ( ) . trim ( ) ;
String row = null ;
while ( ( row = in . readLine ( ) ) != null ) {
inputs . add ( new Input ( row ) ) ;
}
} finally {
IOUtils . closeQuietly ( in ) ;
}
Map < Integer , List < Input >> <unk> = new HashMap < Integer , List < Input >> ( ) ;
for ( Input input : inputs ) {
if ( ! <unk> . containsKey ( input . label ) ) {
<unk> . put ( input . label , new LinkedList < Input > ( ) ) ;
}
<unk> . get ( input . label ) . add ( input ) ;
}
System . out . println ( " + <unk> + " ) ;
for ( int label : <unk> . keySet ( ) ) {
int count = <unk> . get ( label ) . size ( ) ;
if ( count >= <unk> && label != <num> ) {
<unk> . add ( label ) ;
System . out . println ( " + label + " + count ) ;
}
}
System . out . println ( ) ;
for ( Input input : inputs ) {
if ( ! <unk> . contains ( input . label ) ) {
input . label = <num> ;
}
}
for ( int i = <num> ; i < <unk> ; i ++ ) {
<unk> totalResults = new <unk> ( ) ;
File outFile = new File ( outDir , " + i + " ) ;
if ( outFile . exists ( ) ) {
System . out . println ( " ) ;
continue ;
}
for ( int it = <num> ; it < inputs . size ( ) ; it ++ ) {
<unk> c = new <unk> ( ) ;
List < Input > trainingSet = new LinkedList < Input > ( ) ;
trainingSet . addAll ( inputs ) ;
Input <unk> = trainingSet . remove ( it ) ;
c . train ( trainingSet ) ;
List < Input > <unk> = new LinkedList < Input > ( ) ;
<unk> . add ( <unk> ) ;
totalResults . combine ( c . test ( <unk> ) ) ;
}
totalResults . write ( outFile ) ;
}
}
}
package eecs545 ;
import java . util . List ;
public class <unk> extends <unk> {
public <unk> ( int label ) {
super ( label ) ;
}
@Override
public void train ( List < Input > inputs ) throws Exception {
}
@Override
public <unk> test ( List < Input > inputs ) throws Exception {
<unk> results = new <unk> ( label ) ;
for ( Input input : inputs ) {
results . add ( input , MathUtils . RANDOM . nextBoolean ( ) ) ;
}
return results ;
}
}
package eecs545 ;
import java . util . Arrays ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
public class <unk> extends <unk> {
public static final int <unk> = <num> ;
private final double [ ] [ ] [ ] [ ] <unk> ;
private int K ;
private Map < Input , Integer > r = new HashMap < Input , Integer > ( ) ;
private int [ ] <unk> ;
double [ ] [ ] [ ] <unk> = new double [ Utils . <unk> ] [ Utils . <unk> ] [ Utils . <unk> ] ;
public <unk> ( int K ) {
this . K = K ;
<unk> = new double [ K ] [ Utils . <unk> ] [ Utils . <unk> ] [ Utils . <unk> ] ;
MathUtils . fill ( <unk> , <num> ) ;
<unk> = new int [ K ] ;
Arrays . fill ( <unk> , <num> ) ;
}
@Override
public void train ( List < Input > train ) throws Exception {
if ( train . isEmpty ( ) ) {
throw new Exception ( " ) ;
}
if ( train . size ( ) < K ) {
throw new Exception ( " ) ;
}
MathUtils . fill ( <unk> , <num> ) ;
double points = <num> ;
for ( Input input : train ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ <unk> ] [ <unk> ] [ <unk> ] += input . <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
points += input . <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
}
}
}
}
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ <unk> ] [ <unk> ] [ <unk> ] /= points ;
}
}
}
for ( int i = <num> ; i < K ; i ++ ) {
double [ ] [ ] [ ] <unk> = train . get ( MathUtils . RANDOM . nextInt ( train . size ( ) ) ) . <unk> ;
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ i ] [ <unk> ] [ <unk> ] [ <unk> ] = <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
}
}
}
}
int <unk> = <num> ;
for ( int i = <num> , <unk> = <num> ; i < <unk> && <unk> < <num> ; i ++ , <unk> ++ ) {
boolean <unk> = ( i < <num> ) ;
int [ ] <unk> = new int [ K ] ;
Arrays . fill ( <unk> , <num> ) ;
for ( Input input : train ) {
int <unk> =  <num> ;
double [ ] distance = new double [ K ] ;
for ( int k = <num> ; k < K ; k ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
distance [ k ] += Math . pow ( <unk> [ k ] [ <unk> ] [ <unk> ] [ <unk> ]  input . <unk> [ <unk> ] [ <unk> ] [ <unk> ] , <num> ) / <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
}
}
}
distance [ k ] = Math . sqrt ( distance [ k ] ) ;
if ( <unk> ==  <num> || distance [ k ] < distance [ <unk> ] ) {
<unk> = k ;
}
}
if ( r . containsKey ( input ) && r . get ( input ) != <unk> ) {
<unk> = true ;
}
r . put ( input , <unk> ) ;
<unk> [ <unk> ] ++ ;
}
if ( ! <unk> ) {
<unk> ++ ;
} else {
<unk> = <num> ;
}
for ( int k = <num> ; k < K ; k ++ ) {
if ( <unk> [ k ] == <num> ) {
continue ;
}
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ k ] [ <unk> ] [ <unk> ] [ <unk> ] = <num> ;
}
}
}
}
for ( Input input : train ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ r . get ( input ) . intValue ( ) ] [ <unk> ] [ <unk> ] [ <unk> ] += input . <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
}
}
}
}
for ( int k = <num> ; k < K ; k ++ ) {
if ( <unk> [ k ] == <num> ) {
continue ;
}
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ k ] [ <unk> ] [ <unk> ] [ <unk> ] /= ( double ) <unk> [ k ] ;
}
}
}
}
}
System . out . println ( " + <unk> ) ;
}
@Override
public <unk> test ( List < Input > test ) throws Exception {
<unk> results = new <unk> ( ) ;
for ( Input unknown : test ) {
int <unk> =  <num> ;
double [ ] distance = new double [ K ] ;
for ( int k = <num> ; k < K ; k ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
distance [ k ] += Math . pow ( <unk> [ k ] [ <unk> ] [ <unk> ] [ <unk> ]  unknown . <unk> [ <unk> ] [ <unk> ] [ <unk> ] , <num> ) / <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
}
}
}
distance [ k ] = Math . sqrt ( distance [ k ] ) ;
if ( <unk> ==  <num> || distance [ k ] < distance [ <unk> ] ) {
<unk> = k ;
}
}
Map < Integer , Integer > <unk> = new HashMap < Integer , Integer > ( ) ;
for ( Input input : r . keySet ( ) ) {
if ( r . get ( input ) == <unk> ) {
if ( ! <unk> . containsKey ( input . label ) ) {
<unk> . put ( input . label , <num> ) ;
} else {
<unk> . put ( input . label , <unk> . get ( input . label ) + <num> ) ;
}
}
}
int <unk> = <num> , <unk> = <num> ;
for ( int label : <unk> . keySet ( ) ) {
if ( <unk> . get ( label ) > <unk> ) {
<unk> = label ;
<unk> = <unk> . get ( label ) ;
}
}
results . add ( unknown , <unk> ) ;
}
return results ;
}
}
package eecs545 ;
import java . io . File ;
import java . io . PrintStream ;
import org . apache . commons . io . FileUtils ;
import org . apache . commons . io . IOUtils ;
public class <unk> {
public static void main ( String [ ] args ) throws Exception {
if ( args . length != <num> ) {
throw new Exception ( " ) ;
}
int argCount = <num> ;
File <unk> = new File ( args [ argCount ++ ] ) ;
if ( ! <unk> . exists ( ) ) {
throw new Exception ( " ) ;
}
File outFile = new File ( args [ argCount ++ ] ) ;
if ( outFile . exists ( ) ) {
throw new Exception ( " ) ;
}
PrintStream out = null ;
try {
out = new PrintStream ( FileUtils . openOutputStream ( outFile ) ) ;
String header = " ;
for ( int <unk> = <num> ; <unk> < Math . pow ( Utils . <unk> , <num> ) ; <unk> ++ ) {
header += " + <unk> ;
}
header += " ;
out . println ( header ) ;
for ( String <unk> : <unk> . list ( ) ) {
if ( <unk> . equals ( " ) ) {
continue ;
}
File <unk> = new File ( <unk> , <unk> ) ;
for ( String <unk> : <unk> . list ( ) ) {
String [ ] <unk> = <unk> . split ( " ) ;
String scene = <unk> [ <num> ] . replace ( " , " ) ;
String segment = <unk> [ <num> ] . replace ( " , " ) . replace ( " , " ) ;
File <unk> = new File ( <unk> , <unk> ) ;
<unk> <unk> = new <unk> ( <unk> ) ;
int [ ] [ ] [ ] <unk> = new int [ Utils . <unk> ] [ Utils . <unk> ] [ Utils . <unk> ] ;
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ <unk> ] [ <unk> ] [ <unk> ] = <num> ;
}
}
}
for ( Point p : <unk> . points ) {
int <unk> = ( int ) Math . floor ( p . r / Utils . <unk> ) ;
int <unk> = ( int ) Math . floor ( p . g / Utils . <unk> ) ;
int <unk> = ( int ) Math . floor ( p . b / Utils . <unk> ) ;
<unk> [ <unk> ] [ <unk> ] [ <unk> ] ++ ;
}
String row = scene + " + segment ;
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
row += " + <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
}
}
}
row += " + <unk> ;
out . println ( row ) ;
}
}
} finally {
IOUtils . closeQuietly ( out ) ;
}
}
}
package eecs545 ;
import java . util . Collection ;
import java . util . HashMap ;
import java . util . List ;
import java . util . Map ;
public class <unk> extends <unk> {
private int K ;
private Collection < Input > train ;
double [ ] [ ] [ ] <unk> = new double [ Utils . <unk> ] [ Utils . <unk> ] [ Utils . <unk> ] ;
public <unk> ( int label , int K ) {
super ( label ) ;
this . K = K ;
}
@Override
public void train ( List < Input > train ) throws Exception {
if ( train . isEmpty ( ) ) {
throw new Exception ( " ) ;
}
if ( train . size ( ) < K ) {
throw new Exception ( " ) ;
}
this . train = train ;
MathUtils . fill ( <unk> , <num> ) ;
double points = <num> ;
for ( Input input : train ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ <unk> ] [ <unk> ] [ <unk> ] += input . <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
points += input . <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
}
}
}
}
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
<unk> [ <unk> ] [ <unk> ] [ <unk> ] /= points ;
}
}
}
}
@Override
public <unk> test ( List < Input > test ) throws Exception {
<unk> results = new <unk> ( label ) ;
for ( Input unknown : test ) {
Input [ ] <unk> = new Input [ K ] ;
double [ ] <unk> = new double [ K ] ;
for ( Input known : train ) {
double distance = <num> ;
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
for ( int <unk> = <num> ; <unk> < Utils . <unk> ; <unk> ++ ) {
distance += Math . pow ( known . <unk> [ <unk> ] [ <unk> ] [ <unk> ]  unknown . <unk> [ <unk> ] [ <unk> ] [ <unk> ] , <num> ) / <unk> [ <unk> ] [ <unk> ] [ <unk> ] ;
}
}
}
distance = Math . sqrt ( distance ) ;
for ( int k = <num> ; k < K ; k ++ ) {
if ( <unk> [ k ] == null
|| distance < <unk> [ k ] ) {
<unk> [ k ] = known ;
<unk> [ k ] = distance ;
break ;
}
}
}
Map < Integer , Integer > <unk> = new HashMap < Integer , Integer > ( ) ;
for ( int k = <num> ; k < K ; k ++ ) {
if ( ! <unk> . containsKey ( <unk> [ k ] . label ) ) {
<unk> . put ( <unk> [ k ] . label , <num> ) ;
} else {
<unk> . put ( <unk> [ k ] . label , <unk> . get ( <unk> [ k ] . label ) + <num> ) ;
}
}
int <unk> =  <num> , <unk> =  <num> ;
for ( int <unk> : <unk> . keySet ( ) ) {
if ( <unk> ==  <num> || <unk> . get ( <unk> ) > <unk> ) {
<unk> = <unk> ;
<unk> = <unk> . get ( <unk> ) ;
}
}
results . add ( unknown , <unk> == label ) ;
}
return results ;
}
}
import java . awt . * ;
import java . awt . event . * ;
import javax . swing . * ;
import java . awt . image . MemoryImageSource ;
import java . util . Random ;
import java . net . DatagramSocket ;
import java . net . DatagramPacket ;
import javax . sound . sampled . AudioFormat ;
import javax . sound . sampled . AudioInputStream ;
import javax . sound . sampled . AudioSystem ;
import javax . sound . sampled . <unk> ;
import javax . sound . sampled . DataLine ;
import javax . sound . sampled . LineUnavailableException ;
import javax . sound . sampled . SourceDataLine ;
public class <unk> implements Runnable {
int pixels [ ] ;
MemoryImageSource source ;
int size ;
int width ;
int height ;
int <unk> = <num> ;
int <unk> = <num> ;
int <unk> = <num> ;
static SourceDataLine line = null ;
<unk> ( )
{
width = pixelSize * <num> ;
height = pixelSize * <num> ;
size = width * height ;
pixels = new int [ size ] ;
for ( int i = <num> ; i < size ; i ++ ) {
pixels [ i ] = <unk> ;
}
source = new MemoryImageSource ( width , height , pixels , <num> , width ) ;
source . <unk> ( true ) ;
}
public void run ( ) {
Thread me = Thread . currentThread ( ) ;
me . setPriority ( Thread . MIN_PRIORITY ) ;
DatagramSocket s ;
try {
s = new DatagramSocket ( <num> ) ;
s . setReuseAddress ( true ) ;
while ( true ) {
byte p [ ] = new byte [ <num> ] ;
DatagramPacket pp = new DatagramPacket ( p , p . length ) ;
s . receive ( pp ) ;
int x ;
int y ;
for ( x = <num> ; x < <num> ; x ++ )
{
for ( y = <num> ; y < <num> ; y ++ )
{
int b = ( ( int ) p [ ( x >> <num> ) | ( y << <num> ) ] ) & <num> ;
int color = ( ( b & ( <num> << ( <num>  ( x & <num> ) ) ) ) != <num> ) ? <unk> : <unk> ;
int i ;
int j ;
for ( i = <num> ; i < ( pixelSize  <num> ) ; i ++ )
{
for ( j = <num> ; j < ( pixelSize  <num> ) ; j ++ )
{
pixels [ ( y * pixelSize + i ) * ( <num> * pixelSize ) + ( x * pixelSize + j ) ] = color ;
}
}
}
}
source . <unk> ( <num> , <num> , width , height , true ) ;
if ( line != null )
{
int av = line . available ( ) ;
if ( av >= <num> )
{
line . write ( p , <num> , <num> ) ;
}
}
}
} catch ( Exception e )
{
}
}
private static int pixelSize = <num> ;
private static void createAndShowGUI ( ) {
JFrame frame = new JFrame ( " ) ;
frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
<unk> f = new <unk> ( ) ;
new Thread ( f ) . start ( ) ;
Image img = frame . createImage ( f . source ) ;
JLabel <unk> = new JLabel ( new ImageIcon ( img ) ) ;
<unk> . setPreferredSize ( new Dimension ( <num> * pixelSize + <num> , <num> * pixelSize + <num> ) ) ;
frame . getContentPane ( ) . add ( <unk> , BorderLayout . CENTER ) ;
frame . pack ( ) ;
frame . setVisible ( true ) ;
}
public static void main ( String [ ] args ) {
if ( args . length > <num> ) {
try {
int firstArg ;
firstArg = Integer . parseInt ( args [ <num> ] ) ;
if ( ( firstArg > <num> ) && ( firstArg < <num> ) )
{
pixelSize = firstArg ;
}
} catch ( NumberFormatException e ) {
System . err . println ( " ) ;
System . exit ( <num> ) ;
}
}
AudioFormat audioFormat = new AudioFormat ( <num> , <num> , <num> , true , true ) ;
DataLine . Info info = new DataLine . Info ( SourceDataLine . class ,
audioFormat ) ;
try
{
line = ( SourceDataLine ) AudioSystem . getLine ( info ) ;
line . open ( audioFormat , <num> ) ;
}
catch ( LineUnavailableException e )
{
e . printStackTrace ( ) ;
System . exit ( <num> ) ;
}
catch ( Exception e )
{
e . printStackTrace ( ) ;
System . exit ( <num> ) ;
}
line . start ( ) ;
javax . swing . SwingUtilities . invokeLater ( new Runnable ( ) {
public void run ( ) {
createAndShowGUI ( ) ;
}
} ) ;
}
}
import java . awt . * ;
import java . awt . event . * ;
import javax . swing . * ;
import java . awt . image . MemoryImageSource ;
import java . util . Random ;
import java . net . DatagramSocket ;
import java . net . DatagramPacket ;
public class <unk> implements Runnable {
int pixels [ ] ;
MemoryImageSource source ;
int size ;
int width ;
int height ;
int <unk> = <num> ;
int <unk> = <num> ;
int <unk> = <num> ;
Random rand ;
<unk> ( )
{
width = pixelSize * <num> ;
height = pixelSize * <num> ;
size = width * height ;
pixels = new int [ size ] ;
for ( int i = <num> ; i < size ; i ++ ) {
pixels [ i ] = <unk> ;
}
source = new MemoryImageSource ( width , height , pixels , <num> , width ) ;
source . <unk> ( true ) ;
rand = new Random ( ) ;
}
public void run ( ) {
Thread me = Thread . currentThread ( ) ;
me . setPriority ( Thread . MIN_PRIORITY ) ;
DatagramSocket s ;
try {
s = new DatagramSocket ( <num> ) ;
s . setReuseAddress ( true ) ;
while ( true ) {
byte p [ ] = new byte [ <num> ] ;
DatagramPacket pp = new DatagramPacket ( p , p . length ) ;
s . receive ( pp ) ;
int x ;
int y ;
for ( x = <num> ; x < <num> ; x ++ )
{
for ( y = <num> ; y < <num> ; y ++ )
{
int b = ( ( int ) p [ ( x >> <num> ) | ( y << <num> ) ] ) & <num> ;
int color = ( ( b & ( <num> << ( <num>  ( x & <num> ) ) ) ) != <num> ) ? <unk> : <unk> ;
int i ;
int j ;
for ( i = <num> ; i < ( pixelSize  <num> ) ; i ++ )
{
for ( j = <num> ; j < ( pixelSize  <num> ) ; j ++ )
{
pixels [ ( y * pixelSize + i ) * ( <num> * pixelSize ) + ( x * pixelSize + j ) ] = color ;
}
}
}
}
source . <unk> ( <num> , <num> , width , height , true ) ;
}
} catch ( Exception e )
{
}
}
private static int pixelSize = <num> ;
private static void createAndShowGUI ( ) {
JFrame frame = new JFrame ( " ) ;
frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ;
<unk> f = new <unk> ( ) ;
new Thread ( f ) . start ( ) ;
Image img = frame . createImage ( f . source ) ;
JLabel <unk> = new JLabel ( new ImageIcon ( img ) ) ;
<unk> . setPreferredSize ( new Dimension ( <num> * pixelSize + <num> , <num> * pixelSize + <num> ) ) ;
frame . getContentPane ( ) . add ( <unk> , BorderLayout . CENTER ) ;
frame . pack ( ) ;
frame . setVisible ( true ) ;
}
public static void main ( String [ ] args ) {
if ( args . length > <num> ) {
try {
int firstArg ;
firstArg = Integer . parseInt ( args [ <num> ] ) ;
if ( ( firstArg > <num> ) && ( firstArg < <num> ) )
{
pixelSize = firstArg ;
}
} catch ( NumberFormatException e ) {
System . err . println ( " ) ;
System . exit ( <num> ) ;
}
}
javax . swing . SwingUtilities . invokeLater ( new Runnable ( ) {
public void run ( ) {
createAndShowGUI ( ) ;
}
} ) ;
}
}
package com . android . <unk> . core ;
public class Field {
private String mName ;
private String mType ;
private boolean <unk> ;
private int mSize ;
private int <unk> ;
private String <unk> ;
private String <unk> ;
public Field ( String name ) {
this . mName = name ;
this . mType = " ;
this . <unk> = false ;
this . mSize =  <num> ;
this . <unk> = " ;
this . <unk> = null ;
<unk> = <num> ;
}
public String <unk> ( )
{
String type = mType ;
int size = mSize ;
String out = " ;
if ( ( type . equals ( " ) || type . equals ( " ) || type . equals ( " ) ) && ( size > <num> ) ) {
out += " + mSize + " ;
} else if ( ( type . equals ( " ) || type . equals ( " ) || type . equals ( " ) ) && ( size <= <num> ) ) {
out += " ;
} else if ( type . equals ( " ) ) {
out += " ;
} else if ( type . equals ( " ) ) {
out += " ;
} else {
out += " + type ;
}
return out ;
}
public String <unk> ( )
{
String sql = " ;
sql += " + <unk> ( ) ;
if ( <unk> ( ) )
sql += " ;
if ( <unk> ( ) != null ) {
sql += " + <unk> ( ) + " ;
}
return sql ;
}
public String getName ( ) {
return mName ;
}
public void setName ( String name ) {
this . mName = name ;
}
public String getType ( ) {
return mType ;
}
public void setType ( String type ) {
this . mType = type ;
}
public boolean <unk> ( ) {
return <unk> ;
}
public void <unk> ( boolean <unk> ) {
this . <unk> = <unk> ;
}
public int getSize ( ) {
return mSize ;
}
public void setSize ( int size ) {
this . mSize = size ;
}
public String <unk> ( ) {
return <unk> ;
}
public void <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public String <unk> ( ) {
return <unk> ;
}
public void <unk> ( String <unk> ) {
this . <unk> = <unk> ;
}
package com . android . <unk> ;
import android . app . Activity ;
import android . os . Bundle ;
import android . view . View ;
import android . widget . EditText ;
import com . android . <unk> . core . Field ;
import com . android . <unk> . core . Table ;
import java . util . HashMap ;
import java . util . Map ;
public abstract class <unk> extends Activity
{
public final static String <unk> = " ;
protected Long mRowId ;
protected String <unk> ;
protected Bundle <unk> ;
@Override
protected void onCreate ( Bundle savedInstanceState ) {
super . onCreate ( savedInstanceState ) ;
<unk> = <unk> ( ) ;
<unk> = savedInstanceState ;
setView ( ) ;
}
protected String <unk> ( )
{
return <unk> . KEY_ID ;
}
abstract protected String getTableName ( ) ;
abstract protected void setView ( ) ;
@Override
protected void onPause ( ) {
super . onPause ( ) ;
<unk> ( ) ;
}
protected void <unk> ( )
{
<unk> . getInstance ( ) . close ( ) ;
}
@Override
protected void onResume ( ) {
super . onResume ( ) ;
openDatabase ( ) ;
<unk> ( ) ;
}
abstract protected void openDatabase ( ) ;
protected void <unk> ( )
{
if ( <unk> == null )
{
Bundle extras = getIntent ( ) . getExtras ( ) ;
mRowId = ( Long ) ( extras != null ? extras . get ( <unk> )
: null ) ;
if ( mRowId != null )
{
<unk> ( new Entity ( getTableName ( ) , mRowId ) ) ;
}
else
{
<unk> ( ) ;
}
}
else
{
<unk> ( <unk> ) ;
}
}
@Override
protected void onSaveInstanceState ( Bundle outState ) {
super . onSaveInstanceState ( outState ) ;
<unk> = outState ;
if ( mRowId != null )
outState . putLong ( <unk> , mRowId ) ;
<unk> ( <unk> ) ;
}
abstract protected int <unk> ( ) ;
protected Map < String , View > <unk> ( )
{
Map < String , View > views = new HashMap < String , View > ( ) ;
View mainView = findViewById ( <unk> ( ) ) ;
Table table = new Table ( getTableName ( ) ) ;
for ( Field f : table . getFields ( ) )
{
View v = mainView . <unk> ( f . getName ( ) ) ;
if ( v != null )
views . put ( f . getName ( ) , v ) ;
}
return views ;
}
protected void <unk> ( Entity entity )
{
Table table = new Table ( getTableName ( ) ) ;
Map < String , View > views = <unk> ( ) ;
for ( Field f : table . getFields ( ) )
{
Object value = entity . getValue ( f . getName ( ) ) ;
View view = views . get ( f . getName ( ) ) ;
if ( value != null && view != null )
{
if ( EditText . class . isInstance ( view ) )
{
( ( EditText ) view ) . setText ( value . toString ( ) ) ;
}
}
}
}
abstract protected void <unk> ( ) ;
abstract protected void <unk> ( Bundle state ) ;
abstract protected void <unk> ( Bundle state ) ;
abstract protected void <unk> ( ) ;
}
package com . android . <unk> . core ;
import com . android . <unk> . <unk> ;
import java . util . ArrayList ;
public class Table {
private String mName ;
private String <unk> ;
private ArrayList < Field > <unk> = new ArrayList < Field > ( ) ;
private int <unk> ;
private boolean <unk> ;
public Table ( String name ) {
mName = name ;
<unk> = true ;
<unk> = " ;
<unk> = <num> ;
}
public String <unk> ( )
{
String out = " + mName + " ;
ArrayList < Field > fields = <unk> ;
int <unk> = fields . size ( ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
Field f = fields . get ( i ) ;
if ( f . getType ( ) . equals ( " ) ) {
ArrayList < String > langs = <unk> . getInstance ( ) . getLanguages ( ) ;
for ( int j = <num> ; j < langs . size ( ) ; j ++ ) {
out += " + f . getName ( ) + " + langs . get ( j ) ;
out += " + f . <unk> ( ) ;
if ( f . <unk> ( ) ) {
out += " ;
}
if ( f . <unk> ( ) != null ) {
out += " + f . <unk> ( ) + " ;
}
}
} else {
out += " + f . getName ( ) ;
out += " + f . <unk> ( ) ;
if ( f . <unk> ( ) ) {
out += " ;
}
if ( f . <unk> ( ) != null ) {
out += " + f . <unk> ( ) + " ;
}
}
}
out += " ;
return out ;
}
public String <unk> ( Field field ) {
if ( field != null ) {
String out = " ;
if ( field . getType ( ) . equals ( " ) ) {
ArrayList < String > langs = <unk> . getInstance ( ) . getLanguages ( ) ;
for ( int j = <num> ; j < langs . size ( ) ; j ++ ) {
out += " + mName + " + field . getName ( ) + " + langs . get ( j ) + field . <unk> ( ) + " ;
}
} else {
out = " + mName + " + field . getName ( ) + " + field . <unk> ( ) ;
}
return out ;
}
return null ;
}
public String <unk> ( ) {
String out = " + mName ;
return out ;
}
public ArrayList < Field > getFields ( ) {
return <unk> ;
}
public String [ ] <unk> ( )
{
ArrayList < Field > fields = <unk> ;
int <unk> = fields . size ( ) ;
ArrayList < String > <unk> = new ArrayList < String > ( ) ;
<unk> . add ( <unk> . KEY_ID ) ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
if ( fields . get ( i ) . getType ( ) . equals ( " ) ) {
ArrayList < String > langs = <unk> . getInstance ( ) . getLanguages ( ) ;
for ( int j = <num> ; j < langs . size ( ) ; j ++ ) {
<unk> . add ( fields . get ( i ) . getName ( ) + " + langs . get ( j ) ) ;
}
} else {
<unk> . add ( fields . get ( i ) . getName ( ) ) ;
}
}
String [ ] out = new String [ <unk> . size ( ) ] ;
for ( int i = <num> ; i < <unk> . size ( ) ; i ++ ) {
out [ i ] = <unk> . get ( i ) ;
}
return out ;
}
public Field getField ( String name ) {
Field res = null ;
ArrayList < Field > fields = <unk> ;
int <unk> = fields . size ( ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
Field f = fields . get ( i ) ;
if ( f . getName ( ) . equals ( name ) ) {
res = f ;
}
}
if ( res == null ) {
throw new NullPointerException ( " + name + " + mName + " ) ;
}
return res ;
}
public String getName ( ) {
return mName ;
}
public void setName ( String name ) {
this . mName = name ;
}
public void addField ( Field field ) {
<unk> . add ( field ) ;
}
public String <unk> ( ) {
return <unk> ;
}
public void setToString ( String toString ) {
this . <unk> = toString ;
}
public int <unk> ( ) {
return <unk> ;
}
public void <unk> ( int <unk> ) {
this . <unk> = <unk> ;
}
public boolean <unk> ( ) {
return <unk> ;
}
public void <unk> ( boolean backup ) {
this . <unk> = backup ;
}
package com . android . <unk> . core ;
import android . content . Context ;
import android . content . res . XmlResourceParser ;
import android . database . Cursor ;
import android . database . sqlite . SQLiteDatabase ;
import android . database . sqlite . SQLiteOpenHelper ;
import android . util . Log ;
import com . android . <unk> . <unk> ;
import com . android . <unk> . Entity ;
import org . xmlpull . v1 . XmlPullParser ;
import org . xmlpull . v1 . XmlPullParserException ;
import org . xmlpull . v1 . XmlPullParserFactory ;
import java . io . * ;
import java . util . ArrayList ;
import java . util . List ;
import java . util . Locale ;
import java . util . StringTokenizer ;
public class <unk> {
private final static int <unk> = <num> ;
private final static int <unk> = <num> ;
private final static int <unk> = <num> ;
private String <unk> = " ;
private ArrayList < String > <unk> = new ArrayList < String > ( ) ;
private String mCurrentLanguage ;
private SQLiteDatabase mDb ;
private DatabaseHelper mDbHelper ;
private ArrayList < Table > <unk> ;
private String <unk> = " ;
private int <unk> = <num> ;
private int <unk> = <num> ;
private Context mCtx ;
private boolean <unk> = false ;
public <unk> ( )
{
}
private class DatabaseHelper extends SQLiteOpenHelper {
DatabaseHelper ( ) {
super ( mCtx , <unk> , null , <unk> ) ;
}
@Override
public void onCreate ( SQLiteDatabase db ) {
try {
System . out . println ( " ) ;
<unk> = <num> ;
ArrayList < Table > tables = <unk> ;
int <unk> = tables . size ( ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
db . execSQL ( tables . get ( i ) . <unk> ( ) ) ;
<unk> = true ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
@Override
public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion )
{
Log . w ( " , " + oldVersion + " + newVersion ) ;
<unk> = oldVersion ;
ArrayList < Table > tables = <unk> ;
int <unk> = tables . size ( ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
Table t = tables . get ( i ) ;
if ( add ( t . <unk> ( ) , oldVersion , newVersion ) )
{
System . out . println ( " + t . getName ( ) ) ;
db . execSQL ( t . <unk> ( ) ) ;
} else
{
ArrayList < Field > fields = t . getFields ( ) ;
int <unk> = fields . size ( ) ;
for ( int j = <num> ; j < <unk> ; j ++ ) {
Field f = fields . get ( j ) ;
if ( add ( f . <unk> ( ) , oldVersion , newVersion ) ) {
String sql = t . <unk> ( f ) ;
if ( sql != null ) {
System . out . println ( " + t . getName ( ) + " + f . getName ( ) + " ) ;
db . execSQL ( sql ) ;
}
}
}
}
}
<unk> = true ;
}
private boolean add ( int version , int oldVersion , int newVersion ) {
if ( version > oldVersion && version <= newVersion )
return true ;
else
return false ;
}
}
public void open ( Context context , String <unk> , ArrayList < Table > tables ) throws XmlPullParserException , IOException {
try {
if ( tables . size ( ) == <num> )
{
<unk> = <unk> ;
<unk> = tables ;
mCtx = context ;
int <unk> = context . getResources ( ) . getIdentifier ( <unk> + " , null , null ) ;
if ( <unk> != <num> ) {
XmlResourceParser x = mCtx . getResources ( ) . getXml ( <unk> ) ;
int eventType = x . getEventType ( ) ;
Table <unk> = new Table ( " ) ;
Field currentField = new Field ( " ) ;
while ( eventType != XmlPullParser . END_DOCUMENT ) {
if ( eventType == XmlPullParser . START_TAG ) {
if ( x . getName ( ) . equals ( " ) ) {
<unk> = x . getAttributeValue ( null , " ) ;
<unk> = Integer . parseInt ( x . getAttributeValue ( null , " ) ) ;
if ( x . getAttributeValue ( null , " ) != null ) {
boolean <unk> = true ;
StringTokenizer tokens = new StringTokenizer ( x . getAttributeValue ( null , " ) , " ) ;
while ( tokens . hasMoreTokens ( ) ) {
String token = tokens . nextToken ( ) ;
<unk> . add ( token ) ;
if ( <unk> ) { mCurrentLanguage = token ; <unk> = false ; }
if ( Locale . getDefault ( ) . getLanguage ( ) . equals ( token ) ) mCurrentLanguage = token ;
}
System . out . println ( " + mCurrentLanguage ) ;
}
} else if ( x . getName ( ) . equals ( " ) ) {
<unk> = new Table ( x . getAttributeValue ( null , " ) ) ;
if ( x . getAttributeValue ( null , " ) != null ) <unk> . setToString ( x . getAttributeValue ( null , " ) ) ;
if ( x . getAttributeValue ( null , " ) != null ) {
if ( x . getAttributeValue ( null , " ) . equals ( " ) ) <unk> . <unk> ( false ) ;
}
if ( x . getAttributeValue ( null , " ) != null ) {
<unk> . <unk> ( Integer . parseInt ( x . getAttributeValue ( null , " ) ) ) ;
}
} else if ( x . getName ( ) . equals ( " ) ) {
currentField = new Field ( x . getAttributeValue ( null , " ) ) ;
if ( x . getAttributeValue ( null , " ) != null ) currentField . setType ( x . getAttributeValue ( null , " ) ) ;
if ( x . getAttributeValue ( null , " ) != null ) currentField . <unk> ( x . getAttributeValue ( null , " ) ) ;
if ( x . getAttributeValue ( null , " ) != null ) {
if ( x . getAttributeValue ( null , " ) == " ) currentField . <unk> ( true ) ;
}
if ( x . getAttributeValue ( null , " ) != null ) currentField . setSize ( Integer . parseInt ( x . getAttributeValue ( null , " ) ) ) ;
if ( x . getAttributeValue ( null , " ) != null ) currentField . <unk> ( x . getAttributeValue ( null , " ) ) ;
if ( x . getAttributeValue ( null , " ) != null ) {
currentField . <unk> ( Integer . parseInt ( x . getAttributeValue ( null , " ) ) ) ;
}
<unk> . addField ( currentField ) ;
}
}
if ( eventType == XmlPullParser . END_TAG ) {
if ( x . getName ( ) . equals ( " ) ) {
tables . add ( <unk> ) ;
}
}
eventType = x . next ( ) ;
}
x . close ( ) ;
} else {
System . out . println ( " ) ;
System . out . println ( " ) ;
System . out . println ( " ) ;
}
}
<unk> = false ;
mDbHelper = new DatabaseHelper ( ) ;
mDb = mDbHelper . getWritableDatabase ( ) ;
if ( <unk> )
<unk> ( ) ;
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public void close ( ) {
mDbHelper . close ( ) ;
}
public void <unk> ( ) throws XmlPullParserException , IOException {
try {
for ( int i = <unk> + <num> ; i <= <unk> ; i ++ ) {
int <unk> = mCtx . getResources ( ) . getIdentifier ( <unk> + " + i , null , null ) ;
if ( <unk> != <num> ) {
XmlResourceParser x = mCtx . getResources ( ) . getXml ( <unk> ) ;
<unk> ( x ) ;
}
}
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public void backup ( String file ) throws XmlPullParserException , IOException {
backup ( file , false ) ;
}
public void backup ( String file , boolean <unk> ) throws XmlPullParserException , IOException {
File f = new File ( file ) ;
if ( f . exists ( ) ) f . delete ( ) ;
FileOutputStream fOut = new FileOutputStream ( file ) ;
OutputStreamWriter <unk> = new OutputStreamWriter ( fOut ) ;
<unk> . write ( "
+ " ) ;
List < Table > tables = <unk> ;
int <unk> = tables . size ( ) ;
System . out . println ( " + tables . size ( ) ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
Table t = tables . get ( i ) ;
if ( t . <unk> ( ) || <unk> ) {
String tableName = t . getName ( ) ;
System . out . println ( " + tableName ) ;
String [ ] <unk> = t . <unk> ( ) ;
Cursor c = getDB ( ) . query ( tableName , <unk> , null , null , null , null , null ) ;
c . moveToFirst ( ) ;
ArrayList < Field > fields = t . getFields ( ) ;
int <unk> = fields . size ( ) ;
while ( ! c . isAfterLast ( ) ) {
<unk> . append ( " + tableName + " + c . getString ( c . getColumnIndex ( <unk> . KEY_ID ) ) + " ) ;
for ( int j = <num> ; j < <unk> ; j ++ )
{
Field field = fields . get ( j ) ;
if ( c . getString ( c . getColumnIndex ( field . getName ( ) ) ) != null )
<unk> . append ( " + field . getName ( ) + " + c . getString ( c . getColumnIndex ( field . getName ( ) ) ) . replace ( " , " ) + " ) ;
}
<unk> . append ( " ) ;
c . moveToNext ( ) ;
}
c . close ( ) ;
}
}
<unk> . append ( " ) ;
<unk> . flush ( ) ;
<unk> . close ( ) ;
}
public void restore ( String file ) throws XmlPullParserException , IOException {
try {
XmlPullParserFactory factory = XmlPullParserFactory . newInstance ( ) ;
XmlPullParser x = ( XmlPullParser ) factory . newPullParser ( ) ;
x . setInput ( new FileReader ( file ) ) ;
<unk> ( x ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
}
private void <unk> ( XmlPullParser x ) throws XmlPullParserException , IOException {
try {
int eventType = x . getEventType ( ) ;
Entity <unk> = null ;
int <unk> = <unk> ;
while ( eventType != XmlPullParser . END_DOCUMENT ) {
if ( eventType == XmlPullParser . START_TAG ) {
if ( x . getName ( ) . equals ( " ) ) {
<unk> = null ;
if ( x . getAttributeValue ( null , " ) != null ) {
long id =  <num> ;
if ( x . getAttributeValue ( null , " ) != null ) {
if ( x . getAttributeValue ( null , " ) . equals ( " ) ) {
<unk> = <unk> ;
} else if ( x . getAttributeValue ( null , " ) . equals ( " ) ) {
<unk> = <unk> ;
} else {
<unk> = <unk> ;
}
} else {
<unk> = <unk> ;
}
if ( x . getAttributeValue ( null , " ) != null ) {
id = Long . parseLong ( x . getAttributeValue ( null , " ) ) ;
}
if ( <unk> == <unk> ) {
<unk> = new Entity ( x . getAttributeValue ( null , " ) ) ;
if ( id > <num> ) <unk> . <unk> ( id ) ;
} else if ( <unk> == <unk> ) {
if ( id > <num> ) <unk> = new Entity ( x . getAttributeValue ( null , " ) , id ) ;
} else {
if ( id > <num> ) <unk> = new Entity ( x . getAttributeValue ( null , " ) , id ) ;
}
}
}
if ( x . getName ( ) . equals ( " ) ) {
if ( x . getAttributeValue ( null , " ) != null ) {
if ( ( x . getAttributeValue ( null , " ) != null ) && ( x . getAttributeValue ( null , " ) != null ) ) {
if ( <unk> != null ) <unk> . <unk> ( x . getAttributeValue ( null , " ) ,
x . getAttributeValue ( null , " ) ,
x . getAttributeValue ( null , " ) ) ;
}
} else {
if ( ( x . getAttributeValue ( null , " ) != null ) && ( x . getAttributeValue ( null , " ) != null ) ) {
if ( <unk> != null ) {
if ( x . getAttributeValue ( null , " ) != null ) {
<unk> . setValue ( x . getAttributeValue ( null , " ) ,
x . getAttributeValue ( null , " ) . replace ( " , " ) ) ;
}
}
}
}
}
}
if ( eventType == XmlPullParser . END_TAG ) {
if ( x . getName ( ) . equals ( " ) ) {
if ( <unk> != null ) {
if ( <unk> == <unk> ) {
<unk> . delete ( ) ;
} else {
<unk> . save ( ) ;
}
}
}
}
eventType = x . next ( ) ;
}
} catch ( Exception e ) {
e . printStackTrace ( ) ;
}
}
public SQLiteDatabase getDB ( ) {
return mDb ;
}
public Context getContext ( )
{
return mCtx ;
}
public String getPackage ( ) {
return <unk> ;
}
public void <unk> ( String lang ) {
if ( <unk> . contains ( lang ) ) mCurrentLanguage = lang ;
}
public ArrayList < String > getLanguages ( ) {
return <unk> ;
}
public String <unk> ( ) {
return mCurrentLanguage ;
}
}
package com . android . <unk> ;
import android . content . ContentResolver ;
import android . database . CharArrayBuffer ;
import android . database . ContentObserver ;
import android . database . Cursor ;
import android . database . DataSetObserver ;
import android . net . Uri ;
import android . os . Bundle ;
import java . util . Iterator ;
public class <unk> implements Cursor , Iterable < Entity > {
private Cursor mCursor ;
private String <unk> ;
private Entity <unk> ;
public <unk> ( String tableName , Cursor c )
{
<unk> = tableName ;
mCursor = c ;
c . moveToFirst ( ) ;
}
private void onMove ( int oldPosition , int newPosition )
{
if ( oldPosition != newPosition || <unk> == null ) {
<unk> = new Entity ( <unk> , mCursor ) ;
}
}
public Entity getEntity ( )
{
return <unk> ;
}
@Override
public void close ( ) {
mCursor . close ( ) ;
}
@Override
public void copyStringToBuffer ( int columnIndex , CharArrayBuffer buffer ) {
mCursor . copyStringToBuffer ( columnIndex , buffer ) ;
}
@Override
public void deactivate ( ) {
mCursor . deactivate ( ) ;
}
@Override
public byte [ ] getBlob ( int columnIndex ) {
return mCursor . getBlob ( columnIndex ) ;
}
@Override
public int getColumnCount ( ) {
return mCursor . getColumnCount ( ) ;
}
@Override
public int getColumnIndex ( String columnName ) {
return mCursor . getColumnIndex ( columnName ) ;
}
@Override
public int getColumnIndexOrThrow ( String columnName )
throws IllegalArgumentException {
return mCursor . getColumnIndexOrThrow ( columnName ) ;
}
@Override
public String getColumnName ( int columnIndex ) {
return mCursor . getColumnName ( columnIndex ) ;
}
@Override
public String [ ] getColumnNames ( ) {
return mCursor . getColumnNames ( ) ;
}
@Override
public int getCount ( ) {
return mCursor . getCount ( ) ;
}
@Override
public double getDouble ( int columnIndex ) {
return mCursor . getDouble ( columnIndex ) ;
}
@Override
public Bundle getExtras ( ) {
return mCursor . getExtras ( ) ;
}
@Override
public float getFloat ( int columnIndex ) {
return mCursor . getFloat ( columnIndex ) ;
}
@Override
public int getInt ( int columnIndex ) {
return mCursor . getInt ( columnIndex ) ;
}
@Override
public long getLong ( int columnIndex ) {
return mCursor . getLong ( columnIndex ) ;
}
@Override
public int getPosition ( ) {
return mCursor . getPosition ( ) ;
}
@Override
public short getShort ( int columnIndex ) {
return mCursor . getShort ( columnIndex ) ;
}
@Override
public String getString ( int columnIndex ) {
return mCursor . getString ( columnIndex ) ;
}
@Override
public boolean <unk> ( ) {
return mCursor . <unk> ( ) ;
}
@Override
public boolean isAfterLast ( ) {
return mCursor . isAfterLast ( ) ;
}
@Override
public boolean isBeforeFirst ( ) {
return mCursor . isBeforeFirst ( ) ;
}
@Override
public boolean isClosed ( ) {
return mCursor . isClosed ( ) ;
}
@Override
public boolean <unk> ( ) {
return mCursor . <unk> ( ) ;
}
@Override
public boolean isLast ( ) {
return mCursor . isLast ( ) ;
}
@Override
public boolean isNull ( int columnIndex ) {
return mCursor . isNull ( columnIndex ) ;
}
@Override
public boolean move ( int offset ) {
int oldPos = getPosition ( ) ;
boolean result = mCursor . move ( offset ) ;
int newPos = getPosition ( ) ;
onMove ( oldPos , newPos ) ;
return result ;
}
@Override
public boolean moveToFirst ( ) {
int oldPos = getPosition ( ) ;
boolean result = mCursor . moveToFirst ( ) ;
int newPos = getPosition ( ) ;
onMove ( oldPos , newPos ) ;
return result ;
}
@Override
public boolean moveToLast ( ) {
int oldPos = getPosition ( ) ;
boolean result = mCursor . moveToLast ( ) ;
int newPos = getPosition ( ) ;
onMove ( oldPos , newPos ) ;
return result ;
}
@Override
public boolean moveToNext ( ) {
int oldPos = getPosition ( ) ;
boolean result = mCursor . moveToNext ( ) ;
int newPos = getPosition ( ) ;
onMove ( oldPos , newPos ) ;
return result ;
}
@Override
public boolean moveToPosition ( int position ) {
int oldPos = getPosition ( ) ;
boolean result = mCursor . moveToPosition ( position ) ;
int newPos = getPosition ( ) ;
onMove ( oldPos , newPos ) ;
return result ;
}
@Override
public boolean <unk> ( ) {
int oldPos = getPosition ( ) ;
boolean result = mCursor . <unk> ( ) ;
int newPos = getPosition ( ) ;
onMove ( oldPos , newPos ) ;
return result ;
}
@Override
public void registerContentObserver ( ContentObserver observer ) {
mCursor . registerContentObserver ( observer ) ;
}
@Override
public void registerDataSetObserver ( DataSetObserver observer ) {
mCursor . registerDataSetObserver ( observer ) ;
}
@Override
public boolean <unk> ( ) {
return mCursor . <unk> ( ) ;
}
@Override
public Bundle respond ( Bundle extras ) {
return mCursor . respond ( extras ) ;
}
@Override
public void setNotificationUri ( ContentResolver cr , Uri uri ) {
mCursor . setNotificationUri ( cr , uri ) ;
}
@Override
public void unregisterContentObserver ( ContentObserver observer ) {
mCursor . unregisterContentObserver ( observer ) ;
}
@Override
public void unregisterDataSetObserver ( DataSetObserver observer ) {
mCursor . unregisterDataSetObserver ( observer ) ;
}
@Override
public Iterator < Entity > iterator ( ) {
return new <unk> ( ) ;
}
public class <unk> implements Iterator < Entity > {
@Override
public boolean hasNext ( )
{
if ( mCursor . isLast ( ) || mCursor . isAfterLast ( ) ) {
return false ;
} else {
return true ;
}
}
@Override
public Entity next ( )
{
if ( <unk> == null ) {
moveToFirst ( ) ;
} else {
moveToNext ( ) ;
}
return <unk> ;
}
@Override
public void remove ( )
{
}
}
public int getType ( int columnIndex ) {
return <num> ;
}
}
package com . android . <unk> ;
import android . content . ContentValues ;
import android . database . Cursor ;
import android . database . SQLException ;
import android . graphics . Bitmap ;
import android . graphics . BitmapFactory ;
import android . graphics . drawable . BitmapDrawable ;
import android . graphics . drawable . Drawable ;
import android . util . Log ;
import com . android . <unk> . core . Field ;
import com . android . <unk> . core . Table ;
import org . xmlpull . v1 . XmlPullParser ;
import org . xmlpull . v1 . XmlPullParserException ;
import org . xmlpull . v1 . XmlPullParserFactory ;
import java . io . IOException ;
import java . io . StringReader ;
import java . util . HashMap ;
import java . util . Iterator ;
import java . util . Map . Entry ;
public class Entity {
private String mTable ;
private long mId =  <num> ;
private long <unk> =  <num> ;
protected HashMap < String , Object > <unk> = new HashMap < String , Object > ( ) ;
protected HashMap < String , Object > <unk> = new HashMap < String , Object > ( ) ;
public long nextId ( ) {
if ( <unk> < <num> )
{
Cursor c = <unk> . getInstance ( ) . getCursor ( mTable , new String [ ] { <unk> . KEY_ID } ,
null , null , null , null , <unk> . KEY_ID + " , " ) ;
if ( ! c . moveToFirst ( ) ) {
c . close ( ) ;
return <num> ;
} else {
long Id = c . getInt ( <num> ) + <num> ;
c . close ( ) ;
return Id ;
}
} else {
return <unk> ;
}
}
public long getId ( ) {
return mId ;
}
public String getTable ( ) {
return mTable ;
}
public boolean isUpdate ( ) {
return ( mId < <num> ) ? false : true ;
}
public boolean <unk> ( ) {
return ( mId < <num> ) ? true : false ;
}
public Integer getInt ( String name )
{
Object obj = getValue ( name ) ;
if ( obj == null ) {
return <num> ;
} else {
return Integer . parseInt ( obj . toString ( ) ) ;
}
}
public String getString ( String name )
{
Field f = <unk> ( ) . getField ( name ) ;
if ( f . getType ( ) . equals ( " ) ) {
return <unk> . getInstance ( ) . <unk> ( getValue ( name ) . toString ( ) ) ;
} else {
Object obj = getValue ( name ) ;
if ( obj == null ) {
return " ;
} else {
return obj . toString ( ) ;
}
}
}
public int <unk> ( String name )
{
int id = <unk> . getInstance ( ) . getContext ( ) . getResources ( ) . getIdentifier ( <unk> . getInstance ( ) . getPackage ( ) + " + getValue ( name ) . toString ( ) , null , null ) ;
return id ;
}
public Bitmap getBitmap ( String name )
{
int id = <unk> . getInstance ( ) . getContext ( ) . getResources ( ) . getIdentifier ( <unk> . getInstance ( ) . getPackage ( ) + " + getValue ( name ) . toString ( ) , null , null ) ;
java . io . InputStream is = <unk> . getInstance ( ) . getContext ( ) . getResources ( ) . openRawResource ( id ) ;
BitmapDrawable bmd = new BitmapDrawable ( BitmapFactory . decodeStream ( is ) ) ;
return bmd . getBitmap ( ) ;
}
public BitmapDrawable <unk> ( String name )
{
int id = <unk> . getInstance ( ) . getContext ( ) . getResources ( ) . getIdentifier ( <unk> . getInstance ( ) . getPackage ( ) + " + getValue ( name ) . toString ( ) , null , null ) ;
java . io . InputStream is = <unk> . getInstance ( ) . getContext ( ) . getResources ( ) . openRawResource ( id ) ;
BitmapDrawable bmd = new BitmapDrawable ( BitmapFactory . decodeStream ( is ) ) ;
return bmd ;
}
public Drawable getDrawable ( String name )
{
int id = <unk> . getInstance ( ) . getContext ( ) . getResources ( ) . getIdentifier ( <unk> . getInstance ( ) . getPackage ( ) + " + getValue ( name ) . toString ( ) , null , null ) ;
return <unk> . getInstance ( ) . getContext ( ) . getResources ( ) . getDrawable ( id ) ;
}
public Cursor getCursor ( String field ) {
try {
if ( <unk> ( ) ) {
return null ;
}
String fieldName = field ;
Field f = <unk> . getInstance ( ) . getTable ( mTable ) . getField ( fieldName ) ;
if ( f . getType ( ) . equals ( " ) ) {
fieldName += " + <unk> . getInstance ( ) . <unk> ( ) ;
}
Cursor mCursor = <unk> . getInstance ( ) . getDB ( ) . query ( true , mTable , new String [ ] { fieldName } , <unk> . KEY_ID + " + mId , null ,
null , null , null , null ) ;
if ( mCursor != null ) {
mCursor . moveToFirst ( ) ;
}
return mCursor ;
} catch ( SQLException e ) {
Log . e ( " , e . toString ( ) ) ;
}
return null ;
}
public Cursor getCursor ( ) {
try {
if ( <unk> ( ) ) {
return null ;
}
Cursor mCursor = <unk> . getInstance ( ) . getDB ( ) . query ( true , mTable , <unk> . getInstance ( ) . getTable ( mTable ) . <unk> ( ) , <unk> . KEY_ID + " + mId , null ,
null , null , null , null ) ;
if ( mCursor != null ) {
mCursor . moveToFirst ( ) ;
}
return mCursor ;
} catch ( SQLException e ) {
Log . e ( " , e . toString ( ) ) ;
}
return null ;
}
@Override
public String toString ( )
{
String [ ] <unk> = <unk> . getInstance ( ) . getTable ( mTable ) . <unk> ( ) . split ( " ) ;
String out = " ;
for ( int i = <num> ; i < <unk> . length ; i ++ ) {
if ( isAttribute ( <unk> [ i ] ) )
{
Field f = <unk> ( ) . getField ( <unk> [ i ] ) ;
if ( f . getType ( ) . equals ( " ) ) {
out += getEntity ( <unk> [ i ] ) . toString ( ) ;
} else {
out += getString ( <unk> [ i ] ) ;
}
} else if ( <unk> [ i ] . equals ( <unk> . KEY_ID ) ) {
out += getId ( ) ;
} else {
out += <unk> [ i ] ;
}
}
return out ;
}
public long <unk> ( ) {
return <unk> ;
}
public void <unk> ( long <unk> ) {
this . <unk> = <unk> ;
}
public Table <unk> ( )
{
return <unk> . getInstance ( ) . getTable ( mTable ) ;
}
public long getLong ( String name )
{
Object obj = getValue ( name ) ;
if ( obj == null ) {
return <num> ;
} else {
return Long . parseLong ( obj . toString ( ) ) ;
}
}
public double getDouble ( String name )
{
Object obj = getValue ( name ) ;
return obj == null ? <num> : Double . parseDouble ( obj . toString ( ) ) ;
}
public float getFloat ( String name )
{
Object obj = getValue ( name ) ;
return obj == null ? <num> : Float . parseFloat ( obj . toString ( ) ) ;
}
private void <unk> ( )
{
Table t = <unk> ( ) ;
for ( int i = <num> ; i < t . getFields ( ) . size ( ) ; i ++ )
{
Field f = t . getFields ( ) . get ( i ) ;
<unk> . put ( f . getName ( ) , null ) ;
}
}
protected void loadData ( )
{
Cursor c = getCursor ( ) ;
if ( c != null ) {
loadData ( c ) ;
c . close ( ) ;
}
}
protected void loadData ( Cursor c )
{
if ( c != null ) {
HashMap < String , Object > <unk> = <unk> ;
Object [ ] <unk> = <unk> . keySet ( ) . toArray ( ) ;
int <unk> = <unk> . length ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
String attributeName = <unk> [ i ] . toString ( ) ;
Field f = <unk> ( ) . getField ( attributeName ) ;
int <unk> ;
if ( f . getType ( ) . equals ( " ) ) {
<unk> = c . getColumnIndexOrThrow ( attributeName + " + <unk> . getInstance ( ) . <unk> ( ) ) ;
} else {
<unk> = c . getColumnIndexOrThrow ( attributeName ) ;
}
if ( f . getType ( ) . equals ( " ) || f . getType ( ) . equals ( " ) || f . getType ( ) . equals ( " ) || f . getType ( ) . equals ( " ) ) {
<unk> . put ( attributeName , c . getString ( <unk> ) ) ;
} else if ( f . getType ( ) . equals ( " ) ) {
<unk> . put ( attributeName , c . getInt ( <unk> ) ) ;
} else if ( f . getType ( ) . equals ( " ) ) {
<unk> . put ( attributeName , c . getLong ( <unk> ) ) ;
} else if ( f . getType ( ) . equals ( " ) ) {
<unk> . put ( attributeName , c . getDouble ( <unk> ) ) ;
} else {
<unk> . put ( attributeName , c . getString ( <unk> ) ) ;
}
}
}
}
public Entity ( String table , Cursor c )
{
mId = c . getLong ( c . getColumnIndexOrThrow ( <unk> . KEY_ID ) ) ;
this . mTable = table ;
<unk> =  <num> ;
<unk> ( ) ;
loadData ( c ) ;
}
public Entity ( String table ) {
this . mTable = table ;
<unk> =  <num> ;
<unk> ( ) ;
}
public Entity ( String table , Long id ) {
this . mTable = table ;
<unk> =  <num> ;
if ( id > <num> ) {
this . mId = id ;
}
<unk> ( ) ;
loadData ( ) ;
}
public Entity ( String table , String xml ) {
this . mTable = table ;
<unk> =  <num> ;
<unk> ( ) ;
<unk> ( xml ) ;
}
public void setValue ( String name , Object value )
{
if ( Entity . class . isInstance ( value ) ) {
<unk> . put ( name , ( ( Entity ) value ) . getId ( ) ) ;
} else {
<unk> . put ( name , value ) ;
}
}
public void <unk> ( String name , String lang , Object value )
{
<unk> . put ( name + " + lang , value ) ;
}
public Object getValue ( String name )
{
return <unk> . get ( name ) ;
}
public Entity getEntity ( String name )
{
Field f = <unk> ( ) . getField ( name ) ;
if ( f != null && f . getType ( ) . equals ( " ) ) {
return new Entity ( f . <unk> ( ) , getLong ( name ) ) ;
} else {
return null ;
}
}
public boolean isAttribute ( String name ) {
try {
return <unk> ( ) . getField ( name ) != null ;
} catch ( NullPointerException e ) {
return false ;
}
}
public boolean isNull ( String name )
{
return <unk> . get ( name ) == null ;
}
public boolean save ( ) {
try {
ContentValues args = new ContentValues ( ) ;
if ( <unk> ( ) ) {
args . put ( <unk> . KEY_ID , " + nextId ( ) ) ;
} else {
if ( <unk> > <num> ) {
args . put ( <unk> . KEY_ID , " + <unk> ) ;
}
}
for ( int i = <num> ; i < <unk> ( ) . getFields ( ) . size ( ) ; i ++ )
{
Field f = <unk> ( ) . getFields ( ) . get ( i ) ;
String attr = f . getName ( ) ;
Object value = getValue ( attr ) ;
if ( value != null )
{
if ( f . getType ( ) . equals ( " ) ) {
args . put ( f . getName ( ) + " + <unk> . getInstance ( ) . <unk> ( ) , value . toString ( ) ) ;
} else {
args . put ( f . getName ( ) , value . toString ( ) ) ;
}
}
}
Iterator < Entry < String , Object >> it = <unk> . entrySet ( ) . iterator ( ) ;
while ( it . hasNext ( ) ) {
Entry < String , Object > e = ( Entry < String , Object > ) it . next ( ) ;
args . put ( e . getKey ( ) . toString ( ) , e . getValue ( ) . toString ( ) ) ;
}
if ( <unk> ( ) ) {
mId = <unk> . getInstance ( ) . getDB ( ) . insert ( mTable , null , args ) ;
return ( mId > <num> ) ;
} else {
return <unk> . getInstance ( ) . getDB ( ) . update ( mTable , args , <unk> . KEY_ID + " + mId , null ) > <num> ;
}
} catch ( SQLException e ) {
Log . e ( " , e . toString ( ) ) ;
}
return false ;
}
public boolean delete ( ) {
boolean res = <unk> . getInstance ( ) . getDB ( ) . delete ( mTable , <unk> . KEY_ID + " + mId , null ) > <num> ;
mId =  <num> ;
return res ;
}
public String <unk> ( )
{
return getXml ( ) ;
}
private String getXml ( )
{
HashMap < String , Object > <unk> = <unk> ;
Object [ ] <unk> = <unk> . keySet ( ) . toArray ( ) ;
int <unk> = <unk> . length ;
String result = " ;
result += " + mId + " ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
if ( ! isNull ( <unk> [ i ] . toString ( ) ) )
{
result += " + <unk> [ i ] . toString ( ) + " +
" + getValue ( <unk> [ i ] . toString ( ) ) . toString ( ) + " ;
}
}
result += " ;
return result ;
}
public void <unk> ( String xml )
{
try {
XmlPullParserFactory factory = XmlPullParserFactory . newInstance ( ) ;
XmlPullParser x = ( XmlPullParser ) factory . newPullParser ( ) ;
x . setInput ( new StringReader ( xml ) ) ;
int eventType = x . getEventType ( ) ;
while ( eventType != XmlPullParser . END_DOCUMENT )
{
if ( eventType == XmlPullParser . START_TAG ) {
if ( x . getName ( ) . equals ( " ) ) {
String name = x . getAttributeValue ( null , " ) ;
if ( name != null ) {
String value = x . getAttributeValue ( null , " ) ;
if ( name . equals ( " ) ) {
mId = Long . parseLong ( value ) ;
} else {
setValue ( name , value ) ;
}
}
}
}
eventType = x . next ( ) ;
}
} catch ( XmlPullParserException e ) {
e . printStackTrace ( ) ;
} catch ( IOException e ) {
e . printStackTrace ( ) ;
}
}
}
package com . android . <unk> ;
import android . content . Context ;
import android . database . Cursor ;
import android . database . sqlite . SQLiteDatabase ;
import com . android . <unk> . core . <unk> ;
import com . android . <unk> . core . Table ;
import org . xmlpull . v1 . XmlPullParserException ;
import java . io . IOException ;
import java . util . ArrayList ;
public class <unk> {
public final static String VERSION = " ;
public final static String KEY_ID = " ;
public static <unk> <unk> = null ;
private int <unk> = <num> ;
private ArrayList < Table > <unk> = new ArrayList < Table > ( ) ;
private <unk> <unk> ;
public void open ( Context context , String <unk> ) throws XmlPullParserException , IOException
{
if ( <unk> == <num> ) {
<unk> . open ( context , <unk> , <unk> ) ;
}
<unk> ++ ;
}
public void close ( )
{
if ( <unk> > <num> ) {
<unk>  ;
}
if ( <unk> == <num> ) {
<unk> . close ( ) ;
}
}
private <unk> ( )
{
<unk> = new <unk> ( ) ;
}
public static <unk> getInstance ( )
{
if ( <unk> == null )
{
<unk> = new <unk> ( ) ;
}
return <unk> ;
}
public Table getTable ( String table ) throws NullPointerException {
Table res = null ;
ArrayList < Table > tables = <unk> ;
int <unk> = tables . size ( ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
Table t = tables . get ( i ) ;
if ( t . getName ( ) . equals ( table ) ) {
res = t ;
}
}
if ( res == null ) {
throw new NullPointerException ( " + table + " ) ;
}
return res ;
}
public int getTableCount ( ) {
return <unk> . size ( ) ;
}
public Context getContext ( )
{
return <unk> . getContext ( ) ;
}
public String getPackage ( ) {
return <unk> . getPackage ( ) ;
}
public String <unk> ( String name ) {
int id = <unk> . getContext ( ) . getResources ( ) . getIdentifier ( <unk> . getPackage ( ) + " + name , null , null ) ;
if ( id != <num> ) {
return <unk> . getContext ( ) . getResources ( ) . getString ( id ) ;
} else {
return name ;
}
}
public ArrayList < Entity > <unk> ( String table ) {
return <unk> ( table , null , null , null ) ;
}
public ArrayList < Entity > <unk> ( String table , String where ) {
return <unk> ( table , where , null , null ) ;
}
public ArrayList < Entity > <unk> ( String table , String where , String <unk> ) {
return <unk> ( table , where , <unk> , null ) ;
}
public ArrayList < Entity > <unk> ( String table , String where , String <unk> , String limit ) {
String [ ] fields = getTable ( table ) . <unk> ( ) ;
Cursor c = getCursor ( table , fields , where , null , null , null , <unk> , limit ) ;
ArrayList < Entity > <unk> = new ArrayList < Entity > ( ) ;
c . moveToFirst ( ) ;
while ( ! c . isAfterLast ( ) ) {
Entity ent = new Entity ( table , c ) ;
<unk> . add ( ent ) ;
c . moveToNext ( ) ;
}
c . close ( ) ;
return <unk> ;
}
public Entity <unk> ( String table , String where , String <unk> ) {
ArrayList < Entity > ar = <unk> ( table , where , <unk> , " ) ;
if ( ar . size ( ) > <num> ) {
return ar . get ( <num> ) ;
} else {
return null ;
}
}
public int <unk> ( String table , String where ) {
String [ ] fields = getTable ( table ) . <unk> ( ) ;
Cursor c = getCursor ( table , fields , where , null , null , null , null , null ) ;
int count = c . getCount ( ) ;
c . close ( ) ;
c = null ;
return count ;
}
public int getPosition ( ArrayList < Entity > ar , long id )
{
int size = ar . size ( ) ;
for ( int i = <num> ; i < size ; i ++ ) {
if ( ar . get ( i ) . getId ( ) == id ) {
return i ;
}
}
return  <num> ;
}
public Cursor getCursor ( String table ) {
String [ ] <unk> = getTable ( table ) . <unk> ( ) ;
return <unk> . getDB ( ) . query ( table , <unk> , null , null , null , null , null ) ;
}
public Cursor getCursor ( String table , String selection , String <unk> ) {
String [ ] <unk> = getTable ( table ) . <unk> ( ) ;
return <unk> . getDB ( ) . query ( table , <unk> , selection , null , null , null , <unk> , null ) ;
}
public Cursor getCursor ( String table , String [ ] fields , String selection ,
String [ ] selectionArgs , String <unk> , String <unk> , String <unk> , String limit ) {
return <unk> . getDB ( ) . query ( table , fields , selection , selectionArgs , <unk> , <unk> , <unk> , limit ) ;
}
public void <unk> ( ) {
ArrayList < Table > tables = <unk> ;
int <unk> = tables . size ( ) ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
<unk> . getDB ( ) . execSQL ( tables . get ( i ) . <unk> ( ) ) ;
}
}
public void <unk> ( ) {
ArrayList < Table > tables = <unk> ;
int <unk> = tables . size ( ) ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
<unk> . getDB ( ) . execSQL ( tables . get ( i ) . <unk> ( ) ) ;
}
}
public void <unk> ( String table ) {
Table t = getTable ( table ) ;
if ( t != null ) {
<unk> . getDB ( ) . execSQL ( t . <unk> ( ) ) ;
}
}
public void <unk> ( ) {
ArrayList < Table > tables = <unk> ;
int <unk> = tables . size ( ) ;
for ( int i = <num> ; i < <unk> ; i ++ ) {
<unk> . getDB ( ) . delete ( tables . get ( i ) . getName ( ) , null , null ) ;
}
}
public void <unk> ( ) {
ArrayList < Table > tables = <unk> ;
int <unk> = tables . size ( ) ;
for ( int i = <num> ; i < <unk> ; i ++ )
{
Table t = tables . get ( i ) ;
if ( t . <unk> ( ) ) {
<unk> . getDB ( ) . delete ( t . getName ( ) , null , null ) ;
}
}
}
public void <unk> ( String table ) {
<unk> . getDB ( ) . delete ( table , null , null ) ;
}
public void backup ( String file ) throws XmlPullParserException , IOException {
<unk> . backup ( file , false ) ;
}
public void backup ( String file , boolean <unk> ) throws XmlPullParserException , IOException {
<unk> . backup ( file , <unk> ) ;
}
public void restore ( String file ) throws XmlPullParserException , IOException {
<unk> . restore ( file ) ;
}
public <unk> <unk> ( String table , String where , String <unk> ) {
String [ ] fields = getTable ( table ) . <unk> ( ) ;
Cursor c = getCursor ( table , fields , where , null , null , null , <unk> , null ) ;
return new <unk> ( table , c ) ;
}
public SQLiteDatabase getDB ( ) {
return <unk> . getDB ( ) ;
}
public void <unk> ( String lang ) {
<unk> . <unk> ( lang ) ;
}
public ArrayList < String > getLanguages ( ) {
return <unk> . getLanguages ( ) ;
}
public String <unk> ( ) {
return <unk> . <unk> ( ) ;
}
public String <unk> ( String name ) {
return name + " + <unk> . <unk> ( ) ;
}
}
